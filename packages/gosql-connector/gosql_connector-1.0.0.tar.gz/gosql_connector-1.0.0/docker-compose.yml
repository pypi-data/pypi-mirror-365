version: '3.8'

services:
  # GoSQL development environment
  gosql-dev:
    build:
      context: .
      target: development
    volumes:
      - .:/app
      - /app/.tox  # Exclude tox cache
      - /app/.pytest_cache  # Exclude pytest cache
    ports:
      - "8888:8888"  # Jupyter
    environment:
      - PYTHONPATH=/app
      - GOSQL_TEST_MODE=true
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root
    depends_on:
      - mysql
      - postgres
      - sqlserver

  # MySQL database for testing
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: gosql_test_password
      MYSQL_DATABASE: gosql_test
      MYSQL_USER: gosql_user
      MYSQL_PASSWORD: gosql_user_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./tests/sql/mysql:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # PostgreSQL database for testing
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: gosql_test
      POSTGRES_USER: gosql_user
      POSTGRES_PASSWORD: gosql_user_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tests/sql/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gosql_user -d gosql_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # SQL Server database for testing
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: GoSQLTest123!
      ACCEPT_EULA: Y
      MSSQL_PID: Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./tests/sql/mssql:/scripts
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P GoSQLTest123! -Q 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Documentation server
  docs:
    build:
      context: .
      target: docs
    ports:
      - "8000:8000"
    volumes:
      - ./docs:/app/docs

  # Benchmark runner
  benchmark:
    build:
      context: .
      target: benchmark
    volumes:
      - ./benchmarks:/app/benchmarks
      - benchmark_results:/app/results
    environment:
      - GOSQL_MYSQL_HOST=mysql
      - GOSQL_POSTGRES_HOST=postgres
      - GOSQL_MSSQL_HOST=sqlserver
    depends_on:
      mysql:
        condition: service_healthy
      postgres:
        condition: service_healthy
      sqlserver:
        condition: service_healthy
    command: python -m gosql.benchmarks.benchmark --output /app/results/benchmark.json

  # Test runner
  test:
    build:
      context: .
      target: testing
    volumes:
      - .:/app
      - test_results:/app/test_results
    environment:
      - GOSQL_MYSQL_HOST=mysql
      - GOSQL_POSTGRES_HOST=postgres
      - GOSQL_MSSQL_HOST=sqlserver
      - PYTEST_ARGS=${PYTEST_ARGS:-tests/ -v}
    depends_on:
      mysql:
        condition: service_healthy
      postgres:
        condition: service_healthy
      sqlserver:
        condition: service_healthy
    command: pytest ${PYTEST_ARGS:-tests/ -v --cov=gosql --cov-report=html}

volumes:
  mysql_data:
  postgres_data:
  sqlserver_data:
  redis_data:
  benchmark_results:
  test_results:

networks:
  default:
    name: gosql-network
