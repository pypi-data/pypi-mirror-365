name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GOSQL_TEST_MODE: true
  CGO_ENABLED: 1

jobs:
  # Test on multiple Python versions and platforms
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
        go-version: ['1.18', '1.19', '1.20', '1.21']
        exclude:
          # Skip some combinations to reduce CI time
          - os: windows-latest
            python-version: '3.7'
          - os: macos-latest
            python-version: '3.7'
          - os: windows-latest
            go-version: '1.18'
          - os: macos-latest
            go-version: '1.18'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for setuptools-scm

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        # Install database clients for testing
        sudo apt-get install -y mysql-client postgresql-client

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install mysql-client postgresql

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Install GoSQL in development mode
      run: |
        python setup.py develop

    - name: Lint with flake8
      run: |
        flake8 gosql tests

    - name: Type check with mypy
      run: |
        mypy gosql

    - name: Format check with black
      run: |
        black --check gosql tests

    - name: Import sort check with isort
      run: |
        isort --check-only gosql tests

    - name: Security check with bandit
      run: |
        bandit -r gosql

    - name: Test Go module
      run: |
        cd go
        go test -v ./...
        go vet ./...

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=gosql --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Integration tests with real databases
  integration-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: gosql_test_password
          MYSQL_DATABASE: gosql_test
          MYSQL_USER: gosql_user
          MYSQL_PASSWORD: gosql_user_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: gosql_test
          POSTGRES_USER: gosql_user
          POSTGRES_PASSWORD: gosql_user_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U gosql_user -d gosql_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: GoSQLTest123!
          ACCEPT_EULA: Y
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P GoSQLTest123! -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Go 1.21
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Install GoSQL
      run: |
        python setup.py develop

    - name: Wait for databases to be ready
      run: |
        # Wait for MySQL
        for i in {1..30}; do
          if mysqladmin ping -h127.0.0.1 -P3306 -uroot -pgosql_test_password 2>/dev/null; then
            echo "MySQL is ready"
            break
          fi
          echo "Waiting for MySQL..."
          sleep 2
        done
        
        # Wait for PostgreSQL
        for i in {1..30}; do
          if pg_isready -h127.0.0.1 -p5432 -U gosql_user 2>/dev/null; then
            echo "PostgreSQL is ready"
            break
          fi
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run integration tests
      env:
        GOSQL_MYSQL_HOST: 127.0.0.1
        GOSQL_MYSQL_PORT: 3306
        GOSQL_MYSQL_USER: gosql_user
        GOSQL_MYSQL_PASSWORD: gosql_user_password
        GOSQL_MYSQL_DATABASE: gosql_test
        GOSQL_POSTGRES_HOST: 127.0.0.1
        GOSQL_POSTGRES_PORT: 5432
        GOSQL_POSTGRES_USER: gosql_user
        GOSQL_POSTGRES_PASSWORD: gosql_user_password
        GOSQL_POSTGRES_DATABASE: gosql_test
        GOSQL_MSSQL_HOST: 127.0.0.1
        GOSQL_MSSQL_PORT: 1433
        GOSQL_MSSQL_USER: sa
        GOSQL_MSSQL_PASSWORD: GoSQLTest123!
        GOSQL_MSSQL_DATABASE: master
      run: |
        pytest tests/ -v -m integration --cov=gosql

  # Performance benchmarks
  benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Go 1.21
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Install GoSQL
      run: |
        python setup.py develop

    - name: Run benchmarks
      run: |
        python -m gosql.benchmarks.benchmark --output-format json --output benchmarks.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmarks.json

  # Build and publish package
  build:
    needs: [test, integration-test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Go 1.21
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine

    - name: Build package
      run: |
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.os }}
        path: dist/

  # Publish to PyPI on release tags
  publish:
    needs: [build, benchmark]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: pypi
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-ubuntu-latest
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
