"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict
from zendesk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL


class AssigneeFieldAssignableSearchAgentObjectTypedDict(TypedDict):
    group: NotRequired[str]
    r"""Name of the agent's group"""
    group_id: NotRequired[int]
    r"""Agent's Group ID"""
    id: NotRequired[int]
    r"""Agent ID"""
    name: NotRequired[str]
    r"""Name of the agent"""
    photo_url: NotRequired[Nullable[str]]
    r"""URL of Avatar"""


class AssigneeFieldAssignableSearchAgentObject(BaseModel):
    group: Optional[str] = None
    r"""Name of the agent's group"""

    group_id: Optional[int] = None
    r"""Agent's Group ID"""

    id: Optional[int] = None
    r"""Agent ID"""

    name: Optional[str] = None
    r"""Name of the agent"""

    photo_url: OptionalNullable[str] = UNSET
    r"""URL of Avatar"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["group", "group_id", "id", "name", "photo_url"]
        nullable_fields = ["photo_url"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
