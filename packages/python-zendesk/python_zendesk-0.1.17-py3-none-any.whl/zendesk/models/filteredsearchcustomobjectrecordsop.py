"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .customobjectrecordsfilteredsearchrequestbasic import (
    CustomObjectRecordsFilteredSearchRequestBasic,
    CustomObjectRecordsFilteredSearchRequestBasicTypedDict,
)
from .customobjectrecordsfilteredsearchrequestcomplex import (
    CustomObjectRecordsFilteredSearchRequestComplex,
    CustomObjectRecordsFilteredSearchRequestComplexTypedDict,
)
from .customobjectrecordsresponse import (
    CustomObjectRecordsResponse,
    CustomObjectRecordsResponseTypedDict,
)
import pydantic
from typing import Callable, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict
from zendesk.types import BaseModel
from zendesk.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
)


FilteredSearchCustomObjectRecordsRequestBodyTypedDict = TypeAliasType(
    "FilteredSearchCustomObjectRecordsRequestBodyTypedDict",
    Union[
        CustomObjectRecordsFilteredSearchRequestBasicTypedDict,
        CustomObjectRecordsFilteredSearchRequestComplexTypedDict,
    ],
)


FilteredSearchCustomObjectRecordsRequestBody = TypeAliasType(
    "FilteredSearchCustomObjectRecordsRequestBody",
    Union[
        CustomObjectRecordsFilteredSearchRequestBasic,
        CustomObjectRecordsFilteredSearchRequestComplex,
    ],
)


class FilteredSearchCustomObjectRecordsRequestTypedDict(TypedDict):
    custom_object_key: str
    r"""The key of a custom object"""
    page_before: NotRequired[str]
    r"""A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.before_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request.

    """
    page_after: NotRequired[str]
    r"""A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.after_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request.

    """
    page_size: NotRequired[int]
    r"""Specifies how many records should be returned in the response. You can specify up to 100 records per page.

    """
    query: NotRequired[str]
    r"""The query parameter is used to search text-based fields for records that match specific query terms.
    The query can be multiple words or numbers. Every record that matches the beginning of any word or number in the query string is returned.<br/><br/>

    Fuzzy search is supported for the following text-based field types: Text fields, Multi Line Text fields, and RegExp fields.<br/><br/>

    For example, you might want to search for records related to Tesla vehicles: `query=Tesla`. In this example the API would return every record for the given custom object where any of the supported text fields contain the word 'Tesla'.<br/><br/>

    You can include multiple words or numbers in your search. For example: `query=Tesla Honda 2020`. This search phrase would be URL encoded as `query=Tesla%20Honda%202020` and return every record for the custom object for which any of the supported text fields contained 'Tesla', 'Honda', or '2020'.

    """
    sort: NotRequired[str]
    r"""One of `name`, `created_at`, `updated_at`, `-name`, `-created_at`, or `-updated_at`. The `-` denotes the sort will be descending. Defaults to sorting by relevance.

    """
    request_body: NotRequired[FilteredSearchCustomObjectRecordsRequestBodyTypedDict]


class FilteredSearchCustomObjectRecordsRequest(BaseModel):
    custom_object_key: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The key of a custom object"""

    page_before: Annotated[
        Optional[str],
        pydantic.Field(alias="page[before]"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.before_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request.

    """

    page_after: Annotated[
        Optional[str],
        pydantic.Field(alias="page[after]"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A [pagination cursor](/documentation/api-basics/pagination/paginating-through-lists-using-cursor-pagination) that tells the endpoint which page to start on. It should be a `meta.after_cursor` value from a previous request. Note: `page[before]` and `page[after]` can't be used together in the same request.

    """

    page_size: Annotated[
        Optional[int],
        pydantic.Field(alias="page[size]"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 100
    r"""Specifies how many records should be returned in the response. You can specify up to 100 records per page.

    """

    query: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The query parameter is used to search text-based fields for records that match specific query terms.
    The query can be multiple words or numbers. Every record that matches the beginning of any word or number in the query string is returned.<br/><br/>

    Fuzzy search is supported for the following text-based field types: Text fields, Multi Line Text fields, and RegExp fields.<br/><br/>

    For example, you might want to search for records related to Tesla vehicles: `query=Tesla`. In this example the API would return every record for the given custom object where any of the supported text fields contain the word 'Tesla'.<br/><br/>

    You can include multiple words or numbers in your search. For example: `query=Tesla Honda 2020`. This search phrase would be URL encoded as `query=Tesla%20Honda%202020` and return every record for the custom object for which any of the supported text fields contained 'Tesla', 'Honda', or '2020'.

    """

    sort: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""One of `name`, `created_at`, `updated_at`, `-name`, `-created_at`, or `-updated_at`. The `-` denotes the sort will be descending. Defaults to sorting by relevance.

    """

    request_body: Annotated[
        Optional[FilteredSearchCustomObjectRecordsRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


class FilteredSearchCustomObjectRecordsResponseTypedDict(TypedDict):
    result: CustomObjectRecordsResponseTypedDict


class FilteredSearchCustomObjectRecordsResponse(BaseModel):
    next: Callable[[], Optional[FilteredSearchCustomObjectRecordsResponse]]

    result: CustomObjectRecordsResponse
