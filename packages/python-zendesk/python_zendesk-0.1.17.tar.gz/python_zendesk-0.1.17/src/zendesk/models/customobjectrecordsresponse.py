"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .customobjectrecord import CustomObjectRecord, CustomObjectRecordTypedDict
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict
from zendesk.types import BaseModel, Nullable, UNSET_SENTINEL


class CustomObjectRecordsResponseLinksTypedDict(TypedDict):
    next: Nullable[str]
    prev: Nullable[str]


class CustomObjectRecordsResponseLinks(BaseModel):
    next: Nullable[str]

    prev: Nullable[str]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["next", "prev"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CustomObjectRecordsResponseMetaTypedDict(TypedDict):
    after_cursor: Nullable[str]
    before_cursor: Nullable[str]
    has_more: bool


class CustomObjectRecordsResponseMeta(BaseModel):
    after_cursor: Nullable[str]

    before_cursor: Nullable[str]

    has_more: bool

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["after_cursor", "before_cursor"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CustomObjectRecordsResponseTypedDict(TypedDict):
    count: NotRequired[int]
    r"""The number of results returned for the current request"""
    custom_object_records: NotRequired[List[CustomObjectRecordTypedDict]]
    links: NotRequired[CustomObjectRecordsResponseLinksTypedDict]
    meta: NotRequired[CustomObjectRecordsResponseMetaTypedDict]


class CustomObjectRecordsResponse(BaseModel):
    count: Optional[int] = None
    r"""The number of results returned for the current request"""

    custom_object_records: Optional[List[CustomObjectRecord]] = None

    links: Optional[CustomObjectRecordsResponseLinks] = None

    meta: Optional[CustomObjectRecordsResponseMeta] = None
