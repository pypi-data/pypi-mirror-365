"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .customobjectrecord import CustomObjectRecord, CustomObjectRecordTypedDict
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict
from zendesk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL


class JobStatusTypedDict(TypedDict):
    id: NotRequired[str]
    message: NotRequired[Nullable[str]]
    progress: NotRequired[Nullable[int]]
    results: NotRequired[Nullable[List[CustomObjectRecordTypedDict]]]
    status: NotRequired[str]
    total: NotRequired[int]
    url: NotRequired[str]


class JobStatus(BaseModel):
    id: Optional[str] = None

    message: OptionalNullable[str] = UNSET

    progress: OptionalNullable[int] = UNSET

    results: OptionalNullable[List[CustomObjectRecord]] = UNSET

    status: Optional[str] = None

    total: Optional[int] = None

    url: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "message",
            "progress",
            "results",
            "status",
            "total",
            "url",
        ]
        nullable_fields = ["message", "progress", "results"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CustomObjectRecordsJobsResponseTypedDict(TypedDict):
    job_status: NotRequired[JobStatusTypedDict]


class CustomObjectRecordsJobsResponse(BaseModel):
    job_status: Optional[JobStatus] = None
