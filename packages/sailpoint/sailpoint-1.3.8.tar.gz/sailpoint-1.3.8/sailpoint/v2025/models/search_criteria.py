# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2025.models.search_criteria_filters_value import SearchCriteriaFiltersValue
from sailpoint.v2025.models.search_criteria_query import SearchCriteriaQuery
from sailpoint.v2025.models.search_criteria_text_query import SearchCriteriaTextQuery
from typing import Optional, Set
from typing_extensions import Self

class SearchCriteria(BaseModel):
    """
    Represents the search criteria for querying entitlements.
    """ # noqa: E501
    indices: List[StrictStr] = Field(description="A list of indices to search within. Must contain exactly one item, typically \"entitlements\".")
    filters: Optional[Dict[str, SearchCriteriaFiltersValue]] = Field(default=None, description="A map of filters applied to the search. Keys are filter names, and values are filter definitions.")
    query: Optional[SearchCriteriaQuery] = None
    query_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of query. Must be \"TEXT\" if `textQuery` is used.", alias="queryType")
    text_query: Optional[SearchCriteriaTextQuery] = Field(default=None, alias="textQuery")
    include_nested: Optional[StrictBool] = Field(default=False, description="Whether to include nested objects in the search results.", alias="includeNested")
    sort: Optional[List[StrictStr]] = Field(default=None, description="Specifies the sorting order for the results.")
    search_after: Optional[List[StrictStr]] = Field(default=None, description="Used for pagination to fetch results after a specific point.", alias="searchAfter")
    __properties: ClassVar[List[str]] = ["indices", "filters", "query", "queryType", "textQuery", "includeNested", "sort", "searchAfter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in filters (dict)
        _field_dict = {}
        if self.filters:
            for _key_filters in self.filters:
                if self.filters[_key_filters]:
                    _field_dict[_key_filters] = self.filters[_key_filters].to_dict()
            _dict['filters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_query
        if self.text_query:
            _dict['textQuery'] = self.text_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "indices": obj.get("indices"),
            "filters": dict(
                (_k, SearchCriteriaFiltersValue.from_dict(_v))
                for _k, _v in obj["filters"].items()
            )
            if obj.get("filters") is not None
            else None,
            "query": SearchCriteriaQuery.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "queryType": obj.get("queryType"),
            "textQuery": SearchCriteriaTextQuery.from_dict(obj["textQuery"]) if obj.get("textQuery") is not None else None,
            "includeNested": obj.get("includeNested") if obj.get("includeNested") is not None else False,
            "sort": obj.get("sort"),
            "searchAfter": obj.get("searchAfter")
        })
        return _obj


