# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RightSetDTO(BaseModel):
    """
    A RightSetDTO represents a collection of rights that assigned to capability or scope, enabling them to possess specific rights to access corresponding APIs.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the RightSet.")
    name: Optional[StrictStr] = Field(default=None, description="The human-readable name of the RightSet.")
    description: Optional[StrictStr] = Field(default=None, description="A human-readable description of the RightSet.")
    category: Optional[StrictStr] = Field(default=None, description="The category of the RightSet.")
    rights: Optional[List[StrictStr]] = Field(default=None, description="Right is the most granular unit that determines specific API permissions, this is a list of rights associated with the RightSet.")
    right_set_ids: Optional[List[StrictStr]] = Field(default=None, description="List of unique identifiers for related RightSets, current RightSet contains rights from these RightSets.", alias="rightSetIds")
    ui_assignable_child_right_set_ids: Optional[List[StrictStr]] = Field(default=None, description="List of unique identifiers for UI-assignable child RightSets, used to build UI components.", alias="uiAssignableChildRightSetIds")
    ui_assignable: Optional[StrictBool] = Field(default=False, description="Indicates whether the RightSet is UI-assignable.", alias="uiAssignable")
    translated_name: Optional[StrictStr] = Field(default=None, description="The translated name of the RightSet.", alias="translatedName")
    translated_description: Optional[StrictStr] = Field(default=None, description="The translated description of the RightSet.", alias="translatedDescription")
    parent_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the parent RightSet for UI Assignable RightSet.", alias="parentId")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "category", "rights", "rightSetIds", "uiAssignableChildRightSetIds", "uiAssignable", "translatedName", "translatedDescription", "parentId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RightSetDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if translated_description (nullable) is None
        # and model_fields_set contains the field
        if self.translated_description is None and "translated_description" in self.model_fields_set:
            _dict['translatedDescription'] = None

        # set to None if parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_id is None and "parent_id" in self.model_fields_set:
            _dict['parentId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RightSetDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "category": obj.get("category"),
            "rights": obj.get("rights"),
            "rightSetIds": obj.get("rightSetIds"),
            "uiAssignableChildRightSetIds": obj.get("uiAssignableChildRightSetIds"),
            "uiAssignable": obj.get("uiAssignable") if obj.get("uiAssignable") is not None else False,
            "translatedName": obj.get("translatedName"),
            "translatedDescription": obj.get("translatedDescription"),
            "parentId": obj.get("parentId")
        })
        return _obj


