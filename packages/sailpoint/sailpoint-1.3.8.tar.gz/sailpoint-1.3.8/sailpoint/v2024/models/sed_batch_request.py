# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sailpoint.v2024.models.search_criteria import SearchCriteria
from typing import Optional, Set
from typing_extensions import Self

class SedBatchRequest(BaseModel):
    """
    Sed Batch Request
    """ # noqa: E501
    entitlements: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, description="list of entitlement ids")
    seds: Optional[Annotated[List[StrictStr], Field(min_length=1)]] = Field(default=None, description="list of sed ids")
    search_criteria: Optional[Dict[str, SearchCriteria]] = Field(default=None, description="Search criteria for the batch request.", alias="searchCriteria")
    __properties: ClassVar[List[str]] = ["entitlements", "seds", "searchCriteria"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SedBatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in search_criteria (dict)
        _field_dict = {}
        if self.search_criteria:
            for _key_search_criteria in self.search_criteria:
                if self.search_criteria[_key_search_criteria]:
                    _field_dict[_key_search_criteria] = self.search_criteria[_key_search_criteria].to_dict()
            _dict['searchCriteria'] = _field_dict
        # set to None if entitlements (nullable) is None
        # and model_fields_set contains the field
        if self.entitlements is None and "entitlements" in self.model_fields_set:
            _dict['entitlements'] = None

        # set to None if seds (nullable) is None
        # and model_fields_set contains the field
        if self.seds is None and "seds" in self.model_fields_set:
            _dict['seds'] = None

        # set to None if search_criteria (nullable) is None
        # and model_fields_set contains the field
        if self.search_criteria is None and "search_criteria" in self.model_fields_set:
            _dict['searchCriteria'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SedBatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entitlements": obj.get("entitlements"),
            "seds": obj.get("seds"),
            "searchCriteria": dict(
                (_k, SearchCriteria.from_dict(_v))
                for _k, _v in obj["searchCriteria"].items()
            )
            if obj.get("searchCriteria") is not None
            else None
        })
        return _obj


