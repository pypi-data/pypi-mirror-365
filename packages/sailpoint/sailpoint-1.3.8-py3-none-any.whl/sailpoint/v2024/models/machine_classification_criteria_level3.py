# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.machine_classification_criteria_operation import MachineClassificationCriteriaOperation
from typing import Optional, Set
from typing_extensions import Self

class MachineClassificationCriteriaLevel3(BaseModel):
    """
    MachineClassificationCriteriaLevel3
    """ # noqa: E501
    operation: Optional[MachineClassificationCriteriaOperation] = None
    case_sensitive: Optional[StrictBool] = Field(default=False, description="Indicates whether or not case matters when evaluating the criteria", alias="caseSensitive")
    data_type: Optional[StrictStr] = Field(default=None, description="The data type of the attribute being evaluated", alias="dataType")
    attribute: Optional[StrictStr] = Field(default=None, description="The attribute to evaluate in the classification criteria")
    value: Optional[StrictStr] = Field(default=None, description="The value to compare against the attribute in the classification criteria")
    children: Optional[List[StrictStr]] = Field(default=None, description="An array of child classification criteria objects")
    __properties: ClassVar[List[str]] = ["operation", "caseSensitive", "dataType", "attribute", "value", "children"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MachineClassificationCriteriaLevel3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if data_type (nullable) is None
        # and model_fields_set contains the field
        if self.data_type is None and "data_type" in self.model_fields_set:
            _dict['dataType'] = None

        # set to None if attribute (nullable) is None
        # and model_fields_set contains the field
        if self.attribute is None and "attribute" in self.model_fields_set:
            _dict['attribute'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if children (nullable) is None
        # and model_fields_set contains the field
        if self.children is None and "children" in self.model_fields_set:
            _dict['children'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MachineClassificationCriteriaLevel3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operation": obj.get("operation"),
            "caseSensitive": obj.get("caseSensitive") if obj.get("caseSensitive") is not None else False,
            "dataType": obj.get("dataType"),
            "attribute": obj.get("attribute"),
            "value": obj.get("value"),
            "children": obj.get("children")
        })
        return _obj


