# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.access_item_access_profile_response_app_refs_inner import AccessItemAccessProfileResponseAppRefsInner
from typing import Optional, Set
from typing_extensions import Self

class AccessItemAccessProfileResponse(BaseModel):
    """
    AccessItemAccessProfileResponse
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="the access item id")
    access_type: Optional[StrictStr] = Field(default=None, description="the access item type. accessProfile in this case", alias="accessType")
    display_name: Optional[StrictStr] = Field(default=None, description="the display name of the identity", alias="displayName")
    source_name: Optional[StrictStr] = Field(default=None, description="the name of the source", alias="sourceName")
    entitlement_count: StrictInt = Field(description="the number of entitlements the access profile will create", alias="entitlementCount")
    description: Optional[StrictStr] = Field(default=None, description="the description for the access profile")
    source_id: Optional[StrictStr] = Field(default=None, description="the id of the source", alias="sourceId")
    app_refs: List[AccessItemAccessProfileResponseAppRefsInner] = Field(description="the list of app ids associated with the access profile", alias="appRefs")
    remove_date: Optional[StrictStr] = Field(default=None, description="the date the access profile is no longer assigned to the specified identity", alias="removeDate")
    standalone: Optional[StrictBool] = Field(description="indicates whether the access profile is standalone")
    revocable: Optional[StrictBool] = Field(description="indicates whether the access profile is revocable")
    __properties: ClassVar[List[str]] = ["id", "accessType", "displayName", "sourceName", "entitlementCount", "description", "sourceId", "appRefs", "removeDate", "standalone", "revocable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessItemAccessProfileResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in app_refs (list)
        _items = []
        if self.app_refs:
            for _item_app_refs in self.app_refs:
                if _item_app_refs:
                    _items.append(_item_app_refs.to_dict())
            _dict['appRefs'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if remove_date (nullable) is None
        # and model_fields_set contains the field
        if self.remove_date is None and "remove_date" in self.model_fields_set:
            _dict['removeDate'] = None

        # set to None if standalone (nullable) is None
        # and model_fields_set contains the field
        if self.standalone is None and "standalone" in self.model_fields_set:
            _dict['standalone'] = None

        # set to None if revocable (nullable) is None
        # and model_fields_set contains the field
        if self.revocable is None and "revocable" in self.model_fields_set:
            _dict['revocable'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessItemAccessProfileResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "accessType": obj.get("accessType"),
            "displayName": obj.get("displayName"),
            "sourceName": obj.get("sourceName"),
            "entitlementCount": obj.get("entitlementCount"),
            "description": obj.get("description"),
            "sourceId": obj.get("sourceId"),
            "appRefs": [AccessItemAccessProfileResponseAppRefsInner.from_dict(_item) for _item in obj["appRefs"]] if obj.get("appRefs") is not None else None,
            "removeDate": obj.get("removeDate"),
            "standalone": obj.get("standalone"),
            "revocable": obj.get("revocable")
        })
        return _obj


