# Generated by Django 5.2.4 on 2025-07-26 13:25

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('code', models.CharField(help_text='The code used to identify the country.', max_length=2, primary_key=True, serialize=False, verbose_name='code')),
                ('name', models.TextField(help_text='The name of the country.', verbose_name='name')),
                ('place', models.TextField(help_text='The hierarchical name of the country.', verbose_name='place')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When was the record created.', null=True)),
                ('modified', models.DateTimeField(auto_now=True, help_text='When was the record updated.', null=True)),
            ],
            options={
                'verbose_name': 'country',
                'verbose_name_plural': 'countries',
            },
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('code', models.CharField(help_text='The code used to identify the county.', max_length=10, primary_key=True, serialize=False, verbose_name='code')),
                ('name', models.TextField(help_text='The name of the county.', verbose_name='name')),
                ('place', models.TextField(help_text='The hierarchical name of the county.', verbose_name='place')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When was the record created.', null=True)),
                ('modified', models.DateTimeField(auto_now=True, help_text='When was the record updated.', null=True)),
            ],
            options={
                'verbose_name': 'county',
                'verbose_name_plural': 'counties',
            },
        ),
        migrations.CreateModel(
            name='Observer',
            fields=[
                ('identifier', models.CharField(help_text='The identifier for the person submitted the checklist.', max_length=15, primary_key=True, serialize=False, verbose_name='identifier')),
                ('orcid', models.TextField(blank=True, help_text="The observer's ORCID Identifier, see https://orcid.org/.", verbose_name='ORCID Identifier')),
                ('name', models.TextField(blank=True, help_text="The observer's name.", verbose_name='name')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When was the record created.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='When was the record updated.')),
            ],
            options={
                'verbose_name': 'observer',
                'verbose_name_plural': 'observers',
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(db_index=True, help_text='The position in the eBird/Clements taxonomic order.', verbose_name='taxonomic order')),
                ('category', models.TextField(choices=[('species', 'Species'), ('slash', 'Species pairs'), ('issf', 'Subspecies'), ('domestic', 'Domestic species'), ('hybrid', 'Hybrids'), ('form', 'Species forms'), ('spuh', 'Unidentified species'), ('intergrade', 'Intergrades')], db_index=True, help_text='The category from the eBird/Clements taxonomy.', verbose_name='category')),
                ('concept', models.TextField(help_text='The Avibase identifier for the species.', verbose_name='Taxonomic Concept Identifier')),
                ('common_name', models.TextField(help_text='The species common name in the eBird/Clements taxonomy.', verbose_name='common name')),
                ('scientific_name', models.TextField(help_text='The species scientific name in the eBird/Clements taxonomy.', verbose_name='scientific name')),
                ('subspecies_common_name', models.TextField(blank=True, help_text='The subspecies, group or form common name in the eBird/Clements taxonomy.', verbose_name='subspecies common name')),
                ('subspecies_scientific_name', models.TextField(blank=True, help_text='The subspecies, group or form scientific name in the eBird/Clements taxonomy.', verbose_name='Scientific name')),
                ('exotic_code', models.TextField(blank=True, db_index=True, help_text='The code used if the species is non-native.', verbose_name='exotic code')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When was the record created.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='When was the record updated.')),
            ],
            options={
                'verbose_name': 'species',
                'verbose_name_plural': 'species',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('code', models.CharField(help_text='The code used to identify the state.', max_length=6, primary_key=True, serialize=False, verbose_name='code')),
                ('name', models.TextField(help_text='The name of the state.', verbose_name='name')),
                ('place', models.TextField(help_text='The hierarchical name of the state.', verbose_name='place')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When was the record created.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='When was the record updated.')),
            ],
            options={
                'verbose_name': 'state',
                'verbose_name_plural': 'states',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('identifier', models.CharField(help_text='The unique identifier for the location.', max_length=15, primary_key=True, serialize=False, verbose_name='identifier')),
                ('type', models.CharField(choices=[('C', 'County'), ('H', 'Hotspot'), ('P', 'Personal'), ('PC', 'Postal/Zip Code'), ('S', 'State'), ('T', 'Town')], db_index=True, help_text='The location type, e.g. personal, hotspot, town, etc.', max_length=2, verbose_name='type')),
                ('name', models.TextField(help_text='The name of the location.', verbose_name='name')),
                ('iba_code', models.TextField(blank=True, help_text='The code used to identify an Important Bird Area.', verbose_name='IBA code')),
                ('bcr_code', models.TextField(blank=True, help_text='The code used to identify a Bird Conservation Region.', verbose_name='BCR code')),
                ('usfws_code', models.TextField(blank=True, help_text='The code used to identify a US Fish & Wildlife Service region.', verbose_name='USFWS code')),
                ('atlas_block', models.TextField(blank=True, help_text='The code used to identify an area for an atlas.', verbose_name='atlas block')),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, help_text='The decimal latitude of the location, relative to the equator.', max_digits=9, null=True, verbose_name='latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, help_text='The decimal longitude of the location, relative to the prime meridian.', max_digits=10, null=True, verbose_name='longitude')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When was the record created.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='When was the record updated.')),
                ('country', models.ForeignKey(help_text='The country for the location.', on_delete=django.db.models.deletion.PROTECT, related_name='locations', to='data.country', verbose_name='country')),
                ('county', models.ForeignKey(blank=True, help_text='The county for the location.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='locations', to='data.county', verbose_name='county')),
                ('state', models.ForeignKey(help_text='The state for the location.', on_delete=django.db.models.deletion.PROTECT, related_name='locations', to='data.state', verbose_name='state')),
            ],
            options={
                'verbose_name': 'location',
                'verbose_name_plural': 'locations',
            },
        ),
        migrations.CreateModel(
            name='Checklist',
            fields=[
                ('identifier', models.CharField(help_text='The unique identifier for the checklist.', max_length=15, primary_key=True, serialize=False, verbose_name='identifier')),
                ('edited', models.DateTimeField(blank=True, help_text='The date and time the eBird checklist was last edited.', null=True, verbose_name='edited')),
                ('group', models.TextField(blank=True, help_text='The identifier for a group of observers.', verbose_name='group')),
                ('observer_count', models.IntegerField(default=0, help_text='The total number of observers.', verbose_name='observer count')),
                ('species_count', models.IntegerField(default=0, help_text='The number of species reported.', verbose_name='species count')),
                ('date', models.DateField(db_index=True, help_text='The date the observations were made.', verbose_name='date')),
                ('time', models.TimeField(blank=True, help_text='The time the observations were made.', null=True, verbose_name='time')),
                ('started', models.DateTimeField(blank=True, db_index=True, help_text='The date and time the observations were made.', null=True, verbose_name='date & time')),
                ('observation_type', models.TextField(help_text='The type of protocol followed.', verbose_name='observation type')),
                ('protocol_name', models.TextField(help_text='The name of protocol followed.', verbose_name='protocol name')),
                ('protocol_code', models.CharField(db_index=True, help_text='The code used to identify the protocol.', max_length=3, verbose_name='protocol code')),
                ('project_names', models.TextField(blank=True, help_text='The names used to identify the project (portal).', verbose_name='project names')),
                ('project_identifiers', models.TextField(blank=True, help_text='The identifiers used for the project (portal).', verbose_name='project identifiers')),
                ('duration', models.IntegerField(blank=True, help_text='The number of minutes spent counting.', null=True, verbose_name='duration')),
                ('distance', models.DecimalField(blank=True, decimal_places=3, help_text='The distance, in metres, covered while travelling.', max_digits=6, null=True, verbose_name='distance')),
                ('area', models.DecimalField(blank=True, decimal_places=3, help_text='The area covered, in hectares.', max_digits=6, null=True, verbose_name='area')),
                ('complete', models.BooleanField(default=False, help_text='All species seen are reported.', verbose_name='complete')),
                ('comments', models.TextField(blank=True, help_text='Any comments about the checklist.', verbose_name='comments')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When was the record created.')),
                ('modified', models.DateTimeField(auto_now_add=True, help_text='When was the record modified.')),
                ('country', models.ForeignKey(help_text='The country where the checklist was made.', on_delete=django.db.models.deletion.PROTECT, related_name='checklists', to='data.country', verbose_name='country')),
                ('county', models.ForeignKey(blank=True, help_text='The county where the checklist was made.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='checklists', to='data.county', verbose_name='county')),
                ('location', models.ForeignKey(help_text='The location where checklist was made.', on_delete=django.db.models.deletion.PROTECT, related_name='checklists', to='data.location', verbose_name='location')),
                ('observer', models.ForeignKey(help_text='The person who submitted the checklist.', on_delete=django.db.models.deletion.PROTECT, related_name='checklists', to='data.observer', verbose_name='observer')),
                ('state', models.ForeignKey(help_text='The state where the checklist was made.', on_delete=django.db.models.deletion.PROTECT, related_name='checklists', to='data.state', verbose_name='state')),
            ],
            options={
                'verbose_name': 'checklist',
                'verbose_name_plural': 'checklists',
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('identifier', models.CharField(help_text='The identifier for the observation.', max_length=15, primary_key=True, serialize=False, verbose_name='identifier')),
                ('edited', models.DateTimeField(help_text='The date and time the observation was last edited', verbose_name='edited')),
                ('date', models.DateField(db_index=True, help_text='The date the observations were made.', verbose_name='date')),
                ('time', models.TimeField(blank=True, help_text='The time the observations were made.', null=True, verbose_name='time')),
                ('started', models.DateTimeField(blank=True, db_index=True, help_text='The date and time the observations were made.', null=True, verbose_name='date & time')),
                ('count', models.IntegerField(help_text='The number of birds seen.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='count')),
                ('breeding_code', models.CharField(blank=True, db_index=True, help_text='eBird code identifying the breeding status.', max_length=2, verbose_name='breeding code')),
                ('breeding_category', models.CharField(blank=True, db_index=True, help_text='eBird code identifying the breeding category.', max_length=2, verbose_name='breeding category')),
                ('behavior_code', models.CharField(blank=True, db_index=True, help_text='eBird code identifying the behaviour.', max_length=2, verbose_name='behaviour code')),
                ('age_sex', models.TextField(blank=True, help_text='The number of birds seen in each combination of age and sex.', verbose_name='Age & Sex')),
                ('media', models.BooleanField(help_text='Has audio, photo or video uploaded to the Macaulay library.', verbose_name='has media')),
                ('approved', models.BooleanField(help_text="Has the observation been accepted by eBird's review process.", verbose_name='Approved')),
                ('reviewed', models.BooleanField(help_text='Was the observation reviewed because it failed automatic checks.', verbose_name='Reviewed')),
                ('reason', models.TextField(blank=True, help_text='The reason given for the observation to be marked as not confirmed.', verbose_name='Reason')),
                ('comments', models.TextField(blank=True, help_text='Any comments about the observation.', verbose_name='comments')),
                ('urn', models.TextField(blank=True, help_text='The globally unique identifier for the observation.', verbose_name='URN')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='When was the record created.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='When was the record updated.')),
                ('checklist', models.ForeignKey(help_text='The checklist this observation belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='data.checklist', verbose_name='checklist')),
                ('country', models.ForeignKey(help_text='The country where the observation was made.', on_delete=django.db.models.deletion.PROTECT, related_name='observations', to='data.country', verbose_name='country')),
                ('county', models.ForeignKey(blank=True, help_text='The county where the observation was made.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='observations', to='data.county', verbose_name='county')),
                ('location', models.ForeignKey(help_text='The location where the observation was made.', on_delete=django.db.models.deletion.PROTECT, related_name='observations', to='data.location', verbose_name='location')),
                ('observer', models.ForeignKey(help_text='The person who made the observation.', on_delete=django.db.models.deletion.PROTECT, related_name='observations', to='data.observer', verbose_name='observer')),
                ('species', models.ForeignKey(help_text='The identified species.', on_delete=django.db.models.deletion.PROTECT, related_name='observations', to='data.species', verbose_name='species')),
                ('state', models.ForeignKey(help_text='The state where the observation was made.', on_delete=django.db.models.deletion.PROTECT, related_name='observations', to='data.state', verbose_name='state')),
            ],
            options={
                'verbose_name': 'observation',
                'verbose_name_plural': 'observations',
            },
        ),
    ]
