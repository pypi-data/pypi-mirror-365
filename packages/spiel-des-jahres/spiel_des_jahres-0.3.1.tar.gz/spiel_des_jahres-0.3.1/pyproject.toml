[tool.poetry]
name = "spiel-des-jahres"
version = "0.3.1"
description = "Spiel des Jahres predictions"
authors = [
    "Markus Shepherd <markus@recommend.games>",
]
license = "MIT"
readme = "README.md"

documentation = "https://recommend-games.github.io/spiel-des-jahres"
homepage = "https://recommend-games.github.io/spiel-des-jahres"
repository = "https://github.com/recommend-games/spiel-des-jahres"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

packages = [
    {include = "spiel_des_jahres", from = "src"}
]

include = ["src/spiel_des_jahres/data/"]

[tool.poetry.dependencies]
python = ">=3.10.0, <4.0"

beautifulsoup4 = {version = ">=4.12.0, <5.0", optional = true}
board-game-recommender = {version = ">=4.0.0, <5.0", optional = true}
funcy = {version = ">=2.0.0, <3.0.0", optional = true}
joblib = {version = ">=1.0.0, <2.0.0", optional = true}
numpy = {version = ">=2.0.0, <3.0.0", optional = true}
openai = {version = ">=1.0.0, <2.0.0", optional = true}
pandas = {version = ">=2.0.0, <3.0.0", optional = true}
polars = {version = ">=1.0.0, <2.0.0", optional = true, extras = ["pandas", "pyarrow"]}
scipy = {version = ">=1.0.0, <2.0.0", optional = true}
scikit-learn = {version = ">=1.0.0, <2.0.0", optional = true}
scrapy = {version = ">=2.11.0, <3.0", optional = true}
tqdm = {version = "*", optional = true}

[tool.poetry.group.dev.dependencies]
funcy-typing = "*"
ipython = "*"
jupyter-black = "*"
jupyterlab = "*"
jupytext = "*"
mkdocstrings = {version = ">=0.23", extras = ["python"]}
mkdocs-material = "*"
mypy = "*"
pandas-stubs = "*"
pre-commit = "*"
pymdown-extensions = "*"
pytest = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
python-kacl = "*"
ruff = ">=0.2.0"
scipy-stubs = "*"
types-requests = "*"
types-tqdm = "*"

[tool.poetry.extras]
kennerspiel = ["funcy", "joblib", "numpy", "pandas", "polars", "scikit-learn", "scipy"]
predictions = ["board-game-recommender", "funcy", "joblib", "numpy", "pandas", "polars", "scikit-learn", "scipy", "tqdm"]
scraper = ["beautifulsoup4", "openai", "polars", "scrapy"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310" # The lowest supported version

[tool.ruff.lint]
# By default, enable all the lint rules.
# Add to the ignore list below if you don't want some rules.
# If you need some ignores for certain modules, see tool.ruff.lint.per-file-ignores below.
# For individual ignore cases, prefer inline `# noqa`s within the code.
select = ["ALL"]
ignore = [
    "ANN",      # Type hints related, let mypy handle these.
    "D",        # Docstrings related, way too strict to our taste
    "TD",
    "FIX",
    "EM102",    # Exception must not use an f-string literal, assign to variable first
    "T201",     # `print` found
    "TRY003",   # Avoid specifying long messages outside the exception class
    "BLE001",
    "ERA001",
    "RUF001",
    "ISC003",
    "S101",     # "Use of `assert` detected"
    "DTZ011",
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",     # "Use of `assert` detected"
    "ARG",      # "Unused function argument". Fixtures are often unused.
    "S105",     # "Possible hardcoded password".
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.ruff.lint.pylint]
max-args = 20

[tool.pytest.ini_options]
addopts = """\
    --cov spiel_des_jahres \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
fail_under = 100
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
# This is the global mypy configuration.
# Avoid changing this!
strict = true  # See all the enabled flags `mypy --help | grep -A 10 'Strict mode'`
# disallow_any_unimported = true
exclude = [
    '^notebooks/*',
]

# If you need to ignore something for some specific module,
# add overrides for them. Avoid changing the global config!
# For example:
[[tool.mypy.overrides]]
module = ["joblib.*", "sklearn.*"]
ignore_missing_imports = true

# [[tool.mypy.overrides]]
# module = [
#   "tests/my_thing/test_my_thing",
# ]
# disallow_untyped_defs = false
