"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/building_a_plugin/guides.html#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""
from typing import TYPE_CHECKING
import pathlib

from magicgui import magic_factory
from magicgui.widgets import CheckBox, Container, create_widget, PushButton, FloatSpinBox, FileEdit
from qtpy.QtWidgets import QHBoxLayout, QPushButton, QWidget, QFileDialog
from skimage.util import img_as_float
import numpy
import splinebox
import scipy.ndimage
import napari
import skimage.measure
import line_profiler

# if we want even more control over our widget, we can use
# magicgui `Container`
class Notochoords(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer

        self._selected_points = create_widget(
            label="Annotated points", annotation="napari.layers.Points"
        )

        self._invert_checkbox = CheckBox(text="Refine spline? (not yet implemented)")

        self.pixelSizeYXbox = FloatSpinBox(label="XY pixel size (µm)", value=0.347)
        self.stepSizeZbox = FloatSpinBox(label="Z step size (µm)", value=0.7)

        self.fitbtn = PushButton(text="Fit spline")
        self.fitbtn.clicked.connect(self._fitspline)

        self.savebtn = PushButton(text="Save spline")
        self.savebtn.clicked.connect(self._savespline)

        self.loadbtn = PushButton(text="Load spline")
        self.loadbtn.clicked.connect(self._loadspline)

        self.reslicebtn = PushButton(text="Reslice selected layer(s) along spline")
        self.reslicebtn.clicked.connect(self._reslicespline)
        
        self.polarbtn = PushButton(text="Polar coordinates")
        self.polarbtn.clicked.connect(self._polar)

        # append into/extend the container with your widgets
        self.extend(
            [
                self._selected_points,
                self.pixelSizeYXbox,
                self.stepSizeZbox,
                self._invert_checkbox,
                self.fitbtn,
                self.savebtn,
                self.loadbtn,
                self.reslicebtn,
                self.polarbtn
            ]
        )

        self.p = 300  # half-window for reslice
        self.N = 1000 # number of points for reslicing along spline (this should be set as 1 spatial unit later)

    def _drawspline(self):
        self._viewer.add_points(
            self.spline.eval(numpy.linspace(0, self.spline.M-1, self.N)) / self._getVoxelSizeZYX(),
            size=20,
            face_color='r',
            border_color='r',
            name="Spline Points"
        )

    def _getVoxelSizeZYX(self):
        return numpy.array([self.stepSizeZbox.value, self.pixelSizeYXbox.value, self.pixelSizeYXbox.value])

    def _fitspline(self):
        # Assumed to be in pixels, convert to um
        annotated_points_um = self._selected_points.value.data * self._getVoxelSizeZYX()

        M = annotated_points_um.shape[0]
        self.spline = splinebox.Spline(M, splinebox.B3())
        self.spline.knots = annotated_points_um

        # now draw it.
        self._drawspline()

        self._selected_points.value.visible=False

    def _savespline(self): 
        save_file_path, _ = QFileDialog.getSaveFileName(None, "Save spline", "", "JSON Files (*.json)")
        save_file_path = pathlib.Path(save_file_path)
        self.spline.to_json(save_file_path.with_suffix(".json"))

    def _loadspline(self):
        load_file_path, _ = QFileDialog.getOpenFileName(None, "Open spline", "", "JSON Files (*.json)")
        self.spline = splinebox.spline_curves.Spline.from_json(load_file_path)
        self._drawspline()

    def _initial_vector(self): 
        start = self.spline(0)
        stop = self.spline(self.spline.M - 1)
        midpoint = start + (stop - start) / 2
        ts = numpy.linspace(0, self.spline.M - 1, 100)
        normal = numpy.cross(start - midpoint, numpy.mean(self.spline(ts) - midpoint, axis=0))
        initial_vector = numpy.cross(self.spline(0, derivative=1), normal)
        return initial_vector


    def _reslicespline(self):
        if self.spline is None:
            pass

        else:
            outputVoxelSize = min(self._getVoxelSizeZYX())

            totalLength_um = self.spline.arc_length()
            print(f"Spline total length {totalLength_um=}")

            Lsteps_um = numpy.arange(0, totalLength_um, outputVoxelSize)
            print("Computing equal steps for spline...", end='')
            parameters = self.spline.arc_length_to_parameter(Lsteps_um)
            print("done.")

            spline_points_um = self.spline.eval(parameters)
            spline_moving_frame_um = self.spline.moving_frame(parameters, method="bishop", initial_vector=self._initial_vector())

            # This is in integer pixels
            zyxPlaneCoordsOrig = numpy.mgrid[0:1,-self.p:self.p+1,-self.p:self.p+1].reshape(3, -1).T.astype('<f4')

            # This is in the units of the voxel size
            zyxPlaneCoordsOrig *= outputVoxelSize

            selected_layers = self._viewer.layers.selection.copy()
            for selected_layer in selected_layers:
                if isinstance(selected_layer, (napari.layers.Image, napari.layers.Labels)):
                    imOut = numpy.zeros((len(parameters), 1+2*self.p, 1+2*self.p), dtype=selected_layer.data.dtype)

                    for n in range(len(parameters)):
                        # zero-centred oriented image plane, still in voxel size units
                        zyxPlaneCoordsDef = spline_moving_frame_um[n][1] * zyxPlaneCoordsOrig[:,1].reshape(-1,1) + spline_moving_frame_um[n][2] * zyxPlaneCoordsOrig[:,2].reshape(-1,1)

                        # add offset
                        zyxPlaneCoordsDef += spline_points_um[n]

                        # Finally go back to pixels
                        zyxPlaneCoordsDef /= self._getVoxelSizeZYX()

                        imPlane = scipy.ndimage.map_coordinates(
                            selected_layer.data,
                            zyxPlaneCoordsDef.T,
                            order=0 if isinstance(selected_layer, napari.layers.Labels) else 1,
                        ).reshape(1+2*self.p, 1+2*self.p)

                        imOut[n] = imPlane

                    self._viewer.add_image(imOut, name=selected_layer.name+"-notoreslice")

    def _polar(self):
        selected_layers = self._viewer.layers.selection.copy()
        for selected_layer in selected_layers:
            if isinstance(selected_layer, napari.layers.Labels):
                shapeOut = selected_layer.data.shape
                rOut = numpy.zeros(shapeOut, dtype=float)
                lOut = numpy.zeros(shapeOut, dtype=float)
                thetaOut = numpy.zeros(shapeOut, dtype=float)
                
                region_props = skimage.measure.regionprops_table(selected_layer.data, properties=("label", "centroid", "coords"))

                parameters = []
                for i in range(len(region_props["label"])):
                    centroid = numpy.array([region_props["centroid-0"][i], region_props["centroid-1"][i], region_props["centroid-2"][i],])
                    centroid *= self._getVoxelSizeZYX()
                    coords = region_props["coords"][i] 

                    r, t = self.spline.distance(centroid, return_t=True)
                    l = self.spline.arc_length(t)

                    parameters.append(t)

                    rOut[coords[:, 0], coords[:, 1], coords[:, 2]] = r
                    lOut[coords[:, 0], coords[:, 1], coords[:, 2]] = l

                parameters = numpy.squeeze(numpy.array(parameters))
                sort_indices = numpy.argsort(parameters)
                frame = self.spline.moving_frame(parameters[sort_indices], method="bishop", initial_vector=self._initial_vector())
                frame = frame[numpy.argsort(sort_indices)]

                for i in range(len(region_props["label"])):
                    centroid = numpy.array([region_props["centroid-0"][i], region_props["centroid-1"][i], region_props["centroid-2"][i],])
                    centroid *= self._getVoxelSizeZYX()
                    coords = region_props["coords"][i] 

                    r_vec = centroid - self.spline(parameters[i])
                    r_vec /= numpy.linalg.norm(r_vec)
                    theta = numpy.arccos(numpy.dot(r_vec, frame[i, 1]))
                    thetaOut[coords[:, 0], coords[:, 1], coords[:, 2]] = numpy.rad2deg(theta)

            self._viewer.add_image(rOut, name=selected_layer.name+"-r")
            self._viewer.add_image(lOut, name=selected_layer.name+"-l")
            self._viewer.add_image(thetaOut, name=selected_layer.name+"-theta")
