

global probe_id[18]

global sampling_threshold[1]
global sampling_counter[2048]
global sampling_flag[2048]

# Recursion arrays omitted

# Timed Sampling omitted
global stopwatch_on = 0

probe process("cmp").begin {
    # Probe name -> Probe ID
    probe_id["_GLOBAL__sub_I__Z9QuickSortPii"] = 0
    probe_id["_Z10BubbleSortPii"] = 1
    probe_id["_Z10InsertSortPii"] = 2
    probe_id["_Z12BadPartitionPiii"] = 3
    probe_id["_Z12QuickSortBadPii"] = 4
    probe_id["_Z41__static_initialization_and_destruction_0ii"] = 5
    probe_id["_Z4SwapRiS_"] = 6
    probe_id["_Z4swapPiii"] = 7
    probe_id["_Z8HeapSortPii"] = 8
    probe_id["_Z9PartitionPiii"] = 9
    probe_id["_Z9QuickSortPii"] = 10
    probe_id["_Z9repairTopPiii"] = 11
    probe_id["_fini"] = 12
    probe_id["deregister_tm_clones"] = 13
    probe_id["frame_dummy"] = 14
    probe_id["invalid"] = 15
    probe_id["main"] = 16
    probe_id["register_tm_clones"] = 17

    # Probe name -> Probe sampling threshold
    sampling_threshold["main"] = 4

    if (!stopwatch_on) {
        stopwatch_on = 1
        start_stopwatch("timestamp")
    }
    printf("7 %d %d %d %d;%s\n", tid(), pid(), ppid(), read_stopwatch_ns("timestamp"), execname())
}

probe process("cmp").end
{
    printf("8 %d %d %d %d;%s\n", tid(), pid(), ppid(), read_stopwatch_ns("timestamp"), execname())
}


probe process("cmp").thread.begin {
    printf("5 %d %d %d;%s\n", tid(), pid(), read_stopwatch_ns("timestamp"), execname())
}
    
probe process("cmp").thread.end {
    printf("6 %d %d %d;%s\n", tid(), pid(), read_stopwatch_ns("timestamp"), execname())
    delete sampling_counter[tid(), *]
    delete sampling_flag[tid(), *]
}

probe process("cmp").function("_GLOBAL__sub_I__Z9QuickSortPii").call?,
      process("cmp").function("_Z10BubbleSortPii").call?,
      process("cmp").function("_Z10InsertSortPii").call?,
      process("cmp").function("_Z12BadPartitionPiii").call?,
      process("cmp").function("_Z12QuickSortBadPii").call?,
      process("cmp").function("_Z41__static_initialization_and_destruction_0ii").call?,
      process("cmp").function("_Z4SwapRiS_").call?,
      process("cmp").function("_Z4swapPiii").call?,
      process("cmp").function("_Z8HeapSortPii").call?,
      process("cmp").function("_Z9PartitionPiii").call?,
      process("cmp").function("_Z9QuickSortPii").call?,
      process("cmp").function("_Z9repairTopPiii").call?,
      process("cmp").function("_fini").call?,
      process("cmp").function("deregister_tm_clones").call?,
      process("cmp").function("frame_dummy").call?,
      process("cmp").function("invalid").call?,
      process("cmp").function("register_tm_clones").call?
{
    pname = ppfunc()
    tid = tid()
    printf("0 %d %d;%d\n", tid, read_stopwatch_ns("timestamp"), probe_id[pname])
}

probe process("cmp").function("_GLOBAL__sub_I__Z9QuickSortPii").return?,
      process("cmp").function("_Z10BubbleSortPii").return?,
      process("cmp").function("_Z10InsertSortPii").return?,
      process("cmp").function("_Z12BadPartitionPiii").return?,
      process("cmp").function("_Z12QuickSortBadPii").return?,
      process("cmp").function("_Z41__static_initialization_and_destruction_0ii").return?,
      process("cmp").function("_Z4SwapRiS_").return?,
      process("cmp").function("_Z4swapPiii").return?,
      process("cmp").function("_Z8HeapSortPii").return?,
      process("cmp").function("_Z9PartitionPiii").return?,
      process("cmp").function("_Z9QuickSortPii").return?,
      process("cmp").function("_Z9repairTopPiii").return?,
      process("cmp").function("_fini").return?,
      process("cmp").function("deregister_tm_clones").return?,
      process("cmp").function("frame_dummy").return?,
      process("cmp").function("invalid").return?,
      process("cmp").function("register_tm_clones").return?
{
    pname = ppfunc()
    tid = tid()
    printf("1 %d %d;%d\n", tid, read_stopwatch_ns("timestamp"), probe_id[pname])
}

probe process("cmp").function("main").call?
{
    pname = ppfunc()
    tid = tid()
    
    counter = sampling_counter[tid, pname]
    if (counter == 0 || counter == sampling_threshold[pname]) {
        sampling_counter[tid, pname] = 0
        sampling_flag[tid, pname] ++
        printf("0 %d %d;%d\n", tid, read_stopwatch_ns("timestamp"), probe_id[pname])
    }
    sampling_counter[tid, pname] ++

}

probe process("cmp").function("main").return?
{
    pname = ppfunc()
    tid = tid()
    
    if (sampling_flag[tid, pname] > 0) {
        printf("1 %d %d;%d\n", tid, read_stopwatch_ns("timestamp"), probe_id[pname])
        sampling_flag[tid, pname] --
    }

}
