# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.gmail_o_auth_success_response import GmailOAuthSuccessResponse
from .raw_client import AsyncRawGmailOauthClient, RawGmailOauthClient


class GmailOauthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawGmailOauthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawGmailOauthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawGmailOauthClient
        """
        return self._raw_client

    def authorize_gmail(
        self,
        *,
        instance_id: str,
        client_id: typing.Optional[str] = None,
        scope: typing.Optional[str] = None,
        redirect_url: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Start Gmail OAuth flow

        Parameters:
        - instance_id: Identifier for the instance requesting authorization
        - client_id: Optional client ID for white labeling
        - scope: Optional scopes to request (comma-separated)
        - redirect_url: Optional URL to redirect to after authorization completes

        Parameters
        ----------
        instance_id : str
            Unique identifier for the client instance requesting authorization

        client_id : typing.Optional[str]
            Client ID for white labeling, if not provided will use default credentials

        scope : typing.Optional[str]
            Optional OAuth scopes to request (comma-separated string)

        redirect_url : typing.Optional[str]
            Optional URL to redirect to after authorization completes

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from klavis import Klavis

        client = Klavis(
            api_key="YOUR_API_KEY",
        )
        client.gmail_oauth.authorize_gmail(
            instance_id="instance_id",
        )
        """
        _response = self._raw_client.authorize_gmail(
            instance_id=instance_id,
            client_id=client_id,
            scope=scope,
            redirect_url=redirect_url,
            request_options=request_options,
        )
        return _response.data

    def gmail_o_auth_callback(
        self,
        *,
        code: typing.Optional[str] = None,
        state: typing.Optional[str] = None,
        error: typing.Optional[str] = None,
        error_description: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GmailOAuthSuccessResponse:
        """
        Handles the callback from Gmail OAuth authorization.

        Parameters
        ----------
        code : typing.Optional[str]
            Authorization code returned by Gmail

        state : typing.Optional[str]
            State parameter containing encoded authorization data

        error : typing.Optional[str]
            Error code returned by Gmail, if any

        error_description : typing.Optional[str]
            Detailed error description from Gmail, if any

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GmailOAuthSuccessResponse
            Successful Response

        Examples
        --------
        from klavis import Klavis

        client = Klavis(
            api_key="YOUR_API_KEY",
        )
        client.gmail_oauth.gmail_o_auth_callback()
        """
        _response = self._raw_client.gmail_o_auth_callback(
            code=code, state=state, error=error, error_description=error_description, request_options=request_options
        )
        return _response.data

    def refresh_gmail_token(
        self, *, instance_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GmailOAuthSuccessResponse:
        """
        Refresh an expired Gmail access token using the stored refresh token

        Parameters:
        - instance_id: Identifier for the instance requesting token refresh

        Returns:
        - Success response if token was refreshed successfully, error response otherwise

        Parameters
        ----------
        instance_id : str
            Unique identifier for the client instance requesting token refresh

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GmailOAuthSuccessResponse
            Successful Response

        Examples
        --------
        from klavis import Klavis

        client = Klavis(
            api_key="YOUR_API_KEY",
        )
        client.gmail_oauth.refresh_gmail_token(
            instance_id="instance_id",
        )
        """
        _response = self._raw_client.refresh_gmail_token(instance_id=instance_id, request_options=request_options)
        return _response.data


class AsyncGmailOauthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawGmailOauthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawGmailOauthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawGmailOauthClient
        """
        return self._raw_client

    async def authorize_gmail(
        self,
        *,
        instance_id: str,
        client_id: typing.Optional[str] = None,
        scope: typing.Optional[str] = None,
        redirect_url: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Start Gmail OAuth flow

        Parameters:
        - instance_id: Identifier for the instance requesting authorization
        - client_id: Optional client ID for white labeling
        - scope: Optional scopes to request (comma-separated)
        - redirect_url: Optional URL to redirect to after authorization completes

        Parameters
        ----------
        instance_id : str
            Unique identifier for the client instance requesting authorization

        client_id : typing.Optional[str]
            Client ID for white labeling, if not provided will use default credentials

        scope : typing.Optional[str]
            Optional OAuth scopes to request (comma-separated string)

        redirect_url : typing.Optional[str]
            Optional URL to redirect to after authorization completes

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from klavis import AsyncKlavis

        client = AsyncKlavis(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.gmail_oauth.authorize_gmail(
                instance_id="instance_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.authorize_gmail(
            instance_id=instance_id,
            client_id=client_id,
            scope=scope,
            redirect_url=redirect_url,
            request_options=request_options,
        )
        return _response.data

    async def gmail_o_auth_callback(
        self,
        *,
        code: typing.Optional[str] = None,
        state: typing.Optional[str] = None,
        error: typing.Optional[str] = None,
        error_description: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GmailOAuthSuccessResponse:
        """
        Handles the callback from Gmail OAuth authorization.

        Parameters
        ----------
        code : typing.Optional[str]
            Authorization code returned by Gmail

        state : typing.Optional[str]
            State parameter containing encoded authorization data

        error : typing.Optional[str]
            Error code returned by Gmail, if any

        error_description : typing.Optional[str]
            Detailed error description from Gmail, if any

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GmailOAuthSuccessResponse
            Successful Response

        Examples
        --------
        import asyncio

        from klavis import AsyncKlavis

        client = AsyncKlavis(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.gmail_oauth.gmail_o_auth_callback()


        asyncio.run(main())
        """
        _response = await self._raw_client.gmail_o_auth_callback(
            code=code, state=state, error=error, error_description=error_description, request_options=request_options
        )
        return _response.data

    async def refresh_gmail_token(
        self, *, instance_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GmailOAuthSuccessResponse:
        """
        Refresh an expired Gmail access token using the stored refresh token

        Parameters:
        - instance_id: Identifier for the instance requesting token refresh

        Returns:
        - Success response if token was refreshed successfully, error response otherwise

        Parameters
        ----------
        instance_id : str
            Unique identifier for the client instance requesting token refresh

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GmailOAuthSuccessResponse
            Successful Response

        Examples
        --------
        import asyncio

        from klavis import AsyncKlavis

        client = AsyncKlavis(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.gmail_oauth.refresh_gmail_token(
                instance_id="instance_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.refresh_gmail_token(instance_id=instance_id, request_options=request_options)
        return _response.data
