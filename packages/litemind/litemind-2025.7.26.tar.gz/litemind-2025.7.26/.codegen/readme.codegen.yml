file: README.md
folder:
  path: .
  extensions:
    - .py
    - .md
    - .txt
    - .toml
    - LICENSE
    - .tests
    - .html
    - .ipynb
  excluded:
    - 'litemind.egg-info'
    - 'dist'
    - 'build'
    - 'README.md'
    - 'EXAMPLES.md'
    - '.git'
    - '.github'
    - '.codegen'
    - 'sandbox'
    - 'exported.txt'
    - 'utils'
    - 'scan_results'
    - 'archives'
    - 'documents'
    - 'others'
    - 'tables'
    - 'debug_prompt.txt'
    - '*.scan.md'
    - '*.scan.yaml'
prompt: |
  You are a helpful assistant with deep expertise in Software Engineering and best practices for Open Source projects.
  You know how to write complete, compelling and informative README files for Python repositories.
  Your task is to help a user generate a README.md file for a Python repository.
  
  # README structure:
  The README.md should include the following sections:
  - Summary
      [This section should provide an enthusiastic and complete description of the library, its purpose, and philosophy.]
  - Features
      [This section should provide a list of the main features of the library, including any unique or standout features.]
  - Installation
      [This section should explain how to install litemind]
  - Basic Usage
      [section should consist of several striking and illustrative examples of the agent-level API (ideally with multimodal inputs). DO NOT cover the wrapper API in this section, only the agentic API! Provide several short examples that cover different topics: (i) basic agent usage, (ii) agent with tools, (iv) agent with tools and augmentation (RAG) (v) More complex example with multimodal inputs, tools and augmentations.]
  - Concepts
      [This section should explain the concepts behind the library, the main classes and their purpose, and how they interact. Please make sure to explain in this section the difference between the API wrapper layer versus the agentic API. ]
  - Multi-modality
      [This section should explain the multimodal capabilities of the library. In particular, it should explain what model features are, why they are needed, and how to request features when using litemind's API. Also explain the purpose of the Media classes and how they are used.]
  - More Examples
      [This section should provide additional examples of the library's usage, including more advanced or complex use cases. For example: (i) how to use the CombinedAPI, (ii) agent that can executed Python code, (iii) use of the wrapper API to get structured outputs, (iv) agent that has a tool that can generate an image using the wrapper API. PLease explain at the end that more examples can be found in the EXAMPLES.md file.]
  - Command Line Tools
      [This section should explain litemind command line tools and how to use them, with example command lines (check tools package and its contents for details). Please also explain the format of the *.codegen.yml files and give a template. Explain that you need a .codegen folder in the root of the repository and you can apply that to your own repositories.]
  - Caveats and Limitations
      [This section should explain the limitations of the library, including any known issues or areas for improvement.]
  - Code Health
      [This section should include the results of unit test in file 'test_report.md'. Please provide file names for failed tests. Please state the total number of tests, how many passed, and how many failed. Please assess how critical, or not, are these failures. You can also consult the ANALYSIS.md file for more information if it exists.]
  - API Keys
      [This section should explain how to obtain and use API keys for the library API providers (OpenAI, Claude, Gemini, etc...) and which environment variables to set. Cor each operating system, explain which files need to be edited to add the keys as environment variables.]
  - Roadmap
      [This section can use the contents of TODO.md as a starting point, keep the checkmarks.]
  - Contributing
      [This section should explain how to contribute to the library, including any guidelines or best practices for contributing code, documentation, or other resources. Refer to the CONTRIBUTING.md file for more details.]
  - License

  # Instructions for code examples:
  - Please use markdown code blocks for code examples and other code snippets.
  - Keep different examples that cover different topics separate from each other. Do not combine different examples into the same code block.
  - Please keep different examples into different code blocks for clarity, with text preambles before each code block.
  - Make sure that the code examples are complete and can be run as-is.
  - Make sure that the code can run without errors, e.g. make sure that all required imports are included.
  - Make sure, if possible, to include the expected output as comments in the code.
  - Make sure that code examples are emphatically didactic, well-commented, and easy to understand.
  - Make sure that the code is well-formatted and follows PEP-8.
  - Code examples that use specific features must request models that have these features.
  - In the examples, make sure to use real URLs of files that really exist, for example those used in the tests.
  - Explain and/or show that ModelFeatures can be provided as a singleton or list of strings instead of enums (see normalisation code).
  
  # Repository Badges:
  - Please add badges for: pipy, license, pepy.tech pipy stats, and GitHub stars.
  - The Pepy.tech badge image path is: https://static.pepy.tech/badge/litemind)
  - At the end of the README, include a note explaining that the README was generated with the help of AI.

  # Other Notes:
  - Explain that logging is done with Arbol (http://github.com/royerlab/arbol) and it can be deactivated by setting Arbol.passthrough to True.
  - Avoid hallucinating things that are not in the repository.
  - Litemind _does_ _not_ have an agent class called ReActAgent, or anything 'react' related. The Agent class itself is has all the features of the ReAct framework.
  - Important: If you don't know something for sure, don't make it up. If you don't know, ignore, or just say that you don't know.
  
  # Task:
  Your task is to follow the instructions above and generate a README.md file for the Python repository provided below:

