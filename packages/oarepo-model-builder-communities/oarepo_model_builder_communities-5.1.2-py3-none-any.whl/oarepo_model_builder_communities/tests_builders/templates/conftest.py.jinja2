import pytest
from invenio_access.permissions import system_identity
from invenio_communities import current_communities
from invenio_communities.communities.records.api import Community
from invenio_pidstore.errors import PIDDoesNotExistError
from flask_principal import Identity, Need, UserNeed

from flask_security import login_user
from invenio_accounts.testutils import login_user_via_session
from invenio_communities.generators import CommunityRoleNeed

# todo perhaps put all these in parents, might useful elsewhere, not just specifically in communities test folder
@pytest.fixture(scope="module")
def minimal_community():
    """Minimal community metadata."""
    return {
        "access": {
            "visibility": "public",
            "record_policy": "open",
        },
        "slug": "public",
        "metadata": {
            "title": "My Community",
        },
    }


@pytest.fixture(scope="module", autouse=True)
def location(location):
    return location


@pytest.fixture(scope="module")
def app_config(app_config):
    app_config["FILES_REST_STORAGE_CLASS_LIST"] = {
        "L": "Local",
        "F": "Fetch",
        "R": "Remote",
    }
    app_config["FILES_REST_DEFAULT_STORAGE_CLASS"] = "L"

    return app_config


@pytest.fixture()
def get_or_create_community():
    def _get_or_create_community(identity, data):
        """Util to get or create community, to avoid duplicate error."""
        slug = data["slug"]
        try:
            c = current_communities.service.record_cls.pid.resolve(slug)
        except PIDDoesNotExistError:
            c = current_communities.service.create(
                identity,
                data,
            )
            Community.index.refresh()
            c = current_communities.service.record_cls.pid.resolve(slug)
            identity.provides.add(
                CommunityRoleNeed(str(c.id), "owner")
            )
        return c

    return _get_or_create_community

@pytest.fixture
def create_record_with_community(record_service, community_records_service):
    def _create_record_with_community(identity, community, record_data, model="thesis"):
        draft = community_records_service.create_in_community(system_identity, str(community.id), record_data, model=model) # todo system identity perhaps shoudln't be here, there's difficulty in not having defined community custom fields
        published_record = record_service.publish(system_identity, draft.data["id"])
        return published_record._obj
    return _create_record_with_community
