{{ vars.resource_config.class|generate_import }}
from flask_security import login_user
from invenio_accounts.testutils import login_user_via_session
from invenio_users_resources.records import UserAggregate
from {{ vars.proxy.module }} import {{ vars.service.proxy }}

BASE_URLS = {
    "base_record_communities_url": {{ vars.resource_config.class|base_name }}.url_prefix
}

@pytest.fixture
def record_communities_service():
    return {{ vars.service.proxy }}

@pytest.fixture()
def community_records_service():
    from oarepo_communities.proxies import current_oarepo_communities
    return current_oarepo_communities.community_records_service

class LoggedClient:
    def __init__(self, client, user_fixture):
        self.client = client
        self.user_fixture = user_fixture

    def _login(self):
        login_user(self.user_fixture.user, remember=True)
        login_user_via_session(self.client, email=self.user_fixture.email)

    def post(self, *args, **kwargs):
        self._login()
        return self.client.post(*args, **kwargs)

    def get(self, *args, **kwargs):
        self._login()
        return self.client.get(*args, **kwargs)

    def put(self, *args, **kwargs):
        self._login()
        return self.client.put(*args, **kwargs)

    def delete(self, *args, **kwargs):
        self._login()
        return self.client.delete(*args, **kwargs)

@pytest.fixture()
def logged_client(client):
    def _logged_client(user):
        return LoggedClient(client, user)

    return _logged_client


@pytest.fixture()
def users(app, db, UserFixture): #todo this should be universal?

    user1 = UserFixture(
        email="communityowner@example.org",
        password="password",
        active=True,
        confirmed=True,
    )
    user1.create(app, db)

    user2 = UserFixture(
        email="user2@example.org",
        password="beetlesmasher",
        active=True,
        confirmed=True,
    )
    user2.create(app, db)

    user3 = UserFixture(
        email="user3@example.org",
        password="beetlesmasher",
        active=True,
        confirmed=True,
    )
    user3.create(app, db)

    db.session.commit()
    UserAggregate.index.refresh()
    return [user1, user2, user3]