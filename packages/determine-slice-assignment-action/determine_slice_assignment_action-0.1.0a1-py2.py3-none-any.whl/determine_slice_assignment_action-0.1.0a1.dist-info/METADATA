Metadata-Version: 2.4
Name: determine-slice-assignment-action
Version: 0.1.0a1
Summary: This function determines what action should be taken when performing slice assignment on a sequence.
Author-email: Jifeng Wu <jifengwu2k@gmail.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/jifengwu2k/determine-slice-assignment-action
Project-URL: Bug Tracker, https://github.com/jifengwu2k/determine-slice-assignment-action/issues
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=2
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: slice-to-offset-range
Requires-Dist: split-interval
Dynamic: license-file

This function determines what action should be taken when performing slice assignment on a sequence.

## Usage

```python
class SliceAssignmentAction: ...


class NoAction(SliceAssignmentAction): pass


class ConcatenateLeft(SliceAssignmentAction):
    reverse: bool


class ConcatenateRight(SliceAssignmentAction):
    reverse: bool


class ReplaceOffsetRange(SliceAssignmentAction):
    replaced_offset_range: range


class Insert(SliceAssignmentAction):
    index: int
    reverse: bool


def determine_slice_assignment_action(sequence_length: int, slice_object: slice) -> SliceAssignmentAction: ...
```

The function takes:

- `sequence_length: int`: Length of the target sequence
- `slice_object: slice`: The slice object

It returns one of several action classes that describe how the assignment should be handled:

1. `NoAction`: No operation needed
2. `ConcatenateLeft`: Concatenate new elements to the left of the sequence
3. `ConcatenateRight`: Concatenate new elements to the right of the sequence
4. `ReplaceOffsetRange`: Replace a (valid) offset range of elements in the sequence
5. `Insert`: Insert new elements at a specific position

## Implementation

1. The function first converts the slice to absolute offsets using `slice_to_offset_range`.
2. For empty selections (where `start == stop`):
    - If the index is within bounds, it's an insertion
    - If before the sequence, concatenate left
    - If after, concatenate right
3. For non-empty sequences:
    - With positive step: splits the interval and either replaces, concatenates left, or right
    - With negative step: similar but works in reverse

One notable limitation is that some negative step cases aren't fully supported in Python's actual slice assignment (
`ValueError: attempt to assign sequence of size 2 to extended slice of size 0`), but the function still returns the
theoretically correct action.

## Examples

```python
from determine_slice_assignment_action import *

# Test 1: Empty selection (insert)

# l = list(range(10)); l[5:5] = (False, True); print(l)
# [0, 1, 2, 3, 4, False, True, 5, 6, 7, 8, 9]
result = determine_slice_assignment_action(10, slice(5, 5))
assert isinstance(result, Insert)
assert result.reverse == False
assert result.index == 5

# l = list(range(10)); l[5:4] = (False, True); print(l)
# [0, 1, 2, 3, 4, False, True, 5, 6, 7, 8, 9]
result = determine_slice_assignment_action(10, slice(5, 4))
assert isinstance(result, Insert)
assert result.reverse == False
assert result.index == 5

# l = list(range(10)); l[5:3] = (False, True); print(l)
# [0, 1, 2, 3, 4, False, True, 5, 6, 7, 8, 9]
result = determine_slice_assignment_action(10, slice(5, 3))
assert isinstance(result, Insert)
assert result.reverse == False
assert result.index == 5

# l = list(range(10)); l[-11:-11] = (False, True); print(l)
# [False, True, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
result = determine_slice_assignment_action(10, slice(-11, -11))
assert isinstance(result, ConcatenateLeft)
assert result.reverse == False

# l = list(range(10)); l[10:10] = (False, True); print(l)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, False, True]
result = determine_slice_assignment_action(10, slice(10, 10))
assert isinstance(result, ConcatenateRight)
assert result.reverse == False

# l = list(range(10)); l[10:10:-1] = (False, True); print(l)
# Not yet supported
# ValueError: attempt to assign sequence of size 2 to extended slice of size 0
result = determine_slice_assignment_action(10, slice(10, 10, -1))
assert isinstance(result, ConcatenateRight)
assert result.reverse == True

# Test 2: Empty sequence with positive step (append)

# l = list(); l[0:5] = (False, True); print(l)
# [False, True]
result = determine_slice_assignment_action(0, slice(0, 5))
assert isinstance(result, ConcatenateRight)
assert result.reverse is False

# Test 3: Empty sequence with negative step (append reversed)

# l = list(); l[5:0:-1] = (False, True); print(l)
# Not yet supported
# ValueError: attempt to assign sequence of size 2 to extended slice of size 0
result = determine_slice_assignment_action(0, slice(5, 0, -1))
assert isinstance(result, ConcatenateRight)
assert result.reverse is True

# Test 4: Replace middle section (positive step)

# l = list(range(10)); l[2:-2] = (False, True); print(l)
# [0, 1, False, True, 8, 9]
result = determine_slice_assignment_action(10, slice(2, -2))
assert isinstance(result, ReplaceOffsetRange)
assert result.replaced_offset_range == range(2, 8, 1)

# l = list(range(10)); l[2:20] = (False, True); print(l)
# [0, 1, False, True]
result = determine_slice_assignment_action(10, slice(2, 20))
assert isinstance(result, ReplaceOffsetRange)
assert result.replaced_offset_range == range(2, 10, 1)

# Test 5: Replace middle section (negative step)

# l = list(range(10)); l[5:3:-1] = (False, True); print(l)
# [0, 1, 2, 3, True, False, 6, 7, 8, 9]
result = determine_slice_assignment_action(10, slice(5, 3, -1))
assert isinstance(result, ReplaceOffsetRange)
assert result.replaced_offset_range == range(5, 3, -1)

# l = list(range(10)); l[5:-12:-1] = (False, True); print(l)
# Not yet supported
# ValueError: attempt to assign sequence of size 2 to extended slice of size 6
result = determine_slice_assignment_action(10, slice(5, -12, -1))
assert isinstance(result, ReplaceOffsetRange)
assert result.replaced_offset_range == range(5, -1, -1)

# Test 6: Concatenate left (positive step)

# l = list(range(10)); l[-12:0] = (False, True); print(l)
# [False, True, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
result = determine_slice_assignment_action(10, slice(-12, 0))
assert isinstance(result, ConcatenateLeft)
assert result.reverse is False

# Test 7: Concatenate right (positive step)

# l = list(range(10)); l[15:20] = (False, True); print(l)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, False, True]
result = determine_slice_assignment_action(10, slice(15, 20))
assert isinstance(result, ConcatenateRight)
assert result.reverse is False

# Test 8: Concatenate left (negative step)

# l = list(range(10)); l[-11:-15:-1] = (False, True); print(l)
# Not yet supported
# ValueError: attempt to assign sequence of size 2 to extended slice of size 0
result = determine_slice_assignment_action(10, slice(-11, -15, -1))
assert isinstance(result, ConcatenateLeft)
assert result.reverse is True

# Test 9: Concatenate right (negative step)

# l = list(range(10)); l[20:15:-1] = (False, True); print(l)
# Not yet supported
# ValueError: attempt to assign sequence of size 2 to extended slice of size 0
result = determine_slice_assignment_action(10, slice(20, 15, -1))
assert isinstance(result, ConcatenateRight)
assert result.reverse is True
```

## Contributing

Contributions are welcome! Please submit pull requests or open issues on the GitHub repository.

## License

This project is licensed under the [MIT License](LICENSE).
