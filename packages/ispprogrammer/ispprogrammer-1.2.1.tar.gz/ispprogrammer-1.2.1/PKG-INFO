Metadata-Version: 2.4
Name: ispprogrammer
Version: 1.2.1
Summary: NXP ISP Cortex-M programming tool
Author-email: Simon Hobbs <simon.hobbs@electrooptical.net>
License: MIT License
        
        Copyright (c) 2020 Simon Hobbs
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: repository, https://github.com/snhobbs/isp-programmer
Project-URL: url, https://github.com/snhobbs/isp-programmer
Keywords: isp,nxp,program,uart
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pyserial>=3.3
Requires-Dist: intelhex>=2.3.0
Requires-Dist: pycrc>=0.10.0
Requires-Dist: click>=8.0.0
Dynamic: license-file

# isp-programmer
ISP Programmer for NXP Cortex-M Chips

Command-line tool for programming NXP microcontrollers via the UART ISP interface.

## Features
### Secure Write

To prevent bricking the chip during an interrupted write:

- The checksum in flash is first set to zero, forcing the chip to boot into ISP mode if power is lost.
- The image is then written from the topmost page down to the first page.
- The first sector (which contains the valid checksum) is written last.

This ensures that any failure during programming will leave the chip in ISP mode.

## Chip Families Supported:
+ LPC80x
    + LPC802
    + LPC804
+ LPC82x
    + LPC822
    + LPC824
+ LPC84x
    + LPC844
    + LPC845

### Untested, expected to work
+ LPC81x
    + LPC810
    + LPC811
    + LPC812
+ LPC83x
    + LPC832
    + LPC834
+ LPC86x
    + LPC865

Chips using UU-encoded protocols (e.g., LPC1700 family) are not supported.
Other NXP devices with 1â€¯kB sectors *may* work if added to the `lpctools_parts.def` file.

The configuration file is identical to that used by the [lpctools project](http://git.techno-innov.fr/?p=lpctools).

## Installation

### From PyPI

```bash
pip install isp_programmer
```

### From Source
```bash
git clone https://github.com/snhobbs/isp-programmer.git
cd isp-programmer
pip install .
```

> Default chip definitions are bundled. For custom chips, use the --config-file flag or copy your lpctools_parts.def to /etc/lpctools_parts.def.


## Usage
### Erase Entire Flash
```bash
isp_programmer --device /dev/ttyUSB0 -b 9600 -crystal_frequency 12000 masserase
```

### Program Flash Image
```bash
isp_programmer --device /dev/ttyUSB0 -b 9600 -crystal_frequency 12000 writeimage --imagein blinky804.hex
```

### Read Chip Info
```bash
isp_programmer --device /dev/ttyUSB0 -b 9600 -crystal_frequency 12000 querychip
```

## Similar Projects
+ [MXLI by JitterCompany](https://github.com/JitterCompany/mxli)
+ [NXP ISP by idreamoferp](https://github.com/idreamoferp/nxp_isp)
+ [NXP ISP Loader by pzn1977](https://github.com/pzn1977/nxp_isp_loader)
+ [LPC81x ISP Tool by laneboysrc](https://github.com/laneboysrc/LPC81x-ISP-tool)
+ [LPC21ISP by Senseg](https://github.com/Senseg/lpc21isp)
+ [Nxpprog by ulfen](https://github.com/ulfen/nxpprog)
