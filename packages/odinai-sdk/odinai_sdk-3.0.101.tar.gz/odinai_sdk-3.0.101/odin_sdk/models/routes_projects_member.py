# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from odin_sdk.models.invited_user import InvitedUser
from typing import Optional, Set
from typing_extensions import Self

class RoutesProjectsMember(BaseModel):
    """
    RoutesProjectsMember
    """ # noqa: E501
    id: Optional[StrictStr] = None
    role: Optional[StrictStr] = None
    project_id: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    is_pending: Optional[StrictBool] = None
    invited_by: Optional[InvitedUser] = None
    __properties: ClassVar[List[str]] = ["id", "role", "project_id", "user_id", "name", "email", "is_pending", "invited_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoutesProjectsMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invited_by
        if self.invited_by:
            _dict['invited_by'] = self.invited_by.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if is_pending (nullable) is None
        # and model_fields_set contains the field
        if self.is_pending is None and "is_pending" in self.model_fields_set:
            _dict['is_pending'] = None

        # set to None if invited_by (nullable) is None
        # and model_fields_set contains the field
        if self.invited_by is None and "invited_by" in self.model_fields_set:
            _dict['invited_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoutesProjectsMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "role": obj.get("role"),
            "project_id": obj.get("project_id"),
            "user_id": obj.get("user_id"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "is_pending": obj.get("is_pending"),
            "invited_by": InvitedUser.from_dict(obj["invited_by"]) if obj.get("invited_by") is not None else None
        })
        return _obj


