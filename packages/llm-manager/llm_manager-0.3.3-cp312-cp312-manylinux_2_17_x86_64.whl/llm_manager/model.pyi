from abc import ABC, abstractmethod
from pydantic import Field
from llm_manager.config import Configurator as Configurator
from llm_manager.cython import CythonBaseModel as CythonBaseModel
from llm_manager.message import Message as Message, MessageRole as MessageRole
from llm_manager.modal import LLMResult as LLMResult, LLMStatus as LLMStatus, LLModal as LLModal
from llm_manager.prompt import PromptManager as PromptManager
from llm_manager.tools import Tools as Tools
from typing import Any, Iterator, TypeVar

OutputType = TypeVar('OutputType')

class LLModel(CythonBaseModel):
    _raw: bool = False
    def __init__(self, **data: Any) -> None: ...
    @property
    @abstractmethod
    def _section(self) -> str: ...
    @property
    def llm(self) -> LLModal: ...
    @property
    def modal_config(self) -> dict[str, Any]: ...
    def _stream(self, output: Iterator[LLMResult]) -> Iterator[LLMResult | OutputType]: ...
    def clear(self) -> None: ...
    def close(self) -> None: ...
    def prompt(self, **kwargs: Any) -> str: ...
    @property
    def system_kwargs(self) -> dict[str, Any]: ...
    @property
    def kwargs(self) -> dict[str, Any]: ...
    @staticmethod
    def parser(output: LLMResult) -> OutputType: ...
    def _parser(self, output: LLMResult) -> LLMResult | OutputType: ...
    def add_message(self, role: MessageRole, content: str) -> None: ...
    @property
    def history(self) -> list[Message]: ...
    @property
    def user_turns(self) -> int: ...
    def _reload(self, **kwargs: Any) -> None: ...
    def run(self, retry: bool = False, raw: bool | None = None, **kwargs: Any) -> LLMResult | OutputType | Iterator[LLMResult | OutputType]: ...

class VLModel(LLModel, ABC):
    images: list[str] = Field(default_factory=list)
    video: list[str] = Field(default_factory=list)
    @property
    def modal_config(self) -> dict[str, Any]: ...
    def clear(self) -> None: ...
    @property
    def kwargs(self) -> dict[str, Any]: ...
    def _reload(self, **kwargs: Any) -> None: ...

class BaseAgent(LLModel, ABC):
    _tools: Tools = Tools()
    @property
    def modal_config(self) -> dict[str, Any]: ...
    def clear(self) -> None: ...
    def _reload(self, **kwargs: Any) -> None: ...
