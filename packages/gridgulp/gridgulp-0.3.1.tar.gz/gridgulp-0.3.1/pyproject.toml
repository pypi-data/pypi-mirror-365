[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gridgulp"
version = "0.3.1"
description = "Simplified intelligent spreadsheet ingestion framework with automatic table detection"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "GridGulp Contributors"},
]
keywords = ["excel", "csv", "table-detection", "data-extraction", "spreadsheet"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial :: Spreadsheet",
]

dependencies = [
    "pydantic>=2.0,<3.0",
    "openpyxl",
    "xlrd",
    "olefile", # For password-protected Excel detection
    "pandas>=2.0.0",
    "numpy",
    "scipy>=1.11.0",
    "python-magic",
    "filetype>=1.2.0", # Fallback for file type detection
    "magika", # AI-powered file type detection
    "chardet",
    "aiofiles",
    "rich", # For nice CLI output
    "python-calamine", # Fast Excel/ODS reader (Rust-based)
    "polars"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.8.0",
    "ruff>=0.12.0",
    "pre-commit>=3.3.0",
    "ipykernel>=6.25.0",
    "psutil>=7.0.0",
    "mypy>=1.5.0",
    "types-aiofiles",
    "pandas-stubs>=2.0.0"
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
    "pymdown-extensions>=10.0"
]

[project.urls]
Homepage = "https://github.com/Ganymede-Bio/gridgulp"
Repository = "https://github.com/Ganymede-Bio/gridgulp"
Issues = "https://github.com/Ganymede-Bio/gridgulp/issues"

[project.scripts]
gridgulp = "gridgulp.cli:main"

[tool.hatch.build]
sources = ["src"]

[tool.ruff]
line-length = 100
target-version = "py310"
lint.select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
lint.ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG",   # Unused function arguments (common in test fixtures)
    "D",     # Missing docstrings (not needed in tests)
    "S101",  # Use of assert (expected in tests)
    "SIM",   # Some simplifications don't apply well to test code
    "F401",  # Unused imports (may be used for fixtures)
    "F811",  # Redefinition of unused names (common with fixtures)
    "I",     # Import sorting (less strict in tests)
    "E402",  # Module level import not at top of file (due to sys.path manipulation)
]
"examples/**/*.py" = [
    "E402",  # Module level import not at top of file (due to sys.path manipulation)
    "F841",  # Local variable assigned but never used (common in examples)
    "B007",  # Loop control variable not used within loop body
    "E722",  # Do not use bare except (examples may have simple error handling)
]
"scripts/**/*.py" = [
    "E402",  # Module level import not at top of file (due to sys.path manipulation)
    "F841",  # Local variable assigned but never used
    "ARG002", # Unused method argument
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=gridgulp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["src/gridgulp"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[dependency-groups]
dev = [
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.8.0",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = false
namespace_packages = true
explicit_package_bases = true
mypy_path = "src"
plugins = ["pydantic.mypy"]

# Ignore missing imports for packages without type stubs
[[tool.mypy.overrides]]
module = [
    "chardet.*",
    "filetype.*",
    "magika.*",
    "olefile.*",
    "openpyxl.*",
    "polars.*",
    "python_magic.*",
    "rich.*",
    "scipy.*",
    "xlrd.*",
    "python_calamine.*",
    "psutil.*"
]
ignore_missing_imports = true
