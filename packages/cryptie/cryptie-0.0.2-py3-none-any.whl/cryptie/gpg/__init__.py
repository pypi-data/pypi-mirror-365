"""
The ``gpg`` submodule wraps various GnuPG command line functionaity used by
cryptie.

Before starting here, be sure to read the ``INTERNALS.md`` document in this
repository to understand how this tool uses GnuPG.


General notes on wrapping GnuPG
-------------------------------

GnuPG's ``gpg`` command provides several mechanisms for guaranteeing stable and
automation-friendly operation. These largely consist of the following options
which are broadly applicable:

* ``--with-colons`` -- Format output in a machine-readable, ``:``-delimited
  format whose column assignments are stable between releases (but with new
  columns being added over time). Details of (some) command output column
  assignments can be found in GnuPG's `DETAILS`_ documentation.

* ``--no-tty`` -- Force GnuPG to output all messages to stderr, rather than the
  current TTY.

* ``--batch`` -- Forces some commands to refrain from asking questions. This is
  not always appropriate, e.g. for interactive commands.

* ``--command-fd=0`` and ``--status-fd=1`` -- These cause GnuPG to use
  stable, machine-readable status messages and prompts. In particular, these
  make it possible to robustly drive GnuPG's various interactive shells in an
  automated way. See :py:mod:`cryptie.gpg.shell` for some machinery for
  communicating with this. Likewise see GnuPG's `DETAILS`_ documentation for
  details of some of the messages which can be produced.

.. DETAILS: https://github.com/gpg/gnupg/blob/master/doc/DETAILS

Most of the functions in this submodule accept a ``log_file`` argument. If not
None, this file will be populated with a transcript of all ``gpg`` outputs and
cryptie inputs, along with command invocations for the benefit of debugging.

Functions which wrap interactive ``gpg`` commands use the
:py:class:`cryptie.gpg.shell.GPGShell` class to manage this process. See its
documentation for an introduction.


Overview
--------

The major high-level functions are enumerated below and re-exported at the top
level of this submodule:

* Management of ephemeral GnuPG homes

    * :py:func:`ephemeral_gpg_home` -- Creates an ephemeral GPG Home (isolated
      environment) by setting the ``GNUPGHOME`` environment variable.

    * :py:func:`kill_gpg_agent` -- Kills the gpg-agent daemon. (Wraps ``gpgconf
      --kill-gpg-agent``). Useful to prevent conflicting access to a smart
      card.

* Card management

    * :py:func:`gpg_init_card` -- Initialises a GPG smart card (e.g. Yubikey)
      with
      a new Private/Public key pair. (Wraps ``gpg --card-edit``).

    * :py:func:`gpg_change_pin` -- Change a card PIN (Wraps ``gpg
      --change-pin``).

    * :py:func:`gpg_card_status` -- Makes GPG scan for smart cards (e.g.
      Yubikeys), matching up the contained Private keys with any public keys in
      its trust store. Wraps ``gpg --card-status``.

* Software-based keypair generation

    * :py:func:`gpg_gen_key` -- Generates a a new Private/Public key pair in
      software. (Wraps ``gpg --quick-gen-key``).

    * :py:func:`gpg_change_passphrase` -- Change the passphrase of a private
      key defined in software. (Wraps ``gpg --change-passphrase``).

* Importing and exporting of keys from a trust store

    * :py:func:`gpg_export` -- Exports a GPG public key (e.g. so we can extract
      the public key generated by :py:func:`gpg_init_card` for later use).
      Wraps ``gpg --export``.

    * :py:func:`gpg_import` -- Imports a GPG public key (e.g. to load a
      previously exported public key into a new ephemeral GPG home). Wraps
      ``gpg --import``.

    * :py:func:`gpg_import_from_card` -- Imports a GPG public key (using
      :py:func:`gpg_import`) and finds the matching private key on an attached
      smart card and add both to the trust store ready for use (using
      :py:func:`gpg_card_status`).

    * :py:func:`get_key_info` -- Extract basic information about the
      public or private key stored in a key file.

* Encryption and decryption

    * :py:func:`gpg_encrypt` and :py:func:`gpg_decrypt` provide simple data
      encryption and decryption functionality via ``gpg --encrypt`` and ``gpg
      --decrypt``.
"""


from cryptie.gpg.card_edit import gpg_init_card
from cryptie.gpg.card_status import gpg_card_status
from cryptie.gpg.change_pin import PinChangeType, gpg_change_pin
from cryptie.gpg.cryptography import gpg_decrypt, gpg_encrypt
from cryptie.gpg.home import ephemeral_gpg_home, kill_gpg_agent
from cryptie.gpg.keys import (
    KeyType,
    KeyInfo,
    get_key_info,
    gpg_export,
    gpg_import,
    gpg_import_from_card,
    gpg_gen_key,
    gpg_change_passphrase,
)

__all__ = [
    "gpg_init_card",
    "gpg_card_status",
    "PinChangeType",
    "gpg_change_pin",
    "gpg_decrypt",
    "gpg_encrypt",
    "ephemeral_gpg_home",
    "kill_gpg_agent",
    "KeyType",
    "KeyInfo",
    "get_key_info",
    "gpg_export",
    "gpg_import",
    "gpg_import_from_card",
    "gpg_gen_key",
    "gpg_change_passphrase",
]
