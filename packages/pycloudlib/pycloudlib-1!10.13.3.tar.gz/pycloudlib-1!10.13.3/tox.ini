[tox]
# As it may be undesired to make formatting changes, by default only check
envlist = ruff, mypy, py38
skipsdist = true

[common]
envdir = {toxworkdir}/.testenv
deps =
    mypy==0.950
    ruff==0.5.0
    types-mock==5.0.0
    types-pyyaml==6.0.12
    types-requests==2.31.0.6
    types-setuptools==67.3.0
    types-toml==0.10.8
    -rrequirements.txt
    -rtest-requirements.txt

[testenv:pytest]
envdir = {[common]envdir}
deps = {[common]deps}
commands = {envpython} -m pytest --doctest-modules --cov=pycloudlib --cov-branch {posargs:tests/unit_tests}

[testenv:py38]
envdir = {[common]envdir}
deps = {[common]deps}
basepython = python3.8
commands = {[testenv:pytest]commands}

[testenv:py310]
envdir = {[common]envdir}
deps = {[common]deps}
basepython = python3.10
commands = {[testenv:pytest]commands}

[testenv:py312]
envdir = {[common]envdir}
deps = {[common]deps}
basepython = python3.12
commands = {[testenv:pytest]commands}

[testenv:mypy]
envdir = {[common]envdir}
deps =
    {[common]deps}
commands = {envpython} -m mypy {posargs:pycloudlib examples setup.py}

[testenv:ruff]
envdir = {[common]envdir}
deps = {[common]deps}
commands =
    {envpython} -m ruff check {posargs:pycloudlib examples setup.py}
    {envpython} -m ruff format --check {posargs:pycloudlib examples setup.py}

[testenv:format]
envdir = {[common]envdir}
deps = {[common]deps}
commands =
    {envpython} -m ruff format {posargs:pycloudlib examples setup.py}
    {envpython} -m ruff check --fix {posargs:pycloudlib examples setup.py}

[testenv:docs]
# Docs uses a separate environment because the changedir will
# cause tox to recreate the environment.
changedir = docs
deps =
    -rrequirements.txt
    -rtest-requirements.txt
    -rdocs/requirements.txt
commands = sphinx-build -M html "." "_build" -W

[tip]
envdir = {toxworkdir}/.testenv-tip
deps =
    ruff
    -rrequirements.txt

[testenv:tip-ruff]
envdir = {[tip]envdir}
deps = {[tip]deps}
commands = {envpython} -m ruff check -- pycloudlib examples setup.py

[testenv:integration-tests]
commands = {envpython} -m pytest --log-cli-level=INFO -svv {posargs:tests/integration_tests}
deps =
    -rrequirements.txt
    -rtest-requirements.txt

[testenv:integration-tests-fast]
commands = {envpython} -m pytest -n auto --log-cli-level=INFO -svv {posargs:tests/integration_tests}
deps =
    -rrequirements.txt
    -rtest-requirements.txt

[testenv:integration-tests-ci]
commands = {envpython} -m pytest -m ci --log-cli-level=INFO -svv {posargs:tests/integration_tests}
deps =
  -rrequirements.txt
  -rtest-requirements.txt

[testenv:integration-tests-main-check]
# Since we can't use GH secrets from a forked PR, run the cloud-based
# tests after the branch has merged. Better late than never
commands = {envpython} -m pytest -n 5 -m main_check --log-cli-level=DEBUG -svv {posargs:tests/integration_tests}
deps = {[testenv:integration-tests-ci]deps}
passenv =
    GOOGLE_APPLICATION_CREDENTIALS
