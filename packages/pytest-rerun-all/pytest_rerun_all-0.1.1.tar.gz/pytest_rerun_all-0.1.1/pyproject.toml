[tool.poetry]
name = "pytest-rerun-all"
version = "0.1.1"
description = "Rerun testsuite for a certain time or iterations"
authors = ["tb <tb@wodore.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/TBxy/pytest-rerun-all"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS :: MacOS X",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]


[tool.poetry.urls]
"Changelog" = "https://github.com/TBxy/pytest-rerun-all/blob/main/CHANGELOG.md"
"Issues" = "https://github.com/TBxy/pytest-rerun-all/issues"

[tool.poetry.plugins."pytest11"]
"pytest-rerun-all" = "pytest_rerun_all.plugin"

[tool.poetry.dependencies]
python = ">=3.10,<3.14"
pytest = ">=7.0.0"
dateparser = "^1.1"

[tool.poetry.group.dev.dependencies]
tox = ">=4.11.3"
mypy = ">=1.6.0"
pytest-xdist = ">=3.3.1"
coverage = ">=6.5.0"
black = "*"
ruff = "*"
pytest-repeat = "^0.9.3"
icecream = "^2.1.3"
rich = "^13.6"
psutil = "^5.9.6"
mkdocs = "^1.5.3"
pygments = "^2.16.1"
mkdocstrings = {extras = ["python"], version = "^0.23.0"}
mkdocs-material = "^9.4.8"
pytest-store = {git = "https://github.com/TBxy/pytest-store.git",  branch = "main", extras=["pandas"]}


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310", "py311", "py312"]

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    "if typing\\.TYPE_CHECKING:",
]
[tool.coverage.html]
show_contexts = true

[tool.coverage.run]
branch = true
# `parallel` will cause each tox env to put data into a different file, so that we can combine them later
parallel = true
source = ["pytest_rerun_all", "tests"]
dynamic_context = "test_function"

[tool.coverage.paths]
# treat these directories as the same when combining
# the first item is going to be the canonical dir
source = [
    "src/pytest_rerun_all",
    ".tox/*/lib/python*/site-packages/pytest_rerun_all",
]

[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "PT004",  # Use underscore for non-returning fixture (use usefixture instead)
]
target-version = "py38"

unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

isort.required-imports = ["from __future__ import annotations"]


[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
files = "src/pytest_rerun_all/**/*.py"

[[tool.mypy.overrides]]
module = ["parse", "parse_type"]
ignore_missing_imports = true
