[build-system]
requires = ["setuptools>=62", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nbvalx"
version = "0.4.1"
authors = [
    {name = "Francesco Ballarin", email = "francesco.ballarin@unicatt.it"},
]
maintainers = [
    {name = "Francesco Ballarin", email = "francesco.ballarin@unicatt.it"},
]
description = "Collection of pytest utils built on top of nbval"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: POSIX",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
    # list dependencies that are just enough to import nbvalx main module (i.e., nbvalx/jupyter_magics.py).
    # Requirements for other modules (i.e., pytest hooks) are listed as optional dependencies. This allows to have
    # a minimal installation for users who are just willing to use nbvalx in jupyter notebooks.
    "ipython",
    "simpleeval"
]

[project.urls]
homepage = "https://github.com/nbvalx/nbvalx"
repository = "https://github.com/nbvalx/nbvalx"
issues = "https://github.com/nbvalx/nbvalx/issues"
funding = "https://github.com/sponsors/francesco-ballarin"

[project.optional-dependencies]
unit-tests = [
    # this contains optional dependencies that users should have in order to use nbvalx/pytest_hooks_unit_tests.py
    "mpi4py",
    "pytest >= 8.1"
]
notebooks = [
    # this contains optional dependencies that users should have in order to use nbvalx/pytest_hooks_notebooks.py
    "ipyparallel",
    "mpi4py",
    "nbval",
    "pytest >= 8.1"
]
docs = [
    "sphinx"
]
lint = [
    "isort",
    "mypy",
    "nbqa",
    "ruff",
    "yamllint"
]
tests = [
    # not to be confused with unit-tests: this contains requirements to test nbvalx itself, not to use it
    "coverage[toml]",
    "pytest >= 8.1"
]

[tool.isort]
line_length = 120
multi_line_output = 4
order_by_type = false

[tool.mypy]
check_untyped_defs = true
disallow_any_unimported = true
disallow_untyped_defs = true
no_implicit_optional = true
pretty = true
show_error_codes = true
strict = true
warn_return_any = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "ipyparallel",
    "nbformat",
    "nbval.*",
    "simpleeval"
]
ignore_missing_imports = true

[tool.nbqa.process_cells]
mypy = ["register_current_parameters"]
ruff = ["register_current_parameters"]

[tool.pytest.ini_options]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["ANN", "D", "E", "F", "FLY", "ICN", "N", "Q", "RUF", "UP", "W"]
ignore = []
exclude = ["*.ipynb"]

[tool.ruff.lint.per-file-ignores]
"nbvalx/__init__.py" = ["F401"]
"tests/notebooks/data/**/*.py" = ["D100"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 120

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.setuptools.package-data]
nbvalx = ["py.typed"]
