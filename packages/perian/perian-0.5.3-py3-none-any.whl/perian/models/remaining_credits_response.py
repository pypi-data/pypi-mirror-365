# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from perian.models.currency import Currency
from typing import Optional, Set
from typing_extensions import Self

class RemainingCreditsResponse(BaseModel):
    """
    Response model for the remaining credits endpoint.
    """ # noqa: E501
    status: Optional[StrictStr] = 'Success'
    message: Optional[StrictStr] = 'Operation was successful'
    detail: Optional[StrictStr] = 'Remaining credits information retrieved successfully'
    status_code: Optional[StrictInt] = 200
    current_amount: StrictStr
    currency: Currency
    original_amount: StrictStr
    last_calculated: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["status", "message", "detail", "status_code", "current_amount", "currency", "original_amount", "last_calculated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemainingCreditsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if last_calculated (nullable) is None
        # and model_fields_set contains the field
        if self.last_calculated is None and "last_calculated" in self.model_fields_set:
            _dict['last_calculated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemainingCreditsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status") if obj.get("status") is not None else 'Success',
            "message": obj.get("message") if obj.get("message") is not None else 'Operation was successful',
            "detail": obj.get("detail") if obj.get("detail") is not None else 'Remaining credits information retrieved successfully',
            "status_code": obj.get("status_code") if obj.get("status_code") is not None else 200,
            "current_amount": obj.get("current_amount"),
            "currency": obj.get("currency"),
            "original_amount": obj.get("original_amount"),
            "last_calculated": obj.get("last_calculated")
        })
        return _obj


