# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from perian.models.accelerator_query_input import AcceleratorQueryInput
from perian.models.availability_query_input import AvailabilityQueryInput
from perian.models.cpu_query_input import CpuQueryInput
from perian.models.id import Id
from perian.models.memory_query_input import MemoryQueryInput
from perian.models.network_query_input import NetworkQueryInput
from perian.models.operator import Operator
from perian.models.price_query_input import PriceQueryInput
from perian.models.query_options import QueryOptions
from perian.models.region_query_input import RegionQueryInput
from perian.models.storage_query_input import StorageQueryInput
from perian.models.zone_query_input import ZoneQueryInput
from typing import Optional, Set
from typing_extensions import Self

class InstanceTyperQueryView(BaseModel):
    """
    Query for the instance type view attribute.
    """ # noqa: E501
    operator: Optional[Operator] = None
    options: Optional[QueryOptions] = None
    all: Optional[StrictBool] = False
    id: Optional[Id] = None
    region: Optional[RegionQueryInput] = None
    zone: Optional[ZoneQueryInput] = None
    name: Optional[StrictStr] = None
    cpu: Optional[CpuQueryInput] = None
    accelerator: Optional[AcceleratorQueryInput] = None
    ram: Optional[MemoryQueryInput] = None
    storage: Optional[StorageQueryInput] = None
    network: Optional[NetworkQueryInput] = None
    price: Optional[PriceQueryInput] = None
    availability: Optional[AvailabilityQueryInput] = None
    type: Optional[StrictStr] = None
    billing_granularity: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["operator", "options", "all", "id", "region", "zone", "name", "cpu", "accelerator", "ram", "storage", "network", "price", "availability", "type", "billing_granularity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstanceTyperQueryView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict['region'] = self.region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zone
        if self.zone:
            _dict['zone'] = self.zone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cpu
        if self.cpu:
            _dict['cpu'] = self.cpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accelerator
        if self.accelerator:
            _dict['accelerator'] = self.accelerator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ram
        if self.ram:
            _dict['ram'] = self.ram.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['storage'] = self.storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network
        if self.network:
            _dict['network'] = self.network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of availability
        if self.availability:
            _dict['availability'] = self.availability.to_dict()
        # set to None if operator (nullable) is None
        # and model_fields_set contains the field
        if self.operator is None and "operator" in self.model_fields_set:
            _dict['operator'] = None

        # set to None if options (nullable) is None
        # and model_fields_set contains the field
        if self.options is None and "options" in self.model_fields_set:
            _dict['options'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['region'] = None

        # set to None if zone (nullable) is None
        # and model_fields_set contains the field
        if self.zone is None and "zone" in self.model_fields_set:
            _dict['zone'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if cpu (nullable) is None
        # and model_fields_set contains the field
        if self.cpu is None and "cpu" in self.model_fields_set:
            _dict['cpu'] = None

        # set to None if accelerator (nullable) is None
        # and model_fields_set contains the field
        if self.accelerator is None and "accelerator" in self.model_fields_set:
            _dict['accelerator'] = None

        # set to None if ram (nullable) is None
        # and model_fields_set contains the field
        if self.ram is None and "ram" in self.model_fields_set:
            _dict['ram'] = None

        # set to None if storage (nullable) is None
        # and model_fields_set contains the field
        if self.storage is None and "storage" in self.model_fields_set:
            _dict['storage'] = None

        # set to None if network (nullable) is None
        # and model_fields_set contains the field
        if self.network is None and "network" in self.model_fields_set:
            _dict['network'] = None

        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['price'] = None

        # set to None if availability (nullable) is None
        # and model_fields_set contains the field
        if self.availability is None and "availability" in self.model_fields_set:
            _dict['availability'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if billing_granularity (nullable) is None
        # and model_fields_set contains the field
        if self.billing_granularity is None and "billing_granularity" in self.model_fields_set:
            _dict['billing_granularity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstanceTyperQueryView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operator": obj.get("operator"),
            "options": QueryOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "all": obj.get("all") if obj.get("all") is not None else False,
            "id": Id.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "region": RegionQueryInput.from_dict(obj["region"]) if obj.get("region") is not None else None,
            "zone": ZoneQueryInput.from_dict(obj["zone"]) if obj.get("zone") is not None else None,
            "name": obj.get("name"),
            "cpu": CpuQueryInput.from_dict(obj["cpu"]) if obj.get("cpu") is not None else None,
            "accelerator": AcceleratorQueryInput.from_dict(obj["accelerator"]) if obj.get("accelerator") is not None else None,
            "ram": MemoryQueryInput.from_dict(obj["ram"]) if obj.get("ram") is not None else None,
            "storage": StorageQueryInput.from_dict(obj["storage"]) if obj.get("storage") is not None else None,
            "network": NetworkQueryInput.from_dict(obj["network"]) if obj.get("network") is not None else None,
            "price": PriceQueryInput.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "availability": AvailabilityQueryInput.from_dict(obj["availability"]) if obj.get("availability") is not None else None,
            "type": obj.get("type"),
            "billing_granularity": obj.get("billing_granularity")
        })
        return _obj


