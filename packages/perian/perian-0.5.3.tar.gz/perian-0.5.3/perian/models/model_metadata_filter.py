# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModelMetadataFilter(BaseModel):
    """
    Filter model for model metadata queries.
    """ # noqa: E501
    model_type: Optional[StrictStr] = None
    provider: Optional[StrictStr] = None
    size_class: Optional[StrictStr] = None
    supports_function_calling: Optional[StrictBool] = None
    supports_json_mode: Optional[StrictBool] = None
    supports_streaming: Optional[StrictBool] = None
    supports_fine_tuning: Optional[StrictBool] = None
    supports_multimodal: Optional[StrictBool] = None
    min_context_window: Optional[StrictInt] = None
    max_context_window: Optional[StrictInt] = None
    min_latency_ms: Optional[StrictInt] = None
    max_latency_ms: Optional[StrictInt] = None
    safety_level: Optional[StrictStr] = None
    support_level: Optional[StrictStr] = None
    is_deprecated: Optional[StrictBool] = None
    search_query: Optional[StrictStr] = None
    language_code: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["model_type", "provider", "size_class", "supports_function_calling", "supports_json_mode", "supports_streaming", "supports_fine_tuning", "supports_multimodal", "min_context_window", "max_context_window", "min_latency_ms", "max_latency_ms", "safety_level", "support_level", "is_deprecated", "search_query", "language_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelMetadataFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if model_type (nullable) is None
        # and model_fields_set contains the field
        if self.model_type is None and "model_type" in self.model_fields_set:
            _dict['model_type'] = None

        # set to None if provider (nullable) is None
        # and model_fields_set contains the field
        if self.provider is None and "provider" in self.model_fields_set:
            _dict['provider'] = None

        # set to None if size_class (nullable) is None
        # and model_fields_set contains the field
        if self.size_class is None and "size_class" in self.model_fields_set:
            _dict['size_class'] = None

        # set to None if supports_function_calling (nullable) is None
        # and model_fields_set contains the field
        if self.supports_function_calling is None and "supports_function_calling" in self.model_fields_set:
            _dict['supports_function_calling'] = None

        # set to None if supports_json_mode (nullable) is None
        # and model_fields_set contains the field
        if self.supports_json_mode is None and "supports_json_mode" in self.model_fields_set:
            _dict['supports_json_mode'] = None

        # set to None if supports_streaming (nullable) is None
        # and model_fields_set contains the field
        if self.supports_streaming is None and "supports_streaming" in self.model_fields_set:
            _dict['supports_streaming'] = None

        # set to None if supports_fine_tuning (nullable) is None
        # and model_fields_set contains the field
        if self.supports_fine_tuning is None and "supports_fine_tuning" in self.model_fields_set:
            _dict['supports_fine_tuning'] = None

        # set to None if supports_multimodal (nullable) is None
        # and model_fields_set contains the field
        if self.supports_multimodal is None and "supports_multimodal" in self.model_fields_set:
            _dict['supports_multimodal'] = None

        # set to None if min_context_window (nullable) is None
        # and model_fields_set contains the field
        if self.min_context_window is None and "min_context_window" in self.model_fields_set:
            _dict['min_context_window'] = None

        # set to None if max_context_window (nullable) is None
        # and model_fields_set contains the field
        if self.max_context_window is None and "max_context_window" in self.model_fields_set:
            _dict['max_context_window'] = None

        # set to None if min_latency_ms (nullable) is None
        # and model_fields_set contains the field
        if self.min_latency_ms is None and "min_latency_ms" in self.model_fields_set:
            _dict['min_latency_ms'] = None

        # set to None if max_latency_ms (nullable) is None
        # and model_fields_set contains the field
        if self.max_latency_ms is None and "max_latency_ms" in self.model_fields_set:
            _dict['max_latency_ms'] = None

        # set to None if safety_level (nullable) is None
        # and model_fields_set contains the field
        if self.safety_level is None and "safety_level" in self.model_fields_set:
            _dict['safety_level'] = None

        # set to None if support_level (nullable) is None
        # and model_fields_set contains the field
        if self.support_level is None and "support_level" in self.model_fields_set:
            _dict['support_level'] = None

        # set to None if is_deprecated (nullable) is None
        # and model_fields_set contains the field
        if self.is_deprecated is None and "is_deprecated" in self.model_fields_set:
            _dict['is_deprecated'] = None

        # set to None if search_query (nullable) is None
        # and model_fields_set contains the field
        if self.search_query is None and "search_query" in self.model_fields_set:
            _dict['search_query'] = None

        # set to None if language_code (nullable) is None
        # and model_fields_set contains the field
        if self.language_code is None and "language_code" in self.model_fields_set:
            _dict['language_code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelMetadataFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model_type": obj.get("model_type"),
            "provider": obj.get("provider"),
            "size_class": obj.get("size_class"),
            "supports_function_calling": obj.get("supports_function_calling"),
            "supports_json_mode": obj.get("supports_json_mode"),
            "supports_streaming": obj.get("supports_streaming"),
            "supports_fine_tuning": obj.get("supports_fine_tuning"),
            "supports_multimodal": obj.get("supports_multimodal"),
            "min_context_window": obj.get("min_context_window"),
            "max_context_window": obj.get("max_context_window"),
            "min_latency_ms": obj.get("min_latency_ms"),
            "max_latency_ms": obj.get("max_latency_ms"),
            "safety_level": obj.get("safety_level"),
            "support_level": obj.get("support_level"),
            "is_deprecated": obj.get("is_deprecated"),
            "search_query": obj.get("search_query"),
            "language_code": obj.get("language_code")
        })
        return _obj


