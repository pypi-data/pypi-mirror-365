# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RequestLog(BaseModel):
    """
    RequestLog
    """ # noqa: E501
    id: Optional[StrictStr] = None
    organization_id: StrictStr
    timestamp: datetime
    outcome: Optional[StrictStr] = None
    ip: Optional[StrictStr] = None
    user_agent: Optional[StrictStr] = None
    request_url: Optional[StrictStr] = None
    request_method: Optional[StrictStr] = None
    request_payload: Optional[StrictStr] = None
    response_status_code: Optional[StrictInt] = None
    response_body: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "organization_id", "timestamp", "outcome", "ip", "user_agent", "request_url", "request_method", "request_payload", "response_status_code", "response_body"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if outcome (nullable) is None
        # and model_fields_set contains the field
        if self.outcome is None and "outcome" in self.model_fields_set:
            _dict['outcome'] = None

        # set to None if ip (nullable) is None
        # and model_fields_set contains the field
        if self.ip is None and "ip" in self.model_fields_set:
            _dict['ip'] = None

        # set to None if user_agent (nullable) is None
        # and model_fields_set contains the field
        if self.user_agent is None and "user_agent" in self.model_fields_set:
            _dict['user_agent'] = None

        # set to None if request_url (nullable) is None
        # and model_fields_set contains the field
        if self.request_url is None and "request_url" in self.model_fields_set:
            _dict['request_url'] = None

        # set to None if request_method (nullable) is None
        # and model_fields_set contains the field
        if self.request_method is None and "request_method" in self.model_fields_set:
            _dict['request_method'] = None

        # set to None if request_payload (nullable) is None
        # and model_fields_set contains the field
        if self.request_payload is None and "request_payload" in self.model_fields_set:
            _dict['request_payload'] = None

        # set to None if response_status_code (nullable) is None
        # and model_fields_set contains the field
        if self.response_status_code is None and "response_status_code" in self.model_fields_set:
            _dict['response_status_code'] = None

        # set to None if response_body (nullable) is None
        # and model_fields_set contains the field
        if self.response_body is None and "response_body" in self.model_fields_set:
            _dict['response_body'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "organization_id": obj.get("organization_id"),
            "timestamp": obj.get("timestamp"),
            "outcome": obj.get("outcome"),
            "ip": obj.get("ip"),
            "user_agent": obj.get("user_agent"),
            "request_url": obj.get("request_url"),
            "request_method": obj.get("request_method"),
            "request_payload": obj.get("request_payload"),
            "response_status_code": obj.get("response_status_code"),
            "response_body": obj.get("response_body")
        })
        return _obj


