[project]
name = "micoo"
description = "micoo is a command-line tool for easily accessing mise cookbooks"
license = "MIT"
authors = [{ name = "Hasan Sezer Ta≈üan", email = "hasansezertasan@gmail.com" }]
maintainers = [
  { name = "hasansezertasan", email = "hasansezertasan@gmail.com" },
]
dynamic = ["version", "readme"]
keywords = [
  "command-line",
  "cli",
  "mise",
  "boilerplate",
  "template",
  "cookbook",
  "scaffold",
  # TODO @hasansezertasan: Fill in classifiers
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Programming Language :: Python",
  "Topic :: Internet",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development",
  "Topic :: Terminals",
  "Typing :: Typed",
  # TODO @hasansezertasan: Fill in classifiers
]
requires-python = ">=3.8"
dependencies = [
  "gitpython>=3.0.0",
  "platformdirs>=4.0.0",
  "pydantic-settings>=2.8.1",
  "typer>=0.16.0",
]


[project.urls]
Documentation = "https://github.com/hasansezertasan/micoo#readme"
Homepage = "https://github.com/hasansezertasan/micoo"
Source = "https://github.com/hasansezertasan/micoo"


[project.scripts]
micoo = "micoo.main:app"


[dependency-groups]
dev = [
  "tox>=4.25.0",
  "tox-uv>=1.13.1",
  { include-group = "lint" },
  { include-group = "test" },
  { include-group = "tool" },
]
lint = [
  "mypy>=1.14.1",
  "pyright>=1.1.403",
  "ty==0.0.1a16",
  "pyrefly==0.25.1",
  "ruff>=0.12.5",
  "taplo>=0.9.3",
  "typos>=1.34.0",
  "validate-pyproject[all]>=0.24.1",
  "vulture>=2.14",
  "slotscheck>=0.16.5",
]
test = [
  "coverage-enable-subprocess==1.0",
  "coverage[toml]~=7.4",
  "pytest-dependency>=0.6.0",
  "pytest-mock~=3.12",
  "pytest-rerunfailures~=14.0",
  "pytest-xdist[psutil]~=3.5",
  "pytest~=8.1",
]
tool = [
  "bump-my-version==1.2.1",
  "commitizen==3.31.0",
  "git-cliff>=2.9.1",
  "pre-commit==3.5.0",
]


[tool.uv]
cache-keys = [
  { file = "pyproject.toml" },
  { git = { commit = true, tags = true } },
]
# reinstall-package = ["micoo"]

[build-system]
requires = ["hatchling", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"


[tool.hatch.version]
source = "vcs"


[tool.hatch.build]
hooks.vcs.version-file = "src/micoo/_version.py"


[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"


[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"


[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
# Literal TOML strings (single quotes) need no escaping of backslashes.
pattern = '\[(.+?)\]\(((?!https?://)\S+?)\)'
replacement = '[\1](https://github.com/hasansezertasan/micoo/tree/main\g<2>)'


[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
# Regular TOML strings (double quotes) do need escaping.
pattern = "#(\\d+)"
replacement = "[#\\1](https://github.com/hasansezertasan/micoo/issues/\\1)"


[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = '\[!(NOTE|TIP|IMPORTANT|WARNING|CAUTION)\]'
replacement = '**\1**:'


[tool.commitizen]
major_version_zero = true
name = "cz_conventional_commits"
tag_format = "$version"
update_changelog_on_bump = true
version_provider = "scm"
version_scheme = "pep440"


# https://git-cliff.org/docs/configuration
[tool.git-cliff.changelog]
# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
footer = """
<!-- generated by git-cliff -->
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true
# Render body even when there are no releases to process.
render_always = true
# An array of regex based postprocessors to modify the changelog.
postprocessors = []
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"


[tool.git-cliff.git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = true
# Require all commits to be conventional.
# Takes precedence over filter_unconventional.
require_conventional = false
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# An array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = []
# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = false
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->üöÄ Features" },
  { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },
  { message = "^doc", group = "<!-- 3 -->üìö Documentation" },
  { message = "^perf", group = "<!-- 4 -->‚ö° Performance" },
  { message = "^refactor", group = "<!-- 2 -->üöú Refactor" },
  { message = "^style", group = "<!-- 5 -->üé® Styling" },
  { message = "^test", group = "<!-- 6 -->üß™ Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|^ci", group = "<!-- 7 -->‚öôÔ∏è Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 8 -->üõ°Ô∏è Security" },
  { message = "^revert", group = "<!-- 9 -->‚óÄÔ∏è Revert" },
  { message = ".*", group = "<!-- 10 -->üíº Other" },
]
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# An array of link parsers for extracting external references, and turning them into URLs, using regex.
link_parsers = []
# Include only the tags that belong to the current branch.
use_branch_tags = false
# Order releases topologically instead of chronologically.
topo_order = false
# Order releases topologically instead of chronologically.
topo_order_commits = true
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "oldest"
# Process submodules commits
recurse_submodules = false


[tool.pytest.ini_options]
addopts = "-v --tb=short"
testpaths = ["tests"]


[tool.coverage.run]
source_pkgs = ["micoo", "tests"]
branch = true
parallel = true
omit = ["src/micoo/_version.py"]


[tool.coverage.paths]
micoo = ["src/micoo", "*/micoo/src/micoo"]
tests = ["tests", "*/micoo/tests"]


[tool.coverage.report]
# fail_under = 99
# omit = ["src/**/_version.py"]
# show_missing = true
# skip_covered = true
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]


[tool.vulture]
ignore_decorators = ["@app.command"]
min_confidence = 60
paths = ["src", "tests"]


[tool.slotscheck]
strict-imports = false


[tool.ruff]
fix = true
preview = true
show-fixes = true
src = ["src", "tests"]
target-version = "py38"
unsafe-fixes = true


[tool.ruff.analyze]
detect-string-imports = true
preview = true


[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"
preview = true


[tool.ruff.lint]
ignore = ["COM812", "CPY", "D203", "D213", "FIX", "TD"]
fixable = ["ALL"]
logger-objects = ["logging_setup.logger"]
preview = true
select = ["ALL"]


[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ['S101']


[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true


[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true


[tool.ruff.lint.flake8-copyright]
author = "Hasan Sezer Ta≈üan <hasansezertasan@gmail.com>"


[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"


[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.ruff.lint.ruff]
parenthesize-tuple-in-subscript = true


[tool.ruff.lint.mccabe]
max-complexity = 5


[tool.mypy]
files = ["src"]
pretty = true
python_version = "3.8"
show_error_codes = true
strict = true

[tool.pyright]
include = ["src/micoo"]


[tool.ty.src]
include = ["src"]
respect-ignore-files = false


[tool.ty.environment]
python-version = "3.8"


[tool.ty.terminal]
error-on-warning = true


[tool.tox]
env_list = ["style", "run", "3.13", "3.12", "3.11", "3.10", "3.9", "3.8"]
requires = ["tox>=4"]


[tool.tox.env_run_base]
commands = [
  [
    "pytest",
    "-v",
    "--tb=short",
    "--basetemp={env_tmp_dir}",
    { replace = "posargs", default = [
    ], extend = true },
  ],
]
constrain_package_deps = true
dependency_groups = ["test"]
description = "Run the tests under {base_python}"
env_tmp_dir = "{toxworkdir}/tmp/{envname}"
package = "wheel"
runner = "uv-venv-runner"
use_frozen_constraints = true
wheel_build_env = ".pkg"


[tool.pyrefly]
python-version = "3.8"
project-includes = ["src"]


[tool.tox.env.style]
base_python = ["3.8"]
commands = [
  ["ruff", "check"],
  ["ruff", "format"],
  ["mypy", "--python-version", "3.9"],
  ["mypy", "--python-version", "3.13"],
  ["pyright"],
  ["ty", "check"],
  ["pyrefly", "check"],
  ["vulture"],
  # [
  #   "slotscheck",
  #   "src",
  # ],
  ["taplo", "lint"],
  ["taplo", "format"],
  ["validate-pyproject", "pyproject.toml"],
  ["typos", "--diff"],
]
runner = "uv-venv-runner"
dependency_groups = ["lint"]
description = "Run Linters and Formatters"


[tool.tox.env.run]
commands = [["micoo", "version", { replace = "posargs", extend = true }]]
description = "Run the application"
