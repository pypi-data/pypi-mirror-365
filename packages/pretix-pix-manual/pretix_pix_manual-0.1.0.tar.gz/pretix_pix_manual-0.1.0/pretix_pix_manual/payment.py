import base64
import re
import uuid
from collections import OrderedDict
from io import BytesIO

import qrcode
from django import forms
from django.core.exceptions import ValidationError
from django.template.loader import get_template
from django.utils.translation import gettext_lazy as _

from pretix.base.payment import BasePaymentProvider
from pretix_pix_manual.pix import Pix


def is_valid_pix_key(key):
    # Email regex
    email_regex = re.compile(r"^[^@]+@[^@]+\.[^@]+$")
    if email_regex.match(key):
        return True

    # CPF: 11 digits
    if re.fullmatch(r"\d{11}", key):
        return True

    # CNPJ: 14 digits
    if re.fullmatch(r"\d{14}", key):
        return True

    # Random key: UUID format
    try:
        _ = uuid.UUID(key)
        return True
    except ValueError:
        pass

    return False


class PixManual(BasePaymentProvider):
    identifier = "pix_manual"
    verbose_name = _("Brazilian Pix - Manual processing")

    @property
    def settings_form_fields(self):
        default_form_fields = list(super().settings_form_fields.items())
        custom_keys = [
            (
                "_pix_key",
                forms.CharField(
                    label=_("Pix key"),
                    help_text=_(
                        "Pix key that will be used to receive payments. "
                        "It can be an email address, phone number, CNPJ, "
                        "CPF, or a random key generated by your bank."
                    ),
                    required=True,
                ),
            ),
            (
                "_proof_of_payment_email",
                forms.EmailField(
                    label=_("Proof of payment e-mail"),
                    help_text=_(
                        "Email address that customers should use to send proof of payment",
                    ),
                    required=True,
                ),
            ),
            (
                "_merchant_city",
                forms.CharField(
                    label=_("Merchant city"),
                    help_text=_("City of payment beneficiary."),
                    required=False,
                    max_length=15,
                ),
            ),
            (
                "_merchant_name",
                forms.CharField(
                    label=_("Merchant name"),
                    help_text=_("Name of payment beneficiary"),
                    required=False,
                    max_length=25,
                ),
            ),
        ]
        return OrderedDict(custom_keys + default_form_fields)

    def settings_form_clean(self, cleaned_data):
        pix_key = cleaned_data.get("payment_pix_manual__pix_key")
        if not is_valid_pix_key(pix_key):
            raise ValidationError(
                {"payment_pix_manual__pix_key": _("Please provide a valid Pix key.")}
            )

        return cleaned_data

    def settings_content_render(self, request):
        return _(
            "This payment method will generate a Pix code with order information "
            "that your customer can use to make the payment. Payment confirmation, "
            "cancellations, and refunds must be done manually."
        )

    @property
    def test_mode_message(self):
        return _(
            "In test mode, you can just manually mark this order as paid in the backend "
            "after it has been created."
        )

    def payment_is_valid_session(self, request):
        return True

    def checkout_confirm_render(self, request, order=None, info_data=None):
        template = get_template("pretix_pix_manual/checkout_confirm.html")
        return template.render({})

    def _generate_pix_code(self, payment):
        pix_key = self.settings.get("_pix_key")
        merchant_city = self.settings.get("_merchant_city") or ""
        merchant_name = self.settings.get("_merchant_name") or ""
        amount = str(payment.amount)

        pix = Pix()
        pix.set_pixkey(pix_key)
        pix.set_amount(amount)
        pix.set_merchant_city(merchant_city)
        pix.set_merchant_name(merchant_name)
        pix.set_txid(payment.order.code)
        pix_code = str(pix)

        return pix_code

    def order_pending_mail_render(self, order, payment):
        pix_code = self._generate_pix_code(payment)
        proof_of_payment_email = self.settings.get("_proof_of_payment_email")

        return _(
            f"""To make the payment, copy and paste the following Pix code into your banking app.

{pix_code}

After making payment, send proof of payment to {proof_of_payment_email}, including your order code {payment.order.code} in the subject line."""
        )

    def payment_pending_render(self, request, payment):
        pix_code = self._generate_pix_code(payment)
        proof_of_payment_email = self.settings.get("_proof_of_payment_email")

        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_M,
            box_size=6,
            border=4,
        )
        qr.add_data(pix_code)
        qr.make(fit=True)
        qr_code_img = qr.make_image(fill_color="black", back_color="white")

        buffered = BytesIO()
        qr_code_img.save(buffered, format="PNG")
        img_str = base64.b64encode(buffered.getvalue())
        base64_qr_code = f"data:image/png;base64,{img_str.decode()}"

        template = get_template("pretix_pix_manual/payment_pending.html")
        ctx = {
            "pix_code": pix_code,
            "base64_qr_code": base64_qr_code,
            "order_code": payment.order.code,
            "proof_of_payment_email": proof_of_payment_email,
            "contact_mail": self.event.settings.get("contact_mail"),
        }
        return template.render(ctx, request=request)
