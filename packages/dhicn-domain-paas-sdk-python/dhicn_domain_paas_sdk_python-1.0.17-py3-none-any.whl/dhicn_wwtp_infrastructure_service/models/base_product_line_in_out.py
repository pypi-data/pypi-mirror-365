# coding: utf-8

"""
    wwtp-paas-infrastructure-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_infrastructure_service.configuration import Configuration


class BaseProductLineInOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'production_line_code': 'str',
        'name': 'str',
        'inlet': 'str',
        'inlet_name': 'str',
        'outlet': 'str',
        'outlet_name': 'str',
        'hrt_code': 'str',
        'hrt': 'float',
        'model_name': 'str',
        'dosage_group': 'str',
        'dosage_category': 'str'
    }

    attribute_map = {
        'id': 'id',
        'production_line_code': 'productionLineCode',
        'name': 'name',
        'inlet': 'inlet',
        'inlet_name': 'inletName',
        'outlet': 'outlet',
        'outlet_name': 'outletName',
        'hrt_code': 'hrtCode',
        'hrt': 'hrt',
        'model_name': 'modelName',
        'dosage_group': 'dosageGroup',
        'dosage_category': 'dosageCategory'
    }

    def __init__(self, id=None, production_line_code=None, name=None, inlet=None, inlet_name=None, outlet=None, outlet_name=None, hrt_code=None, hrt=None, model_name=None, dosage_group=None, dosage_category=None, local_vars_configuration=None):  # noqa: E501
        """BaseProductLineInOut - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._production_line_code = None
        self._name = None
        self._inlet = None
        self._inlet_name = None
        self._outlet = None
        self._outlet_name = None
        self._hrt_code = None
        self._hrt = None
        self._model_name = None
        self._dosage_group = None
        self._dosage_category = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.production_line_code = production_line_code
        self.name = name
        self.inlet = inlet
        self.inlet_name = inlet_name
        self.outlet = outlet
        self.outlet_name = outlet_name
        self.hrt_code = hrt_code
        if hrt is not None:
            self.hrt = hrt
        self.model_name = model_name
        self.dosage_group = dosage_group
        self.dosage_category = dosage_category

    @property
    def id(self):
        """Gets the id of this BaseProductLineInOut.  # noqa: E501


        :return: The id of this BaseProductLineInOut.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseProductLineInOut.


        :param id: The id of this BaseProductLineInOut.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def production_line_code(self):
        """Gets the production_line_code of this BaseProductLineInOut.  # noqa: E501

        工艺线代码 product line code  # noqa: E501

        :return: The production_line_code of this BaseProductLineInOut.  # noqa: E501
        :rtype: str
        """
        return self._production_line_code

    @production_line_code.setter
    def production_line_code(self, production_line_code):
        """Sets the production_line_code of this BaseProductLineInOut.

        工艺线代码 product line code  # noqa: E501

        :param production_line_code: The production_line_code of this BaseProductLineInOut.  # noqa: E501
        :type: str
        """

        self._production_line_code = production_line_code

    @property
    def name(self):
        """Gets the name of this BaseProductLineInOut.  # noqa: E501

        工艺线名称 product line name  # noqa: E501

        :return: The name of this BaseProductLineInOut.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseProductLineInOut.

        工艺线名称 product line name  # noqa: E501

        :param name: The name of this BaseProductLineInOut.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def inlet(self):
        """Gets the inlet of this BaseProductLineInOut.  # noqa: E501

        进水口代码 inlet code  # noqa: E501

        :return: The inlet of this BaseProductLineInOut.  # noqa: E501
        :rtype: str
        """
        return self._inlet

    @inlet.setter
    def inlet(self, inlet):
        """Sets the inlet of this BaseProductLineInOut.

        进水口代码 inlet code  # noqa: E501

        :param inlet: The inlet of this BaseProductLineInOut.  # noqa: E501
        :type: str
        """

        self._inlet = inlet

    @property
    def inlet_name(self):
        """Gets the inlet_name of this BaseProductLineInOut.  # noqa: E501

        进水口名称  # noqa: E501

        :return: The inlet_name of this BaseProductLineInOut.  # noqa: E501
        :rtype: str
        """
        return self._inlet_name

    @inlet_name.setter
    def inlet_name(self, inlet_name):
        """Sets the inlet_name of this BaseProductLineInOut.

        进水口名称  # noqa: E501

        :param inlet_name: The inlet_name of this BaseProductLineInOut.  # noqa: E501
        :type: str
        """

        self._inlet_name = inlet_name

    @property
    def outlet(self):
        """Gets the outlet of this BaseProductLineInOut.  # noqa: E501

        出水口代码 outlet code  # noqa: E501

        :return: The outlet of this BaseProductLineInOut.  # noqa: E501
        :rtype: str
        """
        return self._outlet

    @outlet.setter
    def outlet(self, outlet):
        """Sets the outlet of this BaseProductLineInOut.

        出水口代码 outlet code  # noqa: E501

        :param outlet: The outlet of this BaseProductLineInOut.  # noqa: E501
        :type: str
        """

        self._outlet = outlet

    @property
    def outlet_name(self):
        """Gets the outlet_name of this BaseProductLineInOut.  # noqa: E501

        出水口名称  # noqa: E501

        :return: The outlet_name of this BaseProductLineInOut.  # noqa: E501
        :rtype: str
        """
        return self._outlet_name

    @outlet_name.setter
    def outlet_name(self, outlet_name):
        """Sets the outlet_name of this BaseProductLineInOut.

        出水口名称  # noqa: E501

        :param outlet_name: The outlet_name of this BaseProductLineInOut.  # noqa: E501
        :type: str
        """

        self._outlet_name = outlet_name

    @property
    def hrt_code(self):
        """Gets the hrt_code of this BaseProductLineInOut.  # noqa: E501

        HRT代码 hrt code  # noqa: E501

        :return: The hrt_code of this BaseProductLineInOut.  # noqa: E501
        :rtype: str
        """
        return self._hrt_code

    @hrt_code.setter
    def hrt_code(self, hrt_code):
        """Sets the hrt_code of this BaseProductLineInOut.

        HRT代码 hrt code  # noqa: E501

        :param hrt_code: The hrt_code of this BaseProductLineInOut.  # noqa: E501
        :type: str
        """

        self._hrt_code = hrt_code

    @property
    def hrt(self):
        """Gets the hrt of this BaseProductLineInOut.  # noqa: E501

        水力停留时间（单位：小时） hrt value in hour  # noqa: E501

        :return: The hrt of this BaseProductLineInOut.  # noqa: E501
        :rtype: float
        """
        return self._hrt

    @hrt.setter
    def hrt(self, hrt):
        """Sets the hrt of this BaseProductLineInOut.

        水力停留时间（单位：小时） hrt value in hour  # noqa: E501

        :param hrt: The hrt of this BaseProductLineInOut.  # noqa: E501
        :type: float
        """

        self._hrt = hrt

    @property
    def model_name(self):
        """Gets the model_name of this BaseProductLineInOut.  # noqa: E501

        模板模型名称 template model name  # noqa: E501

        :return: The model_name of this BaseProductLineInOut.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this BaseProductLineInOut.

        模板模型名称 template model name  # noqa: E501

        :param model_name: The model_name of this BaseProductLineInOut.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def dosage_group(self):
        """Gets the dosage_group of this BaseProductLineInOut.  # noqa: E501

        智能加药分组 dosage group  # noqa: E501

        :return: The dosage_group of this BaseProductLineInOut.  # noqa: E501
        :rtype: str
        """
        return self._dosage_group

    @dosage_group.setter
    def dosage_group(self, dosage_group):
        """Sets the dosage_group of this BaseProductLineInOut.

        智能加药分组 dosage group  # noqa: E501

        :param dosage_group: The dosage_group of this BaseProductLineInOut.  # noqa: E501
        :type: str
        """

        self._dosage_group = dosage_group

    @property
    def dosage_category(self):
        """Gets the dosage_category of this BaseProductLineInOut.  # noqa: E501

        包含加药的类型，逗号分隔 dosing type, seperated by comma  # noqa: E501

        :return: The dosage_category of this BaseProductLineInOut.  # noqa: E501
        :rtype: str
        """
        return self._dosage_category

    @dosage_category.setter
    def dosage_category(self, dosage_category):
        """Sets the dosage_category of this BaseProductLineInOut.

        包含加药的类型，逗号分隔 dosing type, seperated by comma  # noqa: E501

        :param dosage_category: The dosage_category of this BaseProductLineInOut.  # noqa: E501
        :type: str
        """

        self._dosage_category = dosage_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseProductLineInOut):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseProductLineInOut):
            return True

        return self.to_dict() != other.to_dict()
