# coding: utf-8

"""
    wwtp-paas-infrastructure-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_infrastructure_service.configuration import Configuration


class GetAssemblyConfigInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'point_type_code': 'str',
        'point_type': 'str',
        'model_name': 'str',
        'codes': 'list[str]',
        'is_input_point': 'bool',
        'ext_info': 'str',
        'product_line': 'str'
    }

    attribute_map = {
        'point_type_code': 'pointTypeCode',
        'point_type': 'pointType',
        'model_name': 'modelName',
        'codes': 'codes',
        'is_input_point': 'isInputPoint',
        'ext_info': 'extInfo',
        'product_line': 'productLine'
    }

    def __init__(self, point_type_code=None, point_type=None, model_name=None, codes=None, is_input_point=None, ext_info=None, product_line=None, local_vars_configuration=None):  # noqa: E501
        """GetAssemblyConfigInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._point_type_code = None
        self._point_type = None
        self._model_name = None
        self._codes = None
        self._is_input_point = None
        self._ext_info = None
        self._product_line = None
        self.discriminator = None

        self.point_type_code = point_type_code
        self.point_type = point_type
        self.model_name = model_name
        self.codes = codes
        self.is_input_point = is_input_point
        self.ext_info = ext_info
        self.product_line = product_line

    @property
    def point_type_code(self):
        """Gets the point_type_code of this GetAssemblyConfigInput.  # noqa: E501

        点位类型编码  # noqa: E501

        :return: The point_type_code of this GetAssemblyConfigInput.  # noqa: E501
        :rtype: str
        """
        return self._point_type_code

    @point_type_code.setter
    def point_type_code(self, point_type_code):
        """Sets the point_type_code of this GetAssemblyConfigInput.

        点位类型编码  # noqa: E501

        :param point_type_code: The point_type_code of this GetAssemblyConfigInput.  # noqa: E501
        :type: str
        """

        self._point_type_code = point_type_code

    @property
    def point_type(self):
        """Gets the point_type of this GetAssemblyConfigInput.  # noqa: E501

        点位类型 point type  # noqa: E501

        :return: The point_type of this GetAssemblyConfigInput.  # noqa: E501
        :rtype: str
        """
        return self._point_type

    @point_type.setter
    def point_type(self, point_type):
        """Sets the point_type of this GetAssemblyConfigInput.

        点位类型 point type  # noqa: E501

        :param point_type: The point_type of this GetAssemblyConfigInput.  # noqa: E501
        :type: str
        """

        self._point_type = point_type

    @property
    def model_name(self):
        """Gets the model_name of this GetAssemblyConfigInput.  # noqa: E501

        模板模型名称（即模板方案名称） template model name  # noqa: E501

        :return: The model_name of this GetAssemblyConfigInput.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this GetAssemblyConfigInput.

        模板模型名称（即模板方案名称） template model name  # noqa: E501

        :param model_name: The model_name of this GetAssemblyConfigInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and model_name is None:  # noqa: E501
            raise ValueError("Invalid value for `model_name`, must not be `None`")  # noqa: E501

        self._model_name = model_name

    @property
    def codes(self):
        """Gets the codes of this GetAssemblyConfigInput.  # noqa: E501

        点位编码 codes  # noqa: E501

        :return: The codes of this GetAssemblyConfigInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this GetAssemblyConfigInput.

        点位编码 codes  # noqa: E501

        :param codes: The codes of this GetAssemblyConfigInput.  # noqa: E501
        :type: list[str]
        """

        self._codes = codes

    @property
    def is_input_point(self):
        """Gets the is_input_point of this GetAssemblyConfigInput.  # noqa: E501

        是否在线点位 if it is an online point  # noqa: E501

        :return: The is_input_point of this GetAssemblyConfigInput.  # noqa: E501
        :rtype: bool
        """
        return self._is_input_point

    @is_input_point.setter
    def is_input_point(self, is_input_point):
        """Sets the is_input_point of this GetAssemblyConfigInput.

        是否在线点位 if it is an online point  # noqa: E501

        :param is_input_point: The is_input_point of this GetAssemblyConfigInput.  # noqa: E501
        :type: bool
        """

        self._is_input_point = is_input_point

    @property
    def ext_info(self):
        """Gets the ext_info of this GetAssemblyConfigInput.  # noqa: E501

        扩展信息，生化池序号 extend information for biochemical pool index  # noqa: E501

        :return: The ext_info of this GetAssemblyConfigInput.  # noqa: E501
        :rtype: str
        """
        return self._ext_info

    @ext_info.setter
    def ext_info(self, ext_info):
        """Sets the ext_info of this GetAssemblyConfigInput.

        扩展信息，生化池序号 extend information for biochemical pool index  # noqa: E501

        :param ext_info: The ext_info of this GetAssemblyConfigInput.  # noqa: E501
        :type: str
        """

        self._ext_info = ext_info

    @property
    def product_line(self):
        """Gets the product_line of this GetAssemblyConfigInput.  # noqa: E501

        生产线 product line  # noqa: E501

        :return: The product_line of this GetAssemblyConfigInput.  # noqa: E501
        :rtype: str
        """
        return self._product_line

    @product_line.setter
    def product_line(self, product_line):
        """Sets the product_line of this GetAssemblyConfigInput.

        生产线 product line  # noqa: E501

        :param product_line: The product_line of this GetAssemblyConfigInput.  # noqa: E501
        :type: str
        """

        self._product_line = product_line

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAssemblyConfigInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetAssemblyConfigInput):
            return True

        return self.to_dict() != other.to_dict()
