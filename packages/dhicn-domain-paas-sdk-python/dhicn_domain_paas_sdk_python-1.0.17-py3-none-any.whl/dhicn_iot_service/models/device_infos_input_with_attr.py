# coding: utf-8

"""
    IoT服务

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_iot_service.configuration import Configuration


class DeviceInfosInputWithAttr(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key_words': 'str',
        'page_index': 'int',
        'page_size': 'int',
        'sort_property': 'int',
        'sort_order': 'int',
        'type': 'str',
        'attributes': 'list[AttributesParamItem]'
    }

    attribute_map = {
        'key_words': 'keyWords',
        'page_index': 'pageIndex',
        'page_size': 'pageSize',
        'sort_property': 'sortProperty',
        'sort_order': 'sortOrder',
        'type': 'type',
        'attributes': 'attributes'
    }

    def __init__(self, key_words=None, page_index=None, page_size=None, sort_property=None, sort_order=None, type=None, attributes=None, local_vars_configuration=None):  # noqa: E501
        """DeviceInfosInputWithAttr - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key_words = None
        self._page_index = None
        self._page_size = None
        self._sort_property = None
        self._sort_order = None
        self._type = None
        self._attributes = None
        self.discriminator = None

        self.key_words = key_words
        if page_index is not None:
            self.page_index = page_index
        if page_size is not None:
            self.page_size = page_size
        self.sort_property = sort_property
        self.sort_order = sort_order
        self.type = type
        self.attributes = attributes

    @property
    def key_words(self):
        """Gets the key_words of this DeviceInfosInputWithAttr.  # noqa: E501


        :return: The key_words of this DeviceInfosInputWithAttr.  # noqa: E501
        :rtype: str
        """
        return self._key_words

    @key_words.setter
    def key_words(self, key_words):
        """Sets the key_words of this DeviceInfosInputWithAttr.


        :param key_words: The key_words of this DeviceInfosInputWithAttr.  # noqa: E501
        :type: str
        """

        self._key_words = key_words

    @property
    def page_index(self):
        """Gets the page_index of this DeviceInfosInputWithAttr.  # noqa: E501


        :return: The page_index of this DeviceInfosInputWithAttr.  # noqa: E501
        :rtype: int
        """
        return self._page_index

    @page_index.setter
    def page_index(self, page_index):
        """Sets the page_index of this DeviceInfosInputWithAttr.


        :param page_index: The page_index of this DeviceInfosInputWithAttr.  # noqa: E501
        :type: int
        """

        self._page_index = page_index

    @property
    def page_size(self):
        """Gets the page_size of this DeviceInfosInputWithAttr.  # noqa: E501


        :return: The page_size of this DeviceInfosInputWithAttr.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this DeviceInfosInputWithAttr.


        :param page_size: The page_size of this DeviceInfosInputWithAttr.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def sort_property(self):
        """Gets the sort_property of this DeviceInfosInputWithAttr.  # noqa: E501

        用于排序的属性 sort attribute:  0-createdTime,  1-label,  2-name,  # noqa: E501

        :return: The sort_property of this DeviceInfosInputWithAttr.  # noqa: E501
        :rtype: int
        """
        return self._sort_property

    @sort_property.setter
    def sort_property(self, sort_property):
        """Sets the sort_property of this DeviceInfosInputWithAttr.

        用于排序的属性 sort attribute:  0-createdTime,  1-label,  2-name,  # noqa: E501

        :param sort_property: The sort_property of this DeviceInfosInputWithAttr.  # noqa: E501
        :type: int
        """
        allowed_values = [None,0, 1, 2]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sort_property not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sort_property` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_property, allowed_values)
            )

        self._sort_property = sort_property

    @property
    def sort_order(self):
        """Gets the sort_order of this DeviceInfosInputWithAttr.  # noqa: E501

        排序的方式 sort order:  0-ASC,  1-DESC  # noqa: E501

        :return: The sort_order of this DeviceInfosInputWithAttr.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this DeviceInfosInputWithAttr.

        排序的方式 sort order:  0-ASC,  1-DESC  # noqa: E501

        :param sort_order: The sort_order of this DeviceInfosInputWithAttr.  # noqa: E501
        :type: int
        """
        allowed_values = [None,0, 1]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sort_order not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    @property
    def type(self):
        """Gets the type of this DeviceInfosInputWithAttr.  # noqa: E501

        设备类型  # noqa: E501

        :return: The type of this DeviceInfosInputWithAttr.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeviceInfosInputWithAttr.

        设备类型  # noqa: E501

        :param type: The type of this DeviceInfosInputWithAttr.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def attributes(self):
        """Gets the attributes of this DeviceInfosInputWithAttr.  # noqa: E501


        :return: The attributes of this DeviceInfosInputWithAttr.  # noqa: E501
        :rtype: list[AttributesParamItem]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this DeviceInfosInputWithAttr.


        :param attributes: The attributes of this DeviceInfosInputWithAttr.  # noqa: E501
        :type: list[AttributesParamItem]
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInfosInputWithAttr):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceInfosInputWithAttr):
            return True

        return self.to_dict() != other.to_dict()
