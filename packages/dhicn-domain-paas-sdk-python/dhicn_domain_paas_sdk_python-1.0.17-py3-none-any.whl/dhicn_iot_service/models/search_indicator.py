# coding: utf-8

"""
    IoT服务

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_iot_service.configuration import Configuration


class SearchIndicator(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_search_measure': 'bool',
        'is_search_simul': 'bool',
        'indicator': 'str',
        'device_code': 'str',
        'library_id': 'str',
        'label': 'str',
        'show_name': 'str',
        'unit': 'str'
    }

    attribute_map = {
        'is_search_measure': 'isSearchMeasure',
        'is_search_simul': 'isSearchSimul',
        'indicator': 'indicator',
        'device_code': 'deviceCode',
        'library_id': 'libraryId',
        'label': 'label',
        'show_name': 'showName',
        'unit': 'unit'
    }

    def __init__(self, is_search_measure=None, is_search_simul=None, indicator=None, device_code=None, library_id=None, label=None, show_name=None, unit=None, local_vars_configuration=None):  # noqa: E501
        """SearchIndicator - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_search_measure = None
        self._is_search_simul = None
        self._indicator = None
        self._device_code = None
        self._library_id = None
        self._label = None
        self._show_name = None
        self._unit = None
        self.discriminator = None

        if is_search_measure is not None:
            self.is_search_measure = is_search_measure
        if is_search_simul is not None:
            self.is_search_simul = is_search_simul
        self.indicator = indicator
        self.device_code = device_code
        self.library_id = library_id
        self.label = label
        self.show_name = show_name
        self.unit = unit

    @property
    def is_search_measure(self):
        """Gets the is_search_measure of this SearchIndicator.  # noqa: E501


        :return: The is_search_measure of this SearchIndicator.  # noqa: E501
        :rtype: bool
        """
        return self._is_search_measure

    @is_search_measure.setter
    def is_search_measure(self, is_search_measure):
        """Sets the is_search_measure of this SearchIndicator.


        :param is_search_measure: The is_search_measure of this SearchIndicator.  # noqa: E501
        :type: bool
        """

        self._is_search_measure = is_search_measure

    @property
    def is_search_simul(self):
        """Gets the is_search_simul of this SearchIndicator.  # noqa: E501


        :return: The is_search_simul of this SearchIndicator.  # noqa: E501
        :rtype: bool
        """
        return self._is_search_simul

    @is_search_simul.setter
    def is_search_simul(self, is_search_simul):
        """Sets the is_search_simul of this SearchIndicator.


        :param is_search_simul: The is_search_simul of this SearchIndicator.  # noqa: E501
        :type: bool
        """

        self._is_search_simul = is_search_simul

    @property
    def indicator(self):
        """Gets the indicator of this SearchIndicator.  # noqa: E501


        :return: The indicator of this SearchIndicator.  # noqa: E501
        :rtype: str
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator):
        """Sets the indicator of this SearchIndicator.


        :param indicator: The indicator of this SearchIndicator.  # noqa: E501
        :type: str
        """

        self._indicator = indicator

    @property
    def device_code(self):
        """Gets the device_code of this SearchIndicator.  # noqa: E501

        设备名称,若当前项目下Indicator有重复,设备名称必传  # noqa: E501

        :return: The device_code of this SearchIndicator.  # noqa: E501
        :rtype: str
        """
        return self._device_code

    @device_code.setter
    def device_code(self, device_code):
        """Sets the device_code of this SearchIndicator.

        设备名称,若当前项目下Indicator有重复,设备名称必传  # noqa: E501

        :param device_code: The device_code of this SearchIndicator.  # noqa: E501
        :type: str
        """

        self._device_code = device_code

    @property
    def library_id(self):
        """Gets the library_id of this SearchIndicator.  # noqa: E501


        :return: The library_id of this SearchIndicator.  # noqa: E501
        :rtype: str
        """
        return self._library_id

    @library_id.setter
    def library_id(self, library_id):
        """Sets the library_id of this SearchIndicator.


        :param library_id: The library_id of this SearchIndicator.  # noqa: E501
        :type: str
        """

        self._library_id = library_id

    @property
    def label(self):
        """Gets the label of this SearchIndicator.  # noqa: E501


        :return: The label of this SearchIndicator.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SearchIndicator.


        :param label: The label of this SearchIndicator.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def show_name(self):
        """Gets the show_name of this SearchIndicator.  # noqa: E501


        :return: The show_name of this SearchIndicator.  # noqa: E501
        :rtype: str
        """
        return self._show_name

    @show_name.setter
    def show_name(self, show_name):
        """Sets the show_name of this SearchIndicator.


        :param show_name: The show_name of this SearchIndicator.  # noqa: E501
        :type: str
        """

        self._show_name = show_name

    @property
    def unit(self):
        """Gets the unit of this SearchIndicator.  # noqa: E501


        :return: The unit of this SearchIndicator.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SearchIndicator.


        :param unit: The unit of this SearchIndicator.  # noqa: E501
        :type: str
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchIndicator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchIndicator):
            return True

        return self.to_dict() != other.to_dict()
