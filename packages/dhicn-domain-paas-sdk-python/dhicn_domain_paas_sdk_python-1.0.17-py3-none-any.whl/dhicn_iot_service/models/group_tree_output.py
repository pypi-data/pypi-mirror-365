# coding: utf-8

"""
    IoT服务

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_iot_service.configuration import Configuration


class GroupTreeOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'group_name': 'str',
        'level_code': 'str',
        'parent_level_code': 'str',
        'equipment_ids': 'list[str]',
        'children': 'list[GroupTreeOutput]'
    }

    attribute_map = {
        'id': 'id',
        'group_name': 'groupName',
        'level_code': 'levelCode',
        'parent_level_code': 'parentLevelCode',
        'equipment_ids': 'equipmentIds',
        'children': 'children'
    }

    def __init__(self, id=None, group_name=None, level_code=None, parent_level_code=None, equipment_ids=None, children=None, local_vars_configuration=None):  # noqa: E501
        """GroupTreeOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._group_name = None
        self._level_code = None
        self._parent_level_code = None
        self._equipment_ids = None
        self._children = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.group_name = group_name
        self.level_code = level_code
        self.parent_level_code = parent_level_code
        self.equipment_ids = equipment_ids
        self.children = children

    @property
    def id(self):
        """Gets the id of this GroupTreeOutput.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this GroupTreeOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupTreeOutput.

        Id  # noqa: E501

        :param id: The id of this GroupTreeOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def group_name(self):
        """Gets the group_name of this GroupTreeOutput.  # noqa: E501

        分组名称  # noqa: E501

        :return: The group_name of this GroupTreeOutput.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GroupTreeOutput.

        分组名称  # noqa: E501

        :param group_name: The group_name of this GroupTreeOutput.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def level_code(self):
        """Gets the level_code of this GroupTreeOutput.  # noqa: E501

        层级编码 如: 00010001  # noqa: E501

        :return: The level_code of this GroupTreeOutput.  # noqa: E501
        :rtype: str
        """
        return self._level_code

    @level_code.setter
    def level_code(self, level_code):
        """Sets the level_code of this GroupTreeOutput.

        层级编码 如: 00010001  # noqa: E501

        :param level_code: The level_code of this GroupTreeOutput.  # noqa: E501
        :type: str
        """

        self._level_code = level_code

    @property
    def parent_level_code(self):
        """Gets the parent_level_code of this GroupTreeOutput.  # noqa: E501

        父级层级编码 0001 可空,空代表顶级  # noqa: E501

        :return: The parent_level_code of this GroupTreeOutput.  # noqa: E501
        :rtype: str
        """
        return self._parent_level_code

    @parent_level_code.setter
    def parent_level_code(self, parent_level_code):
        """Sets the parent_level_code of this GroupTreeOutput.

        父级层级编码 0001 可空,空代表顶级  # noqa: E501

        :param parent_level_code: The parent_level_code of this GroupTreeOutput.  # noqa: E501
        :type: str
        """

        self._parent_level_code = parent_level_code

    @property
    def equipment_ids(self):
        """Gets the equipment_ids of this GroupTreeOutput.  # noqa: E501

        资产或设备id，关联iot中的资产id或设备id  # noqa: E501

        :return: The equipment_ids of this GroupTreeOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._equipment_ids

    @equipment_ids.setter
    def equipment_ids(self, equipment_ids):
        """Sets the equipment_ids of this GroupTreeOutput.

        资产或设备id，关联iot中的资产id或设备id  # noqa: E501

        :param equipment_ids: The equipment_ids of this GroupTreeOutput.  # noqa: E501
        :type: list[str]
        """

        self._equipment_ids = equipment_ids

    @property
    def children(self):
        """Gets the children of this GroupTreeOutput.  # noqa: E501


        :return: The children of this GroupTreeOutput.  # noqa: E501
        :rtype: list[GroupTreeOutput]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this GroupTreeOutput.


        :param children: The children of this GroupTreeOutput.  # noqa: E501
        :type: list[GroupTreeOutput]
        """

        self._children = children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupTreeOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupTreeOutput):
            return True

        return self.to_dict() != other.to_dict()
