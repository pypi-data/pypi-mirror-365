# coding: utf-8

"""
    scenario-manager-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_scenario_manager_service.configuration import Configuration


class Scenario(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'scenario_code': 'str',
        'scenario_name': 'str',
        'model_type': 'str',
        'model_sub_type': 'str',
        'template': 'int',
        'inherited_scenario': 'str',
        'read_only': 'int',
        'enabled': 'int',
        'relative_folder': 'str',
        'project_file': 'str',
        'current_time': 'datetime',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'create_time': 'datetime',
        'auto_calculate': 'int',
        'modified': 'int',
        'checked': 'int',
        'calculated': 'int',
        'published': 'int',
        'online_first': 'int',
        'auto_amend': 'int',
        'state': 'str',
        'description': 'str',
        'version': 'str',
        'tenant_id': 'str',
        'min_io_path': 'str',
        'min_io_bucket': 'str',
        'creator_name': 'str',
        'name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'scenario_code': 'scenarioCode',
        'scenario_name': 'scenarioName',
        'model_type': 'modelType',
        'model_sub_type': 'modelSubType',
        'template': 'template',
        'inherited_scenario': 'inheritedScenario',
        'read_only': 'readOnly',
        'enabled': 'enabled',
        'relative_folder': 'relativeFolder',
        'project_file': 'projectFile',
        'current_time': 'currentTime',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'create_time': 'createTime',
        'auto_calculate': 'autoCalculate',
        'modified': 'modified',
        'checked': 'checked',
        'calculated': 'calculated',
        'published': 'published',
        'online_first': 'onlineFirst',
        'auto_amend': 'autoAmend',
        'state': 'state',
        'description': 'description',
        'version': 'version',
        'tenant_id': 'tenantId',
        'min_io_path': 'minIOPath',
        'min_io_bucket': 'minIOBucket',
        'creator_name': 'creatorName',
        'name': 'name'
    }

    def __init__(self, id=None, scenario_code=None, scenario_name=None, model_type=None, model_sub_type=None, template=None, inherited_scenario=None, read_only=None, enabled=None, relative_folder=None, project_file=None, current_time=None, start_time=None, end_time=None, create_time=None, auto_calculate=None, modified=None, checked=None, calculated=None, published=None, online_first=None, auto_amend=None, state=None, description=None, version=None, tenant_id=None, min_io_path=None, min_io_bucket=None, creator_name=None, name=None, local_vars_configuration=None):  # noqa: E501
        """Scenario - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._scenario_code = None
        self._scenario_name = None
        self._model_type = None
        self._model_sub_type = None
        self._template = None
        self._inherited_scenario = None
        self._read_only = None
        self._enabled = None
        self._relative_folder = None
        self._project_file = None
        self._current_time = None
        self._start_time = None
        self._end_time = None
        self._create_time = None
        self._auto_calculate = None
        self._modified = None
        self._checked = None
        self._calculated = None
        self._published = None
        self._online_first = None
        self._auto_amend = None
        self._state = None
        self._description = None
        self._version = None
        self._tenant_id = None
        self._min_io_path = None
        self._min_io_bucket = None
        self._creator_name = None
        self._name = None
        self.discriminator = None

        self.id = id
        self.scenario_code = scenario_code
        self.scenario_name = scenario_name
        self.model_type = model_type
        self.model_sub_type = model_sub_type
        if template is not None:
            self.template = template
        if inherited_scenario is not None:
            self.inherited_scenario = inherited_scenario
        if read_only is not None:
            self.read_only = read_only
        if enabled is not None:
            self.enabled = enabled
        self.relative_folder = relative_folder
        self.project_file = project_file
        if current_time is not None:
            self.current_time = current_time
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if create_time is not None:
            self.create_time = create_time
        if auto_calculate is not None:
            self.auto_calculate = auto_calculate
        if modified is not None:
            self.modified = modified
        if checked is not None:
            self.checked = checked
        if calculated is not None:
            self.calculated = calculated
        if published is not None:
            self.published = published
        if online_first is not None:
            self.online_first = online_first
        if auto_amend is not None:
            self.auto_amend = auto_amend
        self.state = state
        self.description = description
        if version is not None:
            self.version = version
        self.tenant_id = tenant_id
        self.min_io_path = min_io_path
        self.min_io_bucket = min_io_bucket
        self.creator_name = creator_name
        self.name = name

    @property
    def id(self):
        """Gets the id of this Scenario.  # noqa: E501

        方案ID scenario Id  # noqa: E501

        :return: The id of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Scenario.

        方案ID scenario Id  # noqa: E501

        :param id: The id of this Scenario.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def scenario_code(self):
        """Gets the scenario_code of this Scenario.  # noqa: E501

        方案代码 scenario code  # noqa: E501

        :return: The scenario_code of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._scenario_code

    @scenario_code.setter
    def scenario_code(self, scenario_code):
        """Sets the scenario_code of this Scenario.

        方案代码 scenario code  # noqa: E501

        :param scenario_code: The scenario_code of this Scenario.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and scenario_code is None:  # noqa: E501
            raise ValueError("Invalid value for `scenario_code`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                scenario_code is not None and len(scenario_code) > 100):
            raise ValueError("Invalid value for `scenario_code`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                scenario_code is not None and len(scenario_code) < 0):
            raise ValueError("Invalid value for `scenario_code`, length must be greater than or equal to `0`")  # noqa: E501

        self._scenario_code = scenario_code

    @property
    def scenario_name(self):
        """Gets the scenario_name of this Scenario.  # noqa: E501

        方案名称 scenario name  # noqa: E501

        :return: The scenario_name of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._scenario_name

    @scenario_name.setter
    def scenario_name(self, scenario_name):
        """Sets the scenario_name of this Scenario.

        方案名称 scenario name  # noqa: E501

        :param scenario_name: The scenario_name of this Scenario.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                scenario_name is not None and len(scenario_name) > 200):
            raise ValueError("Invalid value for `scenario_name`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                scenario_name is not None and len(scenario_name) < 0):
            raise ValueError("Invalid value for `scenario_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._scenario_name = scenario_name

    @property
    def model_type(self):
        """Gets the model_type of this Scenario.  # noqa: E501

        模型类型，包括但不限于 model type, including but not limited to:  0-MIKE11Model(MIKE 11 model),  2-MIKE21Model(MIKE 21 model),  3-MIKE21FMModel(MIKE 21FM model),  4-MIKE3FMModel(MIKE 3FM model),  5-MIKEFloodModel(MIKE Flood model),  7-MIKEUrbanCSModel(MIKE Urban CS model),  8-MIKEUrbanWDModel(MIKE Urban WD model),  9-HydroBasinModel(MIKE HYDRO Basin model),  12-FeflowModel(MIKE Feflow model),  13-WestModel(West model),  20-HammerModel(Hammer model of WD),  21-MIKEPlusFloodModel(MIKE Plus Flood model),  22-MIKEPlusWDModel(MIKE Plus WD model),  99-Unknown(Unknown),  # noqa: E501

        :return: The model_type of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this Scenario.

        模型类型，包括但不限于 model type, including but not limited to:  0-MIKE11Model(MIKE 11 model),  2-MIKE21Model(MIKE 21 model),  3-MIKE21FMModel(MIKE 21FM model),  4-MIKE3FMModel(MIKE 3FM model),  5-MIKEFloodModel(MIKE Flood model),  7-MIKEUrbanCSModel(MIKE Urban CS model),  8-MIKEUrbanWDModel(MIKE Urban WD model),  9-HydroBasinModel(MIKE HYDRO Basin model),  12-FeflowModel(MIKE Feflow model),  13-WestModel(West model),  20-HammerModel(Hammer model of WD),  21-MIKEPlusFloodModel(MIKE Plus Flood model),  22-MIKEPlusWDModel(MIKE Plus WD model),  99-Unknown(Unknown),  # noqa: E501

        :param model_type: The model_type of this Scenario.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                model_type is not None and len(model_type) > 100):
            raise ValueError("Invalid value for `model_type`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                model_type is not None and len(model_type) < 0):
            raise ValueError("Invalid value for `model_type`, length must be greater than or equal to `0`")  # noqa: E501

        self._model_type = model_type

    @property
    def model_sub_type(self):
        """Gets the model_sub_type of this Scenario.  # noqa: E501

        方案子类型，包括但不限于 scenario subtype, including but not limited to:  0-ManualSchedule(Manual schedule),  2-OptimizeSchedule(Optimization schedule),  5-EmerResponse(Emergency response),  6-Forecast(Forecast and warning),  8-Scenario(Scenario simulation),  9-Incident(Accident),  12-WQEvaluation(Water quality evaluation),  14-Planning(Planning),  15-OilSpill(Oil spill accident),  19-PumpShutdown(Pump shut down scenario),  20-PipeBurst(Pipe burst scenario),  99-Unknown(Unknown),  # noqa: E501

        :return: The model_sub_type of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._model_sub_type

    @model_sub_type.setter
    def model_sub_type(self, model_sub_type):
        """Sets the model_sub_type of this Scenario.

        方案子类型，包括但不限于 scenario subtype, including but not limited to:  0-ManualSchedule(Manual schedule),  2-OptimizeSchedule(Optimization schedule),  5-EmerResponse(Emergency response),  6-Forecast(Forecast and warning),  8-Scenario(Scenario simulation),  9-Incident(Accident),  12-WQEvaluation(Water quality evaluation),  14-Planning(Planning),  15-OilSpill(Oil spill accident),  19-PumpShutdown(Pump shut down scenario),  20-PipeBurst(Pipe burst scenario),  99-Unknown(Unknown),  # noqa: E501

        :param model_sub_type: The model_sub_type of this Scenario.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                model_sub_type is not None and len(model_sub_type) > 200):
            raise ValueError("Invalid value for `model_sub_type`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                model_sub_type is not None and len(model_sub_type) < 0):
            raise ValueError("Invalid value for `model_sub_type`, length must be greater than or equal to `0`")  # noqa: E501

        self._model_sub_type = model_sub_type

    @property
    def template(self):
        """Gets the template of this Scenario.  # noqa: E501

        1表示模板方案，0表示非模板方案 1 or 0, indicating if the scenario is a template or not  # noqa: E501

        :return: The template of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Scenario.

        1表示模板方案，0表示非模板方案 1 or 0, indicating if the scenario is a template or not  # noqa: E501

        :param template: The template of this Scenario.  # noqa: E501
        :type: int
        """

        self._template = template

    @property
    def inherited_scenario(self):
        """Gets the inherited_scenario of this Scenario.  # noqa: E501

        父方案ID parent scenario Id  # noqa: E501

        :return: The inherited_scenario of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._inherited_scenario

    @inherited_scenario.setter
    def inherited_scenario(self, inherited_scenario):
        """Sets the inherited_scenario of this Scenario.

        父方案ID parent scenario Id  # noqa: E501

        :param inherited_scenario: The inherited_scenario of this Scenario.  # noqa: E501
        :type: str
        """

        self._inherited_scenario = inherited_scenario

    @property
    def read_only(self):
        """Gets the read_only of this Scenario.  # noqa: E501

        1表示只读，0表示可读写 1 for readonly, 0 for not readonly  # noqa: E501

        :return: The read_only of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this Scenario.

        1表示只读，0表示可读写 1 for readonly, 0 for not readonly  # noqa: E501

        :param read_only: The read_only of this Scenario.  # noqa: E501
        :type: int
        """

        self._read_only = read_only

    @property
    def enabled(self):
        """Gets the enabled of this Scenario.  # noqa: E501

        1表示启用，0表示不启用 1 for enabled, 0 for disabled  # noqa: E501

        :return: The enabled of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Scenario.

        1表示启用，0表示不启用 1 for enabled, 0 for disabled  # noqa: E501

        :param enabled: The enabled of this Scenario.  # noqa: E501
        :type: int
        """

        self._enabled = enabled

    @property
    def relative_folder(self):
        """Gets the relative_folder of this Scenario.  # noqa: E501

        方案文件夹相对于WorkFolder的路径 scenario's relative path to WorkFolder  # noqa: E501

        :return: The relative_folder of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._relative_folder

    @relative_folder.setter
    def relative_folder(self, relative_folder):
        """Sets the relative_folder of this Scenario.

        方案文件夹相对于WorkFolder的路径 scenario's relative path to WorkFolder  # noqa: E501

        :param relative_folder: The relative_folder of this Scenario.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                relative_folder is not None and len(relative_folder) > 1000):
            raise ValueError("Invalid value for `relative_folder`, length must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                relative_folder is not None and len(relative_folder) < 0):
            raise ValueError("Invalid value for `relative_folder`, length must be greater than or equal to `0`")  # noqa: E501

        self._relative_folder = relative_folder

    @property
    def project_file(self):
        """Gets the project_file of this Scenario.  # noqa: E501

        模型文件名称 model file name  # noqa: E501

        :return: The project_file of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._project_file

    @project_file.setter
    def project_file(self, project_file):
        """Sets the project_file of this Scenario.

        模型文件名称 model file name  # noqa: E501

        :param project_file: The project_file of this Scenario.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                project_file is not None and len(project_file) > 200):
            raise ValueError("Invalid value for `project_file`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                project_file is not None and len(project_file) < 0):
            raise ValueError("Invalid value for `project_file`, length must be greater than or equal to `0`")  # noqa: E501

        self._project_file = project_file

    @property
    def current_time(self):
        """Gets the current_time of this Scenario.  # noqa: E501

        模型预报时刻 model current time or forecast time  # noqa: E501

        :return: The current_time of this Scenario.  # noqa: E501
        :rtype: datetime
        """
        return self._current_time

    @current_time.setter
    def current_time(self, current_time):
        """Sets the current_time of this Scenario.

        模型预报时刻 model current time or forecast time  # noqa: E501

        :param current_time: The current_time of this Scenario.  # noqa: E501
        :type: datetime
        """

        self._current_time = current_time

    @property
    def start_time(self):
        """Gets the start_time of this Scenario.  # noqa: E501

        模型开始时刻 model start time  # noqa: E501

        :return: The start_time of this Scenario.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Scenario.

        模型开始时刻 model start time  # noqa: E501

        :param start_time: The start_time of this Scenario.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this Scenario.  # noqa: E501

        模型结束时刻 model end time  # noqa: E501

        :return: The end_time of this Scenario.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Scenario.

        模型结束时刻 model end time  # noqa: E501

        :param end_time: The end_time of this Scenario.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def create_time(self):
        """Gets the create_time of this Scenario.  # noqa: E501

        方案创建时刻 scenario create time  # noqa: E501

        :return: The create_time of this Scenario.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Scenario.

        方案创建时刻 scenario create time  # noqa: E501

        :param create_time: The create_time of this Scenario.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def auto_calculate(self):
        """Gets the auto_calculate of this Scenario.  # noqa: E501

        1表示自动计算，0表示非自动计算 1 for auto calculate, 0 for not auto calculate  # noqa: E501

        :return: The auto_calculate of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._auto_calculate

    @auto_calculate.setter
    def auto_calculate(self, auto_calculate):
        """Sets the auto_calculate of this Scenario.

        1表示自动计算，0表示非自动计算 1 for auto calculate, 0 for not auto calculate  # noqa: E501

        :param auto_calculate: The auto_calculate of this Scenario.  # noqa: E501
        :type: int
        """

        self._auto_calculate = auto_calculate

    @property
    def modified(self):
        """Gets the modified of this Scenario.  # noqa: E501

        1表示修改过，0表示没有修改过 1 for modified, 0 for not modified  # noqa: E501

        :return: The modified of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Scenario.

        1表示修改过，0表示没有修改过 1 for modified, 0 for not modified  # noqa: E501

        :param modified: The modified of this Scenario.  # noqa: E501
        :type: int
        """

        self._modified = modified

    @property
    def checked(self):
        """Gets the checked of this Scenario.  # noqa: E501

        1表示被选中，0表示未被选中 1 for checked, 0 for unchecked  # noqa: E501

        :return: The checked of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this Scenario.

        1表示被选中，0表示未被选中 1 for checked, 0 for unchecked  # noqa: E501

        :param checked: The checked of this Scenario.  # noqa: E501
        :type: int
        """

        self._checked = checked

    @property
    def calculated(self):
        """Gets the calculated of this Scenario.  # noqa: E501

        1表示计算完成，0表示未计算完成 1 for calculated, 0 for not calculated  # noqa: E501

        :return: The calculated of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._calculated

    @calculated.setter
    def calculated(self, calculated):
        """Sets the calculated of this Scenario.

        1表示计算完成，0表示未计算完成 1 for calculated, 0 for not calculated  # noqa: E501

        :param calculated: The calculated of this Scenario.  # noqa: E501
        :type: int
        """

        self._calculated = calculated

    @property
    def published(self):
        """Gets the published of this Scenario.  # noqa: E501

        1表示已发布，0表示未发布 1 for published, 0 for not published  # noqa: E501

        :return: The published of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Scenario.

        1表示已发布，0表示未发布 1 for published, 0 for not published  # noqa: E501

        :param published: The published of this Scenario.  # noqa: E501
        :type: int
        """

        self._published = published

    @property
    def online_first(self):
        """Gets the online_first of this Scenario.  # noqa: E501

        1表示优先使用在线数据，0表示非优先使用在线数据 1 for online first, 0 for not online first  # noqa: E501

        :return: The online_first of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._online_first

    @online_first.setter
    def online_first(self, online_first):
        """Sets the online_first of this Scenario.

        1表示优先使用在线数据，0表示非优先使用在线数据 1 for online first, 0 for not online first  # noqa: E501

        :param online_first: The online_first of this Scenario.  # noqa: E501
        :type: int
        """

        self._online_first = online_first

    @property
    def auto_amend(self):
        """Gets the auto_amend of this Scenario.  # noqa: E501

        1表示进行自动修改，0表示不进行自动修正 1 for auto amend, 0 for not auto amend  # noqa: E501

        :return: The auto_amend of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._auto_amend

    @auto_amend.setter
    def auto_amend(self, auto_amend):
        """Sets the auto_amend of this Scenario.

        1表示进行自动修改，0表示不进行自动修正 1 for auto amend, 0 for not auto amend  # noqa: E501

        :param auto_amend: The auto_amend of this Scenario.  # noqa: E501
        :type: int
        """

        self._auto_amend = auto_amend

    @property
    def state(self):
        """Gets the state of this Scenario.  # noqa: E501

        方案的状态 scenario's status  # noqa: E501

        :return: The state of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Scenario.

        方案的状态 scenario's status  # noqa: E501

        :param state: The state of this Scenario.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                state is not None and len(state) > 200):
            raise ValueError("Invalid value for `state`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                state is not None and len(state) < 0):
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `0`")  # noqa: E501

        self._state = state

    @property
    def description(self):
        """Gets the description of this Scenario.  # noqa: E501

        方案的描述 scenario description  # noqa: E501

        :return: The description of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Scenario.

        方案的描述 scenario description  # noqa: E501

        :param description: The description of this Scenario.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 2000):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def version(self):
        """Gets the version of this Scenario.  # noqa: E501

        版本 version  # noqa: E501

        :return: The version of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Scenario.

        版本 version  # noqa: E501

        :param version: The version of this Scenario.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Scenario.  # noqa: E501

        租户ID tenant Id  # noqa: E501

        :return: The tenant_id of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Scenario.

        租户ID tenant Id  # noqa: E501

        :param tenant_id: The tenant_id of this Scenario.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def min_io_path(self):
        """Gets the min_io_path of this Scenario.  # noqa: E501

        在分布式文件系统上的存储路径 store path on distributed file system  # noqa: E501

        :return: The min_io_path of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._min_io_path

    @min_io_path.setter
    def min_io_path(self, min_io_path):
        """Sets the min_io_path of this Scenario.

        在分布式文件系统上的存储路径 store path on distributed file system  # noqa: E501

        :param min_io_path: The min_io_path of this Scenario.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                min_io_path is not None and len(min_io_path) > 1000):
            raise ValueError("Invalid value for `min_io_path`, length must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                min_io_path is not None and len(min_io_path) < 0):
            raise ValueError("Invalid value for `min_io_path`, length must be greater than or equal to `0`")  # noqa: E501

        self._min_io_path = min_io_path

    @property
    def min_io_bucket(self):
        """Gets the min_io_bucket of this Scenario.  # noqa: E501

        在分布式文件系统上的存储桶 store bucket on distributed file system  # noqa: E501

        :return: The min_io_bucket of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._min_io_bucket

    @min_io_bucket.setter
    def min_io_bucket(self, min_io_bucket):
        """Sets the min_io_bucket of this Scenario.

        在分布式文件系统上的存储桶 store bucket on distributed file system  # noqa: E501

        :param min_io_bucket: The min_io_bucket of this Scenario.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                min_io_bucket is not None and len(min_io_bucket) > 200):
            raise ValueError("Invalid value for `min_io_bucket`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                min_io_bucket is not None and len(min_io_bucket) < 0):
            raise ValueError("Invalid value for `min_io_bucket`, length must be greater than or equal to `0`")  # noqa: E501

        self._min_io_bucket = min_io_bucket

    @property
    def creator_name(self):
        """Gets the creator_name of this Scenario.  # noqa: E501


        :return: The creator_name of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """Sets the creator_name of this Scenario.


        :param creator_name: The creator_name of this Scenario.  # noqa: E501
        :type: str
        """

        self._creator_name = creator_name

    @property
    def name(self):
        """Gets the name of this Scenario.  # noqa: E501


        :return: The name of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Scenario.


        :param name: The name of this Scenario.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scenario):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Scenario):
            return True

        return self.to_dict() != other.to_dict()
