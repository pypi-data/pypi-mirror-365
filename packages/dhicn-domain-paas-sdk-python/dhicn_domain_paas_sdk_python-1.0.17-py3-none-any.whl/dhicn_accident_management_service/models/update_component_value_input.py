# coding: utf-8

"""
    accident-manager-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_accident_management_service.configuration import Configuration


class UpdateComponentValueInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'component_id': 'str',
        'key_id': 'str',
        'key_name': 'str',
        'str_value': 'str',
        'json_value': 'str',
        'bool_value': 'bool',
        'double_value': 'float',
        'long_value': 'int',
        'time_value': 'datetime',
        'ts_value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'component_id': 'componentId',
        'key_id': 'keyId',
        'key_name': 'keyName',
        'str_value': 'str_Value',
        'json_value': 'json_Value',
        'bool_value': 'bool_Value',
        'double_value': 'double_Value',
        'long_value': 'long_Value',
        'time_value': 'time_Value',
        'ts_value': 'ts_Value'
    }

    def __init__(self, id=None, component_id=None, key_id=None, key_name=None, str_value=None, json_value=None, bool_value=None, double_value=None, long_value=None, time_value=None, ts_value=None, local_vars_configuration=None):  # noqa: E501
        """UpdateComponentValueInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._component_id = None
        self._key_id = None
        self._key_name = None
        self._str_value = None
        self._json_value = None
        self._bool_value = None
        self._double_value = None
        self._long_value = None
        self._time_value = None
        self._ts_value = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if component_id is not None:
            self.component_id = component_id
        if key_id is not None:
            self.key_id = key_id
        self.key_name = key_name
        self.str_value = str_value
        self.json_value = json_value
        self.bool_value = bool_value
        self.double_value = double_value
        self.long_value = long_value
        self.time_value = time_value
        self.ts_value = ts_value

    @property
    def id(self):
        """Gets the id of this UpdateComponentValueInput.  # noqa: E501

        污染物属性值的ID pollutant attribute value id  # noqa: E501

        :return: The id of this UpdateComponentValueInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateComponentValueInput.

        污染物属性值的ID pollutant attribute value id  # noqa: E501

        :param id: The id of this UpdateComponentValueInput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def component_id(self):
        """Gets the component_id of this UpdateComponentValueInput.  # noqa: E501

        污染物ID pollutant id  # noqa: E501

        :return: The component_id of this UpdateComponentValueInput.  # noqa: E501
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this UpdateComponentValueInput.

        污染物ID pollutant id  # noqa: E501

        :param component_id: The component_id of this UpdateComponentValueInput.  # noqa: E501
        :type: str
        """

        self._component_id = component_id

    @property
    def key_id(self):
        """Gets the key_id of this UpdateComponentValueInput.  # noqa: E501

        污染物属性ID pollutant attribute id  # noqa: E501

        :return: The key_id of this UpdateComponentValueInput.  # noqa: E501
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this UpdateComponentValueInput.

        污染物属性ID pollutant attribute id  # noqa: E501

        :param key_id: The key_id of this UpdateComponentValueInput.  # noqa: E501
        :type: str
        """

        self._key_id = key_id

    @property
    def key_name(self):
        """Gets the key_name of this UpdateComponentValueInput.  # noqa: E501

        污染物属性名称 pollutant attribute name  # noqa: E501

        :return: The key_name of this UpdateComponentValueInput.  # noqa: E501
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this UpdateComponentValueInput.

        污染物属性名称 pollutant attribute name  # noqa: E501

        :param key_name: The key_name of this UpdateComponentValueInput.  # noqa: E501
        :type: str
        """

        self._key_name = key_name

    @property
    def str_value(self):
        """Gets the str_value of this UpdateComponentValueInput.  # noqa: E501

        字符串类型值 value in string format  # noqa: E501

        :return: The str_value of this UpdateComponentValueInput.  # noqa: E501
        :rtype: str
        """
        return self._str_value

    @str_value.setter
    def str_value(self, str_value):
        """Sets the str_value of this UpdateComponentValueInput.

        字符串类型值 value in string format  # noqa: E501

        :param str_value: The str_value of this UpdateComponentValueInput.  # noqa: E501
        :type: str
        """

        self._str_value = str_value

    @property
    def json_value(self):
        """Gets the json_value of this UpdateComponentValueInput.  # noqa: E501

        JSON格式字符串类型值 value in JSON string format  # noqa: E501

        :return: The json_value of this UpdateComponentValueInput.  # noqa: E501
        :rtype: str
        """
        return self._json_value

    @json_value.setter
    def json_value(self, json_value):
        """Sets the json_value of this UpdateComponentValueInput.

        JSON格式字符串类型值 value in JSON string format  # noqa: E501

        :param json_value: The json_value of this UpdateComponentValueInput.  # noqa: E501
        :type: str
        """

        self._json_value = json_value

    @property
    def bool_value(self):
        """Gets the bool_value of this UpdateComponentValueInput.  # noqa: E501

        布尔类型值 value in Bool format  # noqa: E501

        :return: The bool_value of this UpdateComponentValueInput.  # noqa: E501
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this UpdateComponentValueInput.

        布尔类型值 value in Bool format  # noqa: E501

        :param bool_value: The bool_value of this UpdateComponentValueInput.  # noqa: E501
        :type: bool
        """

        self._bool_value = bool_value

    @property
    def double_value(self):
        """Gets the double_value of this UpdateComponentValueInput.  # noqa: E501

        双精度浮点类型值 value in Double format  # noqa: E501

        :return: The double_value of this UpdateComponentValueInput.  # noqa: E501
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this UpdateComponentValueInput.

        双精度浮点类型值 value in Double format  # noqa: E501

        :param double_value: The double_value of this UpdateComponentValueInput.  # noqa: E501
        :type: float
        """

        self._double_value = double_value

    @property
    def long_value(self):
        """Gets the long_value of this UpdateComponentValueInput.  # noqa: E501

        长整形类型值 value in Long format  # noqa: E501

        :return: The long_value of this UpdateComponentValueInput.  # noqa: E501
        :rtype: int
        """
        return self._long_value

    @long_value.setter
    def long_value(self, long_value):
        """Sets the long_value of this UpdateComponentValueInput.

        长整形类型值 value in Long format  # noqa: E501

        :param long_value: The long_value of this UpdateComponentValueInput.  # noqa: E501
        :type: int
        """

        self._long_value = long_value

    @property
    def time_value(self):
        """Gets the time_value of this UpdateComponentValueInput.  # noqa: E501

        时间类型值 value in DateTime format  # noqa: E501

        :return: The time_value of this UpdateComponentValueInput.  # noqa: E501
        :rtype: datetime
        """
        return self._time_value

    @time_value.setter
    def time_value(self, time_value):
        """Sets the time_value of this UpdateComponentValueInput.

        时间类型值 value in DateTime format  # noqa: E501

        :param time_value: The time_value of this UpdateComponentValueInput.  # noqa: E501
        :type: datetime
        """

        self._time_value = time_value

    @property
    def ts_value(self):
        """Gets the ts_value of this UpdateComponentValueInput.  # noqa: E501

        时间序列ID time series id  # noqa: E501

        :return: The ts_value of this UpdateComponentValueInput.  # noqa: E501
        :rtype: str
        """
        return self._ts_value

    @ts_value.setter
    def ts_value(self, ts_value):
        """Sets the ts_value of this UpdateComponentValueInput.

        时间序列ID time series id  # noqa: E501

        :param ts_value: The ts_value of this UpdateComponentValueInput.  # noqa: E501
        :type: str
        """

        self._ts_value = ts_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateComponentValueInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateComponentValueInput):
            return True

        return self.to_dict() != other.to_dict()
