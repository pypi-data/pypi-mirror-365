# coding: utf-8

"""
    accident-manager-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_accident_management_service.configuration import Configuration


class AddSceneInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accident_id': 'str',
        'name': 'str',
        'remark': 'str'
    }

    attribute_map = {
        'accident_id': 'accidentId',
        'name': 'name',
        'remark': 'remark'
    }

    def __init__(self, accident_id=None, name=None, remark=None, local_vars_configuration=None):  # noqa: E501
        """AddSceneInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accident_id = None
        self._name = None
        self._remark = None
        self.discriminator = None

        if accident_id is not None:
            self.accident_id = accident_id
        self.name = name
        self.remark = remark

    @property
    def accident_id(self):
        """Gets the accident_id of this AddSceneInput.  # noqa: E501

        关联事故Id accident id  # noqa: E501

        :return: The accident_id of this AddSceneInput.  # noqa: E501
        :rtype: str
        """
        return self._accident_id

    @accident_id.setter
    def accident_id(self, accident_id):
        """Sets the accident_id of this AddSceneInput.

        关联事故Id accident id  # noqa: E501

        :param accident_id: The accident_id of this AddSceneInput.  # noqa: E501
        :type: str
        """

        self._accident_id = accident_id

    @property
    def name(self):
        """Gets the name of this AddSceneInput.  # noqa: E501

        情景名 scene name  # noqa: E501

        :return: The name of this AddSceneInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddSceneInput.

        情景名 scene name  # noqa: E501

        :param name: The name of this AddSceneInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def remark(self):
        """Gets the remark of this AddSceneInput.  # noqa: E501

        备注 scene remark  # noqa: E501

        :return: The remark of this AddSceneInput.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this AddSceneInput.

        备注 scene remark  # noqa: E501

        :param remark: The remark of this AddSceneInput.  # noqa: E501
        :type: str
        """

        self._remark = remark

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddSceneInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddSceneInput):
            return True

        return self.to_dict() != other.to_dict()
