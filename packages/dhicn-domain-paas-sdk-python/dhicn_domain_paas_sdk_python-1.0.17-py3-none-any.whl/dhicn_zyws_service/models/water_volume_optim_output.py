# coding: utf-8

"""
    竹园污水项目

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_zyws_service.configuration import Configuration


class WaterVolumeOptimOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item': 'str',
        'max': 'float',
        'min': 'float',
        'current': 'float',
        'current_data_type': 'bool'
    }

    attribute_map = {
        'item': 'item',
        'max': 'max',
        'min': 'min',
        'current': 'current',
        'current_data_type': 'currentDataType'
    }

    def __init__(self, item=None, max=None, min=None, current=None, current_data_type=None, local_vars_configuration=None):  # noqa: E501
        """WaterVolumeOptimOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._item = None
        self._max = None
        self._min = None
        self._current = None
        self._current_data_type = None
        self.discriminator = None

        self.item = item
        if max is not None:
            self.max = max
        if min is not None:
            self.min = min
        if current is not None:
            self.current = current
        if current_data_type is not None:
            self.current_data_type = current_data_type

    @property
    def item(self):
        """Gets the item of this WaterVolumeOptimOutput.  # noqa: E501


        :return: The item of this WaterVolumeOptimOutput.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this WaterVolumeOptimOutput.


        :param item: The item of this WaterVolumeOptimOutput.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def max(self):
        """Gets the max of this WaterVolumeOptimOutput.  # noqa: E501

        最大处理能力  # noqa: E501

        :return: The max of this WaterVolumeOptimOutput.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this WaterVolumeOptimOutput.

        最大处理能力  # noqa: E501

        :param max: The max of this WaterVolumeOptimOutput.  # noqa: E501
        :type: float
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this WaterVolumeOptimOutput.  # noqa: E501

        最小处理能力  # noqa: E501

        :return: The min of this WaterVolumeOptimOutput.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this WaterVolumeOptimOutput.

        最小处理能力  # noqa: E501

        :param min: The min of this WaterVolumeOptimOutput.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def current(self):
        """Gets the current of this WaterVolumeOptimOutput.  # noqa: E501

        当前处理量  # noqa: E501

        :return: The current of this WaterVolumeOptimOutput.  # noqa: E501
        :rtype: float
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this WaterVolumeOptimOutput.

        当前处理量  # noqa: E501

        :param current: The current of this WaterVolumeOptimOutput.  # noqa: E501
        :type: float
        """

        self._current = current

    @property
    def current_data_type(self):
        """Gets the current_data_type of this WaterVolumeOptimOutput.  # noqa: E501

        当前处理量的数据类型，true:实测，false:模拟  # noqa: E501

        :return: The current_data_type of this WaterVolumeOptimOutput.  # noqa: E501
        :rtype: bool
        """
        return self._current_data_type

    @current_data_type.setter
    def current_data_type(self, current_data_type):
        """Sets the current_data_type of this WaterVolumeOptimOutput.

        当前处理量的数据类型，true:实测，false:模拟  # noqa: E501

        :param current_data_type: The current_data_type of this WaterVolumeOptimOutput.  # noqa: E501
        :type: bool
        """

        self._current_data_type = current_data_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaterVolumeOptimOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaterVolumeOptimOutput):
            return True

        return self.to_dict() != other.to_dict()
