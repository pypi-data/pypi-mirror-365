# coding: utf-8

"""
    竹园污水项目

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_zyws_service.configuration import Configuration


class LatestWarningOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'warning_type': 'str',
        'content': 'str',
        'value': 'float',
        'is_warning': 'bool'
    }

    attribute_map = {
        'warning_type': 'warningType',
        'content': 'content',
        'value': 'value',
        'is_warning': 'isWarning'
    }

    def __init__(self, warning_type=None, content=None, value=None, is_warning=None, local_vars_configuration=None):  # noqa: E501
        """LatestWarningOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._warning_type = None
        self._content = None
        self._value = None
        self._is_warning = None
        self.discriminator = None

        self.warning_type = warning_type
        self.content = content
        if value is not None:
            self.value = value
        if is_warning is not None:
            self.is_warning = is_warning

    @property
    def warning_type(self):
        """Gets the warning_type of this LatestWarningOutput.  # noqa: E501

        预警类型  # noqa: E501

        :return: The warning_type of this LatestWarningOutput.  # noqa: E501
        :rtype: str
        """
        return self._warning_type

    @warning_type.setter
    def warning_type(self, warning_type):
        """Sets the warning_type of this LatestWarningOutput.

        预警类型  # noqa: E501

        :param warning_type: The warning_type of this LatestWarningOutput.  # noqa: E501
        :type: str
        """

        self._warning_type = warning_type

    @property
    def content(self):
        """Gets the content of this LatestWarningOutput.  # noqa: E501

        预警内容  # noqa: E501

        :return: The content of this LatestWarningOutput.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this LatestWarningOutput.

        预警内容  # noqa: E501

        :param content: The content of this LatestWarningOutput.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def value(self):
        """Gets the value of this LatestWarningOutput.  # noqa: E501

        报警值  # noqa: E501

        :return: The value of this LatestWarningOutput.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this LatestWarningOutput.

        报警值  # noqa: E501

        :param value: The value of this LatestWarningOutput.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def is_warning(self):
        """Gets the is_warning of this LatestWarningOutput.  # noqa: E501

        是否正在预警  # noqa: E501

        :return: The is_warning of this LatestWarningOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_warning

    @is_warning.setter
    def is_warning(self, is_warning):
        """Sets the is_warning of this LatestWarningOutput.

        是否正在预警  # noqa: E501

        :param is_warning: The is_warning of this LatestWarningOutput.  # noqa: E501
        :type: bool
        """

        self._is_warning = is_warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LatestWarningOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LatestWarningOutput):
            return True

        return self.to_dict() != other.to_dict()
