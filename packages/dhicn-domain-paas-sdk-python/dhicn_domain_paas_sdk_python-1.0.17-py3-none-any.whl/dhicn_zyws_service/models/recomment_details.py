# coding: utf-8

"""
    竹园污水项目

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_zyws_service.configuration import Configuration


class RecommentDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'recommend_tag': 'str',
        'operation': 'str',
        'value': 'float',
        'content': 'str'
    }

    attribute_map = {
        'recommend_tag': 'recommendTag',
        'operation': 'operation',
        'value': 'value',
        'content': 'content'
    }

    def __init__(self, recommend_tag=None, operation=None, value=None, content=None, local_vars_configuration=None):  # noqa: E501
        """RecommentDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._recommend_tag = None
        self._operation = None
        self._value = None
        self._content = None
        self.discriminator = None

        self.recommend_tag = recommend_tag
        self.operation = operation
        if value is not None:
            self.value = value
        self.content = content

    @property
    def recommend_tag(self):
        """Gets the recommend_tag of this RecommentDetails.  # noqa: E501

        建议标记  # noqa: E501

        :return: The recommend_tag of this RecommentDetails.  # noqa: E501
        :rtype: str
        """
        return self._recommend_tag

    @recommend_tag.setter
    def recommend_tag(self, recommend_tag):
        """Sets the recommend_tag of this RecommentDetails.

        建议标记  # noqa: E501

        :param recommend_tag: The recommend_tag of this RecommentDetails.  # noqa: E501
        :type: str
        """

        self._recommend_tag = recommend_tag

    @property
    def operation(self):
        """Gets the operation of this RecommentDetails.  # noqa: E501

        建议操作，up/down,open/close  # noqa: E501

        :return: The operation of this RecommentDetails.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this RecommentDetails.

        建议操作，up/down,open/close  # noqa: E501

        :param operation: The operation of this RecommentDetails.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def value(self):
        """Gets the value of this RecommentDetails.  # noqa: E501

        建议值  # noqa: E501

        :return: The value of this RecommentDetails.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RecommentDetails.

        建议值  # noqa: E501

        :param value: The value of this RecommentDetails.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def content(self):
        """Gets the content of this RecommentDetails.  # noqa: E501

        建议内容  # noqa: E501

        :return: The content of this RecommentDetails.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this RecommentDetails.

        建议内容  # noqa: E501

        :param content: The content of this RecommentDetails.  # noqa: E501
        :type: str
        """

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommentDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecommentDetails):
            return True

        return self.to_dict() != other.to_dict()
