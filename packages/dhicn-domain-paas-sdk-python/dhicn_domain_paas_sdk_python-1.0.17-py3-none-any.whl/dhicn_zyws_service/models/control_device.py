# coding: utf-8

"""
    竹园污水项目

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_zyws_service.configuration import Configuration


class ControlDevice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'creation_time': 'datetime',
        'tenant_id': 'str',
        'device_code': 'str',
        'indicator': 'str',
        'value_update_time': 'datetime',
        'measure_value': 'float',
        'recommend_value': 'float',
        'recommend': 'str',
        'is_intelligent_control': 'bool',
        'sort': 'int'
    }

    attribute_map = {
        'id': 'id',
        'creation_time': 'creationTime',
        'tenant_id': 'tenantId',
        'device_code': 'deviceCode',
        'indicator': 'indicator',
        'value_update_time': 'valueUpdateTime',
        'measure_value': 'measureValue',
        'recommend_value': 'recommendValue',
        'recommend': 'recommend',
        'is_intelligent_control': 'isIntelligentControl',
        'sort': 'sort'
    }

    def __init__(self, id=None, creation_time=None, tenant_id=None, device_code=None, indicator=None, value_update_time=None, measure_value=None, recommend_value=None, recommend=None, is_intelligent_control=None, sort=None, local_vars_configuration=None):  # noqa: E501
        """ControlDevice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._creation_time = None
        self._tenant_id = None
        self._device_code = None
        self._indicator = None
        self._value_update_time = None
        self._measure_value = None
        self._recommend_value = None
        self._recommend = None
        self._is_intelligent_control = None
        self._sort = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if creation_time is not None:
            self.creation_time = creation_time
        self.tenant_id = tenant_id
        self.device_code = device_code
        self.indicator = indicator
        if value_update_time is not None:
            self.value_update_time = value_update_time
        if measure_value is not None:
            self.measure_value = measure_value
        if recommend_value is not None:
            self.recommend_value = recommend_value
        self.recommend = recommend
        if is_intelligent_control is not None:
            self.is_intelligent_control = is_intelligent_control
        if sort is not None:
            self.sort = sort

    @property
    def id(self):
        """Gets the id of this ControlDevice.  # noqa: E501


        :return: The id of this ControlDevice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ControlDevice.


        :param id: The id of this ControlDevice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def creation_time(self):
        """Gets the creation_time of this ControlDevice.  # noqa: E501


        :return: The creation_time of this ControlDevice.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ControlDevice.


        :param creation_time: The creation_time of this ControlDevice.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ControlDevice.  # noqa: E501


        :return: The tenant_id of this ControlDevice.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ControlDevice.


        :param tenant_id: The tenant_id of this ControlDevice.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def device_code(self):
        """Gets the device_code of this ControlDevice.  # noqa: E501


        :return: The device_code of this ControlDevice.  # noqa: E501
        :rtype: str
        """
        return self._device_code

    @device_code.setter
    def device_code(self, device_code):
        """Sets the device_code of this ControlDevice.


        :param device_code: The device_code of this ControlDevice.  # noqa: E501
        :type: str
        """

        self._device_code = device_code

    @property
    def indicator(self):
        """Gets the indicator of this ControlDevice.  # noqa: E501


        :return: The indicator of this ControlDevice.  # noqa: E501
        :rtype: str
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator):
        """Sets the indicator of this ControlDevice.


        :param indicator: The indicator of this ControlDevice.  # noqa: E501
        :type: str
        """

        self._indicator = indicator

    @property
    def value_update_time(self):
        """Gets the value_update_time of this ControlDevice.  # noqa: E501


        :return: The value_update_time of this ControlDevice.  # noqa: E501
        :rtype: datetime
        """
        return self._value_update_time

    @value_update_time.setter
    def value_update_time(self, value_update_time):
        """Sets the value_update_time of this ControlDevice.


        :param value_update_time: The value_update_time of this ControlDevice.  # noqa: E501
        :type: datetime
        """

        self._value_update_time = value_update_time

    @property
    def measure_value(self):
        """Gets the measure_value of this ControlDevice.  # noqa: E501


        :return: The measure_value of this ControlDevice.  # noqa: E501
        :rtype: float
        """
        return self._measure_value

    @measure_value.setter
    def measure_value(self, measure_value):
        """Sets the measure_value of this ControlDevice.


        :param measure_value: The measure_value of this ControlDevice.  # noqa: E501
        :type: float
        """

        self._measure_value = measure_value

    @property
    def recommend_value(self):
        """Gets the recommend_value of this ControlDevice.  # noqa: E501


        :return: The recommend_value of this ControlDevice.  # noqa: E501
        :rtype: float
        """
        return self._recommend_value

    @recommend_value.setter
    def recommend_value(self, recommend_value):
        """Sets the recommend_value of this ControlDevice.


        :param recommend_value: The recommend_value of this ControlDevice.  # noqa: E501
        :type: float
        """

        self._recommend_value = recommend_value

    @property
    def recommend(self):
        """Gets the recommend of this ControlDevice.  # noqa: E501


        :return: The recommend of this ControlDevice.  # noqa: E501
        :rtype: str
        """
        return self._recommend

    @recommend.setter
    def recommend(self, recommend):
        """Sets the recommend of this ControlDevice.


        :param recommend: The recommend of this ControlDevice.  # noqa: E501
        :type: str
        """

        self._recommend = recommend

    @property
    def is_intelligent_control(self):
        """Gets the is_intelligent_control of this ControlDevice.  # noqa: E501


        :return: The is_intelligent_control of this ControlDevice.  # noqa: E501
        :rtype: bool
        """
        return self._is_intelligent_control

    @is_intelligent_control.setter
    def is_intelligent_control(self, is_intelligent_control):
        """Sets the is_intelligent_control of this ControlDevice.


        :param is_intelligent_control: The is_intelligent_control of this ControlDevice.  # noqa: E501
        :type: bool
        """

        self._is_intelligent_control = is_intelligent_control

    @property
    def sort(self):
        """Gets the sort of this ControlDevice.  # noqa: E501


        :return: The sort of this ControlDevice.  # noqa: E501
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ControlDevice.


        :param sort: The sort of this ControlDevice.  # noqa: E501
        :type: int
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ControlDevice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ControlDevice):
            return True

        return self.to_dict() != other.to_dict()
