# coding: utf-8

"""
    竹园污水项目

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_zyws_service.configuration import Configuration


class OrificeControlResultOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'control_model_id': 'str',
        't': 'list[str]',
        'gate_level': 'DataResult',
        'discharge_in_structure': 'DataResult',
        'static_height': 'float'
    }

    attribute_map = {
        'control_model_id': 'controlModelId',
        't': 't',
        'gate_level': 'gateLevel',
        'discharge_in_structure': 'dischargeInStructure',
        'static_height': 'staticHeight'
    }

    def __init__(self, control_model_id=None, t=None, gate_level=None, discharge_in_structure=None, static_height=None, local_vars_configuration=None):  # noqa: E501
        """OrificeControlResultOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._control_model_id = None
        self._t = None
        self._gate_level = None
        self._discharge_in_structure = None
        self._static_height = None
        self.discriminator = None

        self.control_model_id = control_model_id
        self.t = t
        if gate_level is not None:
            self.gate_level = gate_level
        if discharge_in_structure is not None:
            self.discharge_in_structure = discharge_in_structure
        if static_height is not None:
            self.static_height = static_height

    @property
    def control_model_id(self):
        """Gets the control_model_id of this OrificeControlResultOutput.  # noqa: E501

        微调堰  # noqa: E501

        :return: The control_model_id of this OrificeControlResultOutput.  # noqa: E501
        :rtype: str
        """
        return self._control_model_id

    @control_model_id.setter
    def control_model_id(self, control_model_id):
        """Sets the control_model_id of this OrificeControlResultOutput.

        微调堰  # noqa: E501

        :param control_model_id: The control_model_id of this OrificeControlResultOutput.  # noqa: E501
        :type: str
        """

        self._control_model_id = control_model_id

    @property
    def t(self):
        """Gets the t of this OrificeControlResultOutput.  # noqa: E501

        方案  # noqa: E501

        :return: The t of this OrificeControlResultOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this OrificeControlResultOutput.

        方案  # noqa: E501

        :param t: The t of this OrificeControlResultOutput.  # noqa: E501
        :type: list[str]
        """

        self._t = t

    @property
    def gate_level(self):
        """Gets the gate_level of this OrificeControlResultOutput.  # noqa: E501


        :return: The gate_level of this OrificeControlResultOutput.  # noqa: E501
        :rtype: DataResult
        """
        return self._gate_level

    @gate_level.setter
    def gate_level(self, gate_level):
        """Sets the gate_level of this OrificeControlResultOutput.


        :param gate_level: The gate_level of this OrificeControlResultOutput.  # noqa: E501
        :type: DataResult
        """

        self._gate_level = gate_level

    @property
    def discharge_in_structure(self):
        """Gets the discharge_in_structure of this OrificeControlResultOutput.  # noqa: E501


        :return: The discharge_in_structure of this OrificeControlResultOutput.  # noqa: E501
        :rtype: DataResult
        """
        return self._discharge_in_structure

    @discharge_in_structure.setter
    def discharge_in_structure(self, discharge_in_structure):
        """Sets the discharge_in_structure of this OrificeControlResultOutput.


        :param discharge_in_structure: The discharge_in_structure of this OrificeControlResultOutput.  # noqa: E501
        :type: DataResult
        """

        self._discharge_in_structure = discharge_in_structure

    @property
    def static_height(self):
        """Gets the static_height of this OrificeControlResultOutput.  # noqa: E501

        常开固定堰的高度  # noqa: E501

        :return: The static_height of this OrificeControlResultOutput.  # noqa: E501
        :rtype: float
        """
        return self._static_height

    @static_height.setter
    def static_height(self, static_height):
        """Sets the static_height of this OrificeControlResultOutput.

        常开固定堰的高度  # noqa: E501

        :param static_height: The static_height of this OrificeControlResultOutput.  # noqa: E501
        :type: float
        """

        self._static_height = static_height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrificeControlResultOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrificeControlResultOutput):
            return True

        return self.to_dict() != other.to_dict()
