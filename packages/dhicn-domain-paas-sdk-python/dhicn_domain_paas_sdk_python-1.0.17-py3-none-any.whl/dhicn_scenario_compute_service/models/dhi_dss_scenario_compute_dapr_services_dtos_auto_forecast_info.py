# coding: utf-8

"""
    scenario-compute-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_scenario_compute_service.configuration import Configuration


class DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'scenario_id': 'str',
        'tenant_id': 'str',
        'trigger_type': 'int',
        'execute_cycle': 'float',
        'trigger_threshold': 'str',
        'trigger_cancel_threshold': 'str',
        'continues_cycle': 'float',
        'previous_hours': 'float',
        'forecast_hours': 'float',
        'business_type': 'int',
        'library_type': 'int'
    }

    attribute_map = {
        'id': 'id',
        'scenario_id': 'scenarioId',
        'tenant_id': 'tenantId',
        'trigger_type': 'triggerType',
        'execute_cycle': 'executeCycle',
        'trigger_threshold': 'triggerThreshold',
        'trigger_cancel_threshold': 'triggerCancelThreshold',
        'continues_cycle': 'continuesCycle',
        'previous_hours': 'previousHours',
        'forecast_hours': 'forecastHours',
        'business_type': 'businessType',
        'library_type': 'libraryType'
    }

    def __init__(self, id=None, scenario_id=None, tenant_id=None, trigger_type=None, execute_cycle=None, trigger_threshold=None, trigger_cancel_threshold=None, continues_cycle=None, previous_hours=None, forecast_hours=None, business_type=None, library_type=None, local_vars_configuration=None):  # noqa: E501
        """DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._scenario_id = None
        self._tenant_id = None
        self._trigger_type = None
        self._execute_cycle = None
        self._trigger_threshold = None
        self._trigger_cancel_threshold = None
        self._continues_cycle = None
        self._previous_hours = None
        self._forecast_hours = None
        self._business_type = None
        self._library_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.scenario_id = scenario_id
        self.tenant_id = tenant_id
        if trigger_type is not None:
            self.trigger_type = trigger_type
        if execute_cycle is not None:
            self.execute_cycle = execute_cycle
        self.trigger_threshold = trigger_threshold
        self.trigger_cancel_threshold = trigger_cancel_threshold
        if continues_cycle is not None:
            self.continues_cycle = continues_cycle
        if previous_hours is not None:
            self.previous_hours = previous_hours
        if forecast_hours is not None:
            self.forecast_hours = forecast_hours
        if business_type is not None:
            self.business_type = business_type
        if library_type is not None:
            self.library_type = library_type

    @property
    def id(self):
        """Gets the id of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501

        Data id  # noqa: E501

        :return: The id of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.

        Data id  # noqa: E501

        :param id: The id of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def scenario_id(self):
        """Gets the scenario_id of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501

        Scenario id  # noqa: E501

        :return: The scenario_id of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.

        Scenario id  # noqa: E501

        :param scenario_id: The scenario_id of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :type: str
        """

        self._scenario_id = scenario_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501

        Tenant id  # noqa: E501

        :return: The tenant_id of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.

        Tenant id  # noqa: E501

        :param tenant_id: The tenant_id of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def trigger_type(self):
        """Gets the trigger_type of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501

        0-Cycle 1-Condition   # noqa: E501

        :return: The trigger_type of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :rtype: int
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.

        0-Cycle 1-Condition   # noqa: E501

        :param trigger_type: The trigger_type of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and trigger_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def execute_cycle(self):
        """Gets the execute_cycle of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501

        定时触发的周期 小时  # noqa: E501

        :return: The execute_cycle of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :rtype: float
        """
        return self._execute_cycle

    @execute_cycle.setter
    def execute_cycle(self, execute_cycle):
        """Sets the execute_cycle of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.

        定时触发的周期 小时  # noqa: E501

        :param execute_cycle: The execute_cycle of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :type: float
        """

        self._execute_cycle = execute_cycle

    @property
    def trigger_threshold(self):
        """Gets the trigger_threshold of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501

        Trigger autoforecast threshold  # noqa: E501

        :return: The trigger_threshold of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :rtype: str
        """
        return self._trigger_threshold

    @trigger_threshold.setter
    def trigger_threshold(self, trigger_threshold):
        """Sets the trigger_threshold of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.

        Trigger autoforecast threshold  # noqa: E501

        :param trigger_threshold: The trigger_threshold of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :type: str
        """

        self._trigger_threshold = trigger_threshold

    @property
    def trigger_cancel_threshold(self):
        """Gets the trigger_cancel_threshold of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501

        Trigger cancel autoforecast threshold  # noqa: E501

        :return: The trigger_cancel_threshold of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :rtype: str
        """
        return self._trigger_cancel_threshold

    @trigger_cancel_threshold.setter
    def trigger_cancel_threshold(self, trigger_cancel_threshold):
        """Sets the trigger_cancel_threshold of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.

        Trigger cancel autoforecast threshold  # noqa: E501

        :param trigger_cancel_threshold: The trigger_cancel_threshold of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :type: str
        """

        self._trigger_cancel_threshold = trigger_cancel_threshold

    @property
    def continues_cycle(self):
        """Gets the continues_cycle of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501

        Timed forecast cycles  # noqa: E501

        :return: The continues_cycle of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :rtype: float
        """
        return self._continues_cycle

    @continues_cycle.setter
    def continues_cycle(self, continues_cycle):
        """Sets the continues_cycle of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.

        Timed forecast cycles  # noqa: E501

        :param continues_cycle: The continues_cycle of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :type: float
        """

        self._continues_cycle = continues_cycle

    @property
    def previous_hours(self):
        """Gets the previous_hours of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501

        Previous hours  # noqa: E501

        :return: The previous_hours of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :rtype: float
        """
        return self._previous_hours

    @previous_hours.setter
    def previous_hours(self, previous_hours):
        """Sets the previous_hours of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.

        Previous hours  # noqa: E501

        :param previous_hours: The previous_hours of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :type: float
        """

        self._previous_hours = previous_hours

    @property
    def forecast_hours(self):
        """Gets the forecast_hours of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501

        Forecast hours  # noqa: E501

        :return: The forecast_hours of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :rtype: float
        """
        return self._forecast_hours

    @forecast_hours.setter
    def forecast_hours(self, forecast_hours):
        """Sets the forecast_hours of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.

        Forecast hours  # noqa: E501

        :param forecast_hours: The forecast_hours of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :type: float
        """

        self._forecast_hours = forecast_hours

    @property
    def business_type(self):
        """Gets the business_type of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501

        0-Undefined(Undefined) 1-WaterEnvironment(Water environment) 2-UrbanFlooding(Urban flooding) 3-UrbanWD(Water distribution) 4-RiverFlood(River flood)   # noqa: E501

        :return: The business_type of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :rtype: int
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """Sets the business_type of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.

        0-Undefined(Undefined) 1-WaterEnvironment(Water environment) 2-UrbanFlooding(Urban flooding) 3-UrbanWD(Water distribution) 4-RiverFlood(River flood)   # noqa: E501

        :param business_type: The business_type of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and business_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `business_type` ({0}), must be one of {1}"  # noqa: E501
                .format(business_type, allowed_values)
            )

        self._business_type = business_type

    @property
    def library_type(self):
        """Gets the library_type of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501

        0-Undefined(Undefined) 1-AutoForecast(Auto forecast library) 2-ManualForecast(Manual forecast library) 3-Forecast(Forecast library) 4-Schedule(Schedule library) 5-Experience(Experience library) 6-ScenarioSimulation(Scenario simulation library) 7-WQAccident(Water quality accident library) 8-OnlineHD(WD Hydrodynamic library) 9-WaterHammer(WD water hammer library) 10-Filling(WD pipe filling library) 11-PipeBurst(WD pipe burst library) 12-WQResponse(Water quality accident response library) 13-Planning(WD planning library) 14-Flushing(WD flushing library) 15-OnlineWQAccident(Online Water quality accident library) 16-CloseValve(WD close valve library)   # noqa: E501

        :return: The library_type of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :rtype: int
        """
        return self._library_type

    @library_type.setter
    def library_type(self, library_type):
        """Sets the library_type of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.

        0-Undefined(Undefined) 1-AutoForecast(Auto forecast library) 2-ManualForecast(Manual forecast library) 3-Forecast(Forecast library) 4-Schedule(Schedule library) 5-Experience(Experience library) 6-ScenarioSimulation(Scenario simulation library) 7-WQAccident(Water quality accident library) 8-OnlineHD(WD Hydrodynamic library) 9-WaterHammer(WD water hammer library) 10-Filling(WD pipe filling library) 11-PipeBurst(WD pipe burst library) 12-WQResponse(Water quality accident response library) 13-Planning(WD planning library) 14-Flushing(WD flushing library) 15-OnlineWQAccident(Online Water quality accident library) 16-CloseValve(WD close valve library)   # noqa: E501

        :param library_type: The library_type of this DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and library_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `library_type` ({0}), must be one of {1}"  # noqa: E501
                .format(library_type, allowed_values)
            )

        self._library_type = library_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo):
            return True

        return self.to_dict() != other.to_dict()
