# coding: utf-8

"""
    scenario-compute-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_scenario_compute_service.configuration import Configuration


class DhiDssScenarioComputeDaprServicesDtosRunModelInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model_type': 'str',
        'scenario_id': 'str',
        'tenant_id': 'str',
        'template_scenario_id': 'str',
        'business_type': 'int',
        'library_type': 'int'
    }

    attribute_map = {
        'model_type': 'modelType',
        'scenario_id': 'scenarioId',
        'tenant_id': 'tenantId',
        'template_scenario_id': 'templateScenarioId',
        'business_type': 'businessType',
        'library_type': 'libraryType'
    }

    def __init__(self, model_type=None, scenario_id=None, tenant_id=None, template_scenario_id=None, business_type=None, library_type=None, local_vars_configuration=None):  # noqa: E501
        """DhiDssScenarioComputeDaprServicesDtosRunModelInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._model_type = None
        self._scenario_id = None
        self._tenant_id = None
        self._template_scenario_id = None
        self._business_type = None
        self._library_type = None
        self.discriminator = None

        self.model_type = model_type
        self.scenario_id = scenario_id
        self.tenant_id = tenant_id
        self.template_scenario_id = template_scenario_id
        if business_type is not None:
            self.business_type = business_type
        if library_type is not None:
            self.library_type = library_type

    @property
    def model_type(self):
        """Gets the model_type of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501


        :return: The model_type of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.


        :param model_type: The model_type of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501
        :type: str
        """

        self._model_type = model_type

    @property
    def scenario_id(self):
        """Gets the scenario_id of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501


        :return: The scenario_id of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.


        :param scenario_id: The scenario_id of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501
        :type: str
        """

        self._scenario_id = scenario_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501


        :return: The tenant_id of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.


        :param tenant_id: The tenant_id of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def template_scenario_id(self):
        """Gets the template_scenario_id of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501


        :return: The template_scenario_id of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501
        :rtype: str
        """
        return self._template_scenario_id

    @template_scenario_id.setter
    def template_scenario_id(self, template_scenario_id):
        """Sets the template_scenario_id of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.


        :param template_scenario_id: The template_scenario_id of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501
        :type: str
        """

        self._template_scenario_id = template_scenario_id

    @property
    def business_type(self):
        """Gets the business_type of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501

        0-Undefined(Undefined) 1-WaterEnvironment(Water environment) 2-UrbanFlooding(Urban flooding) 3-UrbanWD(Water distribution) 4-RiverFlood(River flood)   # noqa: E501

        :return: The business_type of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501
        :rtype: int
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """Sets the business_type of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.

        0-Undefined(Undefined) 1-WaterEnvironment(Water environment) 2-UrbanFlooding(Urban flooding) 3-UrbanWD(Water distribution) 4-RiverFlood(River flood)   # noqa: E501

        :param business_type: The business_type of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and business_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `business_type` ({0}), must be one of {1}"  # noqa: E501
                .format(business_type, allowed_values)
            )

        self._business_type = business_type

    @property
    def library_type(self):
        """Gets the library_type of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501

        0-Undefined(Undefined) 1-AutoForecast(Auto forecast library) 2-ManualForecast(Manual forecast library) 3-Forecast(Forecast library) 4-Schedule(Schedule library) 5-Experience(Experience library) 6-ScenarioSimulation(Scenario simulation library) 7-WQAccident(Water quality accident library) 8-OnlineHD(WD Hydrodynamic library) 9-WaterHammer(WD water hammer library) 10-Filling(WD pipe filling library) 11-PipeBurst(WD pipe burst library) 12-WQResponse(Water quality accident response library) 13-Planning(WD planning library) 14-Flushing(WD flushing library) 15-OnlineWQAccident(Online Water quality accident library) 16-CloseValve(WD close valve library)   # noqa: E501

        :return: The library_type of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501
        :rtype: int
        """
        return self._library_type

    @library_type.setter
    def library_type(self, library_type):
        """Sets the library_type of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.

        0-Undefined(Undefined) 1-AutoForecast(Auto forecast library) 2-ManualForecast(Manual forecast library) 3-Forecast(Forecast library) 4-Schedule(Schedule library) 5-Experience(Experience library) 6-ScenarioSimulation(Scenario simulation library) 7-WQAccident(Water quality accident library) 8-OnlineHD(WD Hydrodynamic library) 9-WaterHammer(WD water hammer library) 10-Filling(WD pipe filling library) 11-PipeBurst(WD pipe burst library) 12-WQResponse(Water quality accident response library) 13-Planning(WD planning library) 14-Flushing(WD flushing library) 15-OnlineWQAccident(Online Water quality accident library) 16-CloseValve(WD close valve library)   # noqa: E501

        :param library_type: The library_type of this DhiDssScenarioComputeDaprServicesDtosRunModelInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and library_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `library_type` ({0}), must be one of {1}"  # noqa: E501
                .format(library_type, allowed_values)
            )

        self._library_type = library_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DhiDssScenarioComputeDaprServicesDtosRunModelInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DhiDssScenarioComputeDaprServicesDtosRunModelInfo):
            return True

        return self.to_dict() != other.to_dict()
