# coding: utf-8

"""
    model-driver-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_model_driver_service.configuration import Configuration


class ModelDriverDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'project_name': 'str',
        'tenant_id': 'str',
        'scenario_id': 'str',
        'model_type': 'str',
        'priority': 'int',
        'model_info': 'str',
        'compute_begin_time': 'datetime',
        'compute_end_time': 'datetime',
        'compute_node': 'str',
        'create_time': 'datetime',
        'status': 'EnumStatus',
        'sequence_number': 'int',
        'log_path': 'str'
    }

    attribute_map = {
        'id': 'id',
        'project_name': 'projectName',
        'tenant_id': 'tenantId',
        'scenario_id': 'scenarioId',
        'model_type': 'modelType',
        'priority': 'priority',
        'model_info': 'modelInfo',
        'compute_begin_time': 'computeBeginTime',
        'compute_end_time': 'computeEndTime',
        'compute_node': 'computeNode',
        'create_time': 'createTime',
        'status': 'status',
        'sequence_number': 'sequenceNumber',
        'log_path': 'logPath'
    }

    def __init__(self, id=None, project_name=None, tenant_id=None, scenario_id=None, model_type=None, priority=None, model_info=None, compute_begin_time=None, compute_end_time=None, compute_node=None, create_time=None, status=None, sequence_number=None, log_path=None, local_vars_configuration=None):  # noqa: E501
        """ModelDriverDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._project_name = None
        self._tenant_id = None
        self._scenario_id = None
        self._model_type = None
        self._priority = None
        self._model_info = None
        self._compute_begin_time = None
        self._compute_end_time = None
        self._compute_node = None
        self._create_time = None
        self._status = None
        self._sequence_number = None
        self._log_path = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.project_name = project_name
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if scenario_id is not None:
            self.scenario_id = scenario_id
        self.model_type = model_type
        if priority is not None:
            self.priority = priority
        self.model_info = model_info
        if compute_begin_time is not None:
            self.compute_begin_time = compute_begin_time
        if compute_end_time is not None:
            self.compute_end_time = compute_end_time
        self.compute_node = compute_node
        if create_time is not None:
            self.create_time = create_time
        if status is not None:
            self.status = status
        if sequence_number is not None:
            self.sequence_number = sequence_number
        self.log_path = log_path

    @property
    def id(self):
        """Gets the id of this ModelDriverDto.  # noqa: E501

        Id  # noqa: E501

        :return: The id of this ModelDriverDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelDriverDto.

        Id  # noqa: E501

        :param id: The id of this ModelDriverDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_name(self):
        """Gets the project_name of this ModelDriverDto.  # noqa: E501

        项目名称  # noqa: E501

        :return: The project_name of this ModelDriverDto.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ModelDriverDto.

        项目名称  # noqa: E501

        :param project_name: The project_name of this ModelDriverDto.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ModelDriverDto.  # noqa: E501

        租户ID  # noqa: E501

        :return: The tenant_id of this ModelDriverDto.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ModelDriverDto.

        租户ID  # noqa: E501

        :param tenant_id: The tenant_id of this ModelDriverDto.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def scenario_id(self):
        """Gets the scenario_id of this ModelDriverDto.  # noqa: E501

        方案Id  # noqa: E501

        :return: The scenario_id of this ModelDriverDto.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this ModelDriverDto.

        方案Id  # noqa: E501

        :param scenario_id: The scenario_id of this ModelDriverDto.  # noqa: E501
        :type: str
        """

        self._scenario_id = scenario_id

    @property
    def model_type(self):
        """Gets the model_type of this ModelDriverDto.  # noqa: E501

        模型类型  # noqa: E501

        :return: The model_type of this ModelDriverDto.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ModelDriverDto.

        模型类型  # noqa: E501

        :param model_type: The model_type of this ModelDriverDto.  # noqa: E501
        :type: str
        """

        self._model_type = model_type

    @property
    def priority(self):
        """Gets the priority of this ModelDriverDto.  # noqa: E501

        优先级  # noqa: E501

        :return: The priority of this ModelDriverDto.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ModelDriverDto.

        优先级  # noqa: E501

        :param priority: The priority of this ModelDriverDto.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def model_info(self):
        """Gets the model_info of this ModelDriverDto.  # noqa: E501

        模型信息  # noqa: E501

        :return: The model_info of this ModelDriverDto.  # noqa: E501
        :rtype: str
        """
        return self._model_info

    @model_info.setter
    def model_info(self, model_info):
        """Sets the model_info of this ModelDriverDto.

        模型信息  # noqa: E501

        :param model_info: The model_info of this ModelDriverDto.  # noqa: E501
        :type: str
        """

        self._model_info = model_info

    @property
    def compute_begin_time(self):
        """Gets the compute_begin_time of this ModelDriverDto.  # noqa: E501

        计算开始时间  # noqa: E501

        :return: The compute_begin_time of this ModelDriverDto.  # noqa: E501
        :rtype: datetime
        """
        return self._compute_begin_time

    @compute_begin_time.setter
    def compute_begin_time(self, compute_begin_time):
        """Sets the compute_begin_time of this ModelDriverDto.

        计算开始时间  # noqa: E501

        :param compute_begin_time: The compute_begin_time of this ModelDriverDto.  # noqa: E501
        :type: datetime
        """

        self._compute_begin_time = compute_begin_time

    @property
    def compute_end_time(self):
        """Gets the compute_end_time of this ModelDriverDto.  # noqa: E501

        计算结束时间  # noqa: E501

        :return: The compute_end_time of this ModelDriverDto.  # noqa: E501
        :rtype: datetime
        """
        return self._compute_end_time

    @compute_end_time.setter
    def compute_end_time(self, compute_end_time):
        """Sets the compute_end_time of this ModelDriverDto.

        计算结束时间  # noqa: E501

        :param compute_end_time: The compute_end_time of this ModelDriverDto.  # noqa: E501
        :type: datetime
        """

        self._compute_end_time = compute_end_time

    @property
    def compute_node(self):
        """Gets the compute_node of this ModelDriverDto.  # noqa: E501

        计算节点  # noqa: E501

        :return: The compute_node of this ModelDriverDto.  # noqa: E501
        :rtype: str
        """
        return self._compute_node

    @compute_node.setter
    def compute_node(self, compute_node):
        """Sets the compute_node of this ModelDriverDto.

        计算节点  # noqa: E501

        :param compute_node: The compute_node of this ModelDriverDto.  # noqa: E501
        :type: str
        """

        self._compute_node = compute_node

    @property
    def create_time(self):
        """Gets the create_time of this ModelDriverDto.  # noqa: E501

        创建时间  # noqa: E501

        :return: The create_time of this ModelDriverDto.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ModelDriverDto.

        创建时间  # noqa: E501

        :param create_time: The create_time of this ModelDriverDto.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def status(self):
        """Gets the status of this ModelDriverDto.  # noqa: E501


        :return: The status of this ModelDriverDto.  # noqa: E501
        :rtype: EnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelDriverDto.


        :param status: The status of this ModelDriverDto.  # noqa: E501
        :type: EnumStatus
        """

        self._status = status

    @property
    def sequence_number(self):
        """Gets the sequence_number of this ModelDriverDto.  # noqa: E501

        Todo  # noqa: E501

        :return: The sequence_number of this ModelDriverDto.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this ModelDriverDto.

        Todo  # noqa: E501

        :param sequence_number: The sequence_number of this ModelDriverDto.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def log_path(self):
        """Gets the log_path of this ModelDriverDto.  # noqa: E501

        日志存储路径  # noqa: E501

        :return: The log_path of this ModelDriverDto.  # noqa: E501
        :rtype: str
        """
        return self._log_path

    @log_path.setter
    def log_path(self, log_path):
        """Sets the log_path of this ModelDriverDto.

        日志存储路径  # noqa: E501

        :param log_path: The log_path of this ModelDriverDto.  # noqa: E501
        :type: str
        """

        self._log_path = log_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelDriverDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelDriverDto):
            return True

        return self.to_dict() != other.to_dict()
