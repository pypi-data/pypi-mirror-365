# coding: utf-8

"""
    result-analysis-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_result_analysis_service.configuration import Configuration


class NetworkProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pipe_profile': 'list[PipeProfileItem]',
        'profile_data': 'list[NodeProfileDataProfileDataItem]'
    }

    attribute_map = {
        'pipe_profile': 'pipeProfile',
        'profile_data': 'profileData'
    }

    def __init__(self, pipe_profile=None, profile_data=None, local_vars_configuration=None):  # noqa: E501
        """NetworkProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pipe_profile = None
        self._profile_data = None
        self.discriminator = None

        self.pipe_profile = pipe_profile
        self.profile_data = profile_data

    @property
    def pipe_profile(self):
        """Gets the pipe_profile of this NetworkProfile.  # noqa: E501

        管道剖面数据 pipe profile data  # noqa: E501

        :return: The pipe_profile of this NetworkProfile.  # noqa: E501
        :rtype: list[PipeProfileItem]
        """
        return self._pipe_profile

    @pipe_profile.setter
    def pipe_profile(self, pipe_profile):
        """Sets the pipe_profile of this NetworkProfile.

        管道剖面数据 pipe profile data  # noqa: E501

        :param pipe_profile: The pipe_profile of this NetworkProfile.  # noqa: E501
        :type: list[PipeProfileItem]
        """

        self._pipe_profile = pipe_profile

    @property
    def profile_data(self):
        """Gets the profile_data of this NetworkProfile.  # noqa: E501

        水位时间序列数据 water level time series  # noqa: E501

        :return: The profile_data of this NetworkProfile.  # noqa: E501
        :rtype: list[NodeProfileDataProfileDataItem]
        """
        return self._profile_data

    @profile_data.setter
    def profile_data(self, profile_data):
        """Sets the profile_data of this NetworkProfile.

        水位时间序列数据 water level time series  # noqa: E501

        :param profile_data: The profile_data of this NetworkProfile.  # noqa: E501
        :type: list[NodeProfileDataProfileDataItem]
        """

        self._profile_data = profile_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkProfile):
            return True

        return self.to_dict() != other.to_dict()
