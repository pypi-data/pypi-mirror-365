# coding: utf-8

"""
    result-analysis-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_result_analysis_service.configuration import Configuration


class FilterModelResultDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model_id': 'str',
        'value': 'float',
        'name': 'str',
        'x': 'float',
        'y': 'float'
    }

    attribute_map = {
        'model_id': 'modelId',
        'value': 'value',
        'name': 'name',
        'x': 'x',
        'y': 'y'
    }

    def __init__(self, model_id=None, value=None, name=None, x=None, y=None, local_vars_configuration=None):  # noqa: E501
        """FilterModelResultDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._model_id = None
        self._value = None
        self._name = None
        self._x = None
        self._y = None
        self.discriminator = None

        self.model_id = model_id
        if value is not None:
            self.value = value
        self.name = name
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y

    @property
    def model_id(self):
        """Gets the model_id of this FilterModelResultDto.  # noqa: E501


        :return: The model_id of this FilterModelResultDto.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this FilterModelResultDto.


        :param model_id: The model_id of this FilterModelResultDto.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def value(self):
        """Gets the value of this FilterModelResultDto.  # noqa: E501


        :return: The value of this FilterModelResultDto.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FilterModelResultDto.


        :param value: The value of this FilterModelResultDto.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def name(self):
        """Gets the name of this FilterModelResultDto.  # noqa: E501


        :return: The name of this FilterModelResultDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilterModelResultDto.


        :param name: The name of this FilterModelResultDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def x(self):
        """Gets the x of this FilterModelResultDto.  # noqa: E501


        :return: The x of this FilterModelResultDto.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this FilterModelResultDto.


        :param x: The x of this FilterModelResultDto.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this FilterModelResultDto.  # noqa: E501


        :return: The y of this FilterModelResultDto.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this FilterModelResultDto.


        :param y: The y of this FilterModelResultDto.  # noqa: E501
        :type: float
        """

        self._y = y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterModelResultDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilterModelResultDto):
            return True

        return self.to_dict() != other.to_dict()
