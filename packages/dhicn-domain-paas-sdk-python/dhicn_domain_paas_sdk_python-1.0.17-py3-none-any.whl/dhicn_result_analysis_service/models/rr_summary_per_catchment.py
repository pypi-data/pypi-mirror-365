# coding: utf-8

"""
    result-analysis-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_result_analysis_service.configuration import Configuration


class RrSummaryPerCatchment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'catchment_id': 'str',
        'start_volume': 'float',
        'total_inflow': 'float',
        'total_losses': 'float',
        'total_runoff': 'float',
        'end_volume': 'float',
        'total_inflow_percent': 'float'
    }

    attribute_map = {
        'catchment_id': 'catchmentID',
        'start_volume': 'startVolume',
        'total_inflow': 'totalInflow',
        'total_losses': 'totalLosses',
        'total_runoff': 'totalRunoff',
        'end_volume': 'endVolume',
        'total_inflow_percent': 'totalInflowPercent'
    }

    def __init__(self, catchment_id=None, start_volume=None, total_inflow=None, total_losses=None, total_runoff=None, end_volume=None, total_inflow_percent=None, local_vars_configuration=None):  # noqa: E501
        """RrSummaryPerCatchment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._catchment_id = None
        self._start_volume = None
        self._total_inflow = None
        self._total_losses = None
        self._total_runoff = None
        self._end_volume = None
        self._total_inflow_percent = None
        self.discriminator = None

        self.catchment_id = catchment_id
        if start_volume is not None:
            self.start_volume = start_volume
        if total_inflow is not None:
            self.total_inflow = total_inflow
        if total_losses is not None:
            self.total_losses = total_losses
        if total_runoff is not None:
            self.total_runoff = total_runoff
        if end_volume is not None:
            self.end_volume = end_volume
        if total_inflow_percent is not None:
            self.total_inflow_percent = total_inflow_percent

    @property
    def catchment_id(self):
        """Gets the catchment_id of this RrSummaryPerCatchment.  # noqa: E501

        汇水区ID catchment muid  # noqa: E501

        :return: The catchment_id of this RrSummaryPerCatchment.  # noqa: E501
        :rtype: str
        """
        return self._catchment_id

    @catchment_id.setter
    def catchment_id(self, catchment_id):
        """Sets the catchment_id of this RrSummaryPerCatchment.

        汇水区ID catchment muid  # noqa: E501

        :param catchment_id: The catchment_id of this RrSummaryPerCatchment.  # noqa: E501
        :type: str
        """

        self._catchment_id = catchment_id

    @property
    def start_volume(self):
        """Gets the start_volume of this RrSummaryPerCatchment.  # noqa: E501

        初始水量 start volume of the catchment  # noqa: E501

        :return: The start_volume of this RrSummaryPerCatchment.  # noqa: E501
        :rtype: float
        """
        return self._start_volume

    @start_volume.setter
    def start_volume(self, start_volume):
        """Sets the start_volume of this RrSummaryPerCatchment.

        初始水量 start volume of the catchment  # noqa: E501

        :param start_volume: The start_volume of this RrSummaryPerCatchment.  # noqa: E501
        :type: float
        """

        self._start_volume = start_volume

    @property
    def total_inflow(self):
        """Gets the total_inflow of this RrSummaryPerCatchment.  # noqa: E501

        总入流量 total inflow of the catchment  # noqa: E501

        :return: The total_inflow of this RrSummaryPerCatchment.  # noqa: E501
        :rtype: float
        """
        return self._total_inflow

    @total_inflow.setter
    def total_inflow(self, total_inflow):
        """Sets the total_inflow of this RrSummaryPerCatchment.

        总入流量 total inflow of the catchment  # noqa: E501

        :param total_inflow: The total_inflow of this RrSummaryPerCatchment.  # noqa: E501
        :type: float
        """

        self._total_inflow = total_inflow

    @property
    def total_losses(self):
        """Gets the total_losses of this RrSummaryPerCatchment.  # noqa: E501

        总流失量 total losses of the catchment  # noqa: E501

        :return: The total_losses of this RrSummaryPerCatchment.  # noqa: E501
        :rtype: float
        """
        return self._total_losses

    @total_losses.setter
    def total_losses(self, total_losses):
        """Sets the total_losses of this RrSummaryPerCatchment.

        总流失量 total losses of the catchment  # noqa: E501

        :param total_losses: The total_losses of this RrSummaryPerCatchment.  # noqa: E501
        :type: float
        """

        self._total_losses = total_losses

    @property
    def total_runoff(self):
        """Gets the total_runoff of this RrSummaryPerCatchment.  # noqa: E501

        总径流量 total runoff discharge of the catchment  # noqa: E501

        :return: The total_runoff of this RrSummaryPerCatchment.  # noqa: E501
        :rtype: float
        """
        return self._total_runoff

    @total_runoff.setter
    def total_runoff(self, total_runoff):
        """Sets the total_runoff of this RrSummaryPerCatchment.

        总径流量 total runoff discharge of the catchment  # noqa: E501

        :param total_runoff: The total_runoff of this RrSummaryPerCatchment.  # noqa: E501
        :type: float
        """

        self._total_runoff = total_runoff

    @property
    def end_volume(self):
        """Gets the end_volume of this RrSummaryPerCatchment.  # noqa: E501

        终止水量 end volume of the catchment  # noqa: E501

        :return: The end_volume of this RrSummaryPerCatchment.  # noqa: E501
        :rtype: float
        """
        return self._end_volume

    @end_volume.setter
    def end_volume(self, end_volume):
        """Sets the end_volume of this RrSummaryPerCatchment.

        终止水量 end volume of the catchment  # noqa: E501

        :param end_volume: The end_volume of this RrSummaryPerCatchment.  # noqa: E501
        :type: float
        """

        self._end_volume = end_volume

    @property
    def total_inflow_percent(self):
        """Gets the total_inflow_percent of this RrSummaryPerCatchment.  # noqa: E501

        占总入流量的百分比 total inflow percent of the catchment  # noqa: E501

        :return: The total_inflow_percent of this RrSummaryPerCatchment.  # noqa: E501
        :rtype: float
        """
        return self._total_inflow_percent

    @total_inflow_percent.setter
    def total_inflow_percent(self, total_inflow_percent):
        """Sets the total_inflow_percent of this RrSummaryPerCatchment.

        占总入流量的百分比 total inflow percent of the catchment  # noqa: E501

        :param total_inflow_percent: The total_inflow_percent of this RrSummaryPerCatchment.  # noqa: E501
        :type: float
        """

        self._total_inflow_percent = total_inflow_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RrSummaryPerCatchment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RrSummaryPerCatchment):
            return True

        return self.to_dict() != other.to_dict()
