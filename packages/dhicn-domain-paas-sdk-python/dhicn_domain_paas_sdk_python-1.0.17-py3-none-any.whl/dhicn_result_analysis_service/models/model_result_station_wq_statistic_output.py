# coding: utf-8

"""
    result-analysis-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_result_analysis_service.configuration import Configuration


class ModelResultStationWqStatisticOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key_section_location': 'str',
        'arrive_time': 'str',
        'leave_time': 'str',
        'max_value': 'float',
        'max_time': 'str',
        'ts_pairs': 'list[TsPairObject]'
    }

    attribute_map = {
        'key_section_location': 'keySectionLocation',
        'arrive_time': 'arriveTime',
        'leave_time': 'leaveTime',
        'max_value': 'maxValue',
        'max_time': 'maxTime',
        'ts_pairs': 'tsPairs'
    }

    def __init__(self, key_section_location=None, arrive_time=None, leave_time=None, max_value=None, max_time=None, ts_pairs=None, local_vars_configuration=None):  # noqa: E501
        """ModelResultStationWqStatisticOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key_section_location = None
        self._arrive_time = None
        self._leave_time = None
        self._max_value = None
        self._max_time = None
        self._ts_pairs = None
        self.discriminator = None

        self.key_section_location = key_section_location
        self.arrive_time = arrive_time
        self.leave_time = leave_time
        if max_value is not None:
            self.max_value = max_value
        self.max_time = max_time
        self.ts_pairs = ts_pairs

    @property
    def key_section_location(self):
        """Gets the key_section_location of this ModelResultStationWqStatisticOutput.  # noqa: E501

        考核断面（河道名，里程）assessment section (river name, chainage)  # noqa: E501

        :return: The key_section_location of this ModelResultStationWqStatisticOutput.  # noqa: E501
        :rtype: str
        """
        return self._key_section_location

    @key_section_location.setter
    def key_section_location(self, key_section_location):
        """Sets the key_section_location of this ModelResultStationWqStatisticOutput.

        考核断面（河道名，里程）assessment section (river name, chainage)  # noqa: E501

        :param key_section_location: The key_section_location of this ModelResultStationWqStatisticOutput.  # noqa: E501
        :type: str
        """

        self._key_section_location = key_section_location

    @property
    def arrive_time(self):
        """Gets the arrive_time of this ModelResultStationWqStatisticOutput.  # noqa: E501

        到达时间 arrive time  # noqa: E501

        :return: The arrive_time of this ModelResultStationWqStatisticOutput.  # noqa: E501
        :rtype: str
        """
        return self._arrive_time

    @arrive_time.setter
    def arrive_time(self, arrive_time):
        """Sets the arrive_time of this ModelResultStationWqStatisticOutput.

        到达时间 arrive time  # noqa: E501

        :param arrive_time: The arrive_time of this ModelResultStationWqStatisticOutput.  # noqa: E501
        :type: str
        """

        self._arrive_time = arrive_time

    @property
    def leave_time(self):
        """Gets the leave_time of this ModelResultStationWqStatisticOutput.  # noqa: E501

        离开时间 leave time  # noqa: E501

        :return: The leave_time of this ModelResultStationWqStatisticOutput.  # noqa: E501
        :rtype: str
        """
        return self._leave_time

    @leave_time.setter
    def leave_time(self, leave_time):
        """Sets the leave_time of this ModelResultStationWqStatisticOutput.

        离开时间 leave time  # noqa: E501

        :param leave_time: The leave_time of this ModelResultStationWqStatisticOutput.  # noqa: E501
        :type: str
        """

        self._leave_time = leave_time

    @property
    def max_value(self):
        """Gets the max_value of this ModelResultStationWqStatisticOutput.  # noqa: E501

        最大浓度值 maximum concentration value  # noqa: E501

        :return: The max_value of this ModelResultStationWqStatisticOutput.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this ModelResultStationWqStatisticOutput.

        最大浓度值 maximum concentration value  # noqa: E501

        :param max_value: The max_value of this ModelResultStationWqStatisticOutput.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def max_time(self):
        """Gets the max_time of this ModelResultStationWqStatisticOutput.  # noqa: E501

        最大浓度时刻 time of maximum concentration  # noqa: E501

        :return: The max_time of this ModelResultStationWqStatisticOutput.  # noqa: E501
        :rtype: str
        """
        return self._max_time

    @max_time.setter
    def max_time(self, max_time):
        """Sets the max_time of this ModelResultStationWqStatisticOutput.

        最大浓度时刻 time of maximum concentration  # noqa: E501

        :param max_time: The max_time of this ModelResultStationWqStatisticOutput.  # noqa: E501
        :type: str
        """

        self._max_time = max_time

    @property
    def ts_pairs(self):
        """Gets the ts_pairs of this ModelResultStationWqStatisticOutput.  # noqa: E501

        污染物浓度变化过程 time series of pollutant concentration change process  # noqa: E501

        :return: The ts_pairs of this ModelResultStationWqStatisticOutput.  # noqa: E501
        :rtype: list[TsPairObject]
        """
        return self._ts_pairs

    @ts_pairs.setter
    def ts_pairs(self, ts_pairs):
        """Sets the ts_pairs of this ModelResultStationWqStatisticOutput.

        污染物浓度变化过程 time series of pollutant concentration change process  # noqa: E501

        :param ts_pairs: The ts_pairs of this ModelResultStationWqStatisticOutput.  # noqa: E501
        :type: list[TsPairObject]
        """

        self._ts_pairs = ts_pairs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelResultStationWqStatisticOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelResultStationWqStatisticOutput):
            return True

        return self.to_dict() != other.to_dict()
