# coding: utf-8

"""
    消息服务

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_message_service.configuration import Configuration


class UserMsgOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'sender_user_id': 'str',
        'sender_organ_name': 'str',
        'sender_real_name': 'str',
        'receiver_user_id': 'str',
        'receiver_organ_name': 'str',
        'receiver_real_name': 'str',
        'level': 'int',
        'msg_type': 'str',
        'message': 'UserMessageObject',
        'is_read': 'bool',
        'is_mark': 'bool',
        'creation_time': 'datetime',
        'last_modification_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'sender_user_id': 'senderUserId',
        'sender_organ_name': 'senderOrganName',
        'sender_real_name': 'senderRealName',
        'receiver_user_id': 'receiverUserId',
        'receiver_organ_name': 'receiverOrganName',
        'receiver_real_name': 'receiverRealName',
        'level': 'level',
        'msg_type': 'msgType',
        'message': 'message',
        'is_read': 'isRead',
        'is_mark': 'isMark',
        'creation_time': 'creationTime',
        'last_modification_time': 'lastModificationTime'
    }

    def __init__(self, id=None, sender_user_id=None, sender_organ_name=None, sender_real_name=None, receiver_user_id=None, receiver_organ_name=None, receiver_real_name=None, level=None, msg_type=None, message=None, is_read=None, is_mark=None, creation_time=None, last_modification_time=None, local_vars_configuration=None):  # noqa: E501
        """UserMsgOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._sender_user_id = None
        self._sender_organ_name = None
        self._sender_real_name = None
        self._receiver_user_id = None
        self._receiver_organ_name = None
        self._receiver_real_name = None
        self._level = None
        self._msg_type = None
        self._message = None
        self._is_read = None
        self._is_mark = None
        self._creation_time = None
        self._last_modification_time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if sender_user_id is not None:
            self.sender_user_id = sender_user_id
        self.sender_organ_name = sender_organ_name
        self.sender_real_name = sender_real_name
        if receiver_user_id is not None:
            self.receiver_user_id = receiver_user_id
        self.receiver_organ_name = receiver_organ_name
        self.receiver_real_name = receiver_real_name
        if level is not None:
            self.level = level
        self.msg_type = msg_type
        if message is not None:
            self.message = message
        if is_read is not None:
            self.is_read = is_read
        if is_mark is not None:
            self.is_mark = is_mark
        if creation_time is not None:
            self.creation_time = creation_time
        self.last_modification_time = last_modification_time

    @property
    def id(self):
        """Gets the id of this UserMsgOutput.  # noqa: E501


        :return: The id of this UserMsgOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserMsgOutput.


        :param id: The id of this UserMsgOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def sender_user_id(self):
        """Gets the sender_user_id of this UserMsgOutput.  # noqa: E501

        发送人ID  # noqa: E501

        :return: The sender_user_id of this UserMsgOutput.  # noqa: E501
        :rtype: str
        """
        return self._sender_user_id

    @sender_user_id.setter
    def sender_user_id(self, sender_user_id):
        """Sets the sender_user_id of this UserMsgOutput.

        发送人ID  # noqa: E501

        :param sender_user_id: The sender_user_id of this UserMsgOutput.  # noqa: E501
        :type: str
        """

        self._sender_user_id = sender_user_id

    @property
    def sender_organ_name(self):
        """Gets the sender_organ_name of this UserMsgOutput.  # noqa: E501

        发送人组织名称  # noqa: E501

        :return: The sender_organ_name of this UserMsgOutput.  # noqa: E501
        :rtype: str
        """
        return self._sender_organ_name

    @sender_organ_name.setter
    def sender_organ_name(self, sender_organ_name):
        """Sets the sender_organ_name of this UserMsgOutput.

        发送人组织名称  # noqa: E501

        :param sender_organ_name: The sender_organ_name of this UserMsgOutput.  # noqa: E501
        :type: str
        """

        self._sender_organ_name = sender_organ_name

    @property
    def sender_real_name(self):
        """Gets the sender_real_name of this UserMsgOutput.  # noqa: E501

        发送人真实姓名  # noqa: E501

        :return: The sender_real_name of this UserMsgOutput.  # noqa: E501
        :rtype: str
        """
        return self._sender_real_name

    @sender_real_name.setter
    def sender_real_name(self, sender_real_name):
        """Sets the sender_real_name of this UserMsgOutput.

        发送人真实姓名  # noqa: E501

        :param sender_real_name: The sender_real_name of this UserMsgOutput.  # noqa: E501
        :type: str
        """

        self._sender_real_name = sender_real_name

    @property
    def receiver_user_id(self):
        """Gets the receiver_user_id of this UserMsgOutput.  # noqa: E501

        接收人ID  # noqa: E501

        :return: The receiver_user_id of this UserMsgOutput.  # noqa: E501
        :rtype: str
        """
        return self._receiver_user_id

    @receiver_user_id.setter
    def receiver_user_id(self, receiver_user_id):
        """Sets the receiver_user_id of this UserMsgOutput.

        接收人ID  # noqa: E501

        :param receiver_user_id: The receiver_user_id of this UserMsgOutput.  # noqa: E501
        :type: str
        """

        self._receiver_user_id = receiver_user_id

    @property
    def receiver_organ_name(self):
        """Gets the receiver_organ_name of this UserMsgOutput.  # noqa: E501

        接收人组织名称  # noqa: E501

        :return: The receiver_organ_name of this UserMsgOutput.  # noqa: E501
        :rtype: str
        """
        return self._receiver_organ_name

    @receiver_organ_name.setter
    def receiver_organ_name(self, receiver_organ_name):
        """Sets the receiver_organ_name of this UserMsgOutput.

        接收人组织名称  # noqa: E501

        :param receiver_organ_name: The receiver_organ_name of this UserMsgOutput.  # noqa: E501
        :type: str
        """

        self._receiver_organ_name = receiver_organ_name

    @property
    def receiver_real_name(self):
        """Gets the receiver_real_name of this UserMsgOutput.  # noqa: E501

        接收人真实姓名  # noqa: E501

        :return: The receiver_real_name of this UserMsgOutput.  # noqa: E501
        :rtype: str
        """
        return self._receiver_real_name

    @receiver_real_name.setter
    def receiver_real_name(self, receiver_real_name):
        """Sets the receiver_real_name of this UserMsgOutput.

        接收人真实姓名  # noqa: E501

        :param receiver_real_name: The receiver_real_name of this UserMsgOutput.  # noqa: E501
        :type: str
        """

        self._receiver_real_name = receiver_real_name

    @property
    def level(self):
        """Gets the level of this UserMsgOutput.  # noqa: E501

        消息等级,默认为0.  针对套子湾项目约定:1:重要;2:紧急;3:十万火急.  # noqa: E501

        :return: The level of this UserMsgOutput.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this UserMsgOutput.

        消息等级,默认为0.  针对套子湾项目约定:1:重要;2:紧急;3:十万火急.  # noqa: E501

        :param level: The level of this UserMsgOutput.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def msg_type(self):
        """Gets the msg_type of this UserMsgOutput.  # noqa: E501

        消息类型  # noqa: E501

        :return: The msg_type of this UserMsgOutput.  # noqa: E501
        :rtype: str
        """
        return self._msg_type

    @msg_type.setter
    def msg_type(self, msg_type):
        """Sets the msg_type of this UserMsgOutput.

        消息类型  # noqa: E501

        :param msg_type: The msg_type of this UserMsgOutput.  # noqa: E501
        :type: str
        """

        self._msg_type = msg_type

    @property
    def message(self):
        """Gets the message of this UserMsgOutput.  # noqa: E501


        :return: The message of this UserMsgOutput.  # noqa: E501
        :rtype: UserMessageObject
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UserMsgOutput.


        :param message: The message of this UserMsgOutput.  # noqa: E501
        :type: UserMessageObject
        """

        self._message = message

    @property
    def is_read(self):
        """Gets the is_read of this UserMsgOutput.  # noqa: E501

        是否已读  # noqa: E501

        :return: The is_read of this UserMsgOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this UserMsgOutput.

        是否已读  # noqa: E501

        :param is_read: The is_read of this UserMsgOutput.  # noqa: E501
        :type: bool
        """

        self._is_read = is_read

    @property
    def is_mark(self):
        """Gets the is_mark of this UserMsgOutput.  # noqa: E501

        是否标记  # noqa: E501

        :return: The is_mark of this UserMsgOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_mark

    @is_mark.setter
    def is_mark(self, is_mark):
        """Sets the is_mark of this UserMsgOutput.

        是否标记  # noqa: E501

        :param is_mark: The is_mark of this UserMsgOutput.  # noqa: E501
        :type: bool
        """

        self._is_mark = is_mark

    @property
    def creation_time(self):
        """Gets the creation_time of this UserMsgOutput.  # noqa: E501

        创建时间  # noqa: E501

        :return: The creation_time of this UserMsgOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this UserMsgOutput.

        创建时间  # noqa: E501

        :param creation_time: The creation_time of this UserMsgOutput.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def last_modification_time(self):
        """Gets the last_modification_time of this UserMsgOutput.  # noqa: E501


        :return: The last_modification_time of this UserMsgOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification_time

    @last_modification_time.setter
    def last_modification_time(self, last_modification_time):
        """Sets the last_modification_time of this UserMsgOutput.


        :param last_modification_time: The last_modification_time of this UserMsgOutput.  # noqa: E501
        :type: datetime
        """

        self._last_modification_time = last_modification_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserMsgOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserMsgOutput):
            return True

        return self.to_dict() != other.to_dict()
