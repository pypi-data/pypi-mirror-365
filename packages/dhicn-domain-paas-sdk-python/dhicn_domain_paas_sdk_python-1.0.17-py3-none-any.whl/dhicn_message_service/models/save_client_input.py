# coding: utf-8

"""
    消息服务

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_message_service.configuration import Configuration


class SaveClientInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_id': 'str',
        'client_id': 'str',
        'device_id': 'str',
        'device_type': 'str',
        'rom_name': 'str'
    }

    attribute_map = {
        'app_id': 'appId',
        'client_id': 'clientId',
        'device_id': 'deviceId',
        'device_type': 'deviceType',
        'rom_name': 'romName'
    }

    def __init__(self, app_id=None, client_id=None, device_id=None, device_type=None, rom_name=None, local_vars_configuration=None):  # noqa: E501
        """SaveClientInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_id = None
        self._client_id = None
        self._device_id = None
        self._device_type = None
        self._rom_name = None
        self.discriminator = None

        self.app_id = app_id
        self.client_id = client_id
        self.device_id = device_id
        self.device_type = device_type
        self.rom_name = rom_name

    @property
    def app_id(self):
        """Gets the app_id of this SaveClientInput.  # noqa: E501

        应用Id  # noqa: E501

        :return: The app_id of this SaveClientInput.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this SaveClientInput.

        应用Id  # noqa: E501

        :param app_id: The app_id of this SaveClientInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and app_id is None:  # noqa: E501
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                app_id is not None and len(app_id) < 1):
            raise ValueError("Invalid value for `app_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._app_id = app_id

    @property
    def client_id(self):
        """Gets the client_id of this SaveClientInput.  # noqa: E501

        客户端Id  # noqa: E501

        :return: The client_id of this SaveClientInput.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SaveClientInput.

        客户端Id  # noqa: E501

        :param client_id: The client_id of this SaveClientInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and client_id is None:  # noqa: E501
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                client_id is not None and len(client_id) < 1):
            raise ValueError("Invalid value for `client_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._client_id = client_id

    @property
    def device_id(self):
        """Gets the device_id of this SaveClientInput.  # noqa: E501

        设备Id  # noqa: E501

        :return: The device_id of this SaveClientInput.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this SaveClientInput.

        设备Id  # noqa: E501

        :param device_id: The device_id of this SaveClientInput.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def device_type(self):
        """Gets the device_type of this SaveClientInput.  # noqa: E501

        设备类型  # noqa: E501

        :return: The device_type of this SaveClientInput.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this SaveClientInput.

        设备类型  # noqa: E501

        :param device_type: The device_type of this SaveClientInput.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def rom_name(self):
        """Gets the rom_name of this SaveClientInput.  # noqa: E501

        系统  # noqa: E501

        :return: The rom_name of this SaveClientInput.  # noqa: E501
        :rtype: str
        """
        return self._rom_name

    @rom_name.setter
    def rom_name(self, rom_name):
        """Sets the rom_name of this SaveClientInput.

        系统  # noqa: E501

        :param rom_name: The rom_name of this SaveClientInput.  # noqa: E501
        :type: str
        """

        self._rom_name = rom_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveClientInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SaveClientInput):
            return True

        return self.to_dict() != other.to_dict()
