# coding: utf-8

"""
    wwtp-paas-main-bus-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_data_bus_service.configuration import Configuration


class SelectItemNodeDetailInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'unit': 'str',
        'online_code': 'str',
        'model_code': 'str',
        'model_data_type': 'str'
    }

    attribute_map = {
        'code': 'code',
        'unit': 'unit',
        'online_code': 'onlineCode',
        'model_code': 'modelCode',
        'model_data_type': 'modelDataType'
    }

    def __init__(self, code=None, unit=None, online_code=None, model_code=None, model_data_type=None, local_vars_configuration=None):  # noqa: E501
        """SelectItemNodeDetailInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._unit = None
        self._online_code = None
        self._model_code = None
        self._model_data_type = None
        self.discriminator = None

        self.code = code
        self.unit = unit
        self.online_code = online_code
        self.model_code = model_code
        self.model_data_type = model_data_type

    @property
    def code(self):
        """Gets the code of this SelectItemNodeDetailInfo.  # noqa: E501


        :return: The code of this SelectItemNodeDetailInfo.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SelectItemNodeDetailInfo.


        :param code: The code of this SelectItemNodeDetailInfo.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def unit(self):
        """Gets the unit of this SelectItemNodeDetailInfo.  # noqa: E501


        :return: The unit of this SelectItemNodeDetailInfo.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SelectItemNodeDetailInfo.


        :param unit: The unit of this SelectItemNodeDetailInfo.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def online_code(self):
        """Gets the online_code of this SelectItemNodeDetailInfo.  # noqa: E501


        :return: The online_code of this SelectItemNodeDetailInfo.  # noqa: E501
        :rtype: str
        """
        return self._online_code

    @online_code.setter
    def online_code(self, online_code):
        """Sets the online_code of this SelectItemNodeDetailInfo.


        :param online_code: The online_code of this SelectItemNodeDetailInfo.  # noqa: E501
        :type: str
        """

        self._online_code = online_code

    @property
    def model_code(self):
        """Gets the model_code of this SelectItemNodeDetailInfo.  # noqa: E501


        :return: The model_code of this SelectItemNodeDetailInfo.  # noqa: E501
        :rtype: str
        """
        return self._model_code

    @model_code.setter
    def model_code(self, model_code):
        """Sets the model_code of this SelectItemNodeDetailInfo.


        :param model_code: The model_code of this SelectItemNodeDetailInfo.  # noqa: E501
        :type: str
        """

        self._model_code = model_code

    @property
    def model_data_type(self):
        """Gets the model_data_type of this SelectItemNodeDetailInfo.  # noqa: E501


        :return: The model_data_type of this SelectItemNodeDetailInfo.  # noqa: E501
        :rtype: str
        """
        return self._model_data_type

    @model_data_type.setter
    def model_data_type(self, model_data_type):
        """Sets the model_data_type of this SelectItemNodeDetailInfo.


        :param model_data_type: The model_data_type of this SelectItemNodeDetailInfo.  # noqa: E501
        :type: str
        """

        self._model_data_type = model_data_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelectItemNodeDetailInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SelectItemNodeDetailInfo):
            return True

        return self.to_dict() != other.to_dict()
