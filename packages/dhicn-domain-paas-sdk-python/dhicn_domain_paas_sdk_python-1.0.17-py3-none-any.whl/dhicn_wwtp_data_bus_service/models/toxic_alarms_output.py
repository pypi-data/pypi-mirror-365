# coding: utf-8

"""
    wwtp-paas-main-bus-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_data_bus_service.configuration import Configuration


class ToxicAlarmsOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'location': 'str',
        'time': 'datetime',
        'toxic_level': 'int',
        'description': 'str'
    }

    attribute_map = {
        'location': 'location',
        'time': 'time',
        'toxic_level': 'toxicLevel',
        'description': 'description'
    }

    def __init__(self, location=None, time=None, toxic_level=None, description=None, local_vars_configuration=None):  # noqa: E501
        """ToxicAlarmsOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._location = None
        self._time = None
        self._toxic_level = None
        self._description = None
        self.discriminator = None

        self.location = location
        if time is not None:
            self.time = time
        if toxic_level is not None:
            self.toxic_level = toxic_level
        self.description = description

    @property
    def location(self):
        """Gets the location of this ToxicAlarmsOutput.  # noqa: E501

        毒性仪位置 toxicity meter location  # noqa: E501

        :return: The location of this ToxicAlarmsOutput.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ToxicAlarmsOutput.

        毒性仪位置 toxicity meter location  # noqa: E501

        :param location: The location of this ToxicAlarmsOutput.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def time(self):
        """Gets the time of this ToxicAlarmsOutput.  # noqa: E501

        预警时刻 alarm time  # noqa: E501

        :return: The time of this ToxicAlarmsOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ToxicAlarmsOutput.

        预警时刻 alarm time  # noqa: E501

        :param time: The time of this ToxicAlarmsOutput.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def toxic_level(self):
        """Gets the toxic_level of this ToxicAlarmsOutput.  # noqa: E501

        毒性程度 toxicity level  # noqa: E501

        :return: The toxic_level of this ToxicAlarmsOutput.  # noqa: E501
        :rtype: int
        """
        return self._toxic_level

    @toxic_level.setter
    def toxic_level(self, toxic_level):
        """Sets the toxic_level of this ToxicAlarmsOutput.

        毒性程度 toxicity level  # noqa: E501

        :param toxic_level: The toxic_level of this ToxicAlarmsOutput.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and toxic_level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `toxic_level` ({0}), must be one of {1}"  # noqa: E501
                .format(toxic_level, allowed_values)
            )

        self._toxic_level = toxic_level

    @property
    def description(self):
        """Gets the description of this ToxicAlarmsOutput.  # noqa: E501

        毒性程度描述 toxicity level description  # noqa: E501

        :return: The description of this ToxicAlarmsOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ToxicAlarmsOutput.

        毒性程度描述 toxicity level description  # noqa: E501

        :param description: The description of this ToxicAlarmsOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToxicAlarmsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ToxicAlarmsOutput):
            return True

        return self.to_dict() != other.to_dict()
