# coding: utf-8

"""
    wd-domain-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wd_domain_service.configuration import Configuration


class StatisticQueryInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'start_time': 'datetime',
        'end_time': 'datetime',
        'statistic_types': 'list[int]',
        'period': 'int'
    }

    attribute_map = {
        'start_time': 'startTime',
        'end_time': 'endTime',
        'statistic_types': 'statisticTypes',
        'period': 'period'
    }

    def __init__(self, start_time=None, end_time=None, statistic_types=None, period=None, local_vars_configuration=None):  # noqa: E501
        """StatisticQueryInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._start_time = None
        self._end_time = None
        self._statistic_types = None
        self._period = None
        self.discriminator = None

        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        self.statistic_types = statistic_types
        self.period = period

    @property
    def start_time(self):
        """Gets the start_time of this StatisticQueryInput.  # noqa: E501

        开始时间  # noqa: E501

        :return: The start_time of this StatisticQueryInput.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this StatisticQueryInput.

        开始时间  # noqa: E501

        :param start_time: The start_time of this StatisticQueryInput.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this StatisticQueryInput.  # noqa: E501

        结束时间  # noqa: E501

        :return: The end_time of this StatisticQueryInput.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this StatisticQueryInput.

        结束时间  # noqa: E501

        :param end_time: The end_time of this StatisticQueryInput.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def statistic_types(self):
        """Gets the statistic_types of this StatisticQueryInput.  # noqa: E501

        统计类型,支持多查询  # noqa: E501

        :return: The statistic_types of this StatisticQueryInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._statistic_types

    @statistic_types.setter
    def statistic_types(self, statistic_types):
        """Sets the statistic_types of this StatisticQueryInput.

        统计类型,支持多查询  # noqa: E501

        :param statistic_types: The statistic_types of this StatisticQueryInput.  # noqa: E501
        :type: list[int]
        """
        if self.local_vars_configuration.client_side_validation and statistic_types is None:  # noqa: E501
            raise ValueError("Invalid value for `statistic_types`, must not be `None`")  # noqa: E501
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(statistic_types).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `statistic_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(statistic_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._statistic_types = statistic_types

    @property
    def period(self):
        """Gets the period of this StatisticQueryInput.  # noqa: E501

        0-Daily 1-Month 2-Year   # noqa: E501

        :return: The period of this StatisticQueryInput.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this StatisticQueryInput.

        0-Daily 1-Month 2-Year   # noqa: E501

        :param period: The period of this StatisticQueryInput.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and period is None:  # noqa: E501
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501
        allowed_values = [0, 1, 2]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and period not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}"  # noqa: E501
                .format(period, allowed_values)
            )

        self._period = period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatisticQueryInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatisticQueryInput):
            return True

        return self.to_dict() != other.to_dict()
