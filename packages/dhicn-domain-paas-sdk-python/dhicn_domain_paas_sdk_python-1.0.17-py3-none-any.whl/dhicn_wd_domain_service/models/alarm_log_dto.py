# coding: utf-8

"""
    wd-domain-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wd_domain_service.configuration import Configuration


class AlarmLogDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alarm_data_type': 'str',
        'alarm_policy': 'int',
        'alarm_time': 'datetime',
        'x': 'float',
        'y': 'float',
        'z': 'float',
        'model_id': 'str',
        'model_value': 'float',
        'device_name': 'str',
        'indicator_name': 'str',
        'measure_value': 'float',
        'value_diff': 'float'
    }

    attribute_map = {
        'alarm_data_type': 'alarmDataType',
        'alarm_policy': 'alarmPolicy',
        'alarm_time': 'alarmTime',
        'x': 'x',
        'y': 'y',
        'z': 'z',
        'model_id': 'modelId',
        'model_value': 'modelValue',
        'device_name': 'deviceName',
        'indicator_name': 'indicatorName',
        'measure_value': 'measureValue',
        'value_diff': 'valueDiff'
    }

    def __init__(self, alarm_data_type=None, alarm_policy=None, alarm_time=None, x=None, y=None, z=None, model_id=None, model_value=None, device_name=None, indicator_name=None, measure_value=None, value_diff=None, local_vars_configuration=None):  # noqa: E501
        """AlarmLogDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._alarm_data_type = None
        self._alarm_policy = None
        self._alarm_time = None
        self._x = None
        self._y = None
        self._z = None
        self._model_id = None
        self._model_value = None
        self._device_name = None
        self._indicator_name = None
        self._measure_value = None
        self._value_diff = None
        self.discriminator = None

        self.alarm_data_type = alarm_data_type
        if alarm_policy is not None:
            self.alarm_policy = alarm_policy
        if alarm_time is not None:
            self.alarm_time = alarm_time
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if z is not None:
            self.z = z
        self.model_id = model_id
        if model_value is not None:
            self.model_value = model_value
        self.device_name = device_name
        self.indicator_name = indicator_name
        if measure_value is not None:
            self.measure_value = measure_value
        if value_diff is not None:
            self.value_diff = value_diff

    @property
    def alarm_data_type(self):
        """Gets the alarm_data_type of this AlarmLogDto.  # noqa: E501

        报警数据类型(Pressure、Flow...)  # noqa: E501

        :return: The alarm_data_type of this AlarmLogDto.  # noqa: E501
        :rtype: str
        """
        return self._alarm_data_type

    @alarm_data_type.setter
    def alarm_data_type(self, alarm_data_type):
        """Sets the alarm_data_type of this AlarmLogDto.

        报警数据类型(Pressure、Flow...)  # noqa: E501

        :param alarm_data_type: The alarm_data_type of this AlarmLogDto.  # noqa: E501
        :type: str
        """

        self._alarm_data_type = alarm_data_type

    @property
    def alarm_policy(self):
        """Gets the alarm_policy of this AlarmLogDto.  # noqa: E501

        报警策略（0：阈值报警，1：范围值报警）  # noqa: E501

        :return: The alarm_policy of this AlarmLogDto.  # noqa: E501
        :rtype: int
        """
        return self._alarm_policy

    @alarm_policy.setter
    def alarm_policy(self, alarm_policy):
        """Sets the alarm_policy of this AlarmLogDto.

        报警策略（0：阈值报警，1：范围值报警）  # noqa: E501

        :param alarm_policy: The alarm_policy of this AlarmLogDto.  # noqa: E501
        :type: int
        """

        self._alarm_policy = alarm_policy

    @property
    def alarm_time(self):
        """Gets the alarm_time of this AlarmLogDto.  # noqa: E501

        报警时间  # noqa: E501

        :return: The alarm_time of this AlarmLogDto.  # noqa: E501
        :rtype: datetime
        """
        return self._alarm_time

    @alarm_time.setter
    def alarm_time(self, alarm_time):
        """Sets the alarm_time of this AlarmLogDto.

        报警时间  # noqa: E501

        :param alarm_time: The alarm_time of this AlarmLogDto.  # noqa: E501
        :type: datetime
        """

        self._alarm_time = alarm_time

    @property
    def x(self):
        """Gets the x of this AlarmLogDto.  # noqa: E501


        :return: The x of this AlarmLogDto.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this AlarmLogDto.


        :param x: The x of this AlarmLogDto.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this AlarmLogDto.  # noqa: E501


        :return: The y of this AlarmLogDto.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this AlarmLogDto.


        :param y: The y of this AlarmLogDto.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def z(self):
        """Gets the z of this AlarmLogDto.  # noqa: E501


        :return: The z of this AlarmLogDto.  # noqa: E501
        :rtype: float
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this AlarmLogDto.


        :param z: The z of this AlarmLogDto.  # noqa: E501
        :type: float
        """

        self._z = z

    @property
    def model_id(self):
        """Gets the model_id of this AlarmLogDto.  # noqa: E501

        模型点位id  # noqa: E501

        :return: The model_id of this AlarmLogDto.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this AlarmLogDto.

        模型点位id  # noqa: E501

        :param model_id: The model_id of this AlarmLogDto.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def model_value(self):
        """Gets the model_value of this AlarmLogDto.  # noqa: E501

        模型结果值  # noqa: E501

        :return: The model_value of this AlarmLogDto.  # noqa: E501
        :rtype: float
        """
        return self._model_value

    @model_value.setter
    def model_value(self, model_value):
        """Sets the model_value of this AlarmLogDto.

        模型结果值  # noqa: E501

        :param model_value: The model_value of this AlarmLogDto.  # noqa: E501
        :type: float
        """

        self._model_value = model_value

    @property
    def device_name(self):
        """Gets the device_name of this AlarmLogDto.  # noqa: E501

        设备名称  # noqa: E501

        :return: The device_name of this AlarmLogDto.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this AlarmLogDto.

        设备名称  # noqa: E501

        :param device_name: The device_name of this AlarmLogDto.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def indicator_name(self):
        """Gets the indicator_name of this AlarmLogDto.  # noqa: E501

        指标名称  # noqa: E501

        :return: The indicator_name of this AlarmLogDto.  # noqa: E501
        :rtype: str
        """
        return self._indicator_name

    @indicator_name.setter
    def indicator_name(self, indicator_name):
        """Sets the indicator_name of this AlarmLogDto.

        指标名称  # noqa: E501

        :param indicator_name: The indicator_name of this AlarmLogDto.  # noqa: E501
        :type: str
        """

        self._indicator_name = indicator_name

    @property
    def measure_value(self):
        """Gets the measure_value of this AlarmLogDto.  # noqa: E501

        实测值  # noqa: E501

        :return: The measure_value of this AlarmLogDto.  # noqa: E501
        :rtype: float
        """
        return self._measure_value

    @measure_value.setter
    def measure_value(self, measure_value):
        """Sets the measure_value of this AlarmLogDto.

        实测值  # noqa: E501

        :param measure_value: The measure_value of this AlarmLogDto.  # noqa: E501
        :type: float
        """

        self._measure_value = measure_value

    @property
    def value_diff(self):
        """Gets the value_diff of this AlarmLogDto.  # noqa: E501

        差值  # noqa: E501

        :return: The value_diff of this AlarmLogDto.  # noqa: E501
        :rtype: float
        """
        return self._value_diff

    @value_diff.setter
    def value_diff(self, value_diff):
        """Sets the value_diff of this AlarmLogDto.

        差值  # noqa: E501

        :param value_diff: The value_diff of this AlarmLogDto.  # noqa: E501
        :type: float
        """

        self._value_diff = value_diff

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlarmLogDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlarmLogDto):
            return True

        return self.to_dict() != other.to_dict()
