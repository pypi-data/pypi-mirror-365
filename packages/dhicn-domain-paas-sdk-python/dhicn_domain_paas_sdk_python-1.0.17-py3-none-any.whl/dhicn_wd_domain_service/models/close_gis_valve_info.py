# coding: utf-8

"""
    wd-domain-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wd_domain_service.configuration import Configuration


class CloseGisValveInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'gis_id': 'str',
        'x': 'float',
        'y': 'float',
        'z': 'float',
        'diameter': 'float',
        'pipe_id': 'str',
        'address': 'str',
        'close_enable': 'bool',
        'custom_properties': 'str',
        'scenario_id': 'str',
        'event_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'gis_id': 'gisId',
        'x': 'x',
        'y': 'y',
        'z': 'z',
        'diameter': 'diameter',
        'pipe_id': 'pipeId',
        'address': 'address',
        'close_enable': 'closeEnable',
        'custom_properties': 'customProperties',
        'scenario_id': 'scenarioId',
        'event_id': 'eventId'
    }

    def __init__(self, id=None, gis_id=None, x=None, y=None, z=None, diameter=None, pipe_id=None, address=None, close_enable=None, custom_properties=None, scenario_id=None, event_id=None, local_vars_configuration=None):  # noqa: E501
        """CloseGisValveInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._gis_id = None
        self._x = None
        self._y = None
        self._z = None
        self._diameter = None
        self._pipe_id = None
        self._address = None
        self._close_enable = None
        self._custom_properties = None
        self._scenario_id = None
        self._event_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.gis_id = gis_id
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if z is not None:
            self.z = z
        if diameter is not None:
            self.diameter = diameter
        self.pipe_id = pipe_id
        self.address = address
        if close_enable is not None:
            self.close_enable = close_enable
        self.custom_properties = custom_properties
        if scenario_id is not None:
            self.scenario_id = scenario_id
        if event_id is not None:
            self.event_id = event_id

    @property
    def id(self):
        """Gets the id of this CloseGisValveInfo.  # noqa: E501


        :return: The id of this CloseGisValveInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloseGisValveInfo.


        :param id: The id of this CloseGisValveInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def gis_id(self):
        """Gets the gis_id of this CloseGisValveInfo.  # noqa: E501

        Gis Id  # noqa: E501

        :return: The gis_id of this CloseGisValveInfo.  # noqa: E501
        :rtype: str
        """
        return self._gis_id

    @gis_id.setter
    def gis_id(self, gis_id):
        """Sets the gis_id of this CloseGisValveInfo.

        Gis Id  # noqa: E501

        :param gis_id: The gis_id of this CloseGisValveInfo.  # noqa: E501
        :type: str
        """

        self._gis_id = gis_id

    @property
    def x(self):
        """Gets the x of this CloseGisValveInfo.  # noqa: E501

        坐标 - X  # noqa: E501

        :return: The x of this CloseGisValveInfo.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this CloseGisValveInfo.

        坐标 - X  # noqa: E501

        :param x: The x of this CloseGisValveInfo.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this CloseGisValveInfo.  # noqa: E501

        坐标 - Y  # noqa: E501

        :return: The y of this CloseGisValveInfo.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this CloseGisValveInfo.

        坐标 - Y  # noqa: E501

        :param y: The y of this CloseGisValveInfo.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def z(self):
        """Gets the z of this CloseGisValveInfo.  # noqa: E501

        坐标 - Z  # noqa: E501

        :return: The z of this CloseGisValveInfo.  # noqa: E501
        :rtype: float
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this CloseGisValveInfo.

        坐标 - Z  # noqa: E501

        :param z: The z of this CloseGisValveInfo.  # noqa: E501
        :type: float
        """

        self._z = z

    @property
    def diameter(self):
        """Gets the diameter of this CloseGisValveInfo.  # noqa: E501

        管径  # noqa: E501

        :return: The diameter of this CloseGisValveInfo.  # noqa: E501
        :rtype: float
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter):
        """Sets the diameter of this CloseGisValveInfo.

        管径  # noqa: E501

        :param diameter: The diameter of this CloseGisValveInfo.  # noqa: E501
        :type: float
        """

        self._diameter = diameter

    @property
    def pipe_id(self):
        """Gets the pipe_id of this CloseGisValveInfo.  # noqa: E501

        管道号  # noqa: E501

        :return: The pipe_id of this CloseGisValveInfo.  # noqa: E501
        :rtype: str
        """
        return self._pipe_id

    @pipe_id.setter
    def pipe_id(self, pipe_id):
        """Sets the pipe_id of this CloseGisValveInfo.

        管道号  # noqa: E501

        :param pipe_id: The pipe_id of this CloseGisValveInfo.  # noqa: E501
        :type: str
        """

        self._pipe_id = pipe_id

    @property
    def address(self):
        """Gets the address of this CloseGisValveInfo.  # noqa: E501

        位置  # noqa: E501

        :return: The address of this CloseGisValveInfo.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CloseGisValveInfo.

        位置  # noqa: E501

        :param address: The address of this CloseGisValveInfo.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def close_enable(self):
        """Gets the close_enable of this CloseGisValveInfo.  # noqa: E501

        能否关闭  # noqa: E501

        :return: The close_enable of this CloseGisValveInfo.  # noqa: E501
        :rtype: bool
        """
        return self._close_enable

    @close_enable.setter
    def close_enable(self, close_enable):
        """Sets the close_enable of this CloseGisValveInfo.

        能否关闭  # noqa: E501

        :param close_enable: The close_enable of this CloseGisValveInfo.  # noqa: E501
        :type: bool
        """

        self._close_enable = close_enable

    @property
    def custom_properties(self):
        """Gets the custom_properties of this CloseGisValveInfo.  # noqa: E501

        特有的属性  # noqa: E501

        :return: The custom_properties of this CloseGisValveInfo.  # noqa: E501
        :rtype: str
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this CloseGisValveInfo.

        特有的属性  # noqa: E501

        :param custom_properties: The custom_properties of this CloseGisValveInfo.  # noqa: E501
        :type: str
        """

        self._custom_properties = custom_properties

    @property
    def scenario_id(self):
        """Gets the scenario_id of this CloseGisValveInfo.  # noqa: E501


        :return: The scenario_id of this CloseGisValveInfo.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this CloseGisValveInfo.


        :param scenario_id: The scenario_id of this CloseGisValveInfo.  # noqa: E501
        :type: str
        """

        self._scenario_id = scenario_id

    @property
    def event_id(self):
        """Gets the event_id of this CloseGisValveInfo.  # noqa: E501


        :return: The event_id of this CloseGisValveInfo.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this CloseGisValveInfo.


        :param event_id: The event_id of this CloseGisValveInfo.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloseGisValveInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloseGisValveInfo):
            return True

        return self.to_dict() != other.to_dict()
