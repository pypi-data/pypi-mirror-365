# coding: utf-8

"""
    wd-domain-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wd_domain_service.configuration import Configuration


class TankStorageData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tank_name': 'str',
        'storage_value': 'float',
        'total_storage_value': 'float'
    }

    attribute_map = {
        'tank_name': 'tankName',
        'storage_value': 'storageValue',
        'total_storage_value': 'totalStorageValue'
    }

    def __init__(self, tank_name=None, storage_value=None, total_storage_value=None, local_vars_configuration=None):  # noqa: E501
        """TankStorageData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tank_name = None
        self._storage_value = None
        self._total_storage_value = None
        self.discriminator = None

        self.tank_name = tank_name
        if storage_value is not None:
            self.storage_value = storage_value
        if total_storage_value is not None:
            self.total_storage_value = total_storage_value

    @property
    def tank_name(self):
        """Gets the tank_name of this TankStorageData.  # noqa: E501

        水池水厂名称  # noqa: E501

        :return: The tank_name of this TankStorageData.  # noqa: E501
        :rtype: str
        """
        return self._tank_name

    @tank_name.setter
    def tank_name(self, tank_name):
        """Sets the tank_name of this TankStorageData.

        水池水厂名称  # noqa: E501

        :param tank_name: The tank_name of this TankStorageData.  # noqa: E501
        :type: str
        """

        self._tank_name = tank_name

    @property
    def storage_value(self):
        """Gets the storage_value of this TankStorageData.  # noqa: E501

        可调蓄量  # noqa: E501

        :return: The storage_value of this TankStorageData.  # noqa: E501
        :rtype: float
        """
        return self._storage_value

    @storage_value.setter
    def storage_value(self, storage_value):
        """Sets the storage_value of this TankStorageData.

        可调蓄量  # noqa: E501

        :param storage_value: The storage_value of this TankStorageData.  # noqa: E501
        :type: float
        """

        self._storage_value = storage_value

    @property
    def total_storage_value(self):
        """Gets the total_storage_value of this TankStorageData.  # noqa: E501

        总调蓄量  # noqa: E501

        :return: The total_storage_value of this TankStorageData.  # noqa: E501
        :rtype: float
        """
        return self._total_storage_value

    @total_storage_value.setter
    def total_storage_value(self, total_storage_value):
        """Sets the total_storage_value of this TankStorageData.

        总调蓄量  # noqa: E501

        :param total_storage_value: The total_storage_value of this TankStorageData.  # noqa: E501
        :type: float
        """

        self._total_storage_value = total_storage_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TankStorageData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TankStorageData):
            return True

        return self.to_dict() != other.to_dict()
