# coding: utf-8

"""
    wd-domain-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wd_domain_service.configuration import Configuration


class UpdatePipeRiskParamInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'risk_weight_id': 'str',
        'param_grade': 'str',
        'is_range': 'bool',
        'max_valve': 'float',
        'min_valve': 'float',
        'level_value': 'float',
        'order': 'int'
    }

    attribute_map = {
        'id': 'id',
        'risk_weight_id': 'riskWeightId',
        'param_grade': 'paramGrade',
        'is_range': 'isRange',
        'max_valve': 'maxValve',
        'min_valve': 'minValve',
        'level_value': 'levelValue',
        'order': 'order'
    }

    def __init__(self, id=None, risk_weight_id=None, param_grade=None, is_range=None, max_valve=None, min_valve=None, level_value=None, order=None, local_vars_configuration=None):  # noqa: E501
        """UpdatePipeRiskParamInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._risk_weight_id = None
        self._param_grade = None
        self._is_range = None
        self._max_valve = None
        self._min_valve = None
        self._level_value = None
        self._order = None
        self.discriminator = None

        self.id = id
        self.risk_weight_id = risk_weight_id
        self.param_grade = param_grade
        self.is_range = is_range
        self.max_valve = max_valve
        self.min_valve = min_valve
        self.level_value = level_value
        if order is not None:
            self.order = order

    @property
    def id(self):
        """Gets the id of this UpdatePipeRiskParamInput.  # noqa: E501


        :return: The id of this UpdatePipeRiskParamInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdatePipeRiskParamInput.


        :param id: The id of this UpdatePipeRiskParamInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def risk_weight_id(self):
        """Gets the risk_weight_id of this UpdatePipeRiskParamInput.  # noqa: E501

        关联权重表Id  # noqa: E501

        :return: The risk_weight_id of this UpdatePipeRiskParamInput.  # noqa: E501
        :rtype: str
        """
        return self._risk_weight_id

    @risk_weight_id.setter
    def risk_weight_id(self, risk_weight_id):
        """Sets the risk_weight_id of this UpdatePipeRiskParamInput.

        关联权重表Id  # noqa: E501

        :param risk_weight_id: The risk_weight_id of this UpdatePipeRiskParamInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and risk_weight_id is None:  # noqa: E501
            raise ValueError("Invalid value for `risk_weight_id`, must not be `None`")  # noqa: E501

        self._risk_weight_id = risk_weight_id

    @property
    def param_grade(self):
        """Gets the param_grade of this UpdatePipeRiskParamInput.  # noqa: E501

        参数分类信息  # noqa: E501

        :return: The param_grade of this UpdatePipeRiskParamInput.  # noqa: E501
        :rtype: str
        """
        return self._param_grade

    @param_grade.setter
    def param_grade(self, param_grade):
        """Sets the param_grade of this UpdatePipeRiskParamInput.

        参数分类信息  # noqa: E501

        :param param_grade: The param_grade of this UpdatePipeRiskParamInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and param_grade is None:  # noqa: E501
            raise ValueError("Invalid value for `param_grade`, must not be `None`")  # noqa: E501

        self._param_grade = param_grade

    @property
    def is_range(self):
        """Gets the is_range of this UpdatePipeRiskParamInput.  # noqa: E501

        是否范围值  # noqa: E501

        :return: The is_range of this UpdatePipeRiskParamInput.  # noqa: E501
        :rtype: bool
        """
        return self._is_range

    @is_range.setter
    def is_range(self, is_range):
        """Sets the is_range of this UpdatePipeRiskParamInput.

        是否范围值  # noqa: E501

        :param is_range: The is_range of this UpdatePipeRiskParamInput.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_range is None:  # noqa: E501
            raise ValueError("Invalid value for `is_range`, must not be `None`")  # noqa: E501

        self._is_range = is_range

    @property
    def max_valve(self):
        """Gets the max_valve of this UpdatePipeRiskParamInput.  # noqa: E501

        最大值  # noqa: E501

        :return: The max_valve of this UpdatePipeRiskParamInput.  # noqa: E501
        :rtype: float
        """
        return self._max_valve

    @max_valve.setter
    def max_valve(self, max_valve):
        """Sets the max_valve of this UpdatePipeRiskParamInput.

        最大值  # noqa: E501

        :param max_valve: The max_valve of this UpdatePipeRiskParamInput.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and max_valve is None:  # noqa: E501
            raise ValueError("Invalid value for `max_valve`, must not be `None`")  # noqa: E501

        self._max_valve = max_valve

    @property
    def min_valve(self):
        """Gets the min_valve of this UpdatePipeRiskParamInput.  # noqa: E501

        最小值  # noqa: E501

        :return: The min_valve of this UpdatePipeRiskParamInput.  # noqa: E501
        :rtype: float
        """
        return self._min_valve

    @min_valve.setter
    def min_valve(self, min_valve):
        """Sets the min_valve of this UpdatePipeRiskParamInput.

        最小值  # noqa: E501

        :param min_valve: The min_valve of this UpdatePipeRiskParamInput.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and min_valve is None:  # noqa: E501
            raise ValueError("Invalid value for `min_valve`, must not be `None`")  # noqa: E501

        self._min_valve = min_valve

    @property
    def level_value(self):
        """Gets the level_value of this UpdatePipeRiskParamInput.  # noqa: E501

        可能性程度值  # noqa: E501

        :return: The level_value of this UpdatePipeRiskParamInput.  # noqa: E501
        :rtype: float
        """
        return self._level_value

    @level_value.setter
    def level_value(self, level_value):
        """Sets the level_value of this UpdatePipeRiskParamInput.

        可能性程度值  # noqa: E501

        :param level_value: The level_value of this UpdatePipeRiskParamInput.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and level_value is None:  # noqa: E501
            raise ValueError("Invalid value for `level_value`, must not be `None`")  # noqa: E501

        self._level_value = level_value

    @property
    def order(self):
        """Gets the order of this UpdatePipeRiskParamInput.  # noqa: E501

        排序  # noqa: E501

        :return: The order of this UpdatePipeRiskParamInput.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this UpdatePipeRiskParamInput.

        排序  # noqa: E501

        :param order: The order of this UpdatePipeRiskParamInput.  # noqa: E501
        :type: int
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePipeRiskParamInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdatePipeRiskParamInput):
            return True

        return self.to_dict() != other.to_dict()
