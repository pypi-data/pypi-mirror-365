# coding: utf-8

"""
    model-information-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_model_information_service.configuration import Configuration


class BoundaryConditionJson(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'boundary_id': 'str',
        'boundary_name': 'str',
        'boundary_type': 'str',
        'model_type': 'str',
        't': 'list[str]',
        'v': 'list[float]'
    }

    attribute_map = {
        'boundary_id': 'boundaryID',
        'boundary_name': 'boundaryName',
        'boundary_type': 'boundaryType',
        'model_type': 'modelType',
        't': 't',
        'v': 'v'
    }

    def __init__(self, boundary_id=None, boundary_name=None, boundary_type=None, model_type=None, t=None, v=None, local_vars_configuration=None):  # noqa: E501
        """BoundaryConditionJson - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._boundary_id = None
        self._boundary_name = None
        self._boundary_type = None
        self._model_type = None
        self._t = None
        self._v = None
        self.discriminator = None

        self.boundary_id = boundary_id
        self.boundary_name = boundary_name
        self.boundary_type = boundary_type
        self.model_type = model_type
        self.t = t
        self.v = v

    @property
    def boundary_id(self):
        """Gets the boundary_id of this BoundaryConditionJson.  # noqa: E501


        :return: The boundary_id of this BoundaryConditionJson.  # noqa: E501
        :rtype: str
        """
        return self._boundary_id

    @boundary_id.setter
    def boundary_id(self, boundary_id):
        """Sets the boundary_id of this BoundaryConditionJson.


        :param boundary_id: The boundary_id of this BoundaryConditionJson.  # noqa: E501
        :type: str
        """

        self._boundary_id = boundary_id

    @property
    def boundary_name(self):
        """Gets the boundary_name of this BoundaryConditionJson.  # noqa: E501


        :return: The boundary_name of this BoundaryConditionJson.  # noqa: E501
        :rtype: str
        """
        return self._boundary_name

    @boundary_name.setter
    def boundary_name(self, boundary_name):
        """Sets the boundary_name of this BoundaryConditionJson.


        :param boundary_name: The boundary_name of this BoundaryConditionJson.  # noqa: E501
        :type: str
        """

        self._boundary_name = boundary_name

    @property
    def boundary_type(self):
        """Gets the boundary_type of this BoundaryConditionJson.  # noqa: E501


        :return: The boundary_type of this BoundaryConditionJson.  # noqa: E501
        :rtype: str
        """
        return self._boundary_type

    @boundary_type.setter
    def boundary_type(self, boundary_type):
        """Sets the boundary_type of this BoundaryConditionJson.


        :param boundary_type: The boundary_type of this BoundaryConditionJson.  # noqa: E501
        :type: str
        """

        self._boundary_type = boundary_type

    @property
    def model_type(self):
        """Gets the model_type of this BoundaryConditionJson.  # noqa: E501


        :return: The model_type of this BoundaryConditionJson.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this BoundaryConditionJson.


        :param model_type: The model_type of this BoundaryConditionJson.  # noqa: E501
        :type: str
        """

        self._model_type = model_type

    @property
    def t(self):
        """Gets the t of this BoundaryConditionJson.  # noqa: E501


        :return: The t of this BoundaryConditionJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this BoundaryConditionJson.


        :param t: The t of this BoundaryConditionJson.  # noqa: E501
        :type: list[str]
        """

        self._t = t

    @property
    def v(self):
        """Gets the v of this BoundaryConditionJson.  # noqa: E501


        :return: The v of this BoundaryConditionJson.  # noqa: E501
        :rtype: list[float]
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this BoundaryConditionJson.


        :param v: The v of this BoundaryConditionJson.  # noqa: E501
        :type: list[float]
        """

        self._v = v

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoundaryConditionJson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BoundaryConditionJson):
            return True

        return self.to_dict() != other.to_dict()
