# coding: utf-8

"""
    model-information-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_model_information_service.configuration import Configuration


class AddJunctionDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'muid': 'str',
        'node_type': 'int',
        'elevation': 'float',
        'surface_elevation': 'float',
        'zone_id': 'str',
        'init_chemical_concentration': 'float',
        'init_source_percentage': 'float',
        'init_water_age': 'float',
        'description': 'str',
        'data_source': 'str',
        'asset_name': 'str',
        'x': 'float',
        'y': 'float',
        'operate': 'OperateEnum'
    }

    attribute_map = {
        'muid': 'muid',
        'node_type': 'nodeType',
        'elevation': 'elevation',
        'surface_elevation': 'surfaceElevation',
        'zone_id': 'zoneID',
        'init_chemical_concentration': 'initChemicalConcentration',
        'init_source_percentage': 'initSourcePercentage',
        'init_water_age': 'initWaterAge',
        'description': 'description',
        'data_source': 'dataSource',
        'asset_name': 'assetName',
        'x': 'x',
        'y': 'y',
        'operate': 'operate'
    }

    def __init__(self, muid=None, node_type=None, elevation=None, surface_elevation=None, zone_id=None, init_chemical_concentration=None, init_source_percentage=None, init_water_age=None, description=None, data_source=None, asset_name=None, x=None, y=None, operate=None, local_vars_configuration=None):  # noqa: E501
        """AddJunctionDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._muid = None
        self._node_type = None
        self._elevation = None
        self._surface_elevation = None
        self._zone_id = None
        self._init_chemical_concentration = None
        self._init_source_percentage = None
        self._init_water_age = None
        self._description = None
        self._data_source = None
        self._asset_name = None
        self._x = None
        self._y = None
        self._operate = None
        self.discriminator = None

        self.muid = muid
        if node_type is not None:
            self.node_type = node_type
        if elevation is not None:
            self.elevation = elevation
        if surface_elevation is not None:
            self.surface_elevation = surface_elevation
        self.zone_id = zone_id
        if init_chemical_concentration is not None:
            self.init_chemical_concentration = init_chemical_concentration
        if init_source_percentage is not None:
            self.init_source_percentage = init_source_percentage
        if init_water_age is not None:
            self.init_water_age = init_water_age
        self.description = description
        self.data_source = data_source
        self.asset_name = asset_name
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if operate is not None:
            self.operate = operate

    @property
    def muid(self):
        """Gets the muid of this AddJunctionDto.  # noqa: E501

        模型中节点ID junction muid  # noqa: E501

        :return: The muid of this AddJunctionDto.  # noqa: E501
        :rtype: str
        """
        return self._muid

    @muid.setter
    def muid(self, muid):
        """Sets the muid of this AddJunctionDto.

        模型中节点ID junction muid  # noqa: E501

        :param muid: The muid of this AddJunctionDto.  # noqa: E501
        :type: str
        """

        self._muid = muid

    @property
    def node_type(self):
        """Gets the node_type of this AddJunctionDto.  # noqa: E501

        节点类型 node type  # noqa: E501

        :return: The node_type of this AddJunctionDto.  # noqa: E501
        :rtype: int
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this AddJunctionDto.

        节点类型 node type  # noqa: E501

        :param node_type: The node_type of this AddJunctionDto.  # noqa: E501
        :type: int
        """

        self._node_type = node_type

    @property
    def elevation(self):
        """Gets the elevation of this AddJunctionDto.  # noqa: E501

        高程 elevation  # noqa: E501

        :return: The elevation of this AddJunctionDto.  # noqa: E501
        :rtype: float
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this AddJunctionDto.

        高程 elevation  # noqa: E501

        :param elevation: The elevation of this AddJunctionDto.  # noqa: E501
        :type: float
        """

        self._elevation = elevation

    @property
    def surface_elevation(self):
        """Gets the surface_elevation of this AddJunctionDto.  # noqa: E501

        表面高程 surface elevation  # noqa: E501

        :return: The surface_elevation of this AddJunctionDto.  # noqa: E501
        :rtype: float
        """
        return self._surface_elevation

    @surface_elevation.setter
    def surface_elevation(self, surface_elevation):
        """Sets the surface_elevation of this AddJunctionDto.

        表面高程 surface elevation  # noqa: E501

        :param surface_elevation: The surface_elevation of this AddJunctionDto.  # noqa: E501
        :type: float
        """

        self._surface_elevation = surface_elevation

    @property
    def zone_id(self):
        """Gets the zone_id of this AddJunctionDto.  # noqa: E501

        分区ID zone id  # noqa: E501

        :return: The zone_id of this AddJunctionDto.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this AddJunctionDto.

        分区ID zone id  # noqa: E501

        :param zone_id: The zone_id of this AddJunctionDto.  # noqa: E501
        :type: str
        """

        self._zone_id = zone_id

    @property
    def init_chemical_concentration(self):
        """Gets the init_chemical_concentration of this AddJunctionDto.  # noqa: E501

        初始化学物质浓度 initial chemical concentration  # noqa: E501

        :return: The init_chemical_concentration of this AddJunctionDto.  # noqa: E501
        :rtype: float
        """
        return self._init_chemical_concentration

    @init_chemical_concentration.setter
    def init_chemical_concentration(self, init_chemical_concentration):
        """Sets the init_chemical_concentration of this AddJunctionDto.

        初始化学物质浓度 initial chemical concentration  # noqa: E501

        :param init_chemical_concentration: The init_chemical_concentration of this AddJunctionDto.  # noqa: E501
        :type: float
        """

        self._init_chemical_concentration = init_chemical_concentration

    @property
    def init_source_percentage(self):
        """Gets the init_source_percentage of this AddJunctionDto.  # noqa: E501

        初始水量占比 initial source percentage  # noqa: E501

        :return: The init_source_percentage of this AddJunctionDto.  # noqa: E501
        :rtype: float
        """
        return self._init_source_percentage

    @init_source_percentage.setter
    def init_source_percentage(self, init_source_percentage):
        """Sets the init_source_percentage of this AddJunctionDto.

        初始水量占比 initial source percentage  # noqa: E501

        :param init_source_percentage: The init_source_percentage of this AddJunctionDto.  # noqa: E501
        :type: float
        """

        self._init_source_percentage = init_source_percentage

    @property
    def init_water_age(self):
        """Gets the init_water_age of this AddJunctionDto.  # noqa: E501

        初始水龄 initial water age  # noqa: E501

        :return: The init_water_age of this AddJunctionDto.  # noqa: E501
        :rtype: float
        """
        return self._init_water_age

    @init_water_age.setter
    def init_water_age(self, init_water_age):
        """Sets the init_water_age of this AddJunctionDto.

        初始水龄 initial water age  # noqa: E501

        :param init_water_age: The init_water_age of this AddJunctionDto.  # noqa: E501
        :type: float
        """

        self._init_water_age = init_water_age

    @property
    def description(self):
        """Gets the description of this AddJunctionDto.  # noqa: E501

        描述 description  # noqa: E501

        :return: The description of this AddJunctionDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddJunctionDto.

        描述 description  # noqa: E501

        :param description: The description of this AddJunctionDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def data_source(self):
        """Gets the data_source of this AddJunctionDto.  # noqa: E501

        数据源 data source  # noqa: E501

        :return: The data_source of this AddJunctionDto.  # noqa: E501
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this AddJunctionDto.

        数据源 data source  # noqa: E501

        :param data_source: The data_source of this AddJunctionDto.  # noqa: E501
        :type: str
        """

        self._data_source = data_source

    @property
    def asset_name(self):
        """Gets the asset_name of this AddJunctionDto.  # noqa: E501

        资产名称 asset name  # noqa: E501

        :return: The asset_name of this AddJunctionDto.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this AddJunctionDto.

        资产名称 asset name  # noqa: E501

        :param asset_name: The asset_name of this AddJunctionDto.  # noqa: E501
        :type: str
        """

        self._asset_name = asset_name

    @property
    def x(self):
        """Gets the x of this AddJunctionDto.  # noqa: E501

        节点坐标X coordinate x  # noqa: E501

        :return: The x of this AddJunctionDto.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this AddJunctionDto.

        节点坐标X coordinate x  # noqa: E501

        :param x: The x of this AddJunctionDto.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this AddJunctionDto.  # noqa: E501

        节点坐标Y coordinate y  # noqa: E501

        :return: The y of this AddJunctionDto.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this AddJunctionDto.

        节点坐标Y coordinate y  # noqa: E501

        :param y: The y of this AddJunctionDto.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def operate(self):
        """Gets the operate of this AddJunctionDto.  # noqa: E501


        :return: The operate of this AddJunctionDto.  # noqa: E501
        :rtype: OperateEnum
        """
        return self._operate

    @operate.setter
    def operate(self, operate):
        """Sets the operate of this AddJunctionDto.


        :param operate: The operate of this AddJunctionDto.  # noqa: E501
        :type: OperateEnum
        """

        self._operate = operate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddJunctionDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddJunctionDto):
            return True

        return self.to_dict() != other.to_dict()
