# coding: utf-8

"""
    model-information-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_model_information_service.configuration import Configuration


class AddDemandDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'junction_id': 'str',
        'demand': 'float',
        'category': 'str',
        'coefficient': 'float',
        'pattern_id': 'str',
        'description': 'str'
    }

    attribute_map = {
        'junction_id': 'junctionID',
        'demand': 'demand',
        'category': 'category',
        'coefficient': 'coefficient',
        'pattern_id': 'patternID',
        'description': 'description'
    }

    def __init__(self, junction_id=None, demand=None, category=None, coefficient=None, pattern_id=None, description=None, local_vars_configuration=None):  # noqa: E501
        """AddDemandDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._junction_id = None
        self._demand = None
        self._category = None
        self._coefficient = None
        self._pattern_id = None
        self._description = None
        self.discriminator = None

        self.junction_id = junction_id
        if demand is not None:
            self.demand = demand
        self.category = category
        if coefficient is not None:
            self.coefficient = coefficient
        self.pattern_id = pattern_id
        self.description = description

    @property
    def junction_id(self):
        """Gets the junction_id of this AddDemandDto.  # noqa: E501

        模型中的节点ID junction muid  # noqa: E501

        :return: The junction_id of this AddDemandDto.  # noqa: E501
        :rtype: str
        """
        return self._junction_id

    @junction_id.setter
    def junction_id(self, junction_id):
        """Sets the junction_id of this AddDemandDto.

        模型中的节点ID junction muid  # noqa: E501

        :param junction_id: The junction_id of this AddDemandDto.  # noqa: E501
        :type: str
        """

        self._junction_id = junction_id

    @property
    def demand(self):
        """Gets the demand of this AddDemandDto.  # noqa: E501

        需水量或需水量增量 demand or demand difference  # noqa: E501

        :return: The demand of this AddDemandDto.  # noqa: E501
        :rtype: float
        """
        return self._demand

    @demand.setter
    def demand(self, demand):
        """Sets the demand of this AddDemandDto.

        需水量或需水量增量 demand or demand difference  # noqa: E501

        :param demand: The demand of this AddDemandDto.  # noqa: E501
        :type: float
        """

        self._demand = demand

    @property
    def category(self):
        """Gets the category of this AddDemandDto.  # noqa: E501

        分类 category  # noqa: E501

        :return: The category of this AddDemandDto.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AddDemandDto.

        分类 category  # noqa: E501

        :param category: The category of this AddDemandDto.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def coefficient(self):
        """Gets the coefficient of this AddDemandDto.  # noqa: E501

        系数 coefficient  # noqa: E501

        :return: The coefficient of this AddDemandDto.  # noqa: E501
        :rtype: float
        """
        return self._coefficient

    @coefficient.setter
    def coefficient(self, coefficient):
        """Sets the coefficient of this AddDemandDto.

        系数 coefficient  # noqa: E501

        :param coefficient: The coefficient of this AddDemandDto.  # noqa: E501
        :type: float
        """

        self._coefficient = coefficient

    @property
    def pattern_id(self):
        """Gets the pattern_id of this AddDemandDto.  # noqa: E501

        模式ID pattern id  # noqa: E501

        :return: The pattern_id of this AddDemandDto.  # noqa: E501
        :rtype: str
        """
        return self._pattern_id

    @pattern_id.setter
    def pattern_id(self, pattern_id):
        """Sets the pattern_id of this AddDemandDto.

        模式ID pattern id  # noqa: E501

        :param pattern_id: The pattern_id of this AddDemandDto.  # noqa: E501
        :type: str
        """

        self._pattern_id = pattern_id

    @property
    def description(self):
        """Gets the description of this AddDemandDto.  # noqa: E501

        描述 description  # noqa: E501

        :return: The description of this AddDemandDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddDemandDto.

        描述 description  # noqa: E501

        :param description: The description of this AddDemandDto.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddDemandDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddDemandDto):
            return True

        return self.to_dict() != other.to_dict()
