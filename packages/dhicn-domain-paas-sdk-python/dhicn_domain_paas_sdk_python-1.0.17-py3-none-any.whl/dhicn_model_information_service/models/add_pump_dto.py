# coding: utf-8

"""
    model-information-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_model_information_service.configuration import Configuration


class AddPumpDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'muid': 'str',
        'from_node': 'str',
        'to_node': 'str',
        'pump_type': 'int',
        'speed': 'float',
        'pattern_id': 'str',
        'constant_power': 'float',
        'zone_id': 'str',
        'description': 'str',
        'data_source': 'str',
        'asset_name': 'str',
        'from_x': 'float',
        'from_y': 'float',
        'to_x': 'float',
        'to_y': 'float'
    }

    attribute_map = {
        'muid': 'muid',
        'from_node': 'fromNode',
        'to_node': 'toNode',
        'pump_type': 'pumpType',
        'speed': 'speed',
        'pattern_id': 'patternID',
        'constant_power': 'constantPower',
        'zone_id': 'zoneID',
        'description': 'description',
        'data_source': 'dataSource',
        'asset_name': 'assetName',
        'from_x': 'fromX',
        'from_y': 'fromY',
        'to_x': 'toX',
        'to_y': 'toY'
    }

    def __init__(self, muid=None, from_node=None, to_node=None, pump_type=None, speed=None, pattern_id=None, constant_power=None, zone_id=None, description=None, data_source=None, asset_name=None, from_x=None, from_y=None, to_x=None, to_y=None, local_vars_configuration=None):  # noqa: E501
        """AddPumpDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._muid = None
        self._from_node = None
        self._to_node = None
        self._pump_type = None
        self._speed = None
        self._pattern_id = None
        self._constant_power = None
        self._zone_id = None
        self._description = None
        self._data_source = None
        self._asset_name = None
        self._from_x = None
        self._from_y = None
        self._to_x = None
        self._to_y = None
        self.discriminator = None

        self.muid = muid
        self.from_node = from_node
        self.to_node = to_node
        if pump_type is not None:
            self.pump_type = pump_type
        if speed is not None:
            self.speed = speed
        self.pattern_id = pattern_id
        if constant_power is not None:
            self.constant_power = constant_power
        self.zone_id = zone_id
        self.description = description
        self.data_source = data_source
        self.asset_name = asset_name
        if from_x is not None:
            self.from_x = from_x
        if from_y is not None:
            self.from_y = from_y
        if to_x is not None:
            self.to_x = to_x
        if to_y is not None:
            self.to_y = to_y

    @property
    def muid(self):
        """Gets the muid of this AddPumpDto.  # noqa: E501

        模型中泵站ID pump muid  # noqa: E501

        :return: The muid of this AddPumpDto.  # noqa: E501
        :rtype: str
        """
        return self._muid

    @muid.setter
    def muid(self, muid):
        """Sets the muid of this AddPumpDto.

        模型中泵站ID pump muid  # noqa: E501

        :param muid: The muid of this AddPumpDto.  # noqa: E501
        :type: str
        """

        self._muid = muid

    @property
    def from_node(self):
        """Gets the from_node of this AddPumpDto.  # noqa: E501

        起始节点 from node  # noqa: E501

        :return: The from_node of this AddPumpDto.  # noqa: E501
        :rtype: str
        """
        return self._from_node

    @from_node.setter
    def from_node(self, from_node):
        """Sets the from_node of this AddPumpDto.

        起始节点 from node  # noqa: E501

        :param from_node: The from_node of this AddPumpDto.  # noqa: E501
        :type: str
        """

        self._from_node = from_node

    @property
    def to_node(self):
        """Gets the to_node of this AddPumpDto.  # noqa: E501

        终止节点 to node  # noqa: E501

        :return: The to_node of this AddPumpDto.  # noqa: E501
        :rtype: str
        """
        return self._to_node

    @to_node.setter
    def to_node(self, to_node):
        """Sets the to_node of this AddPumpDto.

        终止节点 to node  # noqa: E501

        :param to_node: The to_node of this AddPumpDto.  # noqa: E501
        :type: str
        """

        self._to_node = to_node

    @property
    def pump_type(self):
        """Gets the pump_type of this AddPumpDto.  # noqa: E501

        泵站类型 pump type  # noqa: E501

        :return: The pump_type of this AddPumpDto.  # noqa: E501
        :rtype: int
        """
        return self._pump_type

    @pump_type.setter
    def pump_type(self, pump_type):
        """Sets the pump_type of this AddPumpDto.

        泵站类型 pump type  # noqa: E501

        :param pump_type: The pump_type of this AddPumpDto.  # noqa: E501
        :type: int
        """

        self._pump_type = pump_type

    @property
    def speed(self):
        """Gets the speed of this AddPumpDto.  # noqa: E501

        泵站速度 pump speed  # noqa: E501

        :return: The speed of this AddPumpDto.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this AddPumpDto.

        泵站速度 pump speed  # noqa: E501

        :param speed: The speed of this AddPumpDto.  # noqa: E501
        :type: float
        """

        self._speed = speed

    @property
    def pattern_id(self):
        """Gets the pattern_id of this AddPumpDto.  # noqa: E501

        模式ID pattern id  # noqa: E501

        :return: The pattern_id of this AddPumpDto.  # noqa: E501
        :rtype: str
        """
        return self._pattern_id

    @pattern_id.setter
    def pattern_id(self, pattern_id):
        """Sets the pattern_id of this AddPumpDto.

        模式ID pattern id  # noqa: E501

        :param pattern_id: The pattern_id of this AddPumpDto.  # noqa: E501
        :type: str
        """

        self._pattern_id = pattern_id

    @property
    def constant_power(self):
        """Gets the constant_power of this AddPumpDto.  # noqa: E501

        泵站功率 pump constant power  # noqa: E501

        :return: The constant_power of this AddPumpDto.  # noqa: E501
        :rtype: float
        """
        return self._constant_power

    @constant_power.setter
    def constant_power(self, constant_power):
        """Sets the constant_power of this AddPumpDto.

        泵站功率 pump constant power  # noqa: E501

        :param constant_power: The constant_power of this AddPumpDto.  # noqa: E501
        :type: float
        """

        self._constant_power = constant_power

    @property
    def zone_id(self):
        """Gets the zone_id of this AddPumpDto.  # noqa: E501

        分区ID zone id  # noqa: E501

        :return: The zone_id of this AddPumpDto.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this AddPumpDto.

        分区ID zone id  # noqa: E501

        :param zone_id: The zone_id of this AddPumpDto.  # noqa: E501
        :type: str
        """

        self._zone_id = zone_id

    @property
    def description(self):
        """Gets the description of this AddPumpDto.  # noqa: E501

        描述 description  # noqa: E501

        :return: The description of this AddPumpDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddPumpDto.

        描述 description  # noqa: E501

        :param description: The description of this AddPumpDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def data_source(self):
        """Gets the data_source of this AddPumpDto.  # noqa: E501

        数据源 data source  # noqa: E501

        :return: The data_source of this AddPumpDto.  # noqa: E501
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this AddPumpDto.

        数据源 data source  # noqa: E501

        :param data_source: The data_source of this AddPumpDto.  # noqa: E501
        :type: str
        """

        self._data_source = data_source

    @property
    def asset_name(self):
        """Gets the asset_name of this AddPumpDto.  # noqa: E501

        资产名称 asset name  # noqa: E501

        :return: The asset_name of this AddPumpDto.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this AddPumpDto.

        资产名称 asset name  # noqa: E501

        :param asset_name: The asset_name of this AddPumpDto.  # noqa: E501
        :type: str
        """

        self._asset_name = asset_name

    @property
    def from_x(self):
        """Gets the from_x of this AddPumpDto.  # noqa: E501

        起始节点坐标X coordinate x of from-node  # noqa: E501

        :return: The from_x of this AddPumpDto.  # noqa: E501
        :rtype: float
        """
        return self._from_x

    @from_x.setter
    def from_x(self, from_x):
        """Sets the from_x of this AddPumpDto.

        起始节点坐标X coordinate x of from-node  # noqa: E501

        :param from_x: The from_x of this AddPumpDto.  # noqa: E501
        :type: float
        """

        self._from_x = from_x

    @property
    def from_y(self):
        """Gets the from_y of this AddPumpDto.  # noqa: E501

        起始节点坐标Y coordinate y of from-node  # noqa: E501

        :return: The from_y of this AddPumpDto.  # noqa: E501
        :rtype: float
        """
        return self._from_y

    @from_y.setter
    def from_y(self, from_y):
        """Sets the from_y of this AddPumpDto.

        起始节点坐标Y coordinate y of from-node  # noqa: E501

        :param from_y: The from_y of this AddPumpDto.  # noqa: E501
        :type: float
        """

        self._from_y = from_y

    @property
    def to_x(self):
        """Gets the to_x of this AddPumpDto.  # noqa: E501

        终止节点坐标X coordinate x of to-node  # noqa: E501

        :return: The to_x of this AddPumpDto.  # noqa: E501
        :rtype: float
        """
        return self._to_x

    @to_x.setter
    def to_x(self, to_x):
        """Sets the to_x of this AddPumpDto.

        终止节点坐标X coordinate x of to-node  # noqa: E501

        :param to_x: The to_x of this AddPumpDto.  # noqa: E501
        :type: float
        """

        self._to_x = to_x

    @property
    def to_y(self):
        """Gets the to_y of this AddPumpDto.  # noqa: E501

        终止节点坐标Y coordinate y of to-node  # noqa: E501

        :return: The to_y of this AddPumpDto.  # noqa: E501
        :rtype: float
        """
        return self._to_y

    @to_y.setter
    def to_y(self, to_y):
        """Sets the to_y of this AddPumpDto.

        终止节点坐标Y coordinate y of to-node  # noqa: E501

        :param to_y: The to_y of this AddPumpDto.  # noqa: E501
        :type: float
        """

        self._to_y = to_y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddPumpDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddPumpDto):
            return True

        return self.to_dict() != other.to_dict()
