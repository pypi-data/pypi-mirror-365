# coding: utf-8

"""
    identity-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_identity_service.configuration import Configuration


class BuildCalcDosageConfigInOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'param': 'str',
        'sys_code': 'str',
        'ext_info': 'str',
        'category': 'int',
        'action': 'str',
        'code': 'str',
        'point_type': 'str',
        'is_input_point': 'bool',
        'product_line': 'str'
    }

    attribute_map = {
        'id': 'id',
        'param': 'param',
        'sys_code': 'sysCode',
        'ext_info': 'extInfo',
        'category': 'category',
        'action': 'action',
        'code': 'code',
        'point_type': 'pointType',
        'is_input_point': 'isInputPoint',
        'product_line': 'productLine'
    }

    def __init__(self, id=None, param=None, sys_code=None, ext_info=None, category=None, action=None, code=None, point_type=None, is_input_point=None, product_line=None, local_vars_configuration=None):  # noqa: E501
        """BuildCalcDosageConfigInOut - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._param = None
        self._sys_code = None
        self._ext_info = None
        self._category = None
        self._action = None
        self._code = None
        self._point_type = None
        self._is_input_point = None
        self._product_line = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.param = param
        self.sys_code = sys_code
        self.ext_info = ext_info
        if category is not None:
            self.category = category
        self.action = action
        self.code = code
        self.point_type = point_type
        if is_input_point is not None:
            self.is_input_point = is_input_point
        self.product_line = product_line

    @property
    def id(self):
        """Gets the id of this BuildCalcDosageConfigInOut.  # noqa: E501

        配置ID config id  # noqa: E501

        :return: The id of this BuildCalcDosageConfigInOut.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BuildCalcDosageConfigInOut.

        配置ID config id  # noqa: E501

        :param id: The id of this BuildCalcDosageConfigInOut.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def param(self):
        """Gets the param of this BuildCalcDosageConfigInOut.  # noqa: E501

        参数名 parameter name  # noqa: E501

        :return: The param of this BuildCalcDosageConfigInOut.  # noqa: E501
        :rtype: str
        """
        return self._param

    @param.setter
    def param(self, param):
        """Sets the param of this BuildCalcDosageConfigInOut.

        参数名 parameter name  # noqa: E501

        :param param: The param of this BuildCalcDosageConfigInOut.  # noqa: E501
        :type: str
        """

        self._param = param

    @property
    def sys_code(self):
        """Gets the sys_code of this BuildCalcDosageConfigInOut.  # noqa: E501

        系统代码 system code  # noqa: E501

        :return: The sys_code of this BuildCalcDosageConfigInOut.  # noqa: E501
        :rtype: str
        """
        return self._sys_code

    @sys_code.setter
    def sys_code(self, sys_code):
        """Sets the sys_code of this BuildCalcDosageConfigInOut.

        系统代码 system code  # noqa: E501

        :param sys_code: The sys_code of this BuildCalcDosageConfigInOut.  # noqa: E501
        :type: str
        """

        self._sys_code = sys_code

    @property
    def ext_info(self):
        """Gets the ext_info of this BuildCalcDosageConfigInOut.  # noqa: E501

        生化池序号 biochemical pool index  # noqa: E501

        :return: The ext_info of this BuildCalcDosageConfigInOut.  # noqa: E501
        :rtype: str
        """
        return self._ext_info

    @ext_info.setter
    def ext_info(self, ext_info):
        """Sets the ext_info of this BuildCalcDosageConfigInOut.

        生化池序号 biochemical pool index  # noqa: E501

        :param ext_info: The ext_info of this BuildCalcDosageConfigInOut.  # noqa: E501
        :type: str
        """

        self._ext_info = ext_info

    @property
    def category(self):
        """Gets the category of this BuildCalcDosageConfigInOut.  # noqa: E501

        药剂投加类别  # noqa: E501

        :return: The category of this BuildCalcDosageConfigInOut.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BuildCalcDosageConfigInOut.

        药剂投加类别  # noqa: E501

        :param category: The category of this BuildCalcDosageConfigInOut.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def action(self):
        """Gets the action of this BuildCalcDosageConfigInOut.  # noqa: E501

        该参数用途 parameter usage  # noqa: E501

        :return: The action of this BuildCalcDosageConfigInOut.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this BuildCalcDosageConfigInOut.

        该参数用途 parameter usage  # noqa: E501

        :param action: The action of this BuildCalcDosageConfigInOut.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def code(self):
        """Gets the code of this BuildCalcDosageConfigInOut.  # noqa: E501

        系统点位编码 system point code  # noqa: E501

        :return: The code of this BuildCalcDosageConfigInOut.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BuildCalcDosageConfigInOut.

        系统点位编码 system point code  # noqa: E501

        :param code: The code of this BuildCalcDosageConfigInOut.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def point_type(self):
        """Gets the point_type of this BuildCalcDosageConfigInOut.  # noqa: E501

        点位类型 point type  # noqa: E501

        :return: The point_type of this BuildCalcDosageConfigInOut.  # noqa: E501
        :rtype: str
        """
        return self._point_type

    @point_type.setter
    def point_type(self, point_type):
        """Sets the point_type of this BuildCalcDosageConfigInOut.

        点位类型 point type  # noqa: E501

        :param point_type: The point_type of this BuildCalcDosageConfigInOut.  # noqa: E501
        :type: str
        """

        self._point_type = point_type

    @property
    def is_input_point(self):
        """Gets the is_input_point of this BuildCalcDosageConfigInOut.  # noqa: E501

        是否为输入点位 if it is an online point for input  # noqa: E501

        :return: The is_input_point of this BuildCalcDosageConfigInOut.  # noqa: E501
        :rtype: bool
        """
        return self._is_input_point

    @is_input_point.setter
    def is_input_point(self, is_input_point):
        """Sets the is_input_point of this BuildCalcDosageConfigInOut.

        是否为输入点位 if it is an online point for input  # noqa: E501

        :param is_input_point: The is_input_point of this BuildCalcDosageConfigInOut.  # noqa: E501
        :type: bool
        """

        self._is_input_point = is_input_point

    @property
    def product_line(self):
        """Gets the product_line of this BuildCalcDosageConfigInOut.  # noqa: E501

        生产线代码 product line code  # noqa: E501

        :return: The product_line of this BuildCalcDosageConfigInOut.  # noqa: E501
        :rtype: str
        """
        return self._product_line

    @product_line.setter
    def product_line(self, product_line):
        """Sets the product_line of this BuildCalcDosageConfigInOut.

        生产线代码 product line code  # noqa: E501

        :param product_line: The product_line of this BuildCalcDosageConfigInOut.  # noqa: E501
        :type: str
        """

        self._product_line = product_line

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildCalcDosageConfigInOut):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BuildCalcDosageConfigInOut):
            return True

        return self.to_dict() != other.to_dict()
