# coding: utf-8

"""
    identity-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_identity_service.configuration import Configuration


class AddMicroServiceInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'service_key': 'str',
        'service_name': 'str',
        'develop_voice': 'str',
        'is_gateway_auth': 'bool',
        'manager_name': 'str',
        'remarks': 'str'
    }

    attribute_map = {
        'service_key': 'serviceKey',
        'service_name': 'serviceName',
        'develop_voice': 'developVoice',
        'is_gateway_auth': 'isGatewayAuth',
        'manager_name': 'managerName',
        'remarks': 'remarks'
    }

    def __init__(self, service_key=None, service_name=None, develop_voice=None, is_gateway_auth=None, manager_name=None, remarks=None, local_vars_configuration=None):  # noqa: E501
        """AddMicroServiceInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._service_key = None
        self._service_name = None
        self._develop_voice = None
        self._is_gateway_auth = None
        self._manager_name = None
        self._remarks = None
        self.discriminator = None

        self.service_key = service_key
        self.service_name = service_name
        self.develop_voice = develop_voice
        if is_gateway_auth is not None:
            self.is_gateway_auth = is_gateway_auth
        self.manager_name = manager_name
        self.remarks = remarks

    @property
    def service_key(self):
        """Gets the service_key of this AddMicroServiceInput.  # noqa: E501

        微服务标识 micro service key  # noqa: E501

        :return: The service_key of this AddMicroServiceInput.  # noqa: E501
        :rtype: str
        """
        return self._service_key

    @service_key.setter
    def service_key(self, service_key):
        """Sets the service_key of this AddMicroServiceInput.

        微服务标识 micro service key  # noqa: E501

        :param service_key: The service_key of this AddMicroServiceInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and service_key is None:  # noqa: E501
            raise ValueError("Invalid value for `service_key`, must not be `None`")  # noqa: E501

        self._service_key = service_key

    @property
    def service_name(self):
        """Gets the service_name of this AddMicroServiceInput.  # noqa: E501

        微服务名称 micro service name  # noqa: E501

        :return: The service_name of this AddMicroServiceInput.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this AddMicroServiceInput.

        微服务名称 micro service name  # noqa: E501

        :param service_name: The service_name of this AddMicroServiceInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and service_name is None:  # noqa: E501
            raise ValueError("Invalid value for `service_name`, must not be `None`")  # noqa: E501

        self._service_name = service_name

    @property
    def develop_voice(self):
        """Gets the develop_voice of this AddMicroServiceInput.  # noqa: E501

        开发语言 develop language  # noqa: E501

        :return: The develop_voice of this AddMicroServiceInput.  # noqa: E501
        :rtype: str
        """
        return self._develop_voice

    @develop_voice.setter
    def develop_voice(self, develop_voice):
        """Sets the develop_voice of this AddMicroServiceInput.

        开发语言 develop language  # noqa: E501

        :param develop_voice: The develop_voice of this AddMicroServiceInput.  # noqa: E501
        :type: str
        """

        self._develop_voice = develop_voice

    @property
    def is_gateway_auth(self):
        """Gets the is_gateway_auth of this AddMicroServiceInput.  # noqa: E501

        是否需要网关鉴权 if require gateway authentication  # noqa: E501

        :return: The is_gateway_auth of this AddMicroServiceInput.  # noqa: E501
        :rtype: bool
        """
        return self._is_gateway_auth

    @is_gateway_auth.setter
    def is_gateway_auth(self, is_gateway_auth):
        """Sets the is_gateway_auth of this AddMicroServiceInput.

        是否需要网关鉴权 if require gateway authentication  # noqa: E501

        :param is_gateway_auth: The is_gateway_auth of this AddMicroServiceInput.  # noqa: E501
        :type: bool
        """

        self._is_gateway_auth = is_gateway_auth

    @property
    def manager_name(self):
        """Gets the manager_name of this AddMicroServiceInput.  # noqa: E501

        负责人 micro service manager  # noqa: E501

        :return: The manager_name of this AddMicroServiceInput.  # noqa: E501
        :rtype: str
        """
        return self._manager_name

    @manager_name.setter
    def manager_name(self, manager_name):
        """Sets the manager_name of this AddMicroServiceInput.

        负责人 micro service manager  # noqa: E501

        :param manager_name: The manager_name of this AddMicroServiceInput.  # noqa: E501
        :type: str
        """

        self._manager_name = manager_name

    @property
    def remarks(self):
        """Gets the remarks of this AddMicroServiceInput.  # noqa: E501

        备注 remarks  # noqa: E501

        :return: The remarks of this AddMicroServiceInput.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this AddMicroServiceInput.

        备注 remarks  # noqa: E501

        :param remarks: The remarks of this AddMicroServiceInput.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddMicroServiceInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddMicroServiceInput):
            return True

        return self.to_dict() != other.to_dict()
