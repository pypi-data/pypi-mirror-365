# coding: utf-8

"""
    identity-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_identity_service.configuration import Configuration


class DeviceMaintenanceOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'online_point': 'str',
        'point_code': 'str',
        'time': 'datetime',
        'location': 'str',
        'status': 'str',
        'message': 'str',
        'label': 'str',
        'tag': 'str',
        'grade': 'int'
    }

    attribute_map = {
        'online_point': 'onlinePoint',
        'point_code': 'pointCode',
        'time': 'time',
        'location': 'location',
        'status': 'status',
        'message': 'message',
        'label': 'label',
        'tag': 'tag',
        'grade': 'grade'
    }

    def __init__(self, online_point=None, point_code=None, time=None, location=None, status=None, message=None, label=None, tag=None, grade=None, local_vars_configuration=None):  # noqa: E501
        """DeviceMaintenanceOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._online_point = None
        self._point_code = None
        self._time = None
        self._location = None
        self._status = None
        self._message = None
        self._label = None
        self._tag = None
        self._grade = None
        self.discriminator = None

        self.online_point = online_point
        self.point_code = point_code
        if time is not None:
            self.time = time
        self.location = location
        self.status = status
        self.message = message
        self.label = label
        self.tag = tag
        if grade is not None:
            self.grade = grade

    @property
    def online_point(self):
        """Gets the online_point of this DeviceMaintenanceOutput.  # noqa: E501

        在线点位名称 online point name  # noqa: E501

        :return: The online_point of this DeviceMaintenanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._online_point

    @online_point.setter
    def online_point(self, online_point):
        """Sets the online_point of this DeviceMaintenanceOutput.

        在线点位名称 online point name  # noqa: E501

        :param online_point: The online_point of this DeviceMaintenanceOutput.  # noqa: E501
        :type: str
        """

        self._online_point = online_point

    @property
    def point_code(self):
        """Gets the point_code of this DeviceMaintenanceOutput.  # noqa: E501

        在线点位代码 online point code  # noqa: E501

        :return: The point_code of this DeviceMaintenanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._point_code

    @point_code.setter
    def point_code(self, point_code):
        """Sets the point_code of this DeviceMaintenanceOutput.

        在线点位代码 online point code  # noqa: E501

        :param point_code: The point_code of this DeviceMaintenanceOutput.  # noqa: E501
        :type: str
        """

        self._point_code = point_code

    @property
    def time(self):
        """Gets the time of this DeviceMaintenanceOutput.  # noqa: E501

        时间 time  # noqa: E501

        :return: The time of this DeviceMaintenanceOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DeviceMaintenanceOutput.

        时间 time  # noqa: E501

        :param time: The time of this DeviceMaintenanceOutput.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def location(self):
        """Gets the location of this DeviceMaintenanceOutput.  # noqa: E501

        位置 location  # noqa: E501

        :return: The location of this DeviceMaintenanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DeviceMaintenanceOutput.

        位置 location  # noqa: E501

        :param location: The location of this DeviceMaintenanceOutput.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def status(self):
        """Gets the status of this DeviceMaintenanceOutput.  # noqa: E501

        维护预警状态 maintenance alarm status  # noqa: E501

        :return: The status of this DeviceMaintenanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceMaintenanceOutput.

        维护预警状态 maintenance alarm status  # noqa: E501

        :param status: The status of this DeviceMaintenanceOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def message(self):
        """Gets the message of this DeviceMaintenanceOutput.  # noqa: E501

        维护预警信息 maintenance alarm message  # noqa: E501

        :return: The message of this DeviceMaintenanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DeviceMaintenanceOutput.

        维护预警信息 maintenance alarm message  # noqa: E501

        :param message: The message of this DeviceMaintenanceOutput.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def label(self):
        """Gets the label of this DeviceMaintenanceOutput.  # noqa: E501

        设备状态标签 device status label  # noqa: E501

        :return: The label of this DeviceMaintenanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DeviceMaintenanceOutput.

        设备状态标签 device status label  # noqa: E501

        :param label: The label of this DeviceMaintenanceOutput.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def tag(self):
        """Gets the tag of this DeviceMaintenanceOutput.  # noqa: E501

        清洗标签 data clean tag  # noqa: E501

        :return: The tag of this DeviceMaintenanceOutput.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this DeviceMaintenanceOutput.

        清洗标签 data clean tag  # noqa: E501

        :param tag: The tag of this DeviceMaintenanceOutput.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def grade(self):
        """Gets the grade of this DeviceMaintenanceOutput.  # noqa: E501


        :return: The grade of this DeviceMaintenanceOutput.  # noqa: E501
        :rtype: int
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this DeviceMaintenanceOutput.


        :param grade: The grade of this DeviceMaintenanceOutput.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and grade not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `grade` ({0}), must be one of {1}"  # noqa: E501
                .format(grade, allowed_values)
            )

        self._grade = grade

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceMaintenanceOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceMaintenanceOutput):
            return True

        return self.to_dict() != other.to_dict()
