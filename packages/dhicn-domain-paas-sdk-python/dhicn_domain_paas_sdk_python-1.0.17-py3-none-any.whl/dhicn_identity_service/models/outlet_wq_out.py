# coding: utf-8

"""
    identity-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_identity_service.configuration import Configuration


class OutletWqOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'real_datas': 'list[TsPair1]',
        'model_datas': 'list[TsPair1]',
        'unit': 'str'
    }

    attribute_map = {
        'code': 'code',
        'real_datas': 'realDatas',
        'model_datas': 'modelDatas',
        'unit': 'unit'
    }

    def __init__(self, code=None, real_datas=None, model_datas=None, unit=None, local_vars_configuration=None):  # noqa: E501
        """OutletWqOut - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._real_datas = None
        self._model_datas = None
        self._unit = None
        self.discriminator = None

        self.code = code
        self.real_datas = real_datas
        self.model_datas = model_datas
        self.unit = unit

    @property
    def code(self):
        """Gets the code of this OutletWqOut.  # noqa: E501

        指标 indicator code  # noqa: E501

        :return: The code of this OutletWqOut.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OutletWqOut.

        指标 indicator code  # noqa: E501

        :param code: The code of this OutletWqOut.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def real_datas(self):
        """Gets the real_datas of this OutletWqOut.  # noqa: E501

        在线数据 online data  # noqa: E501

        :return: The real_datas of this OutletWqOut.  # noqa: E501
        :rtype: list[TsPair1]
        """
        return self._real_datas

    @real_datas.setter
    def real_datas(self, real_datas):
        """Sets the real_datas of this OutletWqOut.

        在线数据 online data  # noqa: E501

        :param real_datas: The real_datas of this OutletWqOut.  # noqa: E501
        :type: list[TsPair1]
        """

        self._real_datas = real_datas

    @property
    def model_datas(self):
        """Gets the model_datas of this OutletWqOut.  # noqa: E501

        模拟数据 model result data  # noqa: E501

        :return: The model_datas of this OutletWqOut.  # noqa: E501
        :rtype: list[TsPair1]
        """
        return self._model_datas

    @model_datas.setter
    def model_datas(self, model_datas):
        """Sets the model_datas of this OutletWqOut.

        模拟数据 model result data  # noqa: E501

        :param model_datas: The model_datas of this OutletWqOut.  # noqa: E501
        :type: list[TsPair1]
        """

        self._model_datas = model_datas

    @property
    def unit(self):
        """Gets the unit of this OutletWqOut.  # noqa: E501

        单位 unit  # noqa: E501

        :return: The unit of this OutletWqOut.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this OutletWqOut.

        单位 unit  # noqa: E501

        :param unit: The unit of this OutletWqOut.  # noqa: E501
        :type: str
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutletWqOut):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutletWqOut):
            return True

        return self.to_dict() != other.to_dict()
