# coding: utf-8

"""
    identity-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_identity_service.configuration import Configuration


class ButtonPerUnderMenuOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'menu_id': 'str',
        'menu_label': 'str',
        'button_pers': 'list[ButtonPer]'
    }

    attribute_map = {
        'menu_id': 'menuId',
        'menu_label': 'menuLabel',
        'button_pers': 'buttonPers'
    }

    def __init__(self, menu_id=None, menu_label=None, button_pers=None, local_vars_configuration=None):  # noqa: E501
        """ButtonPerUnderMenuOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._menu_id = None
        self._menu_label = None
        self._button_pers = None
        self.discriminator = None

        if menu_id is not None:
            self.menu_id = menu_id
        self.menu_label = menu_label
        self.button_pers = button_pers

    @property
    def menu_id(self):
        """Gets the menu_id of this ButtonPerUnderMenuOutput.  # noqa: E501

        菜单Id memu id  # noqa: E501

        :return: The menu_id of this ButtonPerUnderMenuOutput.  # noqa: E501
        :rtype: str
        """
        return self._menu_id

    @menu_id.setter
    def menu_id(self, menu_id):
        """Sets the menu_id of this ButtonPerUnderMenuOutput.

        菜单Id memu id  # noqa: E501

        :param menu_id: The menu_id of this ButtonPerUnderMenuOutput.  # noqa: E501
        :type: str
        """

        self._menu_id = menu_id

    @property
    def menu_label(self):
        """Gets the menu_label of this ButtonPerUnderMenuOutput.  # noqa: E501

        菜单名称 menu label  # noqa: E501

        :return: The menu_label of this ButtonPerUnderMenuOutput.  # noqa: E501
        :rtype: str
        """
        return self._menu_label

    @menu_label.setter
    def menu_label(self, menu_label):
        """Sets the menu_label of this ButtonPerUnderMenuOutput.

        菜单名称 menu label  # noqa: E501

        :param menu_label: The menu_label of this ButtonPerUnderMenuOutput.  # noqa: E501
        :type: str
        """

        self._menu_label = menu_label

    @property
    def button_pers(self):
        """Gets the button_pers of this ButtonPerUnderMenuOutput.  # noqa: E501

        菜单下的按钮权限 button permissions of the menu  # noqa: E501

        :return: The button_pers of this ButtonPerUnderMenuOutput.  # noqa: E501
        :rtype: list[ButtonPer]
        """
        return self._button_pers

    @button_pers.setter
    def button_pers(self, button_pers):
        """Sets the button_pers of this ButtonPerUnderMenuOutput.

        菜单下的按钮权限 button permissions of the menu  # noqa: E501

        :param button_pers: The button_pers of this ButtonPerUnderMenuOutput.  # noqa: E501
        :type: list[ButtonPer]
        """

        self._button_pers = button_pers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ButtonPerUnderMenuOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ButtonPerUnderMenuOutput):
            return True

        return self.to_dict() != other.to_dict()
