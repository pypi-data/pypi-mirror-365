# coding: utf-8

"""
    IoT服务

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_iot_service.configuration import Configuration


class MockDeviceInfoInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_id': 'str',
        'indicator': 'str',
        'future_few_hours': 'int',
        'min_range': 'float',
        'max_range': 'float'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'indicator': 'indicator',
        'future_few_hours': 'futureFewHours',
        'min_range': 'minRange',
        'max_range': 'maxRange'
    }

    def __init__(self, device_id=None, indicator=None, future_few_hours=None, min_range=None, max_range=None, local_vars_configuration=None):  # noqa: E501
        """MockDeviceInfoInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._device_id = None
        self._indicator = None
        self._future_few_hours = None
        self._min_range = None
        self._max_range = None
        self.discriminator = None

        self.device_id = device_id
        self.indicator = indicator
        if future_few_hours is not None:
            self.future_few_hours = future_few_hours
        self.min_range = min_range
        self.max_range = max_range

    @property
    def device_id(self):
        """Gets the device_id of this MockDeviceInfoInput.  # noqa: E501

        设备Id  # noqa: E501

        :return: The device_id of this MockDeviceInfoInput.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this MockDeviceInfoInput.

        设备Id  # noqa: E501

        :param device_id: The device_id of this MockDeviceInfoInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and device_id is None:  # noqa: E501
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def indicator(self):
        """Gets the indicator of this MockDeviceInfoInput.  # noqa: E501

        指标  # noqa: E501

        :return: The indicator of this MockDeviceInfoInput.  # noqa: E501
        :rtype: str
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator):
        """Sets the indicator of this MockDeviceInfoInput.

        指标  # noqa: E501

        :param indicator: The indicator of this MockDeviceInfoInput.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and indicator is None:  # noqa: E501
            raise ValueError("Invalid value for `indicator`, must not be `None`")  # noqa: E501

        self._indicator = indicator

    @property
    def future_few_hours(self):
        """Gets the future_few_hours of this MockDeviceInfoInput.  # noqa: E501

        模拟未来多少小时的数据,默认为0代表:代表当前整点时刻,如6:代表未来6小时  # noqa: E501

        :return: The future_few_hours of this MockDeviceInfoInput.  # noqa: E501
        :rtype: int
        """
        return self._future_few_hours

    @future_few_hours.setter
    def future_few_hours(self, future_few_hours):
        """Sets the future_few_hours of this MockDeviceInfoInput.

        模拟未来多少小时的数据,默认为0代表:代表当前整点时刻,如6:代表未来6小时  # noqa: E501

        :param future_few_hours: The future_few_hours of this MockDeviceInfoInput.  # noqa: E501
        :type: int
        """

        self._future_few_hours = future_few_hours

    @property
    def min_range(self):
        """Gets the min_range of this MockDeviceInfoInput.  # noqa: E501

        Mock数据范围,最小值  # noqa: E501

        :return: The min_range of this MockDeviceInfoInput.  # noqa: E501
        :rtype: float
        """
        return self._min_range

    @min_range.setter
    def min_range(self, min_range):
        """Sets the min_range of this MockDeviceInfoInput.

        Mock数据范围,最小值  # noqa: E501

        :param min_range: The min_range of this MockDeviceInfoInput.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and min_range is None:  # noqa: E501
            raise ValueError("Invalid value for `min_range`, must not be `None`")  # noqa: E501

        self._min_range = min_range

    @property
    def max_range(self):
        """Gets the max_range of this MockDeviceInfoInput.  # noqa: E501

         /// <summary>  Mock数据范围,最大值  </summary>  # noqa: E501

        :return: The max_range of this MockDeviceInfoInput.  # noqa: E501
        :rtype: float
        """
        return self._max_range

    @max_range.setter
    def max_range(self, max_range):
        """Sets the max_range of this MockDeviceInfoInput.

         /// <summary>  Mock数据范围,最大值  </summary>  # noqa: E501

        :param max_range: The max_range of this MockDeviceInfoInput.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and max_range is None:  # noqa: E501
            raise ValueError("Invalid value for `max_range`, must not be `None`")  # noqa: E501

        self._max_range = max_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MockDeviceInfoInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MockDeviceInfoInput):
            return True

        return self.to_dict() != other.to_dict()
