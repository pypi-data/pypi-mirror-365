# coding: utf-8

"""
    wwtp-paas-infrastructure-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_infrastructure_service.configuration import Configuration


class InlineObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'excel_file': 'file',
        'sheets': 'str'
    }

    attribute_map = {
        'excel_file': 'ExcelFile',
        'sheets': 'Sheets'
    }

    def __init__(self, excel_file=None, sheets=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._excel_file = None
        self._sheets = None
        self.discriminator = None

        if excel_file is not None:
            self.excel_file = excel_file
        if sheets is not None:
            self.sheets = sheets

    @property
    def excel_file(self):
        """Gets the excel_file of this InlineObject.  # noqa: E501


        :return: The excel_file of this InlineObject.  # noqa: E501
        :rtype: file
        """
        return self._excel_file

    @excel_file.setter
    def excel_file(self, excel_file):
        """Sets the excel_file of this InlineObject.


        :param excel_file: The excel_file of this InlineObject.  # noqa: E501
        :type: file
        """

        self._excel_file = excel_file

    @property
    def sheets(self):
        """Gets the sheets of this InlineObject.  # noqa: E501

        更新的sheet页的编码，如（1,2,3表示更新sheet1，2，3中的配置），以表示需要更新哪个页的配置，其余页面不更新；如该参数为空，则表示全部更新  # noqa: E501

        :return: The sheets of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._sheets

    @sheets.setter
    def sheets(self, sheets):
        """Sets the sheets of this InlineObject.

        更新的sheet页的编码，如（1,2,3表示更新sheet1，2，3中的配置），以表示需要更新哪个页的配置，其余页面不更新；如该参数为空，则表示全部更新  # noqa: E501

        :param sheets: The sheets of this InlineObject.  # noqa: E501
        :type: str
        """

        self._sheets = sheets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject):
            return True

        return self.to_dict() != other.to_dict()
