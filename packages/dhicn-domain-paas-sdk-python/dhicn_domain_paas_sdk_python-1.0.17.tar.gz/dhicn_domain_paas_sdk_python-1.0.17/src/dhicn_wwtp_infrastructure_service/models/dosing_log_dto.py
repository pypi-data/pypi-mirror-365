# coding: utf-8

"""
    wwtp-paas-infrastructure-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_infrastructure_service.configuration import Configuration


class DosingLogDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'code': 'str',
        'category': 'int',
        'addition_type': 'int',
        'product_line': 'str',
        'cal_value': 'float',
        'value': 'float',
        'cost_value': 'float',
        'unit': 'str',
        'time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'category': 'category',
        'addition_type': 'additionType',
        'product_line': 'productLine',
        'cal_value': 'calValue',
        'value': 'value',
        'cost_value': 'costValue',
        'unit': 'unit',
        'time': 'time'
    }

    def __init__(self, id=None, code=None, category=None, addition_type=None, product_line=None, cal_value=None, value=None, cost_value=None, unit=None, time=None, local_vars_configuration=None):  # noqa: E501
        """DosingLogDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._code = None
        self._category = None
        self._addition_type = None
        self._product_line = None
        self._cal_value = None
        self._value = None
        self._cost_value = None
        self._unit = None
        self._time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.code = code
        if category is not None:
            self.category = category
        if addition_type is not None:
            self.addition_type = addition_type
        self.product_line = product_line
        if cal_value is not None:
            self.cal_value = cal_value
        if value is not None:
            self.value = value
        if cost_value is not None:
            self.cost_value = cost_value
        self.unit = unit
        if time is not None:
            self.time = time

    @property
    def id(self):
        """Gets the id of this DosingLogDto.  # noqa: E501


        :return: The id of this DosingLogDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DosingLogDto.


        :param id: The id of this DosingLogDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this DosingLogDto.  # noqa: E501

        点位编码 point code  # noqa: E501

        :return: The code of this DosingLogDto.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DosingLogDto.

        点位编码 point code  # noqa: E501

        :param code: The code of this DosingLogDto.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def category(self):
        """Gets the category of this DosingLogDto.  # noqa: E501

        药剂类型 chemical category  # noqa: E501

        :return: The category of this DosingLogDto.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DosingLogDto.

        药剂类型 chemical category  # noqa: E501

        :param category: The category of this DosingLogDto.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def addition_type(self):
        """Gets the addition_type of this DosingLogDto.  # noqa: E501

        加药类型：手动，自动 dosing type, including automatic and manual  # noqa: E501

        :return: The addition_type of this DosingLogDto.  # noqa: E501
        :rtype: int
        """
        return self._addition_type

    @addition_type.setter
    def addition_type(self, addition_type):
        """Sets the addition_type of this DosingLogDto.

        加药类型：手动，自动 dosing type, including automatic and manual  # noqa: E501

        :param addition_type: The addition_type of this DosingLogDto.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and addition_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `addition_type` ({0}), must be one of {1}"  # noqa: E501
                .format(addition_type, allowed_values)
            )

        self._addition_type = addition_type

    @property
    def product_line(self):
        """Gets the product_line of this DosingLogDto.  # noqa: E501

        生产线 product line code  # noqa: E501

        :return: The product_line of this DosingLogDto.  # noqa: E501
        :rtype: str
        """
        return self._product_line

    @product_line.setter
    def product_line(self, product_line):
        """Sets the product_line of this DosingLogDto.

        生产线 product line code  # noqa: E501

        :param product_line: The product_line of this DosingLogDto.  # noqa: E501
        :type: str
        """

        self._product_line = product_line

    @property
    def cal_value(self):
        """Gets the cal_value of this DosingLogDto.  # noqa: E501

        计算值 calculate dosage value  # noqa: E501

        :return: The cal_value of this DosingLogDto.  # noqa: E501
        :rtype: float
        """
        return self._cal_value

    @cal_value.setter
    def cal_value(self, cal_value):
        """Sets the cal_value of this DosingLogDto.

        计算值 calculate dosage value  # noqa: E501

        :param cal_value: The cal_value of this DosingLogDto.  # noqa: E501
        :type: float
        """

        self._cal_value = cal_value

    @property
    def value(self):
        """Gets the value of this DosingLogDto.  # noqa: E501

        实际值 actual dosage value  # noqa: E501

        :return: The value of this DosingLogDto.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DosingLogDto.

        实际值 actual dosage value  # noqa: E501

        :param value: The value of this DosingLogDto.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def cost_value(self):
        """Gets the cost_value of this DosingLogDto.  # noqa: E501

        药耗值 actual dosage cost  # noqa: E501

        :return: The cost_value of this DosingLogDto.  # noqa: E501
        :rtype: float
        """
        return self._cost_value

    @cost_value.setter
    def cost_value(self, cost_value):
        """Sets the cost_value of this DosingLogDto.

        药耗值 actual dosage cost  # noqa: E501

        :param cost_value: The cost_value of this DosingLogDto.  # noqa: E501
        :type: float
        """

        self._cost_value = cost_value

    @property
    def unit(self):
        """Gets the unit of this DosingLogDto.  # noqa: E501

        单位 dosage unit  # noqa: E501

        :return: The unit of this DosingLogDto.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this DosingLogDto.

        单位 dosage unit  # noqa: E501

        :param unit: The unit of this DosingLogDto.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def time(self):
        """Gets the time of this DosingLogDto.  # noqa: E501

        时间 dosing time  # noqa: E501

        :return: The time of this DosingLogDto.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DosingLogDto.

        时间 dosing time  # noqa: E501

        :param time: The time of this DosingLogDto.  # noqa: E501
        :type: datetime
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DosingLogDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DosingLogDto):
            return True

        return self.to_dict() != other.to_dict()
