# coding: utf-8

"""
    wwtp-paas-infrastructure-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_infrastructure_service.configuration import Configuration


class DataCleanTagConfigOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'tag': 'str',
        'status': 'str',
        'message': 'str',
        'health': 'bool',
        'label': 'str',
        'default': 'bool',
        'grade': 'int'
    }

    attribute_map = {
        'id': 'id',
        'tag': 'tag',
        'status': 'status',
        'message': 'message',
        'health': 'health',
        'label': 'label',
        'default': 'default',
        'grade': 'grade'
    }

    def __init__(self, id=None, tag=None, status=None, message=None, health=None, label=None, default=None, grade=None, local_vars_configuration=None):  # noqa: E501
        """DataCleanTagConfigOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._tag = None
        self._status = None
        self._message = None
        self._health = None
        self._label = None
        self._default = None
        self._grade = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.tag = tag
        self.status = status
        self.message = message
        if health is not None:
            self.health = health
        self.label = label
        if default is not None:
            self.default = default
        if grade is not None:
            self.grade = grade

    @property
    def id(self):
        """Gets the id of this DataCleanTagConfigOutput.  # noqa: E501

        配置ID config id  # noqa: E501

        :return: The id of this DataCleanTagConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataCleanTagConfigOutput.

        配置ID config id  # noqa: E501

        :param id: The id of this DataCleanTagConfigOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def tag(self):
        """Gets the tag of this DataCleanTagConfigOutput.  # noqa: E501

        标签 data clean tag  # noqa: E501

        :return: The tag of this DataCleanTagConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this DataCleanTagConfigOutput.

        标签 data clean tag  # noqa: E501

        :param tag: The tag of this DataCleanTagConfigOutput.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def status(self):
        """Gets the status of this DataCleanTagConfigOutput.  # noqa: E501

        状态信息 device status  # noqa: E501

        :return: The status of this DataCleanTagConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataCleanTagConfigOutput.

        状态信息 device status  # noqa: E501

        :param status: The status of this DataCleanTagConfigOutput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def message(self):
        """Gets the message of this DataCleanTagConfigOutput.  # noqa: E501

        维护预警 device maintenance  # noqa: E501

        :return: The message of this DataCleanTagConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DataCleanTagConfigOutput.

        维护预警 device maintenance  # noqa: E501

        :param message: The message of this DataCleanTagConfigOutput.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def health(self):
        """Gets the health of this DataCleanTagConfigOutput.  # noqa: E501

        是否正常 if the device is health  # noqa: E501

        :return: The health of this DataCleanTagConfigOutput.  # noqa: E501
        :rtype: bool
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this DataCleanTagConfigOutput.

        是否正常 if the device is health  # noqa: E501

        :param health: The health of this DataCleanTagConfigOutput.  # noqa: E501
        :type: bool
        """

        self._health = health

    @property
    def label(self):
        """Gets the label of this DataCleanTagConfigOutput.  # noqa: E501

        状态标识 status label  # noqa: E501

        :return: The label of this DataCleanTagConfigOutput.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DataCleanTagConfigOutput.

        状态标识 status label  # noqa: E501

        :param label: The label of this DataCleanTagConfigOutput.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def default(self):
        """Gets the default of this DataCleanTagConfigOutput.  # noqa: E501

        是否默认 if it is a default tag  # noqa: E501

        :return: The default of this DataCleanTagConfigOutput.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this DataCleanTagConfigOutput.

        是否默认 if it is a default tag  # noqa: E501

        :param default: The default of this DataCleanTagConfigOutput.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def grade(self):
        """Gets the grade of this DataCleanTagConfigOutput.  # noqa: E501


        :return: The grade of this DataCleanTagConfigOutput.  # noqa: E501
        :rtype: int
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this DataCleanTagConfigOutput.


        :param grade: The grade of this DataCleanTagConfigOutput.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and grade not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `grade` ({0}), must be one of {1}"  # noqa: E501
                .format(grade, allowed_values)
            )

        self._grade = grade

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCleanTagConfigOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataCleanTagConfigOutput):
            return True

        return self.to_dict() != other.to_dict()
