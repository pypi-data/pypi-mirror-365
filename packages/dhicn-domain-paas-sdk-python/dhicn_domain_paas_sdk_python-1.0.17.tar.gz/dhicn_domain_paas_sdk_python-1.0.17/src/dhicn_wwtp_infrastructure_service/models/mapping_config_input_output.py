# coding: utf-8

"""
    wwtp-paas-infrastructure-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_infrastructure_service.configuration import Configuration


class MappingConfigInputOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'point_code': 'str',
        'model_node_code': 'str',
        'sys_id': 'str',
        'reserve': 'str',
        'model_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'point_code': 'pointCode',
        'model_node_code': 'modelNodeCode',
        'sys_id': 'sysId',
        'reserve': 'reserve',
        'model_name': 'modelName'
    }

    def __init__(self, id=None, point_code=None, model_node_code=None, sys_id=None, reserve=None, model_name=None, local_vars_configuration=None):  # noqa: E501
        """MappingConfigInputOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._point_code = None
        self._model_node_code = None
        self._sys_id = None
        self._reserve = None
        self._model_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.point_code = point_code
        self.model_node_code = model_node_code
        if sys_id is not None:
            self.sys_id = sys_id
        self.reserve = reserve
        self.model_name = model_name

    @property
    def id(self):
        """Gets the id of this MappingConfigInputOutput.  # noqa: E501

        点位ID mapping id  # noqa: E501

        :return: The id of this MappingConfigInputOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MappingConfigInputOutput.

        点位ID mapping id  # noqa: E501

        :param id: The id of this MappingConfigInputOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def point_code(self):
        """Gets the point_code of this MappingConfigInputOutput.  # noqa: E501

        系统点位编码 online point code  # noqa: E501

        :return: The point_code of this MappingConfigInputOutput.  # noqa: E501
        :rtype: str
        """
        return self._point_code

    @point_code.setter
    def point_code(self, point_code):
        """Sets the point_code of this MappingConfigInputOutput.

        系统点位编码 online point code  # noqa: E501

        :param point_code: The point_code of this MappingConfigInputOutput.  # noqa: E501
        :type: str
        """

        self._point_code = point_code

    @property
    def model_node_code(self):
        """Gets the model_node_code of this MappingConfigInputOutput.  # noqa: E501

        模型点位编码 model node code  # noqa: E501

        :return: The model_node_code of this MappingConfigInputOutput.  # noqa: E501
        :rtype: str
        """
        return self._model_node_code

    @model_node_code.setter
    def model_node_code(self, model_node_code):
        """Sets the model_node_code of this MappingConfigInputOutput.

        模型点位编码 model node code  # noqa: E501

        :param model_node_code: The model_node_code of this MappingConfigInputOutput.  # noqa: E501
        :type: str
        """

        self._model_node_code = model_node_code

    @property
    def sys_id(self):
        """Gets the sys_id of this MappingConfigInputOutput.  # noqa: E501

        系统点位ID system point id  # noqa: E501

        :return: The sys_id of this MappingConfigInputOutput.  # noqa: E501
        :rtype: str
        """
        return self._sys_id

    @sys_id.setter
    def sys_id(self, sys_id):
        """Sets the sys_id of this MappingConfigInputOutput.

        系统点位ID system point id  # noqa: E501

        :param sys_id: The sys_id of this MappingConfigInputOutput.  # noqa: E501
        :type: str
        """

        self._sys_id = sys_id

    @property
    def reserve(self):
        """Gets the reserve of this MappingConfigInputOutput.  # noqa: E501

        保留字段 reserved field  # noqa: E501

        :return: The reserve of this MappingConfigInputOutput.  # noqa: E501
        :rtype: str
        """
        return self._reserve

    @reserve.setter
    def reserve(self, reserve):
        """Sets the reserve of this MappingConfigInputOutput.

        保留字段 reserved field  # noqa: E501

        :param reserve: The reserve of this MappingConfigInputOutput.  # noqa: E501
        :type: str
        """

        self._reserve = reserve

    @property
    def model_name(self):
        """Gets the model_name of this MappingConfigInputOutput.  # noqa: E501

        模板模型名称（即模板方案名称） template model name  # noqa: E501

        :return: The model_name of this MappingConfigInputOutput.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this MappingConfigInputOutput.

        模板模型名称（即模板方案名称） template model name  # noqa: E501

        :param model_name: The model_name of this MappingConfigInputOutput.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MappingConfigInputOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MappingConfigInputOutput):
            return True

        return self.to_dict() != other.to_dict()
