# coding: utf-8

"""
    消息服务

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_message_service.configuration import Configuration


class ReceiveMessagesInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_save': 'bool',
        'is_send_to_rabbimq': 'bool',
        'message': 'list[AddUserMsg]'
    }

    attribute_map = {
        'is_save': 'isSave',
        'is_send_to_rabbimq': 'isSendToRabbimq',
        'message': 'message'
    }

    def __init__(self, is_save=None, is_send_to_rabbimq=None, message=None, local_vars_configuration=None):  # noqa: E501
        """ReceiveMessagesInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_save = None
        self._is_send_to_rabbimq = None
        self._message = None
        self.discriminator = None

        if is_save is not None:
            self.is_save = is_save
        if is_send_to_rabbimq is not None:
            self.is_send_to_rabbimq = is_send_to_rabbimq
        self.message = message

    @property
    def is_save(self):
        """Gets the is_save of this ReceiveMessagesInput.  # noqa: E501

        是否保存到数据库  # noqa: E501

        :return: The is_save of this ReceiveMessagesInput.  # noqa: E501
        :rtype: bool
        """
        return self._is_save

    @is_save.setter
    def is_save(self, is_save):
        """Sets the is_save of this ReceiveMessagesInput.

        是否保存到数据库  # noqa: E501

        :param is_save: The is_save of this ReceiveMessagesInput.  # noqa: E501
        :type: bool
        """

        self._is_save = is_save

    @property
    def is_send_to_rabbimq(self):
        """Gets the is_send_to_rabbimq of this ReceiveMessagesInput.  # noqa: E501

        是否发送到RabbitMQ  # noqa: E501

        :return: The is_send_to_rabbimq of this ReceiveMessagesInput.  # noqa: E501
        :rtype: bool
        """
        return self._is_send_to_rabbimq

    @is_send_to_rabbimq.setter
    def is_send_to_rabbimq(self, is_send_to_rabbimq):
        """Sets the is_send_to_rabbimq of this ReceiveMessagesInput.

        是否发送到RabbitMQ  # noqa: E501

        :param is_send_to_rabbimq: The is_send_to_rabbimq of this ReceiveMessagesInput.  # noqa: E501
        :type: bool
        """

        self._is_send_to_rabbimq = is_send_to_rabbimq

    @property
    def message(self):
        """Gets the message of this ReceiveMessagesInput.  # noqa: E501

        消息  # noqa: E501

        :return: The message of this ReceiveMessagesInput.  # noqa: E501
        :rtype: list[AddUserMsg]
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ReceiveMessagesInput.

        消息  # noqa: E501

        :param message: The message of this ReceiveMessagesInput.  # noqa: E501
        :type: list[AddUserMsg]
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceiveMessagesInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReceiveMessagesInput):
            return True

        return self.to_dict() != other.to_dict()
