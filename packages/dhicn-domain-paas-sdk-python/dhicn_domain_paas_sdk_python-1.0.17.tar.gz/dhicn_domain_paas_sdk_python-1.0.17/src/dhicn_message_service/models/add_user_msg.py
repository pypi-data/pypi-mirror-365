# coding: utf-8

"""
    消息服务

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_message_service.configuration import Configuration


class AddUserMsg(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sender_user_id': 'str',
        'sender_organ_name': 'str',
        'sender_real_name': 'str',
        'receiver_user_id': 'str',
        'receiver_organ_name': 'str',
        'receiver_real_name': 'str',
        'level': 'int',
        'msg_type': 'str',
        'language': 'str',
        'message': 'str'
    }

    attribute_map = {
        'sender_user_id': 'senderUserId',
        'sender_organ_name': 'senderOrganName',
        'sender_real_name': 'senderRealName',
        'receiver_user_id': 'receiverUserId',
        'receiver_organ_name': 'receiverOrganName',
        'receiver_real_name': 'receiverRealName',
        'level': 'level',
        'msg_type': 'msgType',
        'language': 'language',
        'message': 'message'
    }

    def __init__(self, sender_user_id=None, sender_organ_name=None, sender_real_name=None, receiver_user_id=None, receiver_organ_name=None, receiver_real_name=None, level=None, msg_type=None, language=None, message=None, local_vars_configuration=None):  # noqa: E501
        """AddUserMsg - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sender_user_id = None
        self._sender_organ_name = None
        self._sender_real_name = None
        self._receiver_user_id = None
        self._receiver_organ_name = None
        self._receiver_real_name = None
        self._level = None
        self._msg_type = None
        self._language = None
        self._message = None
        self.discriminator = None

        if sender_user_id is not None:
            self.sender_user_id = sender_user_id
        self.sender_organ_name = sender_organ_name
        self.sender_real_name = sender_real_name
        self.receiver_user_id = receiver_user_id
        self.receiver_organ_name = receiver_organ_name
        self.receiver_real_name = receiver_real_name
        if level is not None:
            self.level = level
        self.msg_type = msg_type
        self.language = language
        self.message = message

    @property
    def sender_user_id(self):
        """Gets the sender_user_id of this AddUserMsg.  # noqa: E501

        发送人ID  <br>sender id  # noqa: E501

        :return: The sender_user_id of this AddUserMsg.  # noqa: E501
        :rtype: str
        """
        return self._sender_user_id

    @sender_user_id.setter
    def sender_user_id(self, sender_user_id):
        """Sets the sender_user_id of this AddUserMsg.

        发送人ID  <br>sender id  # noqa: E501

        :param sender_user_id: The sender_user_id of this AddUserMsg.  # noqa: E501
        :type: str
        """

        self._sender_user_id = sender_user_id

    @property
    def sender_organ_name(self):
        """Gets the sender_organ_name of this AddUserMsg.  # noqa: E501

        发送人组织名称  # noqa: E501

        :return: The sender_organ_name of this AddUserMsg.  # noqa: E501
        :rtype: str
        """
        return self._sender_organ_name

    @sender_organ_name.setter
    def sender_organ_name(self, sender_organ_name):
        """Sets the sender_organ_name of this AddUserMsg.

        发送人组织名称  # noqa: E501

        :param sender_organ_name: The sender_organ_name of this AddUserMsg.  # noqa: E501
        :type: str
        """

        self._sender_organ_name = sender_organ_name

    @property
    def sender_real_name(self):
        """Gets the sender_real_name of this AddUserMsg.  # noqa: E501

        发送人真实姓名  # noqa: E501

        :return: The sender_real_name of this AddUserMsg.  # noqa: E501
        :rtype: str
        """
        return self._sender_real_name

    @sender_real_name.setter
    def sender_real_name(self, sender_real_name):
        """Sets the sender_real_name of this AddUserMsg.

        发送人真实姓名  # noqa: E501

        :param sender_real_name: The sender_real_name of this AddUserMsg.  # noqa: E501
        :type: str
        """

        self._sender_real_name = sender_real_name

    @property
    def receiver_user_id(self):
        """Gets the receiver_user_id of this AddUserMsg.  # noqa: E501

        接收人ID receicer's id  # noqa: E501

        :return: The receiver_user_id of this AddUserMsg.  # noqa: E501
        :rtype: str
        """
        return self._receiver_user_id

    @receiver_user_id.setter
    def receiver_user_id(self, receiver_user_id):
        """Sets the receiver_user_id of this AddUserMsg.

        接收人ID receicer's id  # noqa: E501

        :param receiver_user_id: The receiver_user_id of this AddUserMsg.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and receiver_user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `receiver_user_id`, must not be `None`")  # noqa: E501

        self._receiver_user_id = receiver_user_id

    @property
    def receiver_organ_name(self):
        """Gets the receiver_organ_name of this AddUserMsg.  # noqa: E501

        接收人组织名称  # noqa: E501

        :return: The receiver_organ_name of this AddUserMsg.  # noqa: E501
        :rtype: str
        """
        return self._receiver_organ_name

    @receiver_organ_name.setter
    def receiver_organ_name(self, receiver_organ_name):
        """Sets the receiver_organ_name of this AddUserMsg.

        接收人组织名称  # noqa: E501

        :param receiver_organ_name: The receiver_organ_name of this AddUserMsg.  # noqa: E501
        :type: str
        """

        self._receiver_organ_name = receiver_organ_name

    @property
    def receiver_real_name(self):
        """Gets the receiver_real_name of this AddUserMsg.  # noqa: E501

        接收人真实姓名  # noqa: E501

        :return: The receiver_real_name of this AddUserMsg.  # noqa: E501
        :rtype: str
        """
        return self._receiver_real_name

    @receiver_real_name.setter
    def receiver_real_name(self, receiver_real_name):
        """Sets the receiver_real_name of this AddUserMsg.

        接收人真实姓名  # noqa: E501

        :param receiver_real_name: The receiver_real_name of this AddUserMsg.  # noqa: E501
        :type: str
        """

        self._receiver_real_name = receiver_real_name

    @property
    def level(self):
        """Gets the level of this AddUserMsg.  # noqa: E501

        消息等级,默认为0.  针对套子湾项目约定:1:重要;2:紧急;3:十万火急.  # noqa: E501

        :return: The level of this AddUserMsg.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this AddUserMsg.

        消息等级,默认为0.  针对套子湾项目约定:1:重要;2:紧急;3:十万火急.  # noqa: E501

        :param level: The level of this AddUserMsg.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def msg_type(self):
        """Gets the msg_type of this AddUserMsg.  # noqa: E501

        消息类型  <br> message's type   # noqa: E501

        :return: The msg_type of this AddUserMsg.  # noqa: E501
        :rtype: str
        """
        return self._msg_type

    @msg_type.setter
    def msg_type(self, msg_type):
        """Sets the msg_type of this AddUserMsg.

        消息类型  <br> message's type   # noqa: E501

        :param msg_type: The msg_type of this AddUserMsg.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and msg_type is None:  # noqa: E501
            raise ValueError("Invalid value for `msg_type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                msg_type is not None and len(msg_type) < 1):
            raise ValueError("Invalid value for `msg_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._msg_type = msg_type

    @property
    def language(self):
        """Gets the language of this AddUserMsg.  # noqa: E501

        模板语言  <br> tempalte's language   # noqa: E501

        :return: The language of this AddUserMsg.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AddUserMsg.

        模板语言  <br> tempalte's language   # noqa: E501

        :param language: The language of this AddUserMsg.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and language is None:  # noqa: E501
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                language is not None and len(language) < 1):
            raise ValueError("Invalid value for `language`, length must be greater than or equal to `1`")  # noqa: E501

        self._language = language

    @property
    def message(self):
        """Gets the message of this AddUserMsg.  # noqa: E501

        消息内容  # noqa: E501

        :return: The message of this AddUserMsg.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AddUserMsg.

        消息内容  # noqa: E501

        :param message: The message of this AddUserMsg.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                message is not None and len(message) < 1):
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")  # noqa: E501

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddUserMsg):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddUserMsg):
            return True

        return self.to_dict() != other.to_dict()
