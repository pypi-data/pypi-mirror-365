# coding: utf-8

"""
    消息服务

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_message_service.configuration import Configuration


class CountByLevel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'level': 'int',
        'unread_count': 'int',
        'mark_count': 'int'
    }

    attribute_map = {
        'level': 'level',
        'unread_count': 'unreadCount',
        'mark_count': 'markCount'
    }

    def __init__(self, level=None, unread_count=None, mark_count=None, local_vars_configuration=None):  # noqa: E501
        """CountByLevel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._level = None
        self._unread_count = None
        self._mark_count = None
        self.discriminator = None

        if level is not None:
            self.level = level
        if unread_count is not None:
            self.unread_count = unread_count
        if mark_count is not None:
            self.mark_count = mark_count

    @property
    def level(self):
        """Gets the level of this CountByLevel.  # noqa: E501

        消息等级  # noqa: E501

        :return: The level of this CountByLevel.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CountByLevel.

        消息等级  # noqa: E501

        :param level: The level of this CountByLevel.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def unread_count(self):
        """Gets the unread_count of this CountByLevel.  # noqa: E501

        未读数量  # noqa: E501

        :return: The unread_count of this CountByLevel.  # noqa: E501
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this CountByLevel.

        未读数量  # noqa: E501

        :param unread_count: The unread_count of this CountByLevel.  # noqa: E501
        :type: int
        """

        self._unread_count = unread_count

    @property
    def mark_count(self):
        """Gets the mark_count of this CountByLevel.  # noqa: E501

        已读数量  # noqa: E501

        :return: The mark_count of this CountByLevel.  # noqa: E501
        :rtype: int
        """
        return self._mark_count

    @mark_count.setter
    def mark_count(self, mark_count):
        """Sets the mark_count of this CountByLevel.

        已读数量  # noqa: E501

        :param mark_count: The mark_count of this CountByLevel.  # noqa: E501
        :type: int
        """

        self._mark_count = mark_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CountByLevel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CountByLevel):
            return True

        return self.to_dict() != other.to_dict()
