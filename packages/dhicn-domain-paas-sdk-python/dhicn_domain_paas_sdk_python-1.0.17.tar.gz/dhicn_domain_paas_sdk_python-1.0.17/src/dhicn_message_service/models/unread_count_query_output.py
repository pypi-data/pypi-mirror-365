# coding: utf-8

"""
    消息服务

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_message_service.configuration import Configuration


class UnreadCountQueryOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'msg_type': 'str',
        'show_name': 'str',
        'unread_count': 'int',
        'mark_count': 'int',
        'latest_msg': 'LastMsg',
        'by_level': 'list[CountByLevel]'
    }

    attribute_map = {
        'msg_type': 'msgType',
        'show_name': 'showName',
        'unread_count': 'unreadCount',
        'mark_count': 'markCount',
        'latest_msg': 'latestMsg',
        'by_level': 'byLevel'
    }

    def __init__(self, msg_type=None, show_name=None, unread_count=None, mark_count=None, latest_msg=None, by_level=None, local_vars_configuration=None):  # noqa: E501
        """UnreadCountQueryOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._msg_type = None
        self._show_name = None
        self._unread_count = None
        self._mark_count = None
        self._latest_msg = None
        self._by_level = None
        self.discriminator = None

        self.msg_type = msg_type
        self.show_name = show_name
        if unread_count is not None:
            self.unread_count = unread_count
        if mark_count is not None:
            self.mark_count = mark_count
        if latest_msg is not None:
            self.latest_msg = latest_msg
        self.by_level = by_level

    @property
    def msg_type(self):
        """Gets the msg_type of this UnreadCountQueryOutput.  # noqa: E501

        消息类型  # noqa: E501

        :return: The msg_type of this UnreadCountQueryOutput.  # noqa: E501
        :rtype: str
        """
        return self._msg_type

    @msg_type.setter
    def msg_type(self, msg_type):
        """Sets the msg_type of this UnreadCountQueryOutput.

        消息类型  # noqa: E501

        :param msg_type: The msg_type of this UnreadCountQueryOutput.  # noqa: E501
        :type: str
        """

        self._msg_type = msg_type

    @property
    def show_name(self):
        """Gets the show_name of this UnreadCountQueryOutput.  # noqa: E501


        :return: The show_name of this UnreadCountQueryOutput.  # noqa: E501
        :rtype: str
        """
        return self._show_name

    @show_name.setter
    def show_name(self, show_name):
        """Sets the show_name of this UnreadCountQueryOutput.


        :param show_name: The show_name of this UnreadCountQueryOutput.  # noqa: E501
        :type: str
        """

        self._show_name = show_name

    @property
    def unread_count(self):
        """Gets the unread_count of this UnreadCountQueryOutput.  # noqa: E501

        未读消息数量  # noqa: E501

        :return: The unread_count of this UnreadCountQueryOutput.  # noqa: E501
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this UnreadCountQueryOutput.

        未读消息数量  # noqa: E501

        :param unread_count: The unread_count of this UnreadCountQueryOutput.  # noqa: E501
        :type: int
        """

        self._unread_count = unread_count

    @property
    def mark_count(self):
        """Gets the mark_count of this UnreadCountQueryOutput.  # noqa: E501

        标记数量  # noqa: E501

        :return: The mark_count of this UnreadCountQueryOutput.  # noqa: E501
        :rtype: int
        """
        return self._mark_count

    @mark_count.setter
    def mark_count(self, mark_count):
        """Sets the mark_count of this UnreadCountQueryOutput.

        标记数量  # noqa: E501

        :param mark_count: The mark_count of this UnreadCountQueryOutput.  # noqa: E501
        :type: int
        """

        self._mark_count = mark_count

    @property
    def latest_msg(self):
        """Gets the latest_msg of this UnreadCountQueryOutput.  # noqa: E501


        :return: The latest_msg of this UnreadCountQueryOutput.  # noqa: E501
        :rtype: LastMsg
        """
        return self._latest_msg

    @latest_msg.setter
    def latest_msg(self, latest_msg):
        """Sets the latest_msg of this UnreadCountQueryOutput.


        :param latest_msg: The latest_msg of this UnreadCountQueryOutput.  # noqa: E501
        :type: LastMsg
        """

        self._latest_msg = latest_msg

    @property
    def by_level(self):
        """Gets the by_level of this UnreadCountQueryOutput.  # noqa: E501


        :return: The by_level of this UnreadCountQueryOutput.  # noqa: E501
        :rtype: list[CountByLevel]
        """
        return self._by_level

    @by_level.setter
    def by_level(self, by_level):
        """Sets the by_level of this UnreadCountQueryOutput.


        :param by_level: The by_level of this UnreadCountQueryOutput.  # noqa: E501
        :type: list[CountByLevel]
        """

        self._by_level = by_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnreadCountQueryOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UnreadCountQueryOutput):
            return True

        return self.to_dict() != other.to_dict()
