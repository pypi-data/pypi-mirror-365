# coding: utf-8

"""
    wwtp-paas-main-bus-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_data_bus_service.configuration import Configuration


class ToxicityOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'col_codes': 'list[str]',
        'col_names': 'list[str]',
        'times': 'list[datetime]',
        'values': 'list[list[str]]'
    }

    attribute_map = {
        'col_codes': 'colCodes',
        'col_names': 'colNames',
        'times': 'times',
        'values': 'values'
    }

    def __init__(self, col_codes=None, col_names=None, times=None, values=None, local_vars_configuration=None):  # noqa: E501
        """ToxicityOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._col_codes = None
        self._col_names = None
        self._times = None
        self._values = None
        self.discriminator = None

        self.col_codes = col_codes
        self.col_names = col_names
        self.times = times
        self.values = values

    @property
    def col_codes(self):
        """Gets the col_codes of this ToxicityOutput.  # noqa: E501

        每一列对应的毒性指标 toxicity indicator of each column  # noqa: E501

        :return: The col_codes of this ToxicityOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._col_codes

    @col_codes.setter
    def col_codes(self, col_codes):
        """Sets the col_codes of this ToxicityOutput.

        每一列对应的毒性指标 toxicity indicator of each column  # noqa: E501

        :param col_codes: The col_codes of this ToxicityOutput.  # noqa: E501
        :type: list[str]
        """

        self._col_codes = col_codes

    @property
    def col_names(self):
        """Gets the col_names of this ToxicityOutput.  # noqa: E501

        每一列对应的指标名称 toxicity indicator name of each column  # noqa: E501

        :return: The col_names of this ToxicityOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._col_names

    @col_names.setter
    def col_names(self, col_names):
        """Sets the col_names of this ToxicityOutput.

        每一列对应的指标名称 toxicity indicator name of each column  # noqa: E501

        :param col_names: The col_names of this ToxicityOutput.  # noqa: E501
        :type: list[str]
        """

        self._col_names = col_names

    @property
    def times(self):
        """Gets the times of this ToxicityOutput.  # noqa: E501

        所有的时刻 all the time steps  # noqa: E501

        :return: The times of this ToxicityOutput.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this ToxicityOutput.

        所有的时刻 all the time steps  # noqa: E501

        :param times: The times of this ToxicityOutput.  # noqa: E501
        :type: list[datetime]
        """

        self._times = times

    @property
    def values(self):
        """Gets the values of this ToxicityOutput.  # noqa: E501

        每一个时刻，对应每一个指标的数值  value of each indicator of each time step  # noqa: E501

        :return: The values of this ToxicityOutput.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ToxicityOutput.

        每一个时刻，对应每一个指标的数值  value of each indicator of each time step  # noqa: E501

        :param values: The values of this ToxicityOutput.  # noqa: E501
        :type: list[list[str]]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToxicityOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ToxicityOutput):
            return True

        return self.to_dict() != other.to_dict()
