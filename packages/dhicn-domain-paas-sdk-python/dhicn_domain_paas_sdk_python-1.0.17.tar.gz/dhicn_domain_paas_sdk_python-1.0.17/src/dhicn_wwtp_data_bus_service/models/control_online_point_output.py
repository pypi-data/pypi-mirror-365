# coding: utf-8

"""
    wwtp-paas-main-bus-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_data_bus_service.configuration import Configuration


class ControlOnlinePointOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'codes': 'list[str]',
        'units': 'list[str]',
        'point_codes': 'list[str]',
        'names': 'list[str]',
        'default_values': 'list[float]'
    }

    attribute_map = {
        'codes': 'codes',
        'units': 'units',
        'point_codes': 'pointCodes',
        'names': 'names',
        'default_values': 'defaultValues'
    }

    def __init__(self, codes=None, units=None, point_codes=None, names=None, default_values=None, local_vars_configuration=None):  # noqa: E501
        """ControlOnlinePointOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._codes = None
        self._units = None
        self._point_codes = None
        self._names = None
        self._default_values = None
        self.discriminator = None

        self.codes = codes
        self.units = units
        self.point_codes = point_codes
        self.names = names
        self.default_values = default_values

    @property
    def codes(self):
        """Gets the codes of this ControlOnlinePointOutput.  # noqa: E501

        系统点位列表 system point codes/indicators  # noqa: E501

        :return: The codes of this ControlOnlinePointOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this ControlOnlinePointOutput.

        系统点位列表 system point codes/indicators  # noqa: E501

        :param codes: The codes of this ControlOnlinePointOutput.  # noqa: E501
        :type: list[str]
        """

        self._codes = codes

    @property
    def units(self):
        """Gets the units of this ControlOnlinePointOutput.  # noqa: E501

        单位列表 units  # noqa: E501

        :return: The units of this ControlOnlinePointOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this ControlOnlinePointOutput.

        单位列表 units  # noqa: E501

        :param units: The units of this ControlOnlinePointOutput.  # noqa: E501
        :type: list[str]
        """

        self._units = units

    @property
    def point_codes(self):
        """Gets the point_codes of this ControlOnlinePointOutput.  # noqa: E501

        在线点位列表 corresponding online point codes  # noqa: E501

        :return: The point_codes of this ControlOnlinePointOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._point_codes

    @point_codes.setter
    def point_codes(self, point_codes):
        """Sets the point_codes of this ControlOnlinePointOutput.

        在线点位列表 corresponding online point codes  # noqa: E501

        :param point_codes: The point_codes of this ControlOnlinePointOutput.  # noqa: E501
        :type: list[str]
        """

        self._point_codes = point_codes

    @property
    def names(self):
        """Gets the names of this ControlOnlinePointOutput.  # noqa: E501

        点位描述 corresponding names  # noqa: E501

        :return: The names of this ControlOnlinePointOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this ControlOnlinePointOutput.

        点位描述 corresponding names  # noqa: E501

        :param names: The names of this ControlOnlinePointOutput.  # noqa: E501
        :type: list[str]
        """

        self._names = names

    @property
    def default_values(self):
        """Gets the default_values of this ControlOnlinePointOutput.  # noqa: E501

        默认值/阈值 default values/thresholds  # noqa: E501

        :return: The default_values of this ControlOnlinePointOutput.  # noqa: E501
        :rtype: list[float]
        """
        return self._default_values

    @default_values.setter
    def default_values(self, default_values):
        """Sets the default_values of this ControlOnlinePointOutput.

        默认值/阈值 default values/thresholds  # noqa: E501

        :param default_values: The default_values of this ControlOnlinePointOutput.  # noqa: E501
        :type: list[float]
        """

        self._default_values = default_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ControlOnlinePointOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ControlOnlinePointOutput):
            return True

        return self.to_dict() != other.to_dict()
