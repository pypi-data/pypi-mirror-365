# coding: utf-8

"""
    wwtp-paas-main-bus-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_data_bus_service.configuration import Configuration


class HpDisplayConfigInOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'display_type': 'int',
        'display_type_name': 'str',
        'display_codes': 'str',
        'sub_types': 'str',
        'is_input_point': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'display_type': 'displayType',
        'display_type_name': 'displayTypeName',
        'display_codes': 'displayCodes',
        'sub_types': 'subTypes',
        'is_input_point': 'isInputPoint'
    }

    def __init__(self, id=None, display_type=None, display_type_name=None, display_codes=None, sub_types=None, is_input_point=None, local_vars_configuration=None):  # noqa: E501
        """HpDisplayConfigInOut - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._display_type = None
        self._display_type_name = None
        self._display_codes = None
        self._sub_types = None
        self._is_input_point = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if display_type is not None:
            self.display_type = display_type
        self.display_type_name = display_type_name
        self.display_codes = display_codes
        self.sub_types = sub_types
        if is_input_point is not None:
            self.is_input_point = is_input_point

    @property
    def id(self):
        """Gets the id of this HpDisplayConfigInOut.  # noqa: E501

        配置ID config id  # noqa: E501

        :return: The id of this HpDisplayConfigInOut.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HpDisplayConfigInOut.

        配置ID config id  # noqa: E501

        :param id: The id of this HpDisplayConfigInOut.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def display_type(self):
        """Gets the display_type of this HpDisplayConfigInOut.  # noqa: E501

        显示类型枚举  # noqa: E501

        :return: The display_type of this HpDisplayConfigInOut.  # noqa: E501
        :rtype: int
        """
        return self._display_type

    @display_type.setter
    def display_type(self, display_type):
        """Sets the display_type of this HpDisplayConfigInOut.

        显示类型枚举  # noqa: E501

        :param display_type: The display_type of this HpDisplayConfigInOut.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 7]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and display_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `display_type` ({0}), must be one of {1}"  # noqa: E501
                .format(display_type, allowed_values)
            )

        self._display_type = display_type

    @property
    def display_type_name(self):
        """Gets the display_type_name of this HpDisplayConfigInOut.  # noqa: E501

        展示的模块名称 display type name  # noqa: E501

        :return: The display_type_name of this HpDisplayConfigInOut.  # noqa: E501
        :rtype: str
        """
        return self._display_type_name

    @display_type_name.setter
    def display_type_name(self, display_type_name):
        """Sets the display_type_name of this HpDisplayConfigInOut.

        展示的模块名称 display type name  # noqa: E501

        :param display_type_name: The display_type_name of this HpDisplayConfigInOut.  # noqa: E501
        :type: str
        """

        self._display_type_name = display_type_name

    @property
    def display_codes(self):
        """Gets the display_codes of this HpDisplayConfigInOut.  # noqa: E501

        要展示的点位编码，以英文逗号\",\"隔开 system point codes, seperated by comma  # noqa: E501

        :return: The display_codes of this HpDisplayConfigInOut.  # noqa: E501
        :rtype: str
        """
        return self._display_codes

    @display_codes.setter
    def display_codes(self, display_codes):
        """Sets the display_codes of this HpDisplayConfigInOut.

        要展示的点位编码，以英文逗号\",\"隔开 system point codes, seperated by comma  # noqa: E501

        :param display_codes: The display_codes of this HpDisplayConfigInOut.  # noqa: E501
        :type: str
        """

        self._display_codes = display_codes

    @property
    def sub_types(self):
        """Gets the sub_types of this HpDisplayConfigInOut.  # noqa: E501

        点位类型：如进水、出水、生化池…… point type  # noqa: E501

        :return: The sub_types of this HpDisplayConfigInOut.  # noqa: E501
        :rtype: str
        """
        return self._sub_types

    @sub_types.setter
    def sub_types(self, sub_types):
        """Sets the sub_types of this HpDisplayConfigInOut.

        点位类型：如进水、出水、生化池…… point type  # noqa: E501

        :param sub_types: The sub_types of this HpDisplayConfigInOut.  # noqa: E501
        :type: str
        """

        self._sub_types = sub_types

    @property
    def is_input_point(self):
        """Gets the is_input_point of this HpDisplayConfigInOut.  # noqa: E501

        是否为输入点位 if it is an online point for input  # noqa: E501

        :return: The is_input_point of this HpDisplayConfigInOut.  # noqa: E501
        :rtype: bool
        """
        return self._is_input_point

    @is_input_point.setter
    def is_input_point(self, is_input_point):
        """Sets the is_input_point of this HpDisplayConfigInOut.

        是否为输入点位 if it is an online point for input  # noqa: E501

        :param is_input_point: The is_input_point of this HpDisplayConfigInOut.  # noqa: E501
        :type: bool
        """

        self._is_input_point = is_input_point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HpDisplayConfigInOut):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HpDisplayConfigInOut):
            return True

        return self.to_dict() != other.to_dict()
