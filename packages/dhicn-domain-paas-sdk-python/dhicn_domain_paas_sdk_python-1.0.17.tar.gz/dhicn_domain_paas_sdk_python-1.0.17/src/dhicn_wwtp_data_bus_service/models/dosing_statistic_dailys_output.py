# coding: utf-8

"""
    wwtp-paas-main-bus-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_data_bus_service.configuration import Configuration


class DosingStatisticDailysOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'point_code': 'str',
        'point_name': 'str',
        'unit': 'str',
        'max_value': 'float',
        'min_value': 'float',
        'avg_value': 'float',
        'last_value': 'float',
        'first_value': 'float',
        'sum_value': 'float',
        'ts_data': 'list[TsPair1]'
    }

    attribute_map = {
        'point_code': 'pointCode',
        'point_name': 'pointName',
        'unit': 'unit',
        'max_value': 'maxValue',
        'min_value': 'minValue',
        'avg_value': 'avgValue',
        'last_value': 'lastValue',
        'first_value': 'firstValue',
        'sum_value': 'sumValue',
        'ts_data': 'tsData'
    }

    def __init__(self, point_code=None, point_name=None, unit=None, max_value=None, min_value=None, avg_value=None, last_value=None, first_value=None, sum_value=None, ts_data=None, local_vars_configuration=None):  # noqa: E501
        """DosingStatisticDailysOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._point_code = None
        self._point_name = None
        self._unit = None
        self._max_value = None
        self._min_value = None
        self._avg_value = None
        self._last_value = None
        self._first_value = None
        self._sum_value = None
        self._ts_data = None
        self.discriminator = None

        self.point_code = point_code
        self.point_name = point_name
        self.unit = unit
        if max_value is not None:
            self.max_value = max_value
        if min_value is not None:
            self.min_value = min_value
        if avg_value is not None:
            self.avg_value = avg_value
        if last_value is not None:
            self.last_value = last_value
        if first_value is not None:
            self.first_value = first_value
        if sum_value is not None:
            self.sum_value = sum_value
        self.ts_data = ts_data

    @property
    def point_code(self):
        """Gets the point_code of this DosingStatisticDailysOutput.  # noqa: E501

        统计项代码 statistic item code  # noqa: E501

        :return: The point_code of this DosingStatisticDailysOutput.  # noqa: E501
        :rtype: str
        """
        return self._point_code

    @point_code.setter
    def point_code(self, point_code):
        """Sets the point_code of this DosingStatisticDailysOutput.

        统计项代码 statistic item code  # noqa: E501

        :param point_code: The point_code of this DosingStatisticDailysOutput.  # noqa: E501
        :type: str
        """

        self._point_code = point_code

    @property
    def point_name(self):
        """Gets the point_name of this DosingStatisticDailysOutput.  # noqa: E501

        统计项名称 statistic item name  # noqa: E501

        :return: The point_name of this DosingStatisticDailysOutput.  # noqa: E501
        :rtype: str
        """
        return self._point_name

    @point_name.setter
    def point_name(self, point_name):
        """Sets the point_name of this DosingStatisticDailysOutput.

        统计项名称 statistic item name  # noqa: E501

        :param point_name: The point_name of this DosingStatisticDailysOutput.  # noqa: E501
        :type: str
        """

        self._point_name = point_name

    @property
    def unit(self):
        """Gets the unit of this DosingStatisticDailysOutput.  # noqa: E501

        单位 unit  # noqa: E501

        :return: The unit of this DosingStatisticDailysOutput.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this DosingStatisticDailysOutput.

        单位 unit  # noqa: E501

        :param unit: The unit of this DosingStatisticDailysOutput.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def max_value(self):
        """Gets the max_value of this DosingStatisticDailysOutput.  # noqa: E501

        最大值 maximum value  # noqa: E501

        :return: The max_value of this DosingStatisticDailysOutput.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this DosingStatisticDailysOutput.

        最大值 maximum value  # noqa: E501

        :param max_value: The max_value of this DosingStatisticDailysOutput.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this DosingStatisticDailysOutput.  # noqa: E501

        最小值 minimum value  # noqa: E501

        :return: The min_value of this DosingStatisticDailysOutput.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this DosingStatisticDailysOutput.

        最小值 minimum value  # noqa: E501

        :param min_value: The min_value of this DosingStatisticDailysOutput.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def avg_value(self):
        """Gets the avg_value of this DosingStatisticDailysOutput.  # noqa: E501

        平均值 average value  # noqa: E501

        :return: The avg_value of this DosingStatisticDailysOutput.  # noqa: E501
        :rtype: float
        """
        return self._avg_value

    @avg_value.setter
    def avg_value(self, avg_value):
        """Sets the avg_value of this DosingStatisticDailysOutput.

        平均值 average value  # noqa: E501

        :param avg_value: The avg_value of this DosingStatisticDailysOutput.  # noqa: E501
        :type: float
        """

        self._avg_value = avg_value

    @property
    def last_value(self):
        """Gets the last_value of this DosingStatisticDailysOutput.  # noqa: E501

        最后一个值 last value  # noqa: E501

        :return: The last_value of this DosingStatisticDailysOutput.  # noqa: E501
        :rtype: float
        """
        return self._last_value

    @last_value.setter
    def last_value(self, last_value):
        """Sets the last_value of this DosingStatisticDailysOutput.

        最后一个值 last value  # noqa: E501

        :param last_value: The last_value of this DosingStatisticDailysOutput.  # noqa: E501
        :type: float
        """

        self._last_value = last_value

    @property
    def first_value(self):
        """Gets the first_value of this DosingStatisticDailysOutput.  # noqa: E501

        第一个值 first value  # noqa: E501

        :return: The first_value of this DosingStatisticDailysOutput.  # noqa: E501
        :rtype: float
        """
        return self._first_value

    @first_value.setter
    def first_value(self, first_value):
        """Sets the first_value of this DosingStatisticDailysOutput.

        第一个值 first value  # noqa: E501

        :param first_value: The first_value of this DosingStatisticDailysOutput.  # noqa: E501
        :type: float
        """

        self._first_value = first_value

    @property
    def sum_value(self):
        """Gets the sum_value of this DosingStatisticDailysOutput.  # noqa: E501

        累计值 sum value  # noqa: E501

        :return: The sum_value of this DosingStatisticDailysOutput.  # noqa: E501
        :rtype: float
        """
        return self._sum_value

    @sum_value.setter
    def sum_value(self, sum_value):
        """Sets the sum_value of this DosingStatisticDailysOutput.

        累计值 sum value  # noqa: E501

        :param sum_value: The sum_value of this DosingStatisticDailysOutput.  # noqa: E501
        :type: float
        """

        self._sum_value = sum_value

    @property
    def ts_data(self):
        """Gets the ts_data of this DosingStatisticDailysOutput.  # noqa: E501

        时间序列 time-series data  # noqa: E501

        :return: The ts_data of this DosingStatisticDailysOutput.  # noqa: E501
        :rtype: list[TsPair1]
        """
        return self._ts_data

    @ts_data.setter
    def ts_data(self, ts_data):
        """Sets the ts_data of this DosingStatisticDailysOutput.

        时间序列 time-series data  # noqa: E501

        :param ts_data: The ts_data of this DosingStatisticDailysOutput.  # noqa: E501
        :type: list[TsPair1]
        """

        self._ts_data = ts_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DosingStatisticDailysOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DosingStatisticDailysOutput):
            return True

        return self.to_dict() != other.to_dict()
