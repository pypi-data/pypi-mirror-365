# coding: utf-8

"""
    wwtp-paas-main-bus-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_wwtp_data_bus_service.configuration import Configuration


class DosingLogOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'col_names': 'list[str]',
        'times': 'list[datetime]',
        'values': 'list[list[str]]',
        'cal_value_acc': 'DailyAccumulationValue',
        'value_acc': 'DailyAccumulationValue'
    }

    attribute_map = {
        'col_names': 'colNames',
        'times': 'times',
        'values': 'values',
        'cal_value_acc': 'calValueAcc',
        'value_acc': 'valueAcc'
    }

    def __init__(self, col_names=None, times=None, values=None, cal_value_acc=None, value_acc=None, local_vars_configuration=None):  # noqa: E501
        """DosingLogOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._col_names = None
        self._times = None
        self._values = None
        self._cal_value_acc = None
        self._value_acc = None
        self.discriminator = None

        self.col_names = col_names
        self.times = times
        self.values = values
        if cal_value_acc is not None:
            self.cal_value_acc = cal_value_acc
        if value_acc is not None:
            self.value_acc = value_acc

    @property
    def col_names(self):
        """Gets the col_names of this DosingLogOutput.  # noqa: E501

        列名 column name  # noqa: E501

        :return: The col_names of this DosingLogOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._col_names

    @col_names.setter
    def col_names(self, col_names):
        """Sets the col_names of this DosingLogOutput.

        列名 column name  # noqa: E501

        :param col_names: The col_names of this DosingLogOutput.  # noqa: E501
        :type: list[str]
        """

        self._col_names = col_names

    @property
    def times(self):
        """Gets the times of this DosingLogOutput.  # noqa: E501

        所有时刻 all time steps  # noqa: E501

        :return: The times of this DosingLogOutput.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this DosingLogOutput.

        所有时刻 all time steps  # noqa: E501

        :param times: The times of this DosingLogOutput.  # noqa: E501
        :type: list[datetime]
        """

        self._times = times

    @property
    def values(self):
        """Gets the values of this DosingLogOutput.  # noqa: E501

        value of each column of each time step  # noqa: E501

        :return: The values of this DosingLogOutput.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this DosingLogOutput.

        value of each column of each time step  # noqa: E501

        :param values: The values of this DosingLogOutput.  # noqa: E501
        :type: list[list[str]]
        """

        self._values = values

    @property
    def cal_value_acc(self):
        """Gets the cal_value_acc of this DosingLogOutput.  # noqa: E501


        :return: The cal_value_acc of this DosingLogOutput.  # noqa: E501
        :rtype: DailyAccumulationValue
        """
        return self._cal_value_acc

    @cal_value_acc.setter
    def cal_value_acc(self, cal_value_acc):
        """Sets the cal_value_acc of this DosingLogOutput.


        :param cal_value_acc: The cal_value_acc of this DosingLogOutput.  # noqa: E501
        :type: DailyAccumulationValue
        """

        self._cal_value_acc = cal_value_acc

    @property
    def value_acc(self):
        """Gets the value_acc of this DosingLogOutput.  # noqa: E501


        :return: The value_acc of this DosingLogOutput.  # noqa: E501
        :rtype: DailyAccumulationValue
        """
        return self._value_acc

    @value_acc.setter
    def value_acc(self, value_acc):
        """Sets the value_acc of this DosingLogOutput.


        :param value_acc: The value_acc of this DosingLogOutput.  # noqa: E501
        :type: DailyAccumulationValue
        """

        self._value_acc = value_acc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DosingLogOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DosingLogOutput):
            return True

        return self.to_dict() != other.to_dict()
