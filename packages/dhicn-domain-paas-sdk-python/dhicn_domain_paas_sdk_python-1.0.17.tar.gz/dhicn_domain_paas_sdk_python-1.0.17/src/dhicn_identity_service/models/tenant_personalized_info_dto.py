# coding: utf-8

"""
    identity-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_identity_service.configuration import Configuration


class TenantPersonalizedInfoDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'icon': 'str',
        'logo': 'str',
        'cover_type': 'int',
        'cover': 'str'
    }

    attribute_map = {
        'title': 'title',
        'icon': 'icon',
        'logo': 'logo',
        'cover_type': 'coverType',
        'cover': 'cover'
    }

    def __init__(self, title=None, icon=None, logo=None, cover_type=None, cover=None, local_vars_configuration=None):  # noqa: E501
        """TenantPersonalizedInfoDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._icon = None
        self._logo = None
        self._cover_type = None
        self._cover = None
        self.discriminator = None

        self.title = title
        self.icon = icon
        self.logo = logo
        self.cover_type = cover_type
        self.cover = cover

    @property
    def title(self):
        """Gets the title of this TenantPersonalizedInfoDto.  # noqa: E501

        页面标题 page title  # noqa: E501

        :return: The title of this TenantPersonalizedInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TenantPersonalizedInfoDto.

        页面标题 page title  # noqa: E501

        :param title: The title of this TenantPersonalizedInfoDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def icon(self):
        """Gets the icon of this TenantPersonalizedInfoDto.  # noqa: E501

        租户浏览器图标/客户端软件小图标 browser / client application icon  # noqa: E501

        :return: The icon of this TenantPersonalizedInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this TenantPersonalizedInfoDto.

        租户浏览器图标/客户端软件小图标 browser / client application icon  # noqa: E501

        :param icon: The icon of this TenantPersonalizedInfoDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and icon is None:  # noqa: E501
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501

        self._icon = icon

    @property
    def logo(self):
        """Gets the logo of this TenantPersonalizedInfoDto.  # noqa: E501

        租户系统Logo tenant system logo  # noqa: E501

        :return: The logo of this TenantPersonalizedInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this TenantPersonalizedInfoDto.

        租户系统Logo tenant system logo  # noqa: E501

        :param logo: The logo of this TenantPersonalizedInfoDto.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and logo is None:  # noqa: E501
            raise ValueError("Invalid value for `logo`, must not be `None`")  # noqa: E501

        self._logo = logo

    @property
    def cover_type(self):
        """Gets the cover_type of this TenantPersonalizedInfoDto.  # noqa: E501

        封面类型 cover type  # noqa: E501

        :return: The cover_type of this TenantPersonalizedInfoDto.  # noqa: E501
        :rtype: int
        """
        return self._cover_type

    @cover_type.setter
    def cover_type(self, cover_type):
        """Sets the cover_type of this TenantPersonalizedInfoDto.

        封面类型 cover type  # noqa: E501

        :param cover_type: The cover_type of this TenantPersonalizedInfoDto.  # noqa: E501
        :type: int
        """
        allowed_values = [None,0, 1]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cover_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cover_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cover_type, allowed_values)
            )

        self._cover_type = cover_type

    @property
    def cover(self):
        """Gets the cover of this TenantPersonalizedInfoDto.  # noqa: E501

        封面文件相对路径 cover relative path  # noqa: E501

        :return: The cover of this TenantPersonalizedInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this TenantPersonalizedInfoDto.

        封面文件相对路径 cover relative path  # noqa: E501

        :param cover: The cover of this TenantPersonalizedInfoDto.  # noqa: E501
        :type: str
        """

        self._cover = cover

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TenantPersonalizedInfoDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TenantPersonalizedInfoDto):
            return True

        return self.to_dict() != other.to_dict()
