# coding: utf-8

"""
    identity-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_identity_service.configuration import Configuration


class GetTenantsOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'system_id': 'str',
        'system_name': 'str',
        'name': 'str',
        'creation_time': 'datetime',
        'tenant_admin': 'list[TenantAdminDto]'
    }

    attribute_map = {
        'id': 'id',
        'system_id': 'systemId',
        'system_name': 'systemName',
        'name': 'name',
        'creation_time': 'creationTime',
        'tenant_admin': 'tenantAdmin'
    }

    def __init__(self, id=None, system_id=None, system_name=None, name=None, creation_time=None, tenant_admin=None, local_vars_configuration=None):  # noqa: E501
        """GetTenantsOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._system_id = None
        self._system_name = None
        self._name = None
        self._creation_time = None
        self._tenant_admin = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if system_id is not None:
            self.system_id = system_id
        self.system_name = system_name
        self.name = name
        if creation_time is not None:
            self.creation_time = creation_time
        self.tenant_admin = tenant_admin

    @property
    def id(self):
        """Gets the id of this GetTenantsOutput.  # noqa: E501

        租户ID tenant id  # noqa: E501

        :return: The id of this GetTenantsOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetTenantsOutput.

        租户ID tenant id  # noqa: E501

        :param id: The id of this GetTenantsOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def system_id(self):
        """Gets the system_id of this GetTenantsOutput.  # noqa: E501

        系统ID system id  # noqa: E501

        :return: The system_id of this GetTenantsOutput.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this GetTenantsOutput.

        系统ID system id  # noqa: E501

        :param system_id: The system_id of this GetTenantsOutput.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def system_name(self):
        """Gets the system_name of this GetTenantsOutput.  # noqa: E501

        系统名称 system name  # noqa: E501

        :return: The system_name of this GetTenantsOutput.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this GetTenantsOutput.

        系统名称 system name  # noqa: E501

        :param system_name: The system_name of this GetTenantsOutput.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def name(self):
        """Gets the name of this GetTenantsOutput.  # noqa: E501

        租户名称 tenant name  # noqa: E501

        :return: The name of this GetTenantsOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetTenantsOutput.

        租户名称 tenant name  # noqa: E501

        :param name: The name of this GetTenantsOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def creation_time(self):
        """Gets the creation_time of this GetTenantsOutput.  # noqa: E501

        租户创建时间 tenant create time  # noqa: E501

        :return: The creation_time of this GetTenantsOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this GetTenantsOutput.

        租户创建时间 tenant create time  # noqa: E501

        :param creation_time: The creation_time of this GetTenantsOutput.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def tenant_admin(self):
        """Gets the tenant_admin of this GetTenantsOutput.  # noqa: E501

        租户管理员账户信息 tenant administrators  # noqa: E501

        :return: The tenant_admin of this GetTenantsOutput.  # noqa: E501
        :rtype: list[TenantAdminDto]
        """
        return self._tenant_admin

    @tenant_admin.setter
    def tenant_admin(self, tenant_admin):
        """Sets the tenant_admin of this GetTenantsOutput.

        租户管理员账户信息 tenant administrators  # noqa: E501

        :param tenant_admin: The tenant_admin of this GetTenantsOutput.  # noqa: E501
        :type: list[TenantAdminDto]
        """

        self._tenant_admin = tenant_admin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTenantsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetTenantsOutput):
            return True

        return self.to_dict() != other.to_dict()
