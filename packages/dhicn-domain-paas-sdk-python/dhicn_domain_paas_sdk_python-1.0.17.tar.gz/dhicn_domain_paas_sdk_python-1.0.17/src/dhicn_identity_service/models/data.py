# coding: utf-8

"""
    identity-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_identity_service.configuration import Configuration


class Data(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'product_line': 'str',
        'raise_ratio': 'float',
        'cost_datas': 'list[CostData]'
    }

    attribute_map = {
        'product_line': 'productLine',
        'raise_ratio': 'raiseRatio',
        'cost_datas': 'costDatas'
    }

    def __init__(self, product_line=None, raise_ratio=None, cost_datas=None, local_vars_configuration=None):  # noqa: E501
        """Data - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._product_line = None
        self._raise_ratio = None
        self._cost_datas = None
        self.discriminator = None

        self.product_line = product_line
        self.raise_ratio = raise_ratio
        self.cost_datas = cost_datas

    @property
    def product_line(self):
        """Gets the product_line of this Data.  # noqa: E501

        工艺线代码 product line code  # noqa: E501

        :return: The product_line of this Data.  # noqa: E501
        :rtype: str
        """
        return self._product_line

    @product_line.setter
    def product_line(self, product_line):
        """Sets the product_line of this Data.

        工艺线代码 product line code  # noqa: E501

        :param product_line: The product_line of this Data.  # noqa: E501
        :type: str
        """

        self._product_line = product_line

    @property
    def raise_ratio(self):
        """Gets the raise_ratio of this Data.  # noqa: E501

        与上一周对比的增长率，若为负数，则表示降低了 raise ratio compared to last week  # noqa: E501

        :return: The raise_ratio of this Data.  # noqa: E501
        :rtype: float
        """
        return self._raise_ratio

    @raise_ratio.setter
    def raise_ratio(self, raise_ratio):
        """Sets the raise_ratio of this Data.

        与上一周对比的增长率，若为负数，则表示降低了 raise ratio compared to last week  # noqa: E501

        :param raise_ratio: The raise_ratio of this Data.  # noqa: E501
        :type: float
        """

        self._raise_ratio = raise_ratio

    @property
    def cost_datas(self):
        """Gets the cost_datas of this Data.  # noqa: E501

        一周中每天的吨水药耗 dosage cost per ton water of each day  # noqa: E501

        :return: The cost_datas of this Data.  # noqa: E501
        :rtype: list[CostData]
        """
        return self._cost_datas

    @cost_datas.setter
    def cost_datas(self, cost_datas):
        """Sets the cost_datas of this Data.

        一周中每天的吨水药耗 dosage cost per ton water of each day  # noqa: E501

        :param cost_datas: The cost_datas of this Data.  # noqa: E501
        :type: list[CostData]
        """

        self._cost_datas = cost_datas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Data):
            return True

        return self.to_dict() != other.to_dict()
