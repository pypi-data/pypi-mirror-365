# coding: utf-8

"""
    identity-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_identity_service.configuration import Configuration


class AuthResultOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token_info': 'TokenModel',
        'tenant_id': 'str',
        'user_id': 'str',
        'state': 'int',
        'err_msg': 'str'
    }

    attribute_map = {
        'token_info': 'tokenInfo',
        'tenant_id': 'tenantId',
        'user_id': 'userId',
        'state': 'state',
        'err_msg': 'errMsg'
    }

    def __init__(self, token_info=None, tenant_id=None, user_id=None, state=None, err_msg=None, local_vars_configuration=None):  # noqa: E501
        """AuthResultOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._token_info = None
        self._tenant_id = None
        self._user_id = None
        self._state = None
        self._err_msg = None
        self.discriminator = None

        if token_info is not None:
            self.token_info = token_info
        self.tenant_id = tenant_id
        self.user_id = user_id
        if state is not None:
            self.state = state
        self.err_msg = err_msg

    @property
    def token_info(self):
        """Gets the token_info of this AuthResultOutput.  # noqa: E501


        :return: The token_info of this AuthResultOutput.  # noqa: E501
        :rtype: TokenModel
        """
        return self._token_info

    @token_info.setter
    def token_info(self, token_info):
        """Sets the token_info of this AuthResultOutput.


        :param token_info: The token_info of this AuthResultOutput.  # noqa: E501
        :type: TokenModel
        """

        self._token_info = token_info

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AuthResultOutput.  # noqa: E501


        :return: The tenant_id of this AuthResultOutput.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AuthResultOutput.


        :param tenant_id: The tenant_id of this AuthResultOutput.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def user_id(self):
        """Gets the user_id of this AuthResultOutput.  # noqa: E501


        :return: The user_id of this AuthResultOutput.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuthResultOutput.


        :param user_id: The user_id of this AuthResultOutput.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def state(self):
        """Gets the state of this AuthResultOutput.  # noqa: E501

        0-Ready 1-Authorizing 2-Success 3-Error   # noqa: E501

        :return: The state of this AuthResultOutput.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AuthResultOutput.

        0-Ready 1-Authorizing 2-Success 3-Error   # noqa: E501

        :param state: The state of this AuthResultOutput.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def err_msg(self):
        """Gets the err_msg of this AuthResultOutput.  # noqa: E501


        :return: The err_msg of this AuthResultOutput.  # noqa: E501
        :rtype: str
        """
        return self._err_msg

    @err_msg.setter
    def err_msg(self, err_msg):
        """Sets the err_msg of this AuthResultOutput.


        :param err_msg: The err_msg of this AuthResultOutput.  # noqa: E501
        :type: str
        """

        self._err_msg = err_msg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthResultOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthResultOutput):
            return True

        return self.to_dict() != other.to_dict()
