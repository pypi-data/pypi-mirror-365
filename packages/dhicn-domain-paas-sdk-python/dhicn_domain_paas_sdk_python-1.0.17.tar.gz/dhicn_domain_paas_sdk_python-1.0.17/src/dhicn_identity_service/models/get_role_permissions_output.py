# coding: utf-8

"""
    identity-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_identity_service.configuration import Configuration


class GetRolePermissionsOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'tenant_id': 'str',
        'tenant_name': 'str',
        'roles': 'list[str]',
        'regular': 'str',
        'is_carry_auth': 'bool',
        'priority': 'int',
        'service_key': 'str',
        'creation_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'tenant_id': 'tenantId',
        'tenant_name': 'tenantName',
        'roles': 'roles',
        'regular': 'regular',
        'is_carry_auth': 'isCarryAuth',
        'priority': 'priority',
        'service_key': 'serviceKey',
        'creation_time': 'creationTime'
    }

    def __init__(self, id=None, tenant_id=None, tenant_name=None, roles=None, regular=None, is_carry_auth=None, priority=None, service_key=None, creation_time=None, local_vars_configuration=None):  # noqa: E501
        """GetRolePermissionsOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._tenant_id = None
        self._tenant_name = None
        self._roles = None
        self._regular = None
        self._is_carry_auth = None
        self._priority = None
        self._service_key = None
        self._creation_time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.tenant_id = tenant_id
        self.tenant_name = tenant_name
        self.roles = roles
        self.regular = regular
        if is_carry_auth is not None:
            self.is_carry_auth = is_carry_auth
        if priority is not None:
            self.priority = priority
        self.service_key = service_key
        if creation_time is not None:
            self.creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this GetRolePermissionsOutput.  # noqa: E501

        角色ID role id  # noqa: E501

        :return: The id of this GetRolePermissionsOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetRolePermissionsOutput.

        角色ID role id  # noqa: E501

        :param id: The id of this GetRolePermissionsOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this GetRolePermissionsOutput.  # noqa: E501

        租户Id tenant id  # noqa: E501

        :return: The tenant_id of this GetRolePermissionsOutput.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this GetRolePermissionsOutput.

        租户Id tenant id  # noqa: E501

        :param tenant_id: The tenant_id of this GetRolePermissionsOutput.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def tenant_name(self):
        """Gets the tenant_name of this GetRolePermissionsOutput.  # noqa: E501

        租户名称 tenant name  # noqa: E501

        :return: The tenant_name of this GetRolePermissionsOutput.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this GetRolePermissionsOutput.

        租户名称 tenant name  # noqa: E501

        :param tenant_name: The tenant_name of this GetRolePermissionsOutput.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def roles(self):
        """Gets the roles of this GetRolePermissionsOutput.  # noqa: E501

        角色,[\"admin\",\"oper\"] roles  # noqa: E501

        :return: The roles of this GetRolePermissionsOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this GetRolePermissionsOutput.

        角色,[\"admin\",\"oper\"] roles  # noqa: E501

        :param roles: The roles of this GetRolePermissionsOutput.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def regular(self):
        """Gets the regular of this GetRolePermissionsOutput.  # noqa: E501

        角色下的权限规则 role permission regular  # noqa: E501

        :return: The regular of this GetRolePermissionsOutput.  # noqa: E501
        :rtype: str
        """
        return self._regular

    @regular.setter
    def regular(self, regular):
        """Sets the regular of this GetRolePermissionsOutput.

        角色下的权限规则 role permission regular  # noqa: E501

        :param regular: The regular of this GetRolePermissionsOutput.  # noqa: E501
        :type: str
        """

        self._regular = regular

    @property
    def is_carry_auth(self):
        """Gets the is_carry_auth of this GetRolePermissionsOutput.  # noqa: E501

        是否携带Auth if carry authentication  # noqa: E501

        :return: The is_carry_auth of this GetRolePermissionsOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_carry_auth

    @is_carry_auth.setter
    def is_carry_auth(self, is_carry_auth):
        """Sets the is_carry_auth of this GetRolePermissionsOutput.

        是否携带Auth if carry authentication  # noqa: E501

        :param is_carry_auth: The is_carry_auth of this GetRolePermissionsOutput.  # noqa: E501
        :type: bool
        """

        self._is_carry_auth = is_carry_auth

    @property
    def priority(self):
        """Gets the priority of this GetRolePermissionsOutput.  # noqa: E501

        优先级 priority  # noqa: E501

        :return: The priority of this GetRolePermissionsOutput.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this GetRolePermissionsOutput.

        优先级 priority  # noqa: E501

        :param priority: The priority of this GetRolePermissionsOutput.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def service_key(self):
        """Gets the service_key of this GetRolePermissionsOutput.  # noqa: E501

        微服务标识 micro service key  # noqa: E501

        :return: The service_key of this GetRolePermissionsOutput.  # noqa: E501
        :rtype: str
        """
        return self._service_key

    @service_key.setter
    def service_key(self, service_key):
        """Sets the service_key of this GetRolePermissionsOutput.

        微服务标识 micro service key  # noqa: E501

        :param service_key: The service_key of this GetRolePermissionsOutput.  # noqa: E501
        :type: str
        """

        self._service_key = service_key

    @property
    def creation_time(self):
        """Gets the creation_time of this GetRolePermissionsOutput.  # noqa: E501

        创建时间 create time  # noqa: E501

        :return: The creation_time of this GetRolePermissionsOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this GetRolePermissionsOutput.

        创建时间 create time  # noqa: E501

        :param creation_time: The creation_time of this GetRolePermissionsOutput.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetRolePermissionsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetRolePermissionsOutput):
            return True

        return self.to_dict() != other.to_dict()
