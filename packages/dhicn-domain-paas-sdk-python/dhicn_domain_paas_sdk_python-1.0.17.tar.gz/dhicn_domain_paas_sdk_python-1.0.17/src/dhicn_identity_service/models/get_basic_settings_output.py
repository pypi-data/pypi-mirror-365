# coding: utf-8

"""
    identity-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_identity_service.configuration import Configuration


class GetBasicSettingsOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'surname': 'str',
        'department': 'str',
        'profile': 'str',
        'phone_number': 'str',
        'id': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'surname': 'surname',
        'department': 'department',
        'profile': 'profile',
        'phone_number': 'phoneNumber',
        'id': 'id',
        'user_name': 'userName'
    }

    def __init__(self, surname=None, department=None, profile=None, phone_number=None, id=None, user_name=None, local_vars_configuration=None):  # noqa: E501
        """GetBasicSettingsOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._surname = None
        self._department = None
        self._profile = None
        self._phone_number = None
        self._id = None
        self._user_name = None
        self.discriminator = None

        self.surname = surname
        self.department = department
        self.profile = profile
        self.phone_number = phone_number
        if id is not None:
            self.id = id
        self.user_name = user_name

    @property
    def surname(self):
        """Gets the surname of this GetBasicSettingsOutput.  # noqa: E501

        真实姓名 real name  # noqa: E501

        :return: The surname of this GetBasicSettingsOutput.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this GetBasicSettingsOutput.

        真实姓名 real name  # noqa: E501

        :param surname: The surname of this GetBasicSettingsOutput.  # noqa: E501
        :type: str
        """

        self._surname = surname

    @property
    def department(self):
        """Gets the department of this GetBasicSettingsOutput.  # noqa: E501

        所属部门 working department  # noqa: E501

        :return: The department of this GetBasicSettingsOutput.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this GetBasicSettingsOutput.

        所属部门 working department  # noqa: E501

        :param department: The department of this GetBasicSettingsOutput.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def profile(self):
        """Gets the profile of this GetBasicSettingsOutput.  # noqa: E501

        个人简介 personal profile  # noqa: E501

        :return: The profile of this GetBasicSettingsOutput.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this GetBasicSettingsOutput.

        个人简介 personal profile  # noqa: E501

        :param profile: The profile of this GetBasicSettingsOutput.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def phone_number(self):
        """Gets the phone_number of this GetBasicSettingsOutput.  # noqa: E501

        电话号码 phone number  # noqa: E501

        :return: The phone_number of this GetBasicSettingsOutput.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GetBasicSettingsOutput.

        电话号码 phone number  # noqa: E501

        :param phone_number: The phone_number of this GetBasicSettingsOutput.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def id(self):
        """Gets the id of this GetBasicSettingsOutput.  # noqa: E501

        用户ID user id  # noqa: E501

        :return: The id of this GetBasicSettingsOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetBasicSettingsOutput.

        用户ID user id  # noqa: E501

        :param id: The id of this GetBasicSettingsOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this GetBasicSettingsOutput.  # noqa: E501

        用户名称 user name  # noqa: E501

        :return: The user_name of this GetBasicSettingsOutput.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this GetBasicSettingsOutput.

        用户名称 user name  # noqa: E501

        :param user_name: The user_name of this GetBasicSettingsOutput.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetBasicSettingsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetBasicSettingsOutput):
            return True

        return self.to_dict() != other.to_dict()
