# coding: utf-8

"""
    digital-twin-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_digital_twin_service.configuration import Configuration


class UpdateDeviceIndicatorInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'device_id': 'str',
        'indicator': 'str',
        'show_name': 'str',
        'label': 'str',
        'type': 'str',
        'unit': 'str',
        'min_value': 'float',
        'max_value': 'float'
    }

    attribute_map = {
        'id': 'id',
        'device_id': 'deviceId',
        'indicator': 'indicator',
        'show_name': 'showName',
        'label': 'label',
        'type': 'type',
        'unit': 'unit',
        'min_value': 'minValue',
        'max_value': 'maxValue'
    }

    def __init__(self, id=None, device_id=None, indicator=None, show_name=None, label=None, type=None, unit=None, min_value=None, max_value=None, local_vars_configuration=None):  # noqa: E501
        """UpdateDeviceIndicatorInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._device_id = None
        self._indicator = None
        self._show_name = None
        self._label = None
        self._type = None
        self._unit = None
        self._min_value = None
        self._max_value = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if device_id is not None:
            self.device_id = device_id
        self.indicator = indicator
        self.show_name = show_name
        self.label = label
        self.type = type
        self.unit = unit
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value

    @property
    def id(self):
        """Gets the id of this UpdateDeviceIndicatorInput.  # noqa: E501

        指标Id indicator id  # noqa: E501

        :return: The id of this UpdateDeviceIndicatorInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateDeviceIndicatorInput.

        指标Id indicator id  # noqa: E501

        :param id: The id of this UpdateDeviceIndicatorInput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def device_id(self):
        """Gets the device_id of this UpdateDeviceIndicatorInput.  # noqa: E501

        设备Id device id  # noqa: E501

        :return: The device_id of this UpdateDeviceIndicatorInput.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this UpdateDeviceIndicatorInput.

        设备Id device id  # noqa: E501

        :param device_id: The device_id of this UpdateDeviceIndicatorInput.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def indicator(self):
        """Gets the indicator of this UpdateDeviceIndicatorInput.  # noqa: E501

        指标项 indicator  # noqa: E501

        :return: The indicator of this UpdateDeviceIndicatorInput.  # noqa: E501
        :rtype: str
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator):
        """Sets the indicator of this UpdateDeviceIndicatorInput.

        指标项 indicator  # noqa: E501

        :param indicator: The indicator of this UpdateDeviceIndicatorInput.  # noqa: E501
        :type: str
        """

        self._indicator = indicator

    @property
    def show_name(self):
        """Gets the show_name of this UpdateDeviceIndicatorInput.  # noqa: E501

        指标显示名称 indicator name  # noqa: E501

        :return: The show_name of this UpdateDeviceIndicatorInput.  # noqa: E501
        :rtype: str
        """
        return self._show_name

    @show_name.setter
    def show_name(self, show_name):
        """Sets the show_name of this UpdateDeviceIndicatorInput.

        指标显示名称 indicator name  # noqa: E501

        :param show_name: The show_name of this UpdateDeviceIndicatorInput.  # noqa: E501
        :type: str
        """

        self._show_name = show_name

    @property
    def label(self):
        """Gets the label of this UpdateDeviceIndicatorInput.  # noqa: E501

        指标标签 indicator label  # noqa: E501

        :return: The label of this UpdateDeviceIndicatorInput.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this UpdateDeviceIndicatorInput.

        指标标签 indicator label  # noqa: E501

        :param label: The label of this UpdateDeviceIndicatorInput.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this UpdateDeviceIndicatorInput.  # noqa: E501

        指标类型 indicator data type  # noqa: E501

        :return: The type of this UpdateDeviceIndicatorInput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateDeviceIndicatorInput.

        指标类型 indicator data type  # noqa: E501

        :param type: The type of this UpdateDeviceIndicatorInput.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this UpdateDeviceIndicatorInput.  # noqa: E501

        指标数值单位 indicator data unit  # noqa: E501

        :return: The unit of this UpdateDeviceIndicatorInput.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this UpdateDeviceIndicatorInput.

        指标数值单位 indicator data unit  # noqa: E501

        :param unit: The unit of this UpdateDeviceIndicatorInput.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def min_value(self):
        """Gets the min_value of this UpdateDeviceIndicatorInput.  # noqa: E501

        指标数值最小值 indicator min value  # noqa: E501

        :return: The min_value of this UpdateDeviceIndicatorInput.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this UpdateDeviceIndicatorInput.

        指标数值最小值 indicator min value  # noqa: E501

        :param min_value: The min_value of this UpdateDeviceIndicatorInput.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this UpdateDeviceIndicatorInput.  # noqa: E501

        指标数值最大值 indicator max value  # noqa: E501

        :return: The max_value of this UpdateDeviceIndicatorInput.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this UpdateDeviceIndicatorInput.

        指标数值最大值 indicator max value  # noqa: E501

        :param max_value: The max_value of this UpdateDeviceIndicatorInput.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateDeviceIndicatorInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateDeviceIndicatorInput):
            return True

        return self.to_dict() != other.to_dict()
