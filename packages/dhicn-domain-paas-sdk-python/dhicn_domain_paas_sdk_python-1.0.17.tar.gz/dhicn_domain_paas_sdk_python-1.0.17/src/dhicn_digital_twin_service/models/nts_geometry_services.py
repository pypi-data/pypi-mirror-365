# coding: utf-8

"""
    digital-twin-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_digital_twin_service.configuration import Configuration


class NtsGeometryServices(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'geometry_overlay': 'object',
        'coordinate_equality_comparer': 'object',
        'default_srid': 'int',
        'default_coordinate_sequence_factory': 'CoordinateSequenceFactory',
        'default_precision_model': 'PrecisionModel'
    }

    attribute_map = {
        'geometry_overlay': 'geometryOverlay',
        'coordinate_equality_comparer': 'coordinateEqualityComparer',
        'default_srid': 'defaultSRID',
        'default_coordinate_sequence_factory': 'defaultCoordinateSequenceFactory',
        'default_precision_model': 'defaultPrecisionModel'
    }

    def __init__(self, geometry_overlay=None, coordinate_equality_comparer=None, default_srid=None, default_coordinate_sequence_factory=None, default_precision_model=None, local_vars_configuration=None):  # noqa: E501
        """NtsGeometryServices - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._geometry_overlay = None
        self._coordinate_equality_comparer = None
        self._default_srid = None
        self._default_coordinate_sequence_factory = None
        self._default_precision_model = None
        self.discriminator = None

        if geometry_overlay is not None:
            self.geometry_overlay = geometry_overlay
        if coordinate_equality_comparer is not None:
            self.coordinate_equality_comparer = coordinate_equality_comparer
        if default_srid is not None:
            self.default_srid = default_srid
        if default_coordinate_sequence_factory is not None:
            self.default_coordinate_sequence_factory = default_coordinate_sequence_factory
        if default_precision_model is not None:
            self.default_precision_model = default_precision_model

    @property
    def geometry_overlay(self):
        """Gets the geometry_overlay of this NtsGeometryServices.  # noqa: E501


        :return: The geometry_overlay of this NtsGeometryServices.  # noqa: E501
        :rtype: object
        """
        return self._geometry_overlay

    @geometry_overlay.setter
    def geometry_overlay(self, geometry_overlay):
        """Sets the geometry_overlay of this NtsGeometryServices.


        :param geometry_overlay: The geometry_overlay of this NtsGeometryServices.  # noqa: E501
        :type: object
        """

        self._geometry_overlay = geometry_overlay

    @property
    def coordinate_equality_comparer(self):
        """Gets the coordinate_equality_comparer of this NtsGeometryServices.  # noqa: E501


        :return: The coordinate_equality_comparer of this NtsGeometryServices.  # noqa: E501
        :rtype: object
        """
        return self._coordinate_equality_comparer

    @coordinate_equality_comparer.setter
    def coordinate_equality_comparer(self, coordinate_equality_comparer):
        """Sets the coordinate_equality_comparer of this NtsGeometryServices.


        :param coordinate_equality_comparer: The coordinate_equality_comparer of this NtsGeometryServices.  # noqa: E501
        :type: object
        """

        self._coordinate_equality_comparer = coordinate_equality_comparer

    @property
    def default_srid(self):
        """Gets the default_srid of this NtsGeometryServices.  # noqa: E501


        :return: The default_srid of this NtsGeometryServices.  # noqa: E501
        :rtype: int
        """
        return self._default_srid

    @default_srid.setter
    def default_srid(self, default_srid):
        """Sets the default_srid of this NtsGeometryServices.


        :param default_srid: The default_srid of this NtsGeometryServices.  # noqa: E501
        :type: int
        """

        self._default_srid = default_srid

    @property
    def default_coordinate_sequence_factory(self):
        """Gets the default_coordinate_sequence_factory of this NtsGeometryServices.  # noqa: E501


        :return: The default_coordinate_sequence_factory of this NtsGeometryServices.  # noqa: E501
        :rtype: CoordinateSequenceFactory
        """
        return self._default_coordinate_sequence_factory

    @default_coordinate_sequence_factory.setter
    def default_coordinate_sequence_factory(self, default_coordinate_sequence_factory):
        """Sets the default_coordinate_sequence_factory of this NtsGeometryServices.


        :param default_coordinate_sequence_factory: The default_coordinate_sequence_factory of this NtsGeometryServices.  # noqa: E501
        :type: CoordinateSequenceFactory
        """

        self._default_coordinate_sequence_factory = default_coordinate_sequence_factory

    @property
    def default_precision_model(self):
        """Gets the default_precision_model of this NtsGeometryServices.  # noqa: E501


        :return: The default_precision_model of this NtsGeometryServices.  # noqa: E501
        :rtype: PrecisionModel
        """
        return self._default_precision_model

    @default_precision_model.setter
    def default_precision_model(self, default_precision_model):
        """Sets the default_precision_model of this NtsGeometryServices.


        :param default_precision_model: The default_precision_model of this NtsGeometryServices.  # noqa: E501
        :type: PrecisionModel
        """

        self._default_precision_model = default_precision_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NtsGeometryServices):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NtsGeometryServices):
            return True

        return self.to_dict() != other.to_dict()
