# coding: utf-8

"""
    model-information-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_model_information_service.configuration import Configuration


class QueryTankDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_id': 'str',
        'muid': 'str',
        'elev': 'float',
        'hgl': 'float',
        'zone_id': 'str',
        'data_source': 'str',
        'description': 'str',
        'wd_tank_hgl_type': 'int',
        'pattern_id': 'str',
        'wd_tank_mixing': 'int',
        'init_quality_concentration': 'float',
        'reaction_coefficient': 'float',
        'init_quality_percentage': 'float',
        'ini_quality_hour': 'float',
        'component_value': 'float',
        'coor_str': 'str',
        'create_time': 'datetime',
        'id': 'str'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'muid': 'muid',
        'elev': 'elev',
        'hgl': 'hgl',
        'zone_id': 'zoneID',
        'data_source': 'dataSource',
        'description': 'description',
        'wd_tank_hgl_type': 'wdTankHGLType',
        'pattern_id': 'patternID',
        'wd_tank_mixing': 'wdTankMixing',
        'init_quality_concentration': 'initQualityConcentration',
        'reaction_coefficient': 'reactionCoefficient',
        'init_quality_percentage': 'initQualityPercentage',
        'ini_quality_hour': 'iniQualityHour',
        'component_value': 'componentValue',
        'coor_str': 'coorStr',
        'create_time': 'createTime',
        'id': 'id'
    }

    def __init__(self, device_id=None, muid=None, elev=None, hgl=None, zone_id=None, data_source=None, description=None, wd_tank_hgl_type=None, pattern_id=None, wd_tank_mixing=None, init_quality_concentration=None, reaction_coefficient=None, init_quality_percentage=None, ini_quality_hour=None, component_value=None, coor_str=None, create_time=None, id=None, local_vars_configuration=None):  # noqa: E501
        """QueryTankDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._device_id = None
        self._muid = None
        self._elev = None
        self._hgl = None
        self._zone_id = None
        self._data_source = None
        self._description = None
        self._wd_tank_hgl_type = None
        self._pattern_id = None
        self._wd_tank_mixing = None
        self._init_quality_concentration = None
        self._reaction_coefficient = None
        self._init_quality_percentage = None
        self._ini_quality_hour = None
        self._component_value = None
        self._coor_str = None
        self._create_time = None
        self._id = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        self.muid = muid
        if elev is not None:
            self.elev = elev
        if hgl is not None:
            self.hgl = hgl
        self.zone_id = zone_id
        self.data_source = data_source
        self.description = description
        if wd_tank_hgl_type is not None:
            self.wd_tank_hgl_type = wd_tank_hgl_type
        self.pattern_id = pattern_id
        if wd_tank_mixing is not None:
            self.wd_tank_mixing = wd_tank_mixing
        if init_quality_concentration is not None:
            self.init_quality_concentration = init_quality_concentration
        if reaction_coefficient is not None:
            self.reaction_coefficient = reaction_coefficient
        if init_quality_percentage is not None:
            self.init_quality_percentage = init_quality_percentage
        if ini_quality_hour is not None:
            self.ini_quality_hour = ini_quality_hour
        if component_value is not None:
            self.component_value = component_value
        self.coor_str = coor_str
        if create_time is not None:
            self.create_time = create_time
        if id is not None:
            self.id = id

    @property
    def device_id(self):
        """Gets the device_id of this QueryTankDto.  # noqa: E501

        设备ID device id  # noqa: E501

        :return: The device_id of this QueryTankDto.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this QueryTankDto.

        设备ID device id  # noqa: E501

        :param device_id: The device_id of this QueryTankDto.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def muid(self):
        """Gets the muid of this QueryTankDto.  # noqa: E501

        模型中水池ID tank muid  # noqa: E501

        :return: The muid of this QueryTankDto.  # noqa: E501
        :rtype: str
        """
        return self._muid

    @muid.setter
    def muid(self, muid):
        """Sets the muid of this QueryTankDto.

        模型中水池ID tank muid  # noqa: E501

        :param muid: The muid of this QueryTankDto.  # noqa: E501
        :type: str
        """

        self._muid = muid

    @property
    def elev(self):
        """Gets the elev of this QueryTankDto.  # noqa: E501

        底高程 base elevation  # noqa: E501

        :return: The elev of this QueryTankDto.  # noqa: E501
        :rtype: float
        """
        return self._elev

    @elev.setter
    def elev(self, elev):
        """Sets the elev of this QueryTankDto.

        底高程 base elevation  # noqa: E501

        :param elev: The elev of this QueryTankDto.  # noqa: E501
        :type: float
        """

        self._elev = elev

    @property
    def hgl(self):
        """Gets the hgl of this QueryTankDto.  # noqa: E501

        水头固定值 fixed HGL  # noqa: E501

        :return: The hgl of this QueryTankDto.  # noqa: E501
        :rtype: float
        """
        return self._hgl

    @hgl.setter
    def hgl(self, hgl):
        """Sets the hgl of this QueryTankDto.

        水头固定值 fixed HGL  # noqa: E501

        :param hgl: The hgl of this QueryTankDto.  # noqa: E501
        :type: float
        """

        self._hgl = hgl

    @property
    def zone_id(self):
        """Gets the zone_id of this QueryTankDto.  # noqa: E501

        分区ID zone id  # noqa: E501

        :return: The zone_id of this QueryTankDto.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this QueryTankDto.

        分区ID zone id  # noqa: E501

        :param zone_id: The zone_id of this QueryTankDto.  # noqa: E501
        :type: str
        """

        self._zone_id = zone_id

    @property
    def data_source(self):
        """Gets the data_source of this QueryTankDto.  # noqa: E501

        数据源 data source  # noqa: E501

        :return: The data_source of this QueryTankDto.  # noqa: E501
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this QueryTankDto.

        数据源 data source  # noqa: E501

        :param data_source: The data_source of this QueryTankDto.  # noqa: E501
        :type: str
        """

        self._data_source = data_source

    @property
    def description(self):
        """Gets the description of this QueryTankDto.  # noqa: E501

        描述 description  # noqa: E501

        :return: The description of this QueryTankDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this QueryTankDto.

        描述 description  # noqa: E501

        :param description: The description of this QueryTankDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def wd_tank_hgl_type(self):
        """Gets the wd_tank_hgl_type of this QueryTankDto.  # noqa: E501

        水池水头类型 HGL level type  # noqa: E501

        :return: The wd_tank_hgl_type of this QueryTankDto.  # noqa: E501
        :rtype: int
        """
        return self._wd_tank_hgl_type

    @wd_tank_hgl_type.setter
    def wd_tank_hgl_type(self, wd_tank_hgl_type):
        """Sets the wd_tank_hgl_type of this QueryTankDto.

        水池水头类型 HGL level type  # noqa: E501

        :param wd_tank_hgl_type: The wd_tank_hgl_type of this QueryTankDto.  # noqa: E501
        :type: int
        """

        self._wd_tank_hgl_type = wd_tank_hgl_type

    @property
    def pattern_id(self):
        """Gets the pattern_id of this QueryTankDto.  # noqa: E501

        水头模式ID HGL pattern id  # noqa: E501

        :return: The pattern_id of this QueryTankDto.  # noqa: E501
        :rtype: str
        """
        return self._pattern_id

    @pattern_id.setter
    def pattern_id(self, pattern_id):
        """Sets the pattern_id of this QueryTankDto.

        水头模式ID HGL pattern id  # noqa: E501

        :param pattern_id: The pattern_id of this QueryTankDto.  # noqa: E501
        :type: str
        """

        self._pattern_id = pattern_id

    @property
    def wd_tank_mixing(self):
        """Gets the wd_tank_mixing of this QueryTankDto.  # noqa: E501

        水池混合的类型 tank mixing type  # noqa: E501

        :return: The wd_tank_mixing of this QueryTankDto.  # noqa: E501
        :rtype: int
        """
        return self._wd_tank_mixing

    @wd_tank_mixing.setter
    def wd_tank_mixing(self, wd_tank_mixing):
        """Sets the wd_tank_mixing of this QueryTankDto.

        水池混合的类型 tank mixing type  # noqa: E501

        :param wd_tank_mixing: The wd_tank_mixing of this QueryTankDto.  # noqa: E501
        :type: int
        """

        self._wd_tank_mixing = wd_tank_mixing

    @property
    def init_quality_concentration(self):
        """Gets the init_quality_concentration of this QueryTankDto.  # noqa: E501

        初始污染物浓度 initial chemical concentration  # noqa: E501

        :return: The init_quality_concentration of this QueryTankDto.  # noqa: E501
        :rtype: float
        """
        return self._init_quality_concentration

    @init_quality_concentration.setter
    def init_quality_concentration(self, init_quality_concentration):
        """Sets the init_quality_concentration of this QueryTankDto.

        初始污染物浓度 initial chemical concentration  # noqa: E501

        :param init_quality_concentration: The init_quality_concentration of this QueryTankDto.  # noqa: E501
        :type: float
        """

        self._init_quality_concentration = init_quality_concentration

    @property
    def reaction_coefficient(self):
        """Gets the reaction_coefficient of this QueryTankDto.  # noqa: E501

        降解系数 reaction coefficient  # noqa: E501

        :return: The reaction_coefficient of this QueryTankDto.  # noqa: E501
        :rtype: float
        """
        return self._reaction_coefficient

    @reaction_coefficient.setter
    def reaction_coefficient(self, reaction_coefficient):
        """Sets the reaction_coefficient of this QueryTankDto.

        降解系数 reaction coefficient  # noqa: E501

        :param reaction_coefficient: The reaction_coefficient of this QueryTankDto.  # noqa: E501
        :type: float
        """

        self._reaction_coefficient = reaction_coefficient

    @property
    def init_quality_percentage(self):
        """Gets the init_quality_percentage of this QueryTankDto.  # noqa: E501

        初始污染物占比 initial source percentage  # noqa: E501

        :return: The init_quality_percentage of this QueryTankDto.  # noqa: E501
        :rtype: float
        """
        return self._init_quality_percentage

    @init_quality_percentage.setter
    def init_quality_percentage(self, init_quality_percentage):
        """Sets the init_quality_percentage of this QueryTankDto.

        初始污染物占比 initial source percentage  # noqa: E501

        :param init_quality_percentage: The init_quality_percentage of this QueryTankDto.  # noqa: E501
        :type: float
        """

        self._init_quality_percentage = init_quality_percentage

    @property
    def ini_quality_hour(self):
        """Gets the ini_quality_hour of this QueryTankDto.  # noqa: E501

        初始水龄 initial water age  # noqa: E501

        :return: The ini_quality_hour of this QueryTankDto.  # noqa: E501
        :rtype: float
        """
        return self._ini_quality_hour

    @ini_quality_hour.setter
    def ini_quality_hour(self, ini_quality_hour):
        """Sets the ini_quality_hour of this QueryTankDto.

        初始水龄 initial water age  # noqa: E501

        :param ini_quality_hour: The ini_quality_hour of this QueryTankDto.  # noqa: E501
        :type: float
        """

        self._ini_quality_hour = ini_quality_hour

    @property
    def component_value(self):
        """Gets the component_value of this QueryTankDto.  # noqa: E501

        污染物体积 component volume  # noqa: E501

        :return: The component_value of this QueryTankDto.  # noqa: E501
        :rtype: float
        """
        return self._component_value

    @component_value.setter
    def component_value(self, component_value):
        """Sets the component_value of this QueryTankDto.

        污染物体积 component volume  # noqa: E501

        :param component_value: The component_value of this QueryTankDto.  # noqa: E501
        :type: float
        """

        self._component_value = component_value

    @property
    def coor_str(self):
        """Gets the coor_str of this QueryTankDto.  # noqa: E501

        坐标值 coordinate  # noqa: E501

        :return: The coor_str of this QueryTankDto.  # noqa: E501
        :rtype: str
        """
        return self._coor_str

    @coor_str.setter
    def coor_str(self, coor_str):
        """Sets the coor_str of this QueryTankDto.

        坐标值 coordinate  # noqa: E501

        :param coor_str: The coor_str of this QueryTankDto.  # noqa: E501
        :type: str
        """

        self._coor_str = coor_str

    @property
    def create_time(self):
        """Gets the create_time of this QueryTankDto.  # noqa: E501

        创建时间 create time  # noqa: E501

        :return: The create_time of this QueryTankDto.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this QueryTankDto.

        创建时间 create time  # noqa: E501

        :param create_time: The create_time of this QueryTankDto.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def id(self):
        """Gets the id of this QueryTankDto.  # noqa: E501

        水池ID tank id  # noqa: E501

        :return: The id of this QueryTankDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueryTankDto.

        水池ID tank id  # noqa: E501

        :param id: The id of this QueryTankDto.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryTankDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryTankDto):
            return True

        return self.to_dict() != other.to_dict()
