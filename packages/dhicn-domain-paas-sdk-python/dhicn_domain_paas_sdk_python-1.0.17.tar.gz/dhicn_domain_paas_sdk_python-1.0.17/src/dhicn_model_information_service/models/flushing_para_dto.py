# coding: utf-8

"""
    model-information-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_model_information_service.configuration import Configuration


class FlushingParaDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pipe_model_id': 'str',
        'from_node': 'str',
        'to_node': 'str',
        'target_velocity': 'float',
        'flushing_demand': 'float',
        'flushing_time': 'float',
        'id': 'str'
    }

    attribute_map = {
        'pipe_model_id': 'pipeModelId',
        'from_node': 'fromNode',
        'to_node': 'toNode',
        'target_velocity': 'targetVelocity',
        'flushing_demand': 'flushingDemand',
        'flushing_time': 'flushingTime',
        'id': 'id'
    }

    def __init__(self, pipe_model_id=None, from_node=None, to_node=None, target_velocity=None, flushing_demand=None, flushing_time=None, id=None, local_vars_configuration=None):  # noqa: E501
        """FlushingParaDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pipe_model_id = None
        self._from_node = None
        self._to_node = None
        self._target_velocity = None
        self._flushing_demand = None
        self._flushing_time = None
        self._id = None
        self.discriminator = None

        self.pipe_model_id = pipe_model_id
        self.from_node = from_node
        self.to_node = to_node
        if target_velocity is not None:
            self.target_velocity = target_velocity
        if flushing_demand is not None:
            self.flushing_demand = flushing_demand
        if flushing_time is not None:
            self.flushing_time = flushing_time
        if id is not None:
            self.id = id

    @property
    def pipe_model_id(self):
        """Gets the pipe_model_id of this FlushingParaDto.  # noqa: E501

        模型中管道ID pipe muid  # noqa: E501

        :return: The pipe_model_id of this FlushingParaDto.  # noqa: E501
        :rtype: str
        """
        return self._pipe_model_id

    @pipe_model_id.setter
    def pipe_model_id(self, pipe_model_id):
        """Sets the pipe_model_id of this FlushingParaDto.

        模型中管道ID pipe muid  # noqa: E501

        :param pipe_model_id: The pipe_model_id of this FlushingParaDto.  # noqa: E501
        :type: str
        """

        self._pipe_model_id = pipe_model_id

    @property
    def from_node(self):
        """Gets the from_node of this FlushingParaDto.  # noqa: E501

        流入节点 flush from node  # noqa: E501

        :return: The from_node of this FlushingParaDto.  # noqa: E501
        :rtype: str
        """
        return self._from_node

    @from_node.setter
    def from_node(self, from_node):
        """Sets the from_node of this FlushingParaDto.

        流入节点 flush from node  # noqa: E501

        :param from_node: The from_node of this FlushingParaDto.  # noqa: E501
        :type: str
        """

        self._from_node = from_node

    @property
    def to_node(self):
        """Gets the to_node of this FlushingParaDto.  # noqa: E501

        流出节点 flush to node  # noqa: E501

        :return: The to_node of this FlushingParaDto.  # noqa: E501
        :rtype: str
        """
        return self._to_node

    @to_node.setter
    def to_node(self, to_node):
        """Sets the to_node of this FlushingParaDto.

        流出节点 flush to node  # noqa: E501

        :param to_node: The to_node of this FlushingParaDto.  # noqa: E501
        :type: str
        """

        self._to_node = to_node

    @property
    def target_velocity(self):
        """Gets the target_velocity of this FlushingParaDto.  # noqa: E501

        目标流速 target velocity  # noqa: E501

        :return: The target_velocity of this FlushingParaDto.  # noqa: E501
        :rtype: float
        """
        return self._target_velocity

    @target_velocity.setter
    def target_velocity(self, target_velocity):
        """Sets the target_velocity of this FlushingParaDto.

        目标流速 target velocity  # noqa: E501

        :param target_velocity: The target_velocity of this FlushingParaDto.  # noqa: E501
        :type: float
        """

        self._target_velocity = target_velocity

    @property
    def flushing_demand(self):
        """Gets the flushing_demand of this FlushingParaDto.  # noqa: E501

        冲洗流量 flushing demand  # noqa: E501

        :return: The flushing_demand of this FlushingParaDto.  # noqa: E501
        :rtype: float
        """
        return self._flushing_demand

    @flushing_demand.setter
    def flushing_demand(self, flushing_demand):
        """Sets the flushing_demand of this FlushingParaDto.

        冲洗流量 flushing demand  # noqa: E501

        :param flushing_demand: The flushing_demand of this FlushingParaDto.  # noqa: E501
        :type: float
        """

        self._flushing_demand = flushing_demand

    @property
    def flushing_time(self):
        """Gets the flushing_time of this FlushingParaDto.  # noqa: E501

        冲洗时长 flushing time  # noqa: E501

        :return: The flushing_time of this FlushingParaDto.  # noqa: E501
        :rtype: float
        """
        return self._flushing_time

    @flushing_time.setter
    def flushing_time(self, flushing_time):
        """Sets the flushing_time of this FlushingParaDto.

        冲洗时长 flushing time  # noqa: E501

        :param flushing_time: The flushing_time of this FlushingParaDto.  # noqa: E501
        :type: float
        """

        self._flushing_time = flushing_time

    @property
    def id(self):
        """Gets the id of this FlushingParaDto.  # noqa: E501

        管道冲洗参数ID pipe flushing parameter id  # noqa: E501

        :return: The id of this FlushingParaDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FlushingParaDto.

        管道冲洗参数ID pipe flushing parameter id  # noqa: E501

        :param id: The id of this FlushingParaDto.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlushingParaDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FlushingParaDto):
            return True

        return self.to_dict() != other.to_dict()
