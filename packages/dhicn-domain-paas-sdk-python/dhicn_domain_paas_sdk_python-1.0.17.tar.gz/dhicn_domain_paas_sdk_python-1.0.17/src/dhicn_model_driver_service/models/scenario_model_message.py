# coding: utf-8

"""
    model-driver-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_model_driver_service.configuration import Configuration


class ScenarioModelMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'project_name': 'str',
        'tenant_id': 'str',
        'scenario_id': 'str',
        'model_type': 'str',
        'priority': 'int',
        'model_info': 'str'
    }

    attribute_map = {
        'id': 'id',
        'project_name': 'projectName',
        'tenant_id': 'tenantId',
        'scenario_id': 'scenarioId',
        'model_type': 'modelType',
        'priority': 'priority',
        'model_info': 'modelInfo'
    }

    def __init__(self, id=None, project_name=None, tenant_id=None, scenario_id=None, model_type=None, priority=None, model_info=None, local_vars_configuration=None):  # noqa: E501
        """ScenarioModelMessage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._project_name = None
        self._tenant_id = None
        self._scenario_id = None
        self._model_type = None
        self._priority = None
        self._model_info = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.project_name = project_name
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if scenario_id is not None:
            self.scenario_id = scenario_id
        self.model_type = model_type
        if priority is not None:
            self.priority = priority
        self.model_info = model_info

    @property
    def id(self):
        """Gets the id of this ScenarioModelMessage.  # noqa: E501

        Id 与持久化在数据库中的Id一致,即queueId  # noqa: E501

        :return: The id of this ScenarioModelMessage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScenarioModelMessage.

        Id 与持久化在数据库中的Id一致,即queueId  # noqa: E501

        :param id: The id of this ScenarioModelMessage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_name(self):
        """Gets the project_name of this ScenarioModelMessage.  # noqa: E501

        项目名称 project name  # noqa: E501

        :return: The project_name of this ScenarioModelMessage.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ScenarioModelMessage.

        项目名称 project name  # noqa: E501

        :param project_name: The project_name of this ScenarioModelMessage.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ScenarioModelMessage.  # noqa: E501

        租户ID  # noqa: E501

        :return: The tenant_id of this ScenarioModelMessage.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ScenarioModelMessage.

        租户ID  # noqa: E501

        :param tenant_id: The tenant_id of this ScenarioModelMessage.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def scenario_id(self):
        """Gets the scenario_id of this ScenarioModelMessage.  # noqa: E501

        方案ID scenario id  # noqa: E501

        :return: The scenario_id of this ScenarioModelMessage.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this ScenarioModelMessage.

        方案ID scenario id  # noqa: E501

        :param scenario_id: The scenario_id of this ScenarioModelMessage.  # noqa: E501
        :type: str
        """

        self._scenario_id = scenario_id

    @property
    def model_type(self):
        """Gets the model_type of this ScenarioModelMessage.  # noqa: E501

        模型类型，不同的模型类型对应不同的计算服务 model type, different model type corresponding to different compute service  <inheritdoc cref=\"T:DHI.DSS.WF.MQ.Interface.ModelSimType\" />  # noqa: E501

        :return: The model_type of this ScenarioModelMessage.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ScenarioModelMessage.

        模型类型，不同的模型类型对应不同的计算服务 model type, different model type corresponding to different compute service  <inheritdoc cref=\"T:DHI.DSS.WF.MQ.Interface.ModelSimType\" />  # noqa: E501

        :param model_type: The model_type of this ScenarioModelMessage.  # noqa: E501
        :type: str
        """

        self._model_type = model_type

    @property
    def priority(self):
        """Gets the priority of this ScenarioModelMessage.  # noqa: E501

        优先级：数值越大，优先级越高 priority: greater value have higher priority  # noqa: E501

        :return: The priority of this ScenarioModelMessage.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ScenarioModelMessage.

        优先级：数值越大，优先级越高 priority: greater value have higher priority  # noqa: E501

        :param priority: The priority of this ScenarioModelMessage.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def model_info(self):
        """Gets the model_info of this ScenarioModelMessage.  # noqa: E501

        模型信息，json格式 model info in json format: {\"scenarioId\":\"\",\"tenantId\":\"\",\"templateScenarioId\":\"\"}  # noqa: E501

        :return: The model_info of this ScenarioModelMessage.  # noqa: E501
        :rtype: str
        """
        return self._model_info

    @model_info.setter
    def model_info(self, model_info):
        """Sets the model_info of this ScenarioModelMessage.

        模型信息，json格式 model info in json format: {\"scenarioId\":\"\",\"tenantId\":\"\",\"templateScenarioId\":\"\"}  # noqa: E501

        :param model_info: The model_info of this ScenarioModelMessage.  # noqa: E501
        :type: str
        """

        self._model_info = model_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioModelMessage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScenarioModelMessage):
            return True

        return self.to_dict() != other.to_dict()
