# coding: utf-8

"""
    model-configuration-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_model_configuration_service.configuration import Configuration


class ClassifyLegendInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'grade': 'int',
        'max_value': 'float',
        'min_value': 'float',
        'red': 'int',
        'green': 'int',
        'blue': 'int',
        'description': 'str'
    }

    attribute_map = {
        'grade': 'grade',
        'max_value': 'maxValue',
        'min_value': 'minValue',
        'red': 'red',
        'green': 'green',
        'blue': 'blue',
        'description': 'description'
    }

    def __init__(self, grade=None, max_value=None, min_value=None, red=None, green=None, blue=None, description=None, local_vars_configuration=None):  # noqa: E501
        """ClassifyLegendInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._grade = None
        self._max_value = None
        self._min_value = None
        self._red = None
        self._green = None
        self._blue = None
        self._description = None
        self.discriminator = None

        if grade is not None:
            self.grade = grade
        if max_value is not None:
            self.max_value = max_value
        if min_value is not None:
            self.min_value = min_value
        if red is not None:
            self.red = red
        if green is not None:
            self.green = green
        if blue is not None:
            self.blue = blue
        self.description = description

    @property
    def grade(self):
        """Gets the grade of this ClassifyLegendInfo.  # noqa: E501

        等级序号 grade  # noqa: E501

        :return: The grade of this ClassifyLegendInfo.  # noqa: E501
        :rtype: int
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this ClassifyLegendInfo.

        等级序号 grade  # noqa: E501

        :param grade: The grade of this ClassifyLegendInfo.  # noqa: E501
        :type: int
        """

        self._grade = grade

    @property
    def max_value(self):
        """Gets the max_value of this ClassifyLegendInfo.  # noqa: E501

        最大值 max value  # noqa: E501

        :return: The max_value of this ClassifyLegendInfo.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this ClassifyLegendInfo.

        最大值 max value  # noqa: E501

        :param max_value: The max_value of this ClassifyLegendInfo.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this ClassifyLegendInfo.  # noqa: E501

        最小值 min value  # noqa: E501

        :return: The min_value of this ClassifyLegendInfo.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this ClassifyLegendInfo.

        最小值 min value  # noqa: E501

        :param min_value: The min_value of this ClassifyLegendInfo.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def red(self):
        """Gets the red of this ClassifyLegendInfo.  # noqa: E501

        RGB颜色的红色值 red value in rgb color (0-255)  # noqa: E501

        :return: The red of this ClassifyLegendInfo.  # noqa: E501
        :rtype: int
        """
        return self._red

    @red.setter
    def red(self, red):
        """Sets the red of this ClassifyLegendInfo.

        RGB颜色的红色值 red value in rgb color (0-255)  # noqa: E501

        :param red: The red of this ClassifyLegendInfo.  # noqa: E501
        :type: int
        """

        self._red = red

    @property
    def green(self):
        """Gets the green of this ClassifyLegendInfo.  # noqa: E501

        RGB颜色的绿色值 green value in rgb color (0-255)  # noqa: E501

        :return: The green of this ClassifyLegendInfo.  # noqa: E501
        :rtype: int
        """
        return self._green

    @green.setter
    def green(self, green):
        """Sets the green of this ClassifyLegendInfo.

        RGB颜色的绿色值 green value in rgb color (0-255)  # noqa: E501

        :param green: The green of this ClassifyLegendInfo.  # noqa: E501
        :type: int
        """

        self._green = green

    @property
    def blue(self):
        """Gets the blue of this ClassifyLegendInfo.  # noqa: E501

        RGB颜色的蓝色值 blue value in rgb color (0-255)  # noqa: E501

        :return: The blue of this ClassifyLegendInfo.  # noqa: E501
        :rtype: int
        """
        return self._blue

    @blue.setter
    def blue(self, blue):
        """Sets the blue of this ClassifyLegendInfo.

        RGB颜色的蓝色值 blue value in rgb color (0-255)  # noqa: E501

        :param blue: The blue of this ClassifyLegendInfo.  # noqa: E501
        :type: int
        """

        self._blue = blue

    @property
    def description(self):
        """Gets the description of this ClassifyLegendInfo.  # noqa: E501

        描述 description  # noqa: E501

        :return: The description of this ClassifyLegendInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClassifyLegendInfo.

        描述 description  # noqa: E501

        :param description: The description of this ClassifyLegendInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassifyLegendInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClassifyLegendInfo):
            return True

        return self.to_dict() != other.to_dict()
