# coding: utf-8

"""
    model-configuration-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_model_configuration_service.configuration import Configuration


class LibraryInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'tenant_id': 'str',
        'scenario_group': 'str',
        'name': 'str',
        'type': 'LibraryTypeEnum',
        'business_type': 'BusinessTypeEnum',
        'readonly': 'int',
        'bind_template': 'int',
        'bind_library': 'LibraryTypeEnum',
        'bind_business': 'BusinessTypeEnum',
        'description': 'str',
        'enable_multi_template': 'int'
    }

    attribute_map = {
        'id': 'id',
        'tenant_id': 'tenantId',
        'scenario_group': 'scenarioGroup',
        'name': 'name',
        'type': 'type',
        'business_type': 'businessType',
        'readonly': 'readonly',
        'bind_template': 'bindTemplate',
        'bind_library': 'bindLibrary',
        'bind_business': 'bindBusiness',
        'description': 'description',
        'enable_multi_template': 'enableMultiTemplate'
    }

    def __init__(self, id=None, tenant_id=None, scenario_group=None, name=None, type=None, business_type=None, readonly=None, bind_template=None, bind_library=None, bind_business=None, description=None, enable_multi_template=None, local_vars_configuration=None):  # noqa: E501
        """LibraryInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._tenant_id = None
        self._scenario_group = None
        self._name = None
        self._type = None
        self._business_type = None
        self._readonly = None
        self._bind_template = None
        self._bind_library = None
        self._bind_business = None
        self._description = None
        self._enable_multi_template = None
        self.discriminator = None

        self.id = id
        self.tenant_id = tenant_id
        self.scenario_group = scenario_group
        self.name = name
        if type is not None:
            self.type = type
        if business_type is not None:
            self.business_type = business_type
        if readonly is not None:
            self.readonly = readonly
        if bind_template is not None:
            self.bind_template = bind_template
        if bind_library is not None:
            self.bind_library = bind_library
        if bind_business is not None:
            self.bind_business = bind_business
        self.description = description
        self.enable_multi_template = enable_multi_template

    @property
    def id(self):
        """Gets the id of this LibraryInfo.  # noqa: E501

        库的ID library Id  # noqa: E501

        :return: The id of this LibraryInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LibraryInfo.

        库的ID library Id  # noqa: E501

        :param id: The id of this LibraryInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this LibraryInfo.  # noqa: E501

        租户ID tenant Id  # noqa: E501

        :return: The tenant_id of this LibraryInfo.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this LibraryInfo.

        租户ID tenant Id  # noqa: E501

        :param tenant_id: The tenant_id of this LibraryInfo.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def scenario_group(self):
        """Gets the scenario_group of this LibraryInfo.  # noqa: E501

        对应的方案组ID scenario group Id  # noqa: E501

        :return: The scenario_group of this LibraryInfo.  # noqa: E501
        :rtype: str
        """
        return self._scenario_group

    @scenario_group.setter
    def scenario_group(self, scenario_group):
        """Sets the scenario_group of this LibraryInfo.

        对应的方案组ID scenario group Id  # noqa: E501

        :param scenario_group: The scenario_group of this LibraryInfo.  # noqa: E501
        :type: str
        """

        self._scenario_group = scenario_group

    @property
    def name(self):
        """Gets the name of this LibraryInfo.  # noqa: E501

        库的名称 library name  # noqa: E501

        :return: The name of this LibraryInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LibraryInfo.

        库的名称 library name  # noqa: E501

        :param name: The name of this LibraryInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this LibraryInfo.  # noqa: E501


        :return: The type of this LibraryInfo.  # noqa: E501
        :rtype: LibraryTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LibraryInfo.


        :param type: The type of this LibraryInfo.  # noqa: E501
        :type: LibraryTypeEnum
        """

        self._type = type

    @property
    def business_type(self):
        """Gets the business_type of this LibraryInfo.  # noqa: E501


        :return: The business_type of this LibraryInfo.  # noqa: E501
        :rtype: BusinessTypeEnum
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """Sets the business_type of this LibraryInfo.


        :param business_type: The business_type of this LibraryInfo.  # noqa: E501
        :type: BusinessTypeEnum
        """

        self._business_type = business_type

    @property
    def readonly(self):
        """Gets the readonly of this LibraryInfo.  # noqa: E501

        0代表可读写，1代表只读 0 for not readonly, 1 for readonly  # noqa: E501

        :return: The readonly of this LibraryInfo.  # noqa: E501
        :rtype: int
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this LibraryInfo.

        0代表可读写，1代表只读 0 for not readonly, 1 for readonly  # noqa: E501

        :param readonly: The readonly of this LibraryInfo.  # noqa: E501
        :type: int
        """

        self._readonly = readonly

    @property
    def bind_template(self):
        """Gets the bind_template of this LibraryInfo.  # noqa: E501

        1表示库直接绑定一个模板方案，0表示不绑定 1 for bind a template directly, 0 for not  # noqa: E501

        :return: The bind_template of this LibraryInfo.  # noqa: E501
        :rtype: int
        """
        return self._bind_template

    @bind_template.setter
    def bind_template(self, bind_template):
        """Sets the bind_template of this LibraryInfo.

        1表示库直接绑定一个模板方案，0表示不绑定 1 for bind a template directly, 0 for not  # noqa: E501

        :param bind_template: The bind_template of this LibraryInfo.  # noqa: E501
        :type: int
        """

        self._bind_template = bind_template

    @property
    def bind_library(self):
        """Gets the bind_library of this LibraryInfo.  # noqa: E501


        :return: The bind_library of this LibraryInfo.  # noqa: E501
        :rtype: LibraryTypeEnum
        """
        return self._bind_library

    @bind_library.setter
    def bind_library(self, bind_library):
        """Sets the bind_library of this LibraryInfo.


        :param bind_library: The bind_library of this LibraryInfo.  # noqa: E501
        :type: LibraryTypeEnum
        """

        self._bind_library = bind_library

    @property
    def bind_business(self):
        """Gets the bind_business of this LibraryInfo.  # noqa: E501


        :return: The bind_business of this LibraryInfo.  # noqa: E501
        :rtype: BusinessTypeEnum
        """
        return self._bind_business

    @bind_business.setter
    def bind_business(self, bind_business):
        """Sets the bind_business of this LibraryInfo.


        :param bind_business: The bind_business of this LibraryInfo.  # noqa: E501
        :type: BusinessTypeEnum
        """

        self._bind_business = bind_business

    @property
    def description(self):
        """Gets the description of this LibraryInfo.  # noqa: E501

        库的描述 description  # noqa: E501

        :return: The description of this LibraryInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LibraryInfo.

        库的描述 description  # noqa: E501

        :param description: The description of this LibraryInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enable_multi_template(self):
        """Gets the enable_multi_template of this LibraryInfo.  # noqa: E501

        0表示只能绑定单个模板方案，1表示可以绑定多个模板方案 0 for single template which is the default option, 1 for multiple templates  # noqa: E501

        :return: The enable_multi_template of this LibraryInfo.  # noqa: E501
        :rtype: int
        """
        return self._enable_multi_template

    @enable_multi_template.setter
    def enable_multi_template(self, enable_multi_template):
        """Sets the enable_multi_template of this LibraryInfo.

        0表示只能绑定单个模板方案，1表示可以绑定多个模板方案 0 for single template which is the default option, 1 for multiple templates  # noqa: E501

        :param enable_multi_template: The enable_multi_template of this LibraryInfo.  # noqa: E501
        :type: int
        """

        self._enable_multi_template = enable_multi_template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LibraryInfo):
            return True

        return self.to_dict() != other.to_dict()
