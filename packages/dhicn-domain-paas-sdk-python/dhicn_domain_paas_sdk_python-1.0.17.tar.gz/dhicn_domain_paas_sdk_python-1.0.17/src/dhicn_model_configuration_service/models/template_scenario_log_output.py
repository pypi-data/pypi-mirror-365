# coding: utf-8

"""
    model-configuration-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_model_configuration_service.configuration import Configuration


class TemplateScenarioLogOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'scenario_id': 'str',
        'code': 'str',
        'description': 'str',
        'success': 'bool',
        'required': 'bool',
        'remark': 'str',
        'last_modification_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'scenario_id': 'scenarioId',
        'code': 'code',
        'description': 'description',
        'success': 'success',
        'required': 'required',
        'remark': 'remark',
        'last_modification_time': 'lastModificationTime'
    }

    def __init__(self, id=None, scenario_id=None, code=None, description=None, success=None, required=None, remark=None, last_modification_time=None, local_vars_configuration=None):  # noqa: E501
        """TemplateScenarioLogOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._scenario_id = None
        self._code = None
        self._description = None
        self._success = None
        self._required = None
        self._remark = None
        self._last_modification_time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if scenario_id is not None:
            self.scenario_id = scenario_id
        self.code = code
        self.description = description
        if success is not None:
            self.success = success
        if required is not None:
            self.required = required
        self.remark = remark
        self.last_modification_time = last_modification_time

    @property
    def id(self):
        """Gets the id of this TemplateScenarioLogOutput.  # noqa: E501

        配置进度信息ID configuration progress id  # noqa: E501

        :return: The id of this TemplateScenarioLogOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplateScenarioLogOutput.

        配置进度信息ID configuration progress id  # noqa: E501

        :param id: The id of this TemplateScenarioLogOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def scenario_id(self):
        """Gets the scenario_id of this TemplateScenarioLogOutput.  # noqa: E501

        模板方案ID template scenario id  # noqa: E501

        :return: The scenario_id of this TemplateScenarioLogOutput.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this TemplateScenarioLogOutput.

        模板方案ID template scenario id  # noqa: E501

        :param scenario_id: The scenario_id of this TemplateScenarioLogOutput.  # noqa: E501
        :type: str
        """

        self._scenario_id = scenario_id

    @property
    def code(self):
        """Gets the code of this TemplateScenarioLogOutput.  # noqa: E501

        配置步骤代码 configuration step code  # noqa: E501

        :return: The code of this TemplateScenarioLogOutput.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TemplateScenarioLogOutput.

        配置步骤代码 configuration step code  # noqa: E501

        :param code: The code of this TemplateScenarioLogOutput.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this TemplateScenarioLogOutput.  # noqa: E501

        配置步骤描述 configuration step description  # noqa: E501

        :return: The description of this TemplateScenarioLogOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TemplateScenarioLogOutput.

        配置步骤描述 configuration step description  # noqa: E501

        :param description: The description of this TemplateScenarioLogOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def success(self):
        """Gets the success of this TemplateScenarioLogOutput.  # noqa: E501

        是否配置成功 if the configuration step is successful  # noqa: E501

        :return: The success of this TemplateScenarioLogOutput.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this TemplateScenarioLogOutput.

        是否配置成功 if the configuration step is successful  # noqa: E501

        :param success: The success of this TemplateScenarioLogOutput.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def required(self):
        """Gets the required of this TemplateScenarioLogOutput.  # noqa: E501

        是否必需 if the configuration step is required  # noqa: E501

        :return: The required of this TemplateScenarioLogOutput.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this TemplateScenarioLogOutput.

        是否必需 if the configuration step is required  # noqa: E501

        :param required: The required of this TemplateScenarioLogOutput.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def remark(self):
        """Gets the remark of this TemplateScenarioLogOutput.  # noqa: E501

        备注 remark  # noqa: E501

        :return: The remark of this TemplateScenarioLogOutput.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this TemplateScenarioLogOutput.

        备注 remark  # noqa: E501

        :param remark: The remark of this TemplateScenarioLogOutput.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def last_modification_time(self):
        """Gets the last_modification_time of this TemplateScenarioLogOutput.  # noqa: E501

        最后一次修改时间 last modify time  # noqa: E501

        :return: The last_modification_time of this TemplateScenarioLogOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modification_time

    @last_modification_time.setter
    def last_modification_time(self, last_modification_time):
        """Sets the last_modification_time of this TemplateScenarioLogOutput.

        最后一次修改时间 last modify time  # noqa: E501

        :param last_modification_time: The last_modification_time of this TemplateScenarioLogOutput.  # noqa: E501
        :type: datetime
        """

        self._last_modification_time = last_modification_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateScenarioLogOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TemplateScenarioLogOutput):
            return True

        return self.to_dict() != other.to_dict()
