# coding: utf-8

"""
    竹园污水项目

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_zyws_service.configuration import Configuration


class DamGateStatusInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scenario_id': 'str',
        'dam_gate_code': 'str',
        'sort': 'int',
        'status': 'str',
        'is_scheduling': 'bool',
        'tag_weir_height': 'float'
    }

    attribute_map = {
        'scenario_id': 'scenarioId',
        'dam_gate_code': 'damGateCode',
        'sort': 'sort',
        'status': 'status',
        'is_scheduling': 'isScheduling',
        'tag_weir_height': 'tagWeirHeight'
    }

    def __init__(self, scenario_id=None, dam_gate_code=None, sort=None, status=None, is_scheduling=None, tag_weir_height=None, local_vars_configuration=None):  # noqa: E501
        """DamGateStatusInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._scenario_id = None
        self._dam_gate_code = None
        self._sort = None
        self._status = None
        self._is_scheduling = None
        self._tag_weir_height = None
        self.discriminator = None

        if scenario_id is not None:
            self.scenario_id = scenario_id
        self.dam_gate_code = dam_gate_code
        if sort is not None:
            self.sort = sort
        self.status = status
        if is_scheduling is not None:
            self.is_scheduling = is_scheduling
        self.tag_weir_height = tag_weir_height

    @property
    def scenario_id(self):
        """Gets the scenario_id of this DamGateStatusInfo.  # noqa: E501

        方案ID  # noqa: E501

        :return: The scenario_id of this DamGateStatusInfo.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this DamGateStatusInfo.

        方案ID  # noqa: E501

        :param scenario_id: The scenario_id of this DamGateStatusInfo.  # noqa: E501
        :type: str
        """

        self._scenario_id = scenario_id

    @property
    def dam_gate_code(self):
        """Gets the dam_gate_code of this DamGateStatusInfo.  # noqa: E501

        堰门编码,iot中堰的名称  # noqa: E501

        :return: The dam_gate_code of this DamGateStatusInfo.  # noqa: E501
        :rtype: str
        """
        return self._dam_gate_code

    @dam_gate_code.setter
    def dam_gate_code(self, dam_gate_code):
        """Sets the dam_gate_code of this DamGateStatusInfo.

        堰门编码,iot中堰的名称  # noqa: E501

        :param dam_gate_code: The dam_gate_code of this DamGateStatusInfo.  # noqa: E501
        :type: str
        """

        self._dam_gate_code = dam_gate_code

    @property
    def sort(self):
        """Gets the sort of this DamGateStatusInfo.  # noqa: E501

        排序号,越小越靠前  # noqa: E501

        :return: The sort of this DamGateStatusInfo.  # noqa: E501
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this DamGateStatusInfo.

        排序号,越小越靠前  # noqa: E501

        :param sort: The sort of this DamGateStatusInfo.  # noqa: E501
        :type: int
        """

        self._sort = sort

    @property
    def status(self):
        """Gets the status of this DamGateStatusInfo.  # noqa: E501

        状态枚举: Usable :0可用的; Unusable :1不可用的  # noqa: E501

        :return: The status of this DamGateStatusInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DamGateStatusInfo.

        状态枚举: Usable :0可用的; Unusable :1不可用的  # noqa: E501

        :param status: The status of this DamGateStatusInfo.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def is_scheduling(self):
        """Gets the is_scheduling of this DamGateStatusInfo.  # noqa: E501

        是否可调度  # noqa: E501

        :return: The is_scheduling of this DamGateStatusInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_scheduling

    @is_scheduling.setter
    def is_scheduling(self, is_scheduling):
        """Sets the is_scheduling of this DamGateStatusInfo.

        是否可调度  # noqa: E501

        :param is_scheduling: The is_scheduling of this DamGateStatusInfo.  # noqa: E501
        :type: bool
        """

        self._is_scheduling = is_scheduling

    @property
    def tag_weir_height(self):
        """Gets the tag_weir_height of this DamGateStatusInfo.  # noqa: E501

        人工标定堰高  # noqa: E501

        :return: The tag_weir_height of this DamGateStatusInfo.  # noqa: E501
        :rtype: float
        """
        return self._tag_weir_height

    @tag_weir_height.setter
    def tag_weir_height(self, tag_weir_height):
        """Sets the tag_weir_height of this DamGateStatusInfo.

        人工标定堰高  # noqa: E501

        :param tag_weir_height: The tag_weir_height of this DamGateStatusInfo.  # noqa: E501
        :type: float
        """

        self._tag_weir_height = tag_weir_height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DamGateStatusInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DamGateStatusInfo):
            return True

        return self.to_dict() != other.to_dict()
