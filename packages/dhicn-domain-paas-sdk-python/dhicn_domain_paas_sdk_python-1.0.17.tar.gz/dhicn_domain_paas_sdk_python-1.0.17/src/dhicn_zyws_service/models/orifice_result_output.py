# coding: utf-8

"""
    竹园污水项目

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_zyws_service.configuration import Configuration


class OrificeResultOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scenario_id': 'str',
        'compute_type': 'str',
        'factory_code': 'str',
        'opened_num': 'int',
        'opened_height': 'float'
    }

    attribute_map = {
        'scenario_id': 'scenarioId',
        'compute_type': 'computeType',
        'factory_code': 'factoryCode',
        'opened_num': 'openedNum',
        'opened_height': 'openedHeight'
    }

    def __init__(self, scenario_id=None, compute_type=None, factory_code=None, opened_num=None, opened_height=None, local_vars_configuration=None):  # noqa: E501
        """OrificeResultOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._scenario_id = None
        self._compute_type = None
        self._factory_code = None
        self._opened_num = None
        self._opened_height = None
        self.discriminator = None

        if scenario_id is not None:
            self.scenario_id = scenario_id
        self.compute_type = compute_type
        self.factory_code = factory_code
        if opened_num is not None:
            self.opened_num = opened_num
        if opened_height is not None:
            self.opened_height = opened_height

    @property
    def scenario_id(self):
        """Gets the scenario_id of this OrificeResultOutput.  # noqa: E501


        :return: The scenario_id of this OrificeResultOutput.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this OrificeResultOutput.


        :param scenario_id: The scenario_id of this OrificeResultOutput.  # noqa: E501
        :type: str
        """

        self._scenario_id = scenario_id

    @property
    def compute_type(self):
        """Gets the compute_type of this OrificeResultOutput.  # noqa: E501

        drySeason-旱季  # noqa: E501

        :return: The compute_type of this OrificeResultOutput.  # noqa: E501
        :rtype: str
        """
        return self._compute_type

    @compute_type.setter
    def compute_type(self, compute_type):
        """Sets the compute_type of this OrificeResultOutput.

        drySeason-旱季  # noqa: E501

        :param compute_type: The compute_type of this OrificeResultOutput.  # noqa: E501
        :type: str
        """

        self._compute_type = compute_type

    @property
    def factory_code(self):
        """Gets the factory_code of this OrificeResultOutput.  # noqa: E501

        厂区编码  # noqa: E501

        :return: The factory_code of this OrificeResultOutput.  # noqa: E501
        :rtype: str
        """
        return self._factory_code

    @factory_code.setter
    def factory_code(self, factory_code):
        """Sets the factory_code of this OrificeResultOutput.

        厂区编码  # noqa: E501

        :param factory_code: The factory_code of this OrificeResultOutput.  # noqa: E501
        :type: str
        """

        self._factory_code = factory_code

    @property
    def opened_num(self):
        """Gets the opened_num of this OrificeResultOutput.  # noqa: E501

        各厂的开堰数  # noqa: E501

        :return: The opened_num of this OrificeResultOutput.  # noqa: E501
        :rtype: int
        """
        return self._opened_num

    @opened_num.setter
    def opened_num(self, opened_num):
        """Sets the opened_num of this OrificeResultOutput.

        各厂的开堰数  # noqa: E501

        :param opened_num: The opened_num of this OrificeResultOutput.  # noqa: E501
        :type: int
        """

        self._opened_num = opened_num

    @property
    def opened_height(self):
        """Gets the opened_height of this OrificeResultOutput.  # noqa: E501

        各厂常开固定堰高度  # noqa: E501

        :return: The opened_height of this OrificeResultOutput.  # noqa: E501
        :rtype: float
        """
        return self._opened_height

    @opened_height.setter
    def opened_height(self, opened_height):
        """Sets the opened_height of this OrificeResultOutput.

        各厂常开固定堰高度  # noqa: E501

        :param opened_height: The opened_height of this OrificeResultOutput.  # noqa: E501
        :type: float
        """

        self._opened_height = opened_height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrificeResultOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrificeResultOutput):
            return True

        return self.to_dict() != other.to_dict()
