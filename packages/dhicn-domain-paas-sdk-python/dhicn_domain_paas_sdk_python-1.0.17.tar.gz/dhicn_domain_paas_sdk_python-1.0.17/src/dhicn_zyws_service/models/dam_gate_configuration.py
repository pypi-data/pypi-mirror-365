# coding: utf-8

"""
    竹园污水项目

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_zyws_service.configuration import Configuration


class DamGateConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_code': 'str',
        'weir_height_correction_factor': 'float',
        'theoretical_weir_width': 'float',
        'sort': 'int'
    }

    attribute_map = {
        'device_code': 'deviceCode',
        'weir_height_correction_factor': 'weirHeightCorrectionFactor',
        'theoretical_weir_width': 'theoreticalWeirWidth',
        'sort': 'sort'
    }

    def __init__(self, device_code=None, weir_height_correction_factor=None, theoretical_weir_width=None, sort=None, local_vars_configuration=None):  # noqa: E501
        """DamGateConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._device_code = None
        self._weir_height_correction_factor = None
        self._theoretical_weir_width = None
        self._sort = None
        self.discriminator = None

        self.device_code = device_code
        if weir_height_correction_factor is not None:
            self.weir_height_correction_factor = weir_height_correction_factor
        if theoretical_weir_width is not None:
            self.theoretical_weir_width = theoretical_weir_width
        if sort is not None:
            self.sort = sort

    @property
    def device_code(self):
        """Gets the device_code of this DamGateConfiguration.  # noqa: E501

        设备名  # noqa: E501

        :return: The device_code of this DamGateConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._device_code

    @device_code.setter
    def device_code(self, device_code):
        """Sets the device_code of this DamGateConfiguration.

        设备名  # noqa: E501

        :param device_code: The device_code of this DamGateConfiguration.  # noqa: E501
        :type: str
        """

        self._device_code = device_code

    @property
    def weir_height_correction_factor(self):
        """Gets the weir_height_correction_factor of this DamGateConfiguration.  # noqa: E501

        堰高修正系数  # noqa: E501

        :return: The weir_height_correction_factor of this DamGateConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._weir_height_correction_factor

    @weir_height_correction_factor.setter
    def weir_height_correction_factor(self, weir_height_correction_factor):
        """Sets the weir_height_correction_factor of this DamGateConfiguration.

        堰高修正系数  # noqa: E501

        :param weir_height_correction_factor: The weir_height_correction_factor of this DamGateConfiguration.  # noqa: E501
        :type: float
        """

        self._weir_height_correction_factor = weir_height_correction_factor

    @property
    def theoretical_weir_width(self):
        """Gets the theoretical_weir_width of this DamGateConfiguration.  # noqa: E501

        理论堰宽  # noqa: E501

        :return: The theoretical_weir_width of this DamGateConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._theoretical_weir_width

    @theoretical_weir_width.setter
    def theoretical_weir_width(self, theoretical_weir_width):
        """Sets the theoretical_weir_width of this DamGateConfiguration.

        理论堰宽  # noqa: E501

        :param theoretical_weir_width: The theoretical_weir_width of this DamGateConfiguration.  # noqa: E501
        :type: float
        """

        self._theoretical_weir_width = theoretical_weir_width

    @property
    def sort(self):
        """Gets the sort of this DamGateConfiguration.  # noqa: E501

        排序，原本为了用于20个堰门的排序，但分为1,3,4厂之后就用不上了  # noqa: E501

        :return: The sort of this DamGateConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this DamGateConfiguration.

        排序，原本为了用于20个堰门的排序，但分为1,3,4厂之后就用不上了  # noqa: E501

        :param sort: The sort of this DamGateConfiguration.  # noqa: E501
        :type: int
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DamGateConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DamGateConfiguration):
            return True

        return self.to_dict() != other.to_dict()
