# coding: utf-8

"""
    竹园污水项目

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_zyws_service.configuration import Configuration


class WaterDeliveryPrincipleScenario(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'creation_time': 'datetime',
        'tenant_id': 'str',
        'scenario_id': 'str',
        'factory_code': 'str',
        'item_code': 'str',
        'value': 'float',
        'principle_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'creation_time': 'creationTime',
        'tenant_id': 'tenantId',
        'scenario_id': 'scenarioId',
        'factory_code': 'factoryCode',
        'item_code': 'itemCode',
        'value': 'value',
        'principle_id': 'principleId'
    }

    def __init__(self, id=None, creation_time=None, tenant_id=None, scenario_id=None, factory_code=None, item_code=None, value=None, principle_id=None, local_vars_configuration=None):  # noqa: E501
        """WaterDeliveryPrincipleScenario - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._creation_time = None
        self._tenant_id = None
        self._scenario_id = None
        self._factory_code = None
        self._item_code = None
        self._value = None
        self._principle_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if creation_time is not None:
            self.creation_time = creation_time
        self.tenant_id = tenant_id
        if scenario_id is not None:
            self.scenario_id = scenario_id
        self.factory_code = factory_code
        self.item_code = item_code
        if value is not None:
            self.value = value
        if principle_id is not None:
            self.principle_id = principle_id

    @property
    def id(self):
        """Gets the id of this WaterDeliveryPrincipleScenario.  # noqa: E501


        :return: The id of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WaterDeliveryPrincipleScenario.


        :param id: The id of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def creation_time(self):
        """Gets the creation_time of this WaterDeliveryPrincipleScenario.  # noqa: E501


        :return: The creation_time of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this WaterDeliveryPrincipleScenario.


        :param creation_time: The creation_time of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def tenant_id(self):
        """Gets the tenant_id of this WaterDeliveryPrincipleScenario.  # noqa: E501


        :return: The tenant_id of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this WaterDeliveryPrincipleScenario.


        :param tenant_id: The tenant_id of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def scenario_id(self):
        """Gets the scenario_id of this WaterDeliveryPrincipleScenario.  # noqa: E501


        :return: The scenario_id of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this WaterDeliveryPrincipleScenario.


        :param scenario_id: The scenario_id of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :type: str
        """

        self._scenario_id = scenario_id

    @property
    def factory_code(self):
        """Gets the factory_code of this WaterDeliveryPrincipleScenario.  # noqa: E501


        :return: The factory_code of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :rtype: str
        """
        return self._factory_code

    @factory_code.setter
    def factory_code(self, factory_code):
        """Sets the factory_code of this WaterDeliveryPrincipleScenario.


        :param factory_code: The factory_code of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :type: str
        """

        self._factory_code = factory_code

    @property
    def item_code(self):
        """Gets the item_code of this WaterDeliveryPrincipleScenario.  # noqa: E501


        :return: The item_code of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """Sets the item_code of this WaterDeliveryPrincipleScenario.


        :param item_code: The item_code of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :type: str
        """

        self._item_code = item_code

    @property
    def value(self):
        """Gets the value of this WaterDeliveryPrincipleScenario.  # noqa: E501


        :return: The value of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this WaterDeliveryPrincipleScenario.


        :param value: The value of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def principle_id(self):
        """Gets the principle_id of this WaterDeliveryPrincipleScenario.  # noqa: E501


        :return: The principle_id of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :rtype: str
        """
        return self._principle_id

    @principle_id.setter
    def principle_id(self, principle_id):
        """Sets the principle_id of this WaterDeliveryPrincipleScenario.


        :param principle_id: The principle_id of this WaterDeliveryPrincipleScenario.  # noqa: E501
        :type: str
        """

        self._principle_id = principle_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaterDeliveryPrincipleScenario):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaterDeliveryPrincipleScenario):
            return True

        return self.to_dict() != other.to_dict()
