# coding: utf-8

"""
    accident-manager-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_accident_management_service.configuration import Configuration


class UpdateAccidentInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'accident_level': 'AccidentLevelEnum',
        'is_stop': 'bool',
        'result': 'str',
        'type': 'AccidentTypeEnum',
        'remark': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'accident_level': 'accidentLevel',
        'is_stop': 'isStop',
        'result': 'result',
        'type': 'type',
        'remark': 'remark'
    }

    def __init__(self, id=None, name=None, accident_level=None, is_stop=None, result=None, type=None, remark=None, local_vars_configuration=None):  # noqa: E501
        """UpdateAccidentInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._accident_level = None
        self._is_stop = None
        self._result = None
        self._type = None
        self._remark = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if accident_level is not None:
            self.accident_level = accident_level
        if is_stop is not None:
            self.is_stop = is_stop
        self.result = result
        if type is not None:
            self.type = type
        self.remark = remark

    @property
    def id(self):
        """Gets the id of this UpdateAccidentInput.  # noqa: E501

        事故ID accident id  # noqa: E501

        :return: The id of this UpdateAccidentInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateAccidentInput.

        事故ID accident id  # noqa: E501

        :param id: The id of this UpdateAccidentInput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UpdateAccidentInput.  # noqa: E501

        事故名称 accident name  # noqa: E501

        :return: The name of this UpdateAccidentInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAccidentInput.

        事故名称 accident name  # noqa: E501

        :param name: The name of this UpdateAccidentInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def accident_level(self):
        """Gets the accident_level of this UpdateAccidentInput.  # noqa: E501


        :return: The accident_level of this UpdateAccidentInput.  # noqa: E501
        :rtype: AccidentLevelEnum
        """
        return self._accident_level

    @accident_level.setter
    def accident_level(self, accident_level):
        """Sets the accident_level of this UpdateAccidentInput.


        :param accident_level: The accident_level of this UpdateAccidentInput.  # noqa: E501
        :type: AccidentLevelEnum
        """

        self._accident_level = accident_level

    @property
    def is_stop(self):
        """Gets the is_stop of this UpdateAccidentInput.  # noqa: E501

        是否停止 if it is stopped  # noqa: E501

        :return: The is_stop of this UpdateAccidentInput.  # noqa: E501
        :rtype: bool
        """
        return self._is_stop

    @is_stop.setter
    def is_stop(self, is_stop):
        """Sets the is_stop of this UpdateAccidentInput.

        是否停止 if it is stopped  # noqa: E501

        :param is_stop: The is_stop of this UpdateAccidentInput.  # noqa: E501
        :type: bool
        """

        self._is_stop = is_stop

    @property
    def result(self):
        """Gets the result of this UpdateAccidentInput.  # noqa: E501

        事故结果 accident result  # noqa: E501

        :return: The result of this UpdateAccidentInput.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this UpdateAccidentInput.

        事故结果 accident result  # noqa: E501

        :param result: The result of this UpdateAccidentInput.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def type(self):
        """Gets the type of this UpdateAccidentInput.  # noqa: E501


        :return: The type of this UpdateAccidentInput.  # noqa: E501
        :rtype: AccidentTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateAccidentInput.


        :param type: The type of this UpdateAccidentInput.  # noqa: E501
        :type: AccidentTypeEnum
        """

        self._type = type

    @property
    def remark(self):
        """Gets the remark of this UpdateAccidentInput.  # noqa: E501

        事故备注 accident remark  # noqa: E501

        :return: The remark of this UpdateAccidentInput.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this UpdateAccidentInput.

        事故备注 accident remark  # noqa: E501

        :param remark: The remark of this UpdateAccidentInput.  # noqa: E501
        :type: str
        """

        self._remark = remark

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAccidentInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateAccidentInput):
            return True

        return self.to_dict() != other.to_dict()
