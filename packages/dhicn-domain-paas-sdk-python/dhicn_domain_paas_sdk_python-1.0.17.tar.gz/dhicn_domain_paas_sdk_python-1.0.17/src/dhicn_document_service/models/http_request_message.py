# coding: utf-8

"""
    document-manager-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_document_service.configuration import Configuration


class HttpRequestMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'Version',
        'version_policy': 'HttpVersionPolicy',
        'content': 'HttpContent',
        'method': 'HttpMethod',
        'request_uri': 'str',
        'headers': 'list[StringStringIEnumerableKeyValuePair]',
        'properties': 'dict(str, str)',
        'options': 'dict(str, str)'
    }

    attribute_map = {
        'version': 'version',
        'version_policy': 'versionPolicy',
        'content': 'content',
        'method': 'method',
        'request_uri': 'requestUri',
        'headers': 'headers',
        'properties': 'properties',
        'options': 'options'
    }

    def __init__(self, version=None, version_policy=None, content=None, method=None, request_uri=None, headers=None, properties=None, options=None, local_vars_configuration=None):  # noqa: E501
        """HttpRequestMessage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._version_policy = None
        self._content = None
        self._method = None
        self._request_uri = None
        self._headers = None
        self._properties = None
        self._options = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if version_policy is not None:
            self.version_policy = version_policy
        if content is not None:
            self.content = content
        if method is not None:
            self.method = method
        self.request_uri = request_uri
        self.headers = headers
        self.properties = properties
        self.options = options

    @property
    def version(self):
        """Gets the version of this HttpRequestMessage.  # noqa: E501


        :return: The version of this HttpRequestMessage.  # noqa: E501
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HttpRequestMessage.


        :param version: The version of this HttpRequestMessage.  # noqa: E501
        :type: Version
        """

        self._version = version

    @property
    def version_policy(self):
        """Gets the version_policy of this HttpRequestMessage.  # noqa: E501


        :return: The version_policy of this HttpRequestMessage.  # noqa: E501
        :rtype: HttpVersionPolicy
        """
        return self._version_policy

    @version_policy.setter
    def version_policy(self, version_policy):
        """Sets the version_policy of this HttpRequestMessage.


        :param version_policy: The version_policy of this HttpRequestMessage.  # noqa: E501
        :type: HttpVersionPolicy
        """

        self._version_policy = version_policy

    @property
    def content(self):
        """Gets the content of this HttpRequestMessage.  # noqa: E501


        :return: The content of this HttpRequestMessage.  # noqa: E501
        :rtype: HttpContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this HttpRequestMessage.


        :param content: The content of this HttpRequestMessage.  # noqa: E501
        :type: HttpContent
        """

        self._content = content

    @property
    def method(self):
        """Gets the method of this HttpRequestMessage.  # noqa: E501


        :return: The method of this HttpRequestMessage.  # noqa: E501
        :rtype: HttpMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this HttpRequestMessage.


        :param method: The method of this HttpRequestMessage.  # noqa: E501
        :type: HttpMethod
        """

        self._method = method

    @property
    def request_uri(self):
        """Gets the request_uri of this HttpRequestMessage.  # noqa: E501


        :return: The request_uri of this HttpRequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this HttpRequestMessage.


        :param request_uri: The request_uri of this HttpRequestMessage.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def headers(self):
        """Gets the headers of this HttpRequestMessage.  # noqa: E501


        :return: The headers of this HttpRequestMessage.  # noqa: E501
        :rtype: list[StringStringIEnumerableKeyValuePair]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HttpRequestMessage.


        :param headers: The headers of this HttpRequestMessage.  # noqa: E501
        :type: list[StringStringIEnumerableKeyValuePair]
        """

        self._headers = headers

    @property
    def properties(self):
        """Gets the properties of this HttpRequestMessage.  # noqa: E501


        :return: The properties of this HttpRequestMessage.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this HttpRequestMessage.


        :param properties: The properties of this HttpRequestMessage.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def options(self):
        """Gets the options of this HttpRequestMessage.  # noqa: E501


        :return: The options of this HttpRequestMessage.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this HttpRequestMessage.


        :param options: The options of this HttpRequestMessage.  # noqa: E501
        :type: dict(str, str)
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpRequestMessage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HttpRequestMessage):
            return True

        return self.to_dict() != other.to_dict()
