# coding: utf-8

"""
    document-manager-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_document_service.configuration import Configuration


class HttpStatusCode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    _100 = "100"
    _101 = "101"
    _102 = "102"
    _103 = "103"
    _200 = "200"
    _201 = "201"
    _202 = "202"
    _203 = "203"
    _204 = "204"
    _205 = "205"
    _206 = "206"
    _207 = "207"
    _208 = "208"
    _226 = "226"
    _300 = "300"
    _301 = "301"
    _302 = "302"
    _303 = "303"
    _304 = "304"
    _305 = "305"
    _306 = "306"
    _307 = "307"
    _308 = "308"
    _400 = "400"
    _401 = "401"
    _402 = "402"
    _403 = "403"
    _404 = "404"
    _405 = "405"
    _406 = "406"
    _407 = "407"
    _408 = "408"
    _409 = "409"
    _410 = "410"
    _411 = "411"
    _412 = "412"
    _413 = "413"
    _414 = "414"
    _415 = "415"
    _416 = "416"
    _417 = "417"
    _421 = "421"
    _422 = "422"
    _423 = "423"
    _424 = "424"
    _426 = "426"
    _428 = "428"
    _429 = "429"
    _431 = "431"
    _451 = "451"
    _500 = "500"
    _501 = "501"
    _502 = "502"
    _503 = "503"
    _504 = "504"
    _505 = "505"
    _506 = "506"
    _507 = "507"
    _508 = "508"
    _510 = "510"
    _511 = "511"

    allowable_values = [_100, _101, _102, _103, _200, _201, _202, _203, _204, _205, _206, _207, _208, _226, _300, _301, _302, _303, _304, _305, _306, _307, _308, _400, _401, _402, _403, _404, _405, _406, _407, _408, _409, _410, _411, _412, _413, _414, _415, _416, _417, _421, _422, _423, _424, _426, _428, _429, _431, _451, _500, _501, _502, _503, _504, _505, _506, _507, _508, _510, _511]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """HttpStatusCode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpStatusCode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HttpStatusCode):
            return True

        return self.to_dict() != other.to_dict()
