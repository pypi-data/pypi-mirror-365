# coding: utf-8

"""
    scenario-manager-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_scenario_manager_service.configuration import Configuration


class Library(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'tenant_id': 'str',
        'scenariogroup': 'str',
        'name': 'str',
        'type': 'int',
        'business_type': 'int',
        'readonly': 'int',
        'bind_template': 'int',
        'bind_type': 'int',
        'bind_business_type': 'int',
        'enable_multi_template': 'int',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'tenant_id': 'tenantId',
        'scenariogroup': 'scenariogroup',
        'name': 'name',
        'type': 'type',
        'business_type': 'businessType',
        'readonly': 'readonly',
        'bind_template': 'bindTemplate',
        'bind_type': 'bindType',
        'bind_business_type': 'bindBusinessType',
        'enable_multi_template': 'enableMultiTemplate',
        'description': 'description'
    }

    def __init__(self, id=None, tenant_id=None, scenariogroup=None, name=None, type=None, business_type=None, readonly=None, bind_template=None, bind_type=None, bind_business_type=None, enable_multi_template=None, description=None, local_vars_configuration=None):  # noqa: E501
        """Library - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._tenant_id = None
        self._scenariogroup = None
        self._name = None
        self._type = None
        self._business_type = None
        self._readonly = None
        self._bind_template = None
        self._bind_type = None
        self._bind_business_type = None
        self._enable_multi_template = None
        self._description = None
        self.discriminator = None

        self.id = id
        self.tenant_id = tenant_id
        self.scenariogroup = scenariogroup
        self.name = name
        if type is not None:
            self.type = type
        if business_type is not None:
            self.business_type = business_type
        if readonly is not None:
            self.readonly = readonly
        if bind_template is not None:
            self.bind_template = bind_template
        if bind_type is not None:
            self.bind_type = bind_type
        if bind_business_type is not None:
            self.bind_business_type = bind_business_type
        self.enable_multi_template = enable_multi_template
        self.description = description

    @property
    def id(self):
        """Gets the id of this Library.  # noqa: E501

        库的ID library Id  # noqa: E501

        :return: The id of this Library.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Library.

        库的ID library Id  # noqa: E501

        :param id: The id of this Library.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Library.  # noqa: E501

        租户ID tenant Id  # noqa: E501

        :return: The tenant_id of this Library.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Library.

        租户ID tenant Id  # noqa: E501

        :param tenant_id: The tenant_id of this Library.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                tenant_id is not None and len(tenant_id) > 100):
            raise ValueError("Invalid value for `tenant_id`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                tenant_id is not None and len(tenant_id) < 0):
            raise ValueError("Invalid value for `tenant_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def scenariogroup(self):
        """Gets the scenariogroup of this Library.  # noqa: E501

        对应的方案组ID scenario group Id  # noqa: E501

        :return: The scenariogroup of this Library.  # noqa: E501
        :rtype: str
        """
        return self._scenariogroup

    @scenariogroup.setter
    def scenariogroup(self, scenariogroup):
        """Sets the scenariogroup of this Library.

        对应的方案组ID scenario group Id  # noqa: E501

        :param scenariogroup: The scenariogroup of this Library.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and scenariogroup is None:  # noqa: E501
            raise ValueError("Invalid value for `scenariogroup`, must not be `None`")  # noqa: E501

        self._scenariogroup = scenariogroup

    @property
    def name(self):
        """Gets the name of this Library.  # noqa: E501

        库的名称 library name  # noqa: E501

        :return: The name of this Library.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Library.

        库的名称 library name  # noqa: E501

        :param name: The name of this Library.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Library.  # noqa: E501

        库的类型 library type:  0-Undefined  1-AutoForecast  2-ManualForecast  3-Forecast  4-Schedule  5-Experience  6-ScenarioSimulation  7-WQAccident  8-OnlineHD  9-WaterHammer  10-Filling  11-PipeBurst  12-WQResponse  13-Planning  14-Flushing  15-OnlineWQAccident  16-CloseValve  17-WWTP  18-WWTPOptim  19-WWTPMLab  # noqa: E501

        :return: The type of this Library.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Library.

        库的类型 library type:  0-Undefined  1-AutoForecast  2-ManualForecast  3-Forecast  4-Schedule  5-Experience  6-ScenarioSimulation  7-WQAccident  8-OnlineHD  9-WaterHammer  10-Filling  11-PipeBurst  12-WQResponse  13-Planning  14-Flushing  15-OnlineWQAccident  16-CloseValve  17-WWTP  18-WWTPOptim  19-WWTPMLab  # noqa: E501

        :param type: The type of this Library.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def business_type(self):
        """Gets the business_type of this Library.  # noqa: E501

        库的业务类型 business type:  0-Undefined  1-WaterEnvironmnet  2-UrbanFlooding  3-WaterDistribution  4-RiverFlood  5-WWTP  # noqa: E501

        :return: The business_type of this Library.  # noqa: E501
        :rtype: int
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """Sets the business_type of this Library.

        库的业务类型 business type:  0-Undefined  1-WaterEnvironmnet  2-UrbanFlooding  3-WaterDistribution  4-RiverFlood  5-WWTP  # noqa: E501

        :param business_type: The business_type of this Library.  # noqa: E501
        :type: int
        """

        self._business_type = business_type

    @property
    def readonly(self):
        """Gets the readonly of this Library.  # noqa: E501

        0代表可读写，1代表只读 0 for not readonly, 1 for readonly  # noqa: E501

        :return: The readonly of this Library.  # noqa: E501
        :rtype: int
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this Library.

        0代表可读写，1代表只读 0 for not readonly, 1 for readonly  # noqa: E501

        :param readonly: The readonly of this Library.  # noqa: E501
        :type: int
        """

        self._readonly = readonly

    @property
    def bind_template(self):
        """Gets the bind_template of this Library.  # noqa: E501

        1表示库直接绑定一个模板方案，0表示不绑定 1 for bind a template directly, 0 for not  # noqa: E501

        :return: The bind_template of this Library.  # noqa: E501
        :rtype: int
        """
        return self._bind_template

    @bind_template.setter
    def bind_template(self, bind_template):
        """Sets the bind_template of this Library.

        1表示库直接绑定一个模板方案，0表示不绑定 1 for bind a template directly, 0 for not  # noqa: E501

        :param bind_template: The bind_template of this Library.  # noqa: E501
        :type: int
        """

        self._bind_template = bind_template

    @property
    def bind_type(self):
        """Gets the bind_type of this Library.  # noqa: E501

        当BindTemplate为0，此项表示其绑定的库的类型 Bind library type for a template, in case of BindTemplate is 0:  0-Undefined  1-AutoForecast  2-ManualForecast  3-Forecast  4-Schedule  5-Experience  6-ScenarioSimulation  7-WQAccident  8-OnlineHD  9-WaterHammer  10-Filling  11-PipeBurst  12-WQResponse  13-Planning  14-Flushing  # noqa: E501

        :return: The bind_type of this Library.  # noqa: E501
        :rtype: int
        """
        return self._bind_type

    @bind_type.setter
    def bind_type(self, bind_type):
        """Sets the bind_type of this Library.

        当BindTemplate为0，此项表示其绑定的库的类型 Bind library type for a template, in case of BindTemplate is 0:  0-Undefined  1-AutoForecast  2-ManualForecast  3-Forecast  4-Schedule  5-Experience  6-ScenarioSimulation  7-WQAccident  8-OnlineHD  9-WaterHammer  10-Filling  11-PipeBurst  12-WQResponse  13-Planning  14-Flushing  # noqa: E501

        :param bind_type: The bind_type of this Library.  # noqa: E501
        :type: int
        """

        self._bind_type = bind_type

    @property
    def bind_business_type(self):
        """Gets the bind_business_type of this Library.  # noqa: E501

        当BindTemplate为0，此项表示其绑定的库的业务类型 Bind business type for a template, in case of BindTemplate is 0:  0-Undefined  1-WaterEnvironmnet  2-UrbanFlooding  3-WaterDistribution  4-RiverFlood  # noqa: E501

        :return: The bind_business_type of this Library.  # noqa: E501
        :rtype: int
        """
        return self._bind_business_type

    @bind_business_type.setter
    def bind_business_type(self, bind_business_type):
        """Sets the bind_business_type of this Library.

        当BindTemplate为0，此项表示其绑定的库的业务类型 Bind business type for a template, in case of BindTemplate is 0:  0-Undefined  1-WaterEnvironmnet  2-UrbanFlooding  3-WaterDistribution  4-RiverFlood  # noqa: E501

        :param bind_business_type: The bind_business_type of this Library.  # noqa: E501
        :type: int
        """

        self._bind_business_type = bind_business_type

    @property
    def enable_multi_template(self):
        """Gets the enable_multi_template of this Library.  # noqa: E501

        0表示只能绑定单个模板方案，1表示可以绑定多个模板方案 0 for single template which is the default option, 1 for multiple templates  # noqa: E501

        :return: The enable_multi_template of this Library.  # noqa: E501
        :rtype: int
        """
        return self._enable_multi_template

    @enable_multi_template.setter
    def enable_multi_template(self, enable_multi_template):
        """Sets the enable_multi_template of this Library.

        0表示只能绑定单个模板方案，1表示可以绑定多个模板方案 0 for single template which is the default option, 1 for multiple templates  # noqa: E501

        :param enable_multi_template: The enable_multi_template of this Library.  # noqa: E501
        :type: int
        """

        self._enable_multi_template = enable_multi_template

    @property
    def description(self):
        """Gets the description of this Library.  # noqa: E501

        库的描述 description  # noqa: E501

        :return: The description of this Library.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Library.

        库的描述 description  # noqa: E501

        :param description: The description of this Library.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 1000):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Library):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Library):
            return True

        return self.to_dict() != other.to_dict()
