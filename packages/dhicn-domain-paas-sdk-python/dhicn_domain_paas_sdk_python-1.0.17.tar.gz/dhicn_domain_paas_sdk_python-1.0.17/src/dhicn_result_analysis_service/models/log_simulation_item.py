# coding: utf-8

"""
    result-analysis-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_result_analysis_service.configuration import Configuration


class LogSimulationItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time': 'str',
        'progress': 'float',
        'message': 'str',
        'model_state': 'ModelStateEnum',
        'error_msg': 'str'
    }

    attribute_map = {
        'time': 'time',
        'progress': 'progress',
        'message': 'message',
        'model_state': 'modelState',
        'error_msg': 'errorMsg'
    }

    def __init__(self, time=None, progress=None, message=None, model_state=None, error_msg=None, local_vars_configuration=None):  # noqa: E501
        """LogSimulationItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._time = None
        self._progress = None
        self._message = None
        self._model_state = None
        self._error_msg = None
        self.discriminator = None

        self.time = time
        if progress is not None:
            self.progress = progress
        self.message = message
        if model_state is not None:
            self.model_state = model_state
        self.error_msg = error_msg

    @property
    def time(self):
        """Gets the time of this LogSimulationItem.  # noqa: E501

        日志记录时间 log time  # noqa: E501

        :return: The time of this LogSimulationItem.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this LogSimulationItem.

        日志记录时间 log time  # noqa: E501

        :param time: The time of this LogSimulationItem.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def progress(self):
        """Gets the progress of this LogSimulationItem.  # noqa: E501

        计算进度 calculation progress  # noqa: E501

        :return: The progress of this LogSimulationItem.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this LogSimulationItem.

        计算进度 calculation progress  # noqa: E501

        :param progress: The progress of this LogSimulationItem.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def message(self):
        """Gets the message of this LogSimulationItem.  # noqa: E501

        消息 remark message  # noqa: E501

        :return: The message of this LogSimulationItem.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LogSimulationItem.

        消息 remark message  # noqa: E501

        :param message: The message of this LogSimulationItem.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def model_state(self):
        """Gets the model_state of this LogSimulationItem.  # noqa: E501


        :return: The model_state of this LogSimulationItem.  # noqa: E501
        :rtype: ModelStateEnum
        """
        return self._model_state

    @model_state.setter
    def model_state(self, model_state):
        """Sets the model_state of this LogSimulationItem.


        :param model_state: The model_state of this LogSimulationItem.  # noqa: E501
        :type: ModelStateEnum
        """

        self._model_state = model_state

    @property
    def error_msg(self):
        """Gets the error_msg of this LogSimulationItem.  # noqa: E501

        错误信息 error message  # noqa: E501

        :return: The error_msg of this LogSimulationItem.  # noqa: E501
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """Sets the error_msg of this LogSimulationItem.

        错误信息 error message  # noqa: E501

        :param error_msg: The error_msg of this LogSimulationItem.  # noqa: E501
        :type: str
        """

        self._error_msg = error_msg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogSimulationItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LogSimulationItem):
            return True

        return self.to_dict() != other.to_dict()
