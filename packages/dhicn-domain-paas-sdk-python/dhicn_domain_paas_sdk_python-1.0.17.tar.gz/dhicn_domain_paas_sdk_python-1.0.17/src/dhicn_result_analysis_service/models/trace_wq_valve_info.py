# coding: utf-8

"""
    result-analysis-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_result_analysis_service.configuration import Configuration


class TraceWqValveInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gis_id': 'str',
        'x': 'float',
        'y': 'float',
        'z': 'float'
    }

    attribute_map = {
        'gis_id': 'gisId',
        'x': 'x',
        'y': 'y',
        'z': 'z'
    }

    def __init__(self, gis_id=None, x=None, y=None, z=None, local_vars_configuration=None):  # noqa: E501
        """TraceWqValveInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._gis_id = None
        self._x = None
        self._y = None
        self._z = None
        self.discriminator = None

        self.gis_id = gis_id
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if z is not None:
            self.z = z

    @property
    def gis_id(self):
        """Gets the gis_id of this TraceWqValveInfo.  # noqa: E501

        Gis Id  # noqa: E501

        :return: The gis_id of this TraceWqValveInfo.  # noqa: E501
        :rtype: str
        """
        return self._gis_id

    @gis_id.setter
    def gis_id(self, gis_id):
        """Sets the gis_id of this TraceWqValveInfo.

        Gis Id  # noqa: E501

        :param gis_id: The gis_id of this TraceWqValveInfo.  # noqa: E501
        :type: str
        """

        self._gis_id = gis_id

    @property
    def x(self):
        """Gets the x of this TraceWqValveInfo.  # noqa: E501

        坐标 - X  # noqa: E501

        :return: The x of this TraceWqValveInfo.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this TraceWqValveInfo.

        坐标 - X  # noqa: E501

        :param x: The x of this TraceWqValveInfo.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this TraceWqValveInfo.  # noqa: E501

        坐标 - Y  # noqa: E501

        :return: The y of this TraceWqValveInfo.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this TraceWqValveInfo.

        坐标 - Y  # noqa: E501

        :param y: The y of this TraceWqValveInfo.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def z(self):
        """Gets the z of this TraceWqValveInfo.  # noqa: E501

        坐标 - Z  # noqa: E501

        :return: The z of this TraceWqValveInfo.  # noqa: E501
        :rtype: float
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this TraceWqValveInfo.

        坐标 - Z  # noqa: E501

        :param z: The z of this TraceWqValveInfo.  # noqa: E501
        :type: float
        """

        self._z = z

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceWqValveInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TraceWqValveInfo):
            return True

        return self.to_dict() != other.to_dict()
