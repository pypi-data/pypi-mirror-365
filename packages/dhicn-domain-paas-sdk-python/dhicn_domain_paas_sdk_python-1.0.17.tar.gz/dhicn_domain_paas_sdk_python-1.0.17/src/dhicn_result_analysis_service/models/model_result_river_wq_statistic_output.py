# coding: utf-8

"""
    result-analysis-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_result_analysis_service.configuration import Configuration


class ModelResultRiverWqStatisticOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model_feature_id': 'str',
        'control_rate': 'float',
        'exceed_period': 'float',
        'wq_infos': 'list[WqMaxStatistic]'
    }

    attribute_map = {
        'model_feature_id': 'modelFeatureId',
        'control_rate': 'controlRate',
        'exceed_period': 'exceedPeriod',
        'wq_infos': 'wqInfos'
    }

    def __init__(self, model_feature_id=None, control_rate=None, exceed_period=None, wq_infos=None, local_vars_configuration=None):  # noqa: E501
        """ModelResultRiverWqStatisticOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._model_feature_id = None
        self._control_rate = None
        self._exceed_period = None
        self._wq_infos = None
        self.discriminator = None

        self.model_feature_id = model_feature_id
        if control_rate is not None:
            self.control_rate = control_rate
        if exceed_period is not None:
            self.exceed_period = exceed_period
        self.wq_infos = wq_infos

    @property
    def model_feature_id(self):
        """Gets the model_feature_id of this ModelResultRiverWqStatisticOutput.  # noqa: E501

        模型文件里元素的ID modelfeature id  # noqa: E501

        :return: The model_feature_id of this ModelResultRiverWqStatisticOutput.  # noqa: E501
        :rtype: str
        """
        return self._model_feature_id

    @model_feature_id.setter
    def model_feature_id(self, model_feature_id):
        """Sets the model_feature_id of this ModelResultRiverWqStatisticOutput.

        模型文件里元素的ID modelfeature id  # noqa: E501

        :param model_feature_id: The model_feature_id of this ModelResultRiverWqStatisticOutput.  # noqa: E501
        :type: str
        """

        self._model_feature_id = model_feature_id

    @property
    def control_rate(self):
        """Gets the control_rate of this ModelResultRiverWqStatisticOutput.  # noqa: E501

        水质达标率 water quality compliance rate  # noqa: E501

        :return: The control_rate of this ModelResultRiverWqStatisticOutput.  # noqa: E501
        :rtype: float
        """
        return self._control_rate

    @control_rate.setter
    def control_rate(self, control_rate):
        """Sets the control_rate of this ModelResultRiverWqStatisticOutput.

        水质达标率 water quality compliance rate  # noqa: E501

        :param control_rate: The control_rate of this ModelResultRiverWqStatisticOutput.  # noqa: E501
        :type: float
        """

        self._control_rate = control_rate

    @property
    def exceed_period(self):
        """Gets the exceed_period of this ModelResultRiverWqStatisticOutput.  # noqa: E501

        超标时间(h) exceedance time (unit:h)  # noqa: E501

        :return: The exceed_period of this ModelResultRiverWqStatisticOutput.  # noqa: E501
        :rtype: float
        """
        return self._exceed_period

    @exceed_period.setter
    def exceed_period(self, exceed_period):
        """Sets the exceed_period of this ModelResultRiverWqStatisticOutput.

        超标时间(h) exceedance time (unit:h)  # noqa: E501

        :param exceed_period: The exceed_period of this ModelResultRiverWqStatisticOutput.  # noqa: E501
        :type: float
        """

        self._exceed_period = exceed_period

    @property
    def wq_infos(self):
        """Gets the wq_infos of this ModelResultRiverWqStatisticOutput.  # noqa: E501

        水质最大值集合 collection of water quality maximums  # noqa: E501

        :return: The wq_infos of this ModelResultRiverWqStatisticOutput.  # noqa: E501
        :rtype: list[WqMaxStatistic]
        """
        return self._wq_infos

    @wq_infos.setter
    def wq_infos(self, wq_infos):
        """Sets the wq_infos of this ModelResultRiverWqStatisticOutput.

        水质最大值集合 collection of water quality maximums  # noqa: E501

        :param wq_infos: The wq_infos of this ModelResultRiverWqStatisticOutput.  # noqa: E501
        :type: list[WqMaxStatistic]
        """

        self._wq_infos = wq_infos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelResultRiverWqStatisticOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelResultRiverWqStatisticOutput):
            return True

        return self.to_dict() != other.to_dict()
