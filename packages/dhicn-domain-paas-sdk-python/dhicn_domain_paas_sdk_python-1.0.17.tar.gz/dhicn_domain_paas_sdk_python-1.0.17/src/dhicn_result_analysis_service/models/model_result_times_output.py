# coding: utf-8

"""
    result-analysis-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_result_analysis_service.configuration import Configuration


class ModelResultTimesOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'result_type': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'time_step': 'int',
        'time_no': 'int'
    }

    attribute_map = {
        'id': 'id',
        'result_type': 'resultType',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'time_step': 'timeStep',
        'time_no': 'timeNo'
    }

    def __init__(self, id=None, result_type=None, start_time=None, end_time=None, time_step=None, time_no=None, local_vars_configuration=None):  # noqa: E501
        """ModelResultTimesOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._result_type = None
        self._start_time = None
        self._end_time = None
        self._time_step = None
        self._time_no = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.result_type = result_type
        self.start_time = start_time
        self.end_time = end_time
        if time_step is not None:
            self.time_step = time_step
        if time_no is not None:
            self.time_no = time_no

    @property
    def id(self):
        """Gets the id of this ModelResultTimesOutput.  # noqa: E501

        唯一标识 id  # noqa: E501

        :return: The id of this ModelResultTimesOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelResultTimesOutput.

        唯一标识 id  # noqa: E501

        :param id: The id of this ModelResultTimesOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def result_type(self):
        """Gets the result_type of this ModelResultTimesOutput.  # noqa: E501

        结果类型（Pipe/Node/Flow/Pressure/Velocity等） result type(Pipe/Node/Flow/Pressure/Velocity and so on)  # noqa: E501

        :return: The result_type of this ModelResultTimesOutput.  # noqa: E501
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this ModelResultTimesOutput.

        结果类型（Pipe/Node/Flow/Pressure/Velocity等） result type(Pipe/Node/Flow/Pressure/Velocity and so on)  # noqa: E501

        :param result_type: The result_type of this ModelResultTimesOutput.  # noqa: E501
        :type: str
        """

        self._result_type = result_type

    @property
    def start_time(self):
        """Gets the start_time of this ModelResultTimesOutput.  # noqa: E501


        :return: The start_time of this ModelResultTimesOutput.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ModelResultTimesOutput.


        :param start_time: The start_time of this ModelResultTimesOutput.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ModelResultTimesOutput.  # noqa: E501

        结束时间 end time  # noqa: E501

        :return: The end_time of this ModelResultTimesOutput.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ModelResultTimesOutput.

        结束时间 end time  # noqa: E501

        :param end_time: The end_time of this ModelResultTimesOutput.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def time_step(self):
        """Gets the time_step of this ModelResultTimesOutput.  # noqa: E501

        时间步长 单位 s time step (unit:s)  # noqa: E501

        :return: The time_step of this ModelResultTimesOutput.  # noqa: E501
        :rtype: int
        """
        return self._time_step

    @time_step.setter
    def time_step(self, time_step):
        """Sets the time_step of this ModelResultTimesOutput.

        时间步长 单位 s time step (unit:s)  # noqa: E501

        :param time_step: The time_step of this ModelResultTimesOutput.  # noqa: E501
        :type: int
        """

        self._time_step = time_step

    @property
    def time_no(self):
        """Gets the time_no of this ModelResultTimesOutput.  # noqa: E501

        时间序列总数  time number  # noqa: E501

        :return: The time_no of this ModelResultTimesOutput.  # noqa: E501
        :rtype: int
        """
        return self._time_no

    @time_no.setter
    def time_no(self, time_no):
        """Sets the time_no of this ModelResultTimesOutput.

        时间序列总数  time number  # noqa: E501

        :param time_no: The time_no of this ModelResultTimesOutput.  # noqa: E501
        :type: int
        """

        self._time_no = time_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelResultTimesOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelResultTimesOutput):
            return True

        return self.to_dict() != other.to_dict()
