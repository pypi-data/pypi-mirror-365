# coding: utf-8

"""
    result-analysis-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_result_analysis_service.configuration import Configuration


class GeoPointItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'chainage': 'float',
        'bottom': 'float',
        'right_bank': 'float',
        'left_bank': 'float'
    }

    attribute_map = {
        'chainage': 'chainage',
        'bottom': 'bottom',
        'right_bank': 'rightBank',
        'left_bank': 'leftBank'
    }

    def __init__(self, chainage=None, bottom=None, right_bank=None, left_bank=None, local_vars_configuration=None):  # noqa: E501
        """GeoPointItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._chainage = None
        self._bottom = None
        self._right_bank = None
        self._left_bank = None
        self.discriminator = None

        if chainage is not None:
            self.chainage = chainage
        if bottom is not None:
            self.bottom = bottom
        if right_bank is not None:
            self.right_bank = right_bank
        if left_bank is not None:
            self.left_bank = left_bank

    @property
    def chainage(self):
        """Gets the chainage of this GeoPointItem.  # noqa: E501

        计算点里程 point chainage  # noqa: E501

        :return: The chainage of this GeoPointItem.  # noqa: E501
        :rtype: float
        """
        return self._chainage

    @chainage.setter
    def chainage(self, chainage):
        """Sets the chainage of this GeoPointItem.

        计算点里程 point chainage  # noqa: E501

        :param chainage: The chainage of this GeoPointItem.  # noqa: E501
        :type: float
        """

        self._chainage = chainage

    @property
    def bottom(self):
        """Gets the bottom of this GeoPointItem.  # noqa: E501

        计算点底高程 bottom elevation at the point  # noqa: E501

        :return: The bottom of this GeoPointItem.  # noqa: E501
        :rtype: float
        """
        return self._bottom

    @bottom.setter
    def bottom(self, bottom):
        """Sets the bottom of this GeoPointItem.

        计算点底高程 bottom elevation at the point  # noqa: E501

        :param bottom: The bottom of this GeoPointItem.  # noqa: E501
        :type: float
        """

        self._bottom = bottom

    @property
    def right_bank(self):
        """Gets the right_bank of this GeoPointItem.  # noqa: E501

        计算点右岸高程 right bank elevation at the point  # noqa: E501

        :return: The right_bank of this GeoPointItem.  # noqa: E501
        :rtype: float
        """
        return self._right_bank

    @right_bank.setter
    def right_bank(self, right_bank):
        """Sets the right_bank of this GeoPointItem.

        计算点右岸高程 right bank elevation at the point  # noqa: E501

        :param right_bank: The right_bank of this GeoPointItem.  # noqa: E501
        :type: float
        """

        self._right_bank = right_bank

    @property
    def left_bank(self):
        """Gets the left_bank of this GeoPointItem.  # noqa: E501

        计算点左岸高程 left bank elevation at the point  # noqa: E501

        :return: The left_bank of this GeoPointItem.  # noqa: E501
        :rtype: float
        """
        return self._left_bank

    @left_bank.setter
    def left_bank(self, left_bank):
        """Sets the left_bank of this GeoPointItem.

        计算点左岸高程 left bank elevation at the point  # noqa: E501

        :param left_bank: The left_bank of this GeoPointItem.  # noqa: E501
        :type: float
        """

        self._left_bank = left_bank

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeoPointItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeoPointItem):
            return True

        return self.to_dict() != other.to_dict()
