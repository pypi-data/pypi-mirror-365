# coding: utf-8

"""
    result-analysis-service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dhicn_result_analysis_service.configuration import Configuration


class ObjectId(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timestamp': 'int',
        'machine': 'int',
        'pid': 'int',
        'increment': 'int',
        'creation_time': 'datetime'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'machine': 'machine',
        'pid': 'pid',
        'increment': 'increment',
        'creation_time': 'creationTime'
    }

    def __init__(self, timestamp=None, machine=None, pid=None, increment=None, creation_time=None, local_vars_configuration=None):  # noqa: E501
        """ObjectId - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._timestamp = None
        self._machine = None
        self._pid = None
        self._increment = None
        self._creation_time = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if machine is not None:
            self.machine = machine
        if pid is not None:
            self.pid = pid
        if increment is not None:
            self.increment = increment
        if creation_time is not None:
            self.creation_time = creation_time

    @property
    def timestamp(self):
        """Gets the timestamp of this ObjectId.  # noqa: E501


        :return: The timestamp of this ObjectId.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ObjectId.


        :param timestamp: The timestamp of this ObjectId.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def machine(self):
        """Gets the machine of this ObjectId.  # noqa: E501


        :return: The machine of this ObjectId.  # noqa: E501
        :rtype: int
        """
        return self._machine

    @machine.setter
    def machine(self, machine):
        """Sets the machine of this ObjectId.


        :param machine: The machine of this ObjectId.  # noqa: E501
        :type: int
        """

        self._machine = machine

    @property
    def pid(self):
        """Gets the pid of this ObjectId.  # noqa: E501


        :return: The pid of this ObjectId.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this ObjectId.


        :param pid: The pid of this ObjectId.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def increment(self):
        """Gets the increment of this ObjectId.  # noqa: E501


        :return: The increment of this ObjectId.  # noqa: E501
        :rtype: int
        """
        return self._increment

    @increment.setter
    def increment(self, increment):
        """Sets the increment of this ObjectId.


        :param increment: The increment of this ObjectId.  # noqa: E501
        :type: int
        """

        self._increment = increment

    @property
    def creation_time(self):
        """Gets the creation_time of this ObjectId.  # noqa: E501


        :return: The creation_time of this ObjectId.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ObjectId.


        :param creation_time: The creation_time of this ObjectId.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectId):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ObjectId):
            return True

        return self.to_dict() != other.to_dict()
