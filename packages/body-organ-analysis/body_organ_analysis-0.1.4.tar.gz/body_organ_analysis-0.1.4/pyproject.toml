[build-system]
build-backend = "poetry.core.masonry.api"

requires = [ "poetry-core>=1" ]

[tool.poetry]
name = "body-organ-analysis"
version = "0.1.4"
license = "Apache-2.0"
description = "BOA is a tool for segmentation of CT scans developed by the SHIP-AI group at the Institute for Artificial Intelligence in Medicine (https://ship-ai.ikim.nrw/). Combining the TotalSegmentator and the Body Composition Analysis, this tool is capable of analyzing medical images and identifying the different structures within the human body, including bones, muscles, organs, and blood vessels."
authors = [ "Jannis Straus <jannis.straus@uk-essen.de>" ]
readme = "README.md"
repository = "https://github.com/UMEssen/Body-and-Organ-Analyzer"
keywords = [ "python", "segmentation", "nnunet", "boa", "body composition analysis" ]
packages = [
  { include = "body_organ_analysis" },
]

[tool.poetry.scripts]
body_organ_analyzer = "body_organ_analyzer.cli:run"

[tool.poetry.dependencies]
python = "^3.9,<3.11"
requests = "^2.28.2"
numpy = "^1.24.0"
pydicom = "^2.3.1"
unidecode = "^1.3.6"
nibabel = "^5.1.0"
tqdm = "^4.45.0"
p-tqdm = "^1.4.0"
xvfbwrapper = "^0.2.9"
fury = "^0.8.0"
medpy = "^0.4.0"
matplotlib = "^3.6.2"
batchgenerators = "0.21"
psutil = "^5.9.4"
Jinja2 = "^3.0.3"
plotly = "^5.3.1"
SimpleITK = "^2.0.1"
WeasyPrint = "^52.5"
kaleido = "0.2.1"
pywavelets = "^1.1.1"
dataclasses-json = "^0.5.7"
xlsxwriter = "^3.1.2"
# Fix version of scikitlearn for the models
boa-contrast = "^0.1.4"
scikit-learn = "1.3.0"
# Only need this for the pacs
celery = { version = "5.2.7", optional = true }
dicomweb-client = { version = "^0.59.0", optional = true }
smbprotocol = { version = "^1.10.1", optional = true }
pydicom-seg = { version = "^0.4.1", optional = true }
# Only need this if together with triton
tritonclient = { extras = [ "grpc" ], version = "^2.5.0", optional = true }
psycopg2-binary = { version = "^2.9.9", optional = true }

[tool.poetry.extras]
triton = [ "tritonclient" ]
pacs = [ "celery", "dicomweb-client", "smbprotocol", "pydicom-seg", "psycopg2-binary" ]
storage = [ "dicomweb-client", "smbprotocol", "pydicom-seg" ]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"

[tool.ruff]
# Same as Black
line-length = 88
lint.select = [
  "B",    # flake8-bugbear
  "C",    # flake8-comprehensions
  "D401", # First line of docstring should be in imperative mood
  "E",    # pycodestyle errors
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "I",    # isort
  "PL",   # pylint
  "RUF",  # ruff
  "W",    # pycodestyle warnings
]
lint.ignore = [
  "C901",    # Is too complex
  "D100",    # Missing docstring in public module
  "D101",    # Missing docstring in public class
  "D104",    # Missing docstring in public package
  "D105",    # Missing docstring in magic method
  "E501",    # line too long, handled by black
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments in function definition
  "PLR0915", # Too many statements
  "PLR2004", # Magic value used in comparison
]
lint.unfixable = [
  "F401", # Do not fix unused imports, it's annoying during development
]
lint.pydocstyle.convention = "google"

[tool.mypy]
# Ensure full coverage
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true

# Restrict dynamic typing
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true

# Know exactly what you're doing
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
warn_unreachable = true
show_error_codes = true

[tool.pymarkdown]
plugins.md013.code_blocks = false
plugins.md013.line_length = 80

[virtualenvs]
create = true
in-project = true
