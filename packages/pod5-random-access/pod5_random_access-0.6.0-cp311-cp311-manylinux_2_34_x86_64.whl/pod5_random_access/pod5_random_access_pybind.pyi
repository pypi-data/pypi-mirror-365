"""
Minimal POD5 signal-index wrapper
"""

from __future__ import annotations
import numpy as np
import numpy.typing as npt
from typing import Sequence

__all__ = ["Pod5Index", "SigLoc"]

class Pod5Index:
    def __init__(self, pod5_file: str) -> None: ...
    def build_index(self) -> None: ...
    def fetch_signal(self, uuid: bytes | str) -> npt.NDArray[np.int16]:
        """
        Return numpy int16 array
        """

    def fetch_signals(
        self, uuid_list: Sequence[bytes | str]
    ) -> list[npt.NDArray[np.int16]]:
        """
        Return numpy int16 array
        """

    def load_index(self, path: str) -> None: ...
    def save_index(self, path: str) -> None: ...
    def get_calibration_offset(self, uuid: bytes | str) -> float: ...
    def get_calibration_scale(self, uuid: bytes | str) -> float: ...
    def get_calibration(self, uuid: bytes | str) -> tuple[float, float]: ...
    def get_signal_length(self, uuid: bytes | str) -> int: ...
    def list_read_ids(self) -> list[str]: ...
    """Return all read_id strings in the current index"""

class SigLoc:
    def __repr__(self) -> str: ...
    @property
    def batch(self) -> int: ...
    @property
    def calibration_offset(self) -> float: ...
    @property
    def calibration_scale(self) -> float: ...
    @property
    def n_samples(self) -> int: ...
    @property
    def row(self) -> int: ...
