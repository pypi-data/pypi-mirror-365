[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "nic_notify"
description = "A notification tool."
readme = "README.md"
authors = [
  {name = "Asmita", email = "shahasmita379@gmail.com"}
]
maintainers = [
  {name = "Asmita", email = "shahasmita379@gmail.com"}
]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Framework :: Django",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
license = {text = "MIT"}
dependencies = [
  "typer",
  "Django>=4.0",
  "twilio"
]
requires-python = ">= 3.10"

dynamic = ["version"]

[project.optional-dependencies]
test = [
    "coverage",
    "pytest",
    "ruff",
    "ty",
]

dev = [
    "coverage",
    "pytest",
    "ruff",
    "ty",
    "black",
    "mypy"
]

[project.urls]

bugs = "https://github.com/audreyfeldroy/notify_service/issues"
changelog = "https://github.com/audreyfeldroy/notify_service/blob/master/changelog.md"
homepage = "https://github.com/audreyfeldroy/notify_service"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.package-data]
"*" = ["*.*"]

[project.scripts]
notify_service = "nic_notify.cli:app"

[tool.setuptools.dynamic]
version = {attr = "nic_notify.__version__"}

[tool.ty]
# All rules are enabled as "error" by default; no need to specify unless overriding.
# Example override: relax a rule for the entire project (uncomment if needed).
# rules.TY015 = "warn"  # For invalid-argument-type, warn instead of error.

# Optional: Per-directory overrides for flexibility in boilerplates with tests or examples.
[[tool.ty.overrides]]
match = ["tests/**.py"]
rules.TY016 = "ignore"  # Ignore invalid-assignment in tests, e.g., for dynamic fixtures.
rules.TY029 = "ignore"  # Ignore invalid-return-type in tests.

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
