# Build system settings
[build-system]
# Poetry build backend
build-backend = "poetry.core.masonry.api"
# Minimum required poetry core version
requires = ["poetry-core==2.1.3"]

[project]
name = "unofficial_tabdeal_api"
version = "0.3.9" # Base version
description = "A Package to communicate with the Tabdeal platform"
license = "MIT"
readme = "README.rst"
requires-python = ">=3.11" # Upper-bound is set in the tool.poetry.dependencies section
authors = [{ name = "MohsenHNSJ", email = "mohsenhasannezhad@outlook.com" }]
maintainers = [{ name = "MohsenHNSJ", email = "mohsenhasannezhad@outlook.com" }]
keywords = ["tabdeal", "api", "unofficial"]
license-files = ["LICENSE"]
classifiers = [
    "Framework :: aiohttp",
    "Framework :: AsyncIO",
    "Framework :: Pydantic :: 2",
    "Topic :: Internet :: WWW/HTTP :: Session",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Financial and Insurance Industry",
    "Natural Language :: English",
    "Typing :: Typed",
]
dependencies = ["aiohttp == 3.12.14", "pydantic == 2.9.2"]


[project.urls]
Documentation = "https://unofficial-tabdeal-api.readthedocs.io/en/latest/"
Bug = "https://github.com/MohsenHNSJ/unofficial_tabdeal_api/issues"
Changelog = "https://github.com/MohsenHNSJ/unofficial_tabdeal_api/releases"
Repository = "https://github.com/MohsenHNSJ/unofficial_tabdeal_api"

[tool.poetry]
requires-poetry = ">=2.1"

# Main requirements
[tool.poetry.dependencies]
python = ">=3.11,<4.0"
# Other requirements constraints to keep dependencies up-to-date
# These are not directly required by the project
# But only required by the above packages
frozenlist = "1.7.0"
multidict = "6.6.3"
propcache = "0.3.2"
typing_extensions = "4.14.1"
yarl = "1.20.1"

# Poetry plugins
[tool.poetry.requires-plugins]
# https://github.com/python-poetry/poetry-plugin-export/releases
poetry-plugin-export = "1.9.0"

# Requirements for developing
[tool.poetry.group.dev.dependencies]
coverage = "7.10.0"
docutils = "0.21.2"
mypy = "1.17.0"
nox = "2025.05.01"
pre-commit = "4.2.0"
pytest = "8.4.1"
pytest-aiohttp = "1.1.0"
pytest-asyncio = "1.1.0"
pytest-codspeed = "4.0.0"
rst2html = "2020.7.4"
ruff = "0.12.5"
safety = "3.6.0"
# Other requirements constraints to keep dependencies up-to-date
# These are not directly required by the project
# But only required by the above packages
aiosignal = "1.4.0"
argcomplete = "3.6.2"
authlib = "1.6.1"
certifi = "2025.7.14"
charset-normalizer = "3.4.2"
click = "8.2.1"
cryptography = "45.0.5"
dependency-groups = "1.3.1"
distlib = "0.4.0"
frozenlist = "1.7.0"
identify = "2.6.12"
joblib = "1.5.1"
marshmallow = "3.26.1"
multidict = "6.6.3"
mypy-extensions = "1.1.0"
packaging = "25.0"
platformdirs = "4.3.8"
pluggy = "1.6.0"
propcache = "0.3.2"
pygments = "2.19.2"
requests = "2.32.4"
rich = "14.1.0"
ruamel-yaml = "0.18.14"
setuptools = "80.9.0"
typer = "0.16.0"
typing_extensions = "4.14.1"
urllib3 = "2.5.0"
virtualenv = "20.32.0"
yarl = "1.20.1"

# Requirements for documentation
[tool.poetry.group.docs.dependencies]
furo = "2025.7.19"
sphinx = "8.2.3"
sphinx-autoapi = "3.6.0"
sphinx-autobuild = "2024.10.3"
sphinx-copybutton = "0.5.2"
sphinx-notfound-page = "1.1.0"
sphinx-version-warning = "1.1.2"
# Other requirements constraints to keep dependencies up-to-date
# These are not directly required by the project
# But only required by the above packages
astroid = "3.3.11"
beautifulsoup4 = "4.13.4"
certifi = "2025.7.14"
charset-normalizer = "3.4.2"
click = "8.2.1"
h11 = "0.16.0"
packaging = "25.0"
pygments = "2.19.2"
requests = "2.32.4"
snowballstemmer = "3.0.1"
soupsieve = "2.7"
starlette = "0.47.2"
typing_extensions = "4.14.1"
urllib3 = "2.5.0"
uvicorn = "0.35.0"
watchfiles = "1.1.0"

# Ruff general settings
[tool.ruff]
# Maximum line length
line-length = 100

[tool.ruff.format]
# Automatically formatting Python code examples in docstrings
docstring-code-format = true

# Ruff linters
[tool.ruff.lint]
extend-select = [
    "A",     # flake8-builtins
    "AIR",   # Airflow
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "D",     # pydocstyle
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "DJ",    # flake8-django
    "DOC",   # pydoclint
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle
    "EM",    # flake8-errmsg
    "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "FA",    # flake8-future-annotations
    "FAST",  # FastAPI
    "FBT",   # flake8-boolean-trap
    "FLY",   # flynt
    "FURB",  # refurb
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "NPY",   # NumPy-specific rules
    "PD",    # pandas-vet
    "PERF",  # perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PLC",   # pylint-convention
    "PLE",   # pylint-error
    "PLR",   # pylint-refactor
    "PLW",   # pylint-warning
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # ruf-specific-rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    "TC",    # flake8-type-checking
    "TD",    # flake8-todos
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle-warnings
    "YTT",   # flake8-2020
]

# Flake8 Type Checking settings
[tool.ruff.lint.flake8-type-checking]
# When strict mode is enabled, the plugin will flag all imports that can be moved.
# Enforce TC001, TC002, and TC003 rules even when valid runtime imports are present for the same module.
strict = true

# McCabe settings
[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 10.
max-complexity = 10

# Pydocstyle settings
[tool.ruff.lint.pydocstyle]
# Documentation style
convention = "google"

# MyPy settings
[tool.mypy]
# Enable limited checking of dynamically typed functions
check_untyped_defs = true
# Reports an error whenever it a function is without type annotations or with incomplete type annotations
disallow_untyped_defs = true
# Use visually nicer output in error messages: use soft word wrap, show source code snippets, and show error location markers
pretty = true
# Shows column numbers in error messages.
show_column_numbers = true
# Shows documentation link to corresponding error code.
show_error_code_links = true
# Prefixes each error with the relevant context.
show_error_context = true
# Enable strict mode
strict = true
# Warns about casting an expression to its inferred type.
warn_redundant_casts = true
# Shows a warning when returning a value with type Any from a function declared with a non- Any return type.
warn_return_any = true
# Shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.
warn_unreachable = true
# Warns about per-module sections in the config file that do not match any files processed when invoking mypy.
warn_unused_configs = true
# Disable warns about unneeded # type: ignore comments
warn_unused_ignores = false

# Pytest settings
[tool.pytest.ini_options]
# Validate decorator markers
# Use importlib import mode
addopts = ["--strict-markers", "--import-mode=importlib"]
# Determines the default event loop scope of asynchronous fixtures.
asyncio_default_fixture_loop_scope = "function"
# Auto mode makes for the simplest test and fixture configuration as we only use asyncio
# If we also use trio, uvloop or something else, we have to change this to "strict"
asyncio_mode = "auto"
# Minimum required pytest version
minversion = "8.3"

# Coverage settings
[tool.coverage.paths]
# The entries in this section are lists of file paths that should be considered equivalent when combining data from different machines.
# The names of the entries are ignored, you may choose any name that you like.
# The value is a list of strings.
# When combining data with the combine command, two file paths will be combined if they start with paths from the same list.
# The first value must be an actual file path on the machine where the reporting will happen, so that source code can be found.
# The other values can be file patterns to match against the paths of collected data, or they can be absolute or relative file paths on the current machine.
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

# Coverage run settings
[tool.coverage.run]
# Whether to measure branch coverage in addition to statement coverage.
branch = true
# A list of file name patterns, the files to leave out of measurement or reporting.
omit = ["noxfile.py"]
# Append the machine name, process id and random number to the data file name to simplify collecting data from many processes.
parallel = true
# A list of packages, the source to measure during execution.
# Operates the same as source, but only names packages, for resolving ambiguities between packages and directories.
source_pkgs = ["unofficial_tabdeal_api"]
# A list of directories, the source to measure during execution.
# Operates the same as source, but only names directories, for resolving ambiguities between packages and directories.
source_dirs = ["tests"]

# Coverage report settings
[tool.coverage.report]
# When running a summary report, show missing lines.
show_missing = true

# Creosote settings
[tool.creosote]
# The path to the file specifying your dependencies, like pyproject.toml, requirements_*.txt | .in.
deps-file = "pyproject.toml"
# The path(s) to your source code, one or more files/folders.
paths = ["src"]
# The toml section(s) to parse, e.g. project.dependencies.
sections = ["project.dependencies"]
# The path(s) to your virtual environment or site-packages folder.
venvs = [".venv"]

# Configure the output of pre-commit-update resulting YAML
[tool.pre-commit-update.yaml]
# These configurations are more aligned with v8r, still not fully compatible
# It's better than before anyway
mapping = 4
sequence = 4
offset = 2
