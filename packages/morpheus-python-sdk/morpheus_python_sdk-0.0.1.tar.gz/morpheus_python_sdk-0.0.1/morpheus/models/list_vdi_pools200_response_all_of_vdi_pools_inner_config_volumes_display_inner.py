# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ListVDIPools200ResponseAllOfVdiPoolsInnerConfigVolumesDisplayInner(BaseModel):
    """
    ListVDIPools200ResponseAllOfVdiPoolsInnerConfigVolumesDisplayInner
    """ # noqa: E501
    storage: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    controller: Optional[StrictStr] = None
    datastore: Optional[StrictStr] = None
    display_order: Optional[StrictStr] = Field(default=None, alias="displayOrder")
    size: Optional[StrictInt] = None
    mount_point: Optional[StrictStr] = Field(default=None, alias="mountPoint")
    __properties: ClassVar[List[str]] = ["storage", "name", "controller", "datastore", "displayOrder", "size", "mountPoint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListVDIPools200ResponseAllOfVdiPoolsInnerConfigVolumesDisplayInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if controller (nullable) is None
        # and model_fields_set contains the field
        if self.controller is None and "controller" in self.model_fields_set:
            _dict['controller'] = None

        # set to None if display_order (nullable) is None
        # and model_fields_set contains the field
        if self.display_order is None and "display_order" in self.model_fields_set:
            _dict['displayOrder'] = None

        # set to None if mount_point (nullable) is None
        # and model_fields_set contains the field
        if self.mount_point is None and "mount_point" in self.model_fields_set:
            _dict['mountPoint'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListVDIPools200ResponseAllOfVdiPoolsInnerConfigVolumesDisplayInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "storage": obj.get("storage"),
            "name": obj.get("name"),
            "controller": obj.get("controller"),
            "datastore": obj.get("datastore"),
            "displayOrder": obj.get("displayOrder"),
            "size": obj.get("size"),
            "mountPoint": obj.get("mountPoint")
        })
        return _obj


