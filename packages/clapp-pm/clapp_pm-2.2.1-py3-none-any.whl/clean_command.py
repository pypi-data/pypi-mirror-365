#!/usr/bin/env python3
"""
clean_command.py - Ge√ßici dosya temizleme mod√ºl√º

Bu mod√ºl `clapp clean` komutunu destekler ve ge√ßici dosyalarƒ±,
loglarƒ± ve eski dosyalarƒ± temizler.
"""

import os
import shutil
import glob
from pathlib import Path

def format_size(size_bytes):
    """Dosya boyutunu formatlar"""
    if size_bytes == 0:
        return "0 B"
    
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024.0
    
    return f"{size_bytes:.1f} TB"

def clean_temp_files():
    """Ge√ßici dosyalarƒ± temizler"""
    temp_patterns = [
        "*.tmp",
        "*.temp",
        "*.log",
        "*.old",
        "*.bak",
        "*.backup",
        "__pycache__",
        "*.pyc",
        "*.pyo",
        ".DS_Store",
        "Thumbs.db",
        "test_write_permission.tmp"
    ]
    
    cleaned_files = []
    total_size = 0
    
    # Mevcut dizinde temizlik
    for pattern in temp_patterns:
        if pattern == "__pycache__":
            # __pycache__ dizinlerini bul ve sil
            for pycache_dir in Path(".").rglob("__pycache__"):
                if pycache_dir.is_dir():
                    try:
                        dir_size = sum(f.stat().st_size for f in pycache_dir.rglob("*") if f.is_file())
                        shutil.rmtree(pycache_dir)
                        cleaned_files.append(str(pycache_dir))
                        total_size += dir_size
                    except Exception as e:
                        print(f"‚ö†Ô∏è  {pycache_dir} silinemedi: {e}")
        else:
            # Dosya desenlerini bul ve sil
            for file_path in Path(".").rglob(pattern):
                if file_path.is_file():
                    try:
                        file_size = file_path.stat().st_size
                        file_path.unlink()
                        cleaned_files.append(str(file_path))
                        total_size += file_size
                    except Exception as e:
                        print(f"‚ö†Ô∏è  {file_path} silinemedi: {e}")
    
    return cleaned_files, total_size

def clean_apps_directory():
    """apps/ dizinindeki ge√ßici dosyalarƒ± temizler"""
    apps_dir = Path("apps")
    if not apps_dir.exists():
        return [], 0
    
    cleaned_files = []
    total_size = 0
    
    # Her uygulama dizininde temizlik
    for app_dir in apps_dir.iterdir():
        if app_dir.is_dir():
            # .zip dosyalarƒ±nƒ± temizle
            for zip_file in app_dir.glob("*.zip"):
                try:
                    file_size = zip_file.stat().st_size
                    zip_file.unlink()
                    cleaned_files.append(str(zip_file))
                    total_size += file_size
                except Exception as e:
                    print(f"‚ö†Ô∏è  {zip_file} silinemedi: {e}")
            
            # .old dosyalarƒ±nƒ± temizle
            for old_file in app_dir.glob("*.old"):
                try:
                    file_size = old_file.stat().st_size
                    old_file.unlink()
                    cleaned_files.append(str(old_file))
                    total_size += file_size
                except Exception as e:
                    print(f"‚ö†Ô∏è  {old_file} silinemedi: {e}")
    
    return cleaned_files, total_size

def clean_clapp_config():
    """~/.clapp dizinindeki ge√ßici dosyalarƒ± temizler"""
    home = Path.home()
    clapp_dir = home / ".clapp"
    
    if not clapp_dir.exists():
        return [], 0
    
    cleaned_files = []
    total_size = 0
    
    # temp dizini
    temp_dir = clapp_dir / "temp"
    if temp_dir.exists():
        try:
            dir_size = sum(f.stat().st_size for f in temp_dir.rglob("*") if f.is_file())
            shutil.rmtree(temp_dir)
            cleaned_files.append(str(temp_dir))
            total_size += dir_size
        except Exception as e:
            print(f"‚ö†Ô∏è  {temp_dir} silinemedi: {e}")
    
    # logs dizini
    logs_dir = clapp_dir / "logs"
    if logs_dir.exists():
        try:
            # Sadece .log dosyalarƒ±nƒ± sil, dizini koru
            for log_file in logs_dir.glob("*.log"):
                file_size = log_file.stat().st_size
                log_file.unlink()
                cleaned_files.append(str(log_file))
                total_size += file_size
        except Exception as e:
            print(f"‚ö†Ô∏è  Log dosyalarƒ± silinemedi: {e}")
    
    return cleaned_files, total_size

def run_clean(dry_run=False):
    """Temizleme i≈ülemini √ßalƒ±≈ütƒ±rƒ±r"""
    print("üßπ clapp Temizleme Aracƒ±")
    print("=" * 50)
    
    if dry_run:
        print("üîç Kuru √ßalƒ±≈ütƒ±rma modu - Dosyalar silinmeyecek")
        print()
    
    total_cleaned = 0
    total_size = 0
    
    # 1. Ge√ßici dosyalarƒ± temizle
    print("üóëÔ∏è  Ge√ßici dosyalar temizleniyor...")
    temp_files, temp_size = clean_temp_files()
    if temp_files:
        print(f"   ‚úÖ {len(temp_files)} ge√ßici dosya temizlendi")
        total_cleaned += len(temp_files)
        total_size += temp_size
    else:
        print("   ‚úÖ Ge√ßici dosya bulunamadƒ±")
    
    # 2. apps/ dizinini temizle
    print("üì¶ apps/ dizini temizleniyor...")
    apps_files, apps_size = clean_apps_directory()
    if apps_files:
        print(f"   ‚úÖ {len(apps_files)} dosya temizlendi")
        total_cleaned += len(apps_files)
        total_size += apps_size
    else:
        print("   ‚úÖ Temizlenecek dosya bulunamadƒ±")
    
    # 3. ~/.clapp dizinini temizle
    print("üè† ~/.clapp dizini temizleniyor...")
    config_files, config_size = clean_clapp_config()
    if config_files:
        print(f"   ‚úÖ {len(config_files)} √∂ƒüe temizlendi")
        total_cleaned += len(config_files)
        total_size += config_size
    else:
        print("   ‚úÖ Temizlenecek dosya bulunamadƒ±")
    
    # √ñzet
    print("\n" + "=" * 50)
    print("üìä Temizleme √ñzeti:")
    print(f"üóëÔ∏è  Toplam temizlenen: {total_cleaned} √∂ƒüe")
    print(f"üíæ Kazanƒ±lan alan: {format_size(total_size)}")
    
    if total_cleaned > 0:
        print("\n‚ú® Temizlik tamamlandƒ±!")
        
        # Detaylƒ± liste (ilk 10 dosya)
        all_files = temp_files + apps_files + config_files
        if len(all_files) > 0:
            print("\nüìã Temizlenen dosyalar:")
            for i, file_path in enumerate(all_files[:10]):
                print(f"   ‚Ä¢ {file_path}")
            
            if len(all_files) > 10:
                print(f"   ... ve {len(all_files) - 10} dosya daha")
    else:
        print("\nüéâ Sistem zaten temiz!")
        print("Temizlenecek dosya bulunamadƒ±.")
    
    return total_cleaned > 0

if __name__ == "__main__":
    import sys
    
    dry_run = "--dry-run" in sys.argv
    run_clean(dry_run) 