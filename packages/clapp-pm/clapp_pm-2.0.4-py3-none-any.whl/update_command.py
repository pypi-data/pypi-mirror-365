#!/usr/bin/env python3
"""
update_command.py - clapp Update Command

Bu mod√ºl kullanƒ±cƒ±larƒ±n y√ºkl√º uygulamalarƒ±nƒ± g√ºncellemelerini saƒülar.
"""

import os
import json
import shutil
import tempfile
import urllib.request
import zipfile
from typing import Tuple, Optional, Dict, Any
from progress_utils import download_with_progress, extract_with_progress, show_success_message, show_error_message, show_info_message, show_warning_message

def load_index() -> Tuple[bool, Dict[str, Any], str]:
    """
    GitHub'dan index.json'u y√ºkler
    
    Returns:
        (success, index_data, error_message)
    """
    try:
        index_url = "https://raw.githubusercontent.com/mburakmmm/clapp-packages/main/index.json"
        show_info_message("üîÑ GitHub'dan index.json indiriliyor...")
        
        with urllib.request.urlopen(index_url, timeout=10) as response:
            index_data = json.loads(response.read().decode('utf-8'))
        
        return True, index_data, ""
    except urllib.error.URLError as e:
        return False, {}, f"Network hatasƒ±: {e}"
    except Exception as e:
        return False, {}, f"Index y√ºkleme hatasƒ±: {e}"

def get_installed_apps() -> Dict[str, Dict[str, Any]]:
    """
    Yerel olarak y√ºkl√º uygulamalarƒ± listeler
    
    Returns:
        Dict[app_name, app_info]
    """
    installed_apps = {}
    apps_dir = os.path.expanduser("~/.clapp/apps")
    
    if not os.path.exists(apps_dir):
        return installed_apps
    
    for app_name in os.listdir(apps_dir):
        app_path = os.path.join(apps_dir, app_name)
        if os.path.isdir(app_path):
            manifest_path = os.path.join(app_path, "manifest.json")
            if os.path.exists(manifest_path):
                try:
                    with open(manifest_path, 'r', encoding='utf-8') as f:
                        manifest = json.load(f)
                    installed_apps[app_name] = {
                        'version': manifest.get('version', 'unknown'),
                        'path': app_path,
                        'manifest': manifest
                    }
                except:
                    continue
    
    return installed_apps

def check_for_updates(app_name: str, current_version: str, index_data: Dict[str, Any]) -> Optional[str]:
    """
    Uygulama i√ßin g√ºncelleme kontrol eder
    
    Args:
        app_name: Uygulama adƒ±
        current_version: Mevcut s√ºr√ºm
        index_data: Index verisi (liste formatƒ±nda)
        
    Returns:
        En son s√ºr√ºm (g√ºncelleme varsa) veya None
    """
    # Index verisi liste formatƒ±nda, uygulamayƒ± ara
    app_versions = []
    for app in index_data:
        if app['name'] == app_name:
            app_versions.append(app['version'])
    
    if not app_versions:
        return None
    
    # En son s√ºr√ºm√º bul
    latest_version = None
    for version in app_versions:
        if latest_version is None or version > latest_version:
            latest_version = version
    
    if latest_version and latest_version > current_version:
        return latest_version
    
    return None

def download_and_install_update(app_name: str, version: str, index_data: Dict[str, Any]) -> Tuple[bool, str]:
    """
    Uygulama g√ºncellemesini indirir ve y√ºkler
    
    Args:
        app_name: Uygulama adƒ±
        version: Y√ºklenecek s√ºr√ºm
        index_data: Index verisi (liste formatƒ±nda)
        
    Returns:
        (success, message)
    """
    try:
        # Index verisinden uygulama bilgilerini bul
        app_info = None
        for app in index_data:
            if app['name'] == app_name and app['version'] == version:
                app_info = app
                break
        
        if not app_info:
            return False, f"Uygulama bilgisi bulunamadƒ±: {app_name} v{version}"
        
        repo_url = app_info['repo_url']
        subdir = app_info['subdir']
        
        # GitHub'dan zip dosyasƒ±nƒ± indir
        zip_url = f"{repo_url}/archive/refs/heads/main.zip"
        show_info_message(f"üì¶ {app_name} v{version} indiriliyor...")
        
        with tempfile.NamedTemporaryFile(suffix='.zip', delete=False) as temp_file:
            temp_zip_path = temp_file.name
        
        # ƒ∞ndirme i≈ülemi
        download_with_progress(zip_url, temp_zip_path, f"üì¶ {app_name} indiriliyor")
        
        # Ge√ßici dizin olu≈ütur
        with tempfile.TemporaryDirectory() as temp_dir:
            # Zip dosyasƒ±nƒ± √ßƒ±kar
            extract_with_progress(temp_zip_path, temp_dir, f"üì¶ {app_name} √ßƒ±karƒ±lƒ±yor")
            
            # Uygulama dizinini bul
            extracted_dir = os.path.join(temp_dir, "clapp-packages-main", subdir)
            if not os.path.exists(extracted_dir):
                return False, f"Uygulama dizini bulunamadƒ±: {subdir}"
            
            # Y√ºkl√º uygulamayƒ± yedekle
            apps_dir = os.path.expanduser("~/.clapp/apps")
            app_path = os.path.join(apps_dir, app_name)
            backup_path = os.path.join(apps_dir, f"{app_name}_backup")
            
            if os.path.exists(app_path):
                if os.path.exists(backup_path):
                    shutil.rmtree(backup_path)
                shutil.move(app_path, backup_path)
            
            # Yeni s√ºr√ºm√º y√ºkle
            shutil.copytree(extracted_dir, app_path)
            
            # Eski yedekleri temizle
            if os.path.exists(backup_path):
                shutil.rmtree(backup_path)
        
        # Ge√ßici zip dosyasƒ±nƒ± sil
        os.unlink(temp_zip_path)
        
        return True, f"{app_name} v{version} ba≈üarƒ±yla g√ºncellendi!"
        
    except Exception as e:
        return False, f"G√ºncelleme hatasƒ±: {e}"

def update_app(app_name: str) -> Tuple[bool, str]:
    """
    Belirtilen uygulamayƒ± g√ºnceller
    
    Args:
        app_name: G√ºncellenecek uygulama adƒ±
        
    Returns:
        (success, message)
    """
    # Y√ºkl√º uygulamalarƒ± kontrol et
    installed_apps = get_installed_apps()
    if app_name not in installed_apps:
        return False, f"'{app_name}' y√ºkl√º deƒüil"
    
    current_version = installed_apps[app_name]['version']
    show_info_message(f"üîç {app_name} (v{current_version}) g√ºncellemeleri kontrol ediliyor...")
    
    # Index'i y√ºkle
    success, index_data, error = load_index()
    if not success:
        return False, error
    
    # G√ºncelleme kontrol et
    latest_version = check_for_updates(app_name, current_version, index_data)
    if not latest_version:
        return True, f"{app_name} zaten en son s√ºr√ºmde (v{current_version})"
    
    show_info_message(f"üîÑ {app_name} v{current_version} ‚Üí v{latest_version} g√ºncelleniyor...")
    
    # G√ºncellemeyi indir ve y√ºkle
    success, message = download_and_install_update(app_name, latest_version, index_data)
    if success:
        show_success_message(message)
    else:
        show_error_message(message)
    
    return success, message

def update_all_apps() -> Tuple[bool, str]:
    """
    T√ºm y√ºkl√º uygulamalarƒ± g√ºnceller
    
    Returns:
        (success, message)
    """
    installed_apps = get_installed_apps()
    if not installed_apps:
        return True, "Y√ºkl√º uygulama bulunamadƒ±"
    
    show_info_message(f"üîç {len(installed_apps)} uygulama i√ßin g√ºncellemeler kontrol ediliyor...")
    
    # Index'i y√ºkle
    success, index_data, error = load_index()
    if not success:
        return False, error
    
    updated_count = 0
    errors = []
    
    for app_name in installed_apps.keys():
        current_version = installed_apps[app_name]['version']
        latest_version = check_for_updates(app_name, current_version, index_data)
        
        if latest_version:
            show_info_message(f"üîÑ {app_name} v{current_version} ‚Üí v{latest_version} g√ºncelleniyor...")
            success, message = download_and_install_update(app_name, latest_version, index_data)
            if success:
                updated_count += 1
                show_success_message(f"‚úÖ {app_name} g√ºncellendi")
            else:
                errors.append(f"{app_name}: {message}")
        else:
            show_info_message(f"‚úÖ {app_name} zaten g√ºncel (v{current_version})")
    
    # Sonu√ß raporu
    if updated_count > 0:
        message = f"‚úÖ {updated_count} uygulama g√ºncellendi"
        if errors:
            message += f"\n‚ùå Hatalar: {', '.join(errors)}"
        return True, message
    else:
        return True, "T√ºm uygulamalar zaten g√ºncel"

def handle_update_command(args):
    """
    Update komutunu i≈üler
    
    Args:
        args: Argparse arguments
    """
    if args.app:
        # Belirli uygulamayƒ± g√ºncelle
        success, message = update_app(args.app)
        if not success:
            show_error_message(message)
            return False
    else:
        # T√ºm uygulamalarƒ± g√ºncelle
        success, message = update_all_apps()
        if not success:
            show_error_message(message)
            return False
    
    return True 