"""
PyCloud OS Kernel
Sistem √ßekirdeƒüi - zaman y√∂netimi, sistem olaylarƒ± ve ya≈üam d√∂ng√ºs√º kontrol√º
"""

import sys
import time
import logging
import threading
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Callable, Any
import os

class PyCloudKernel:
    """PyCloud OS ana √ßekirdek sƒ±nƒ±fƒ±"""
    
    def __init__(self, debug_mode: bool = False, safe_mode: bool = False):
        self.debug_mode = debug_mode
        self.safe_mode = safe_mode
        self.logger = logging.getLogger("Kernel")
        self.start_time = None
        self.shutdown_hooks: List[Callable] = []
        self.modules: Dict[str, Any] = {}
        self.running = False
        self.scheduler_thread = None
        self.scheduled_tasks: List[Dict] = []
        self.log_entries: List[Dict] = []  # Log kayƒ±tlarƒ± i√ßin
        
        # Debug modunda daha detaylƒ± loglama
        if self.debug_mode:
            self.logger.setLevel(logging.DEBUG)
            self.logger.debug("üêõ Debug modu aktif")
        
        # G√ºvenli modda sadece temel mod√ºller y√ºklenir
        if self.safe_mode:
            self.logger.info("üõ°Ô∏è G√ºvenli mod aktif")
        
        # Sistem dizinlerini olu≈ütur
        self._create_system_directories()
        
        # Kernel journal'ƒ± ba≈ülat
        self.journal = []
        self._log_event("KERNEL_INIT", f"PyCloud OS Kernel initialized (debug={debug_mode}, safe={safe_mode})")
    
    def _create_system_directories(self):
        """Sistem dizinlerini olu≈ütur"""
        directories = [
            "system/config",
            "system/themes", 
            "system/icons",
            "system/wallpapers",
            "apps",
            "users",
            "temp",
            "logs"
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
    
    def _log_event(self, event_type: str, message: str, data: Dict = None):
        """Kernel journal'a olay kaydet"""
        event = {
            "timestamp": datetime.now().isoformat(),
            "type": event_type,
            "message": message,
            "data": data or {}
        }
        self.journal.append(event)
        self.logger.info(f"[{event_type}] {message}")
    
    def start(self) -> bool:
        """Kernel'i ba≈ülat - main.py'den √ßaƒürƒ±lƒ±r"""
        try:
            self.boot()
            return True
        except Exception as e:
            self.logger.error(f"Kernel ba≈ülatma hatasƒ±: {e}")
            return False
    
    def register_module(self, name: str, module: Any):
        """Sistem mod√ºl√º kaydet"""
        self.modules[name] = module
        self._log_event("MODULE_REGISTER", f"Module {name} registered")
    
    def get_module(self, name: str):
        """Sistem mod√ºl√º al"""
        return self.modules.get(name)
    
    def add_shutdown_hook(self, hook: Callable):
        """Kapatma √∂ncesi √ßalƒ±≈üacak fonksiyon ekle"""
        self.shutdown_hooks.append(hook)
    
    def schedule_task(self, func: Callable, delay: float, repeat: bool = False):
        """Zamanlanmƒ±≈ü g√∂rev ekle"""
        task = {
            "func": func,
            "next_run": time.time() + delay,
            "delay": delay,
            "repeat": repeat
        }
        self.scheduled_tasks.append(task)
    
    def _scheduler_loop(self):
        """Zamanlayƒ±cƒ± d√∂ng√ºs√º"""
        while self.running:
            current_time = time.time()
            
            # √áalƒ±≈ümasƒ± gereken g√∂revleri bul
            tasks_to_run = []
            for task in self.scheduled_tasks[:]:
                if current_time >= task["next_run"]:
                    tasks_to_run.append(task)
                    
                    if task["repeat"]:
                        task["next_run"] = current_time + task["delay"]
                    else:
                        self.scheduled_tasks.remove(task)
            
            # G√∂revleri √ßalƒ±≈ütƒ±r
            for task in tasks_to_run:
                try:
                    task["func"]()
                except Exception as e:
                    self.logger.error(f"Scheduled task error: {e}")
            
            time.sleep(0.1)  # 100ms bekle
    
    def boot(self):
        """Sistem ba≈ülatma"""
        self.start_time = datetime.now()
        self._log_event("SYSTEM_BOOT", "PyCloud OS booting...")
        
        try:
            # Core mod√ºlleri y√ºkle
            self._load_core_modules()
            
            # Kullanƒ±cƒ± sistemi ba≈ülat
            self._init_user_system()
            
            # Dosya sistemi ba≈ülat
            self._init_filesystem()
            
            # Aray√ºz sistemi ba≈ülat
            self._init_ui_system()
            
            self.running = True
            
            # Zamanlayƒ±cƒ± thread'ini ba≈ülat
            self.scheduler_thread = threading.Thread(target=self._scheduler_loop, daemon=True)
            self.scheduler_thread.start()
            
            self._log_event("SYSTEM_READY", "PyCloud OS boot completed")
            
        except Exception as e:
            self._log_event("BOOT_ERROR", f"Boot failed: {e}")
            raise
    
    def _load_core_modules(self):
        """Core mod√ºlleri y√ºkle"""
        try:
            # Config mod√ºl√º
            from core.config import init_config
            self.config = init_config(self)
            self.modules['config'] = self.config
            self.log("Config mod√ºl√º y√ºklendi", "INFO")
            
            # Users mod√ºl√º
            from core.users import init_users
            self.users = init_users(self)
            self.modules['users'] = self.users
            self.log("Users mod√ºl√º y√ºklendi", "INFO")
            
            # FS mod√ºl√º
            from core.fs import init_fs
            self.fs = init_fs(self)
            self.modules['fs'] = self.fs
            self.log("FS mod√ºl√º y√ºklendi", "INFO")
            
            # VFS mod√ºl√ºn√º FS'den al ve ayrƒ± olarak register et
            try:
                if hasattr(self.fs, 'vfs') and self.fs.vfs:
                    self.modules['vfs'] = self.fs.vfs
                    self.log("VFS mod√ºl√º FS'den alƒ±ndƒ±", "INFO")
                else:
                    self.log("VFS mod√ºl√º FS'de bulunamadƒ±", "WARNING")
                    # VFS'i manuel olarak y√ºklemeye √ßalƒ±≈ü
                    from core.fs.vfs import PyCloudVFS
                    vfs_instance = PyCloudVFS(self)
                    self.modules['vfs'] = vfs_instance
                    # FS'e de referans ver
                    if hasattr(self.fs, 'vfs'):
                        self.fs.vfs = vfs_instance
                    self.log("VFS mod√ºl√º manuel olarak y√ºklendi", "INFO")
            except Exception as vfs_error:
                self.log(f"VFS mod√ºl√º y√ºkleme hatasƒ±: {vfs_error}", "ERROR")
            
            # Process mod√ºl√º
            from core.process import init_process
            self.process = init_process(self)
            self.modules['process'] = self.process
            self.log("Process mod√ºl√º y√ºklendi", "INFO")
            
            # Thread mod√ºl√º
            from core.thread import init_thread_manager
            self.thread = init_thread_manager(self)
            self.modules['thread'] = self.thread
            self.log("Thread mod√ºl√º y√ºklendi", "INFO")
            
            # Memory mod√ºl√º
            from core.memory import init_memory
            self.memory = init_memory(self)
            self.modules['memory'] = self.memory
            self.log("Memory mod√ºl√º y√ºklendi", "INFO")
            
            # Security mod√ºl√º
            from core.security import init_security
            self.security = init_security(self)
            self.modules['security'] = self.security
            self.log("Security mod√ºl√º y√ºklendi", "INFO")
            
            # Security mod√ºl√ºnde uygulama g√ºvenlik profillerini kur
            if hasattr(self.security, 'setup_app_security_profiles'):
                self.security.setup_app_security_profiles()
                self.log("Uygulama g√ºvenlik profilleri kuruldu", "INFO")
            
            # Services mod√ºl√º
            from core.services import init_services
            self.services = init_services(self)
            self.modules['services'] = self.services
            self.log("Services mod√ºl√º y√ºklendi", "INFO")
            
            # Events mod√ºl√º
            from core.events import init_events
            self.events = init_events(self)
            self.modules['events'] = self.events
            self.log("Events mod√ºl√º y√ºklendi", "INFO")
            
            # Locale mod√ºl√º
            from core.locale import init_locale_manager
            self.locale = init_locale_manager(self)
            self.modules['locale'] = self.locale
            self.log("Locale mod√ºl√º y√ºklendi", "INFO")
            
            # Notify mod√ºl√º
            from core.notify import init_notifications
            self.notify = init_notifications(self)
            self.modules['notify'] = self.notify
            self.log("Notify mod√ºl√º y√ºklendi", "INFO")
            
            # Bridge mod√ºl√º (AppKit i√ßin gerekli)
            try:
                from core.bridge import init_bridge_manager
                self.bridge = init_bridge_manager(self)
                self.modules['bridge'] = self.bridge
                self.log("Bridge mod√ºl√º y√ºklendi", "INFO")
            except Exception as e:
                self.log(f"Bridge mod√ºl√º y√ºklenemedi: {e}", "WARNING")
                self.bridge = None
            
            # AppKit mod√ºl√º
            from core.appkit import init_appkit
            self.appkit = init_appkit(self)
            self.modules['appkit'] = self.appkit
            self.log("AppKit mod√ºl√º y√ºklendi", "INFO")
            
            # AppExplorer mod√ºl√º
            from core.appexplorer import init_app_explorer
            self.appexplorer = init_app_explorer(self)
            self.modules['appexplorer'] = self.appexplorer
            self.log("AppExplorer mod√ºl√º y√ºklendi", "INFO")
            
            # Python Environment Manager
            try:
                from core.pythonenv import init_python_env_manager
                # Ge√ßici olarak devre dƒ±≈üƒ± - hƒ±zlƒ± test i√ßin
                # self.pythonenv = init_python_env_manager(self)
                self.log("PythonEnv mod√ºl√º ge√ßici olarak devre dƒ±≈üƒ±", "WARNING")
            except Exception as e:
                self.log(f"PythonEnv mod√ºl√º y√ºklenemedi: {e}", "ERROR")
            
            # AppMon mod√ºl√º
            try:
                from core.appmon import init_appmon
                self.appmon = init_appmon(self)
                self.modules['appmon'] = self.appmon
                self.log("AppMon mod√ºl√º y√ºklendi", "INFO")
            except Exception as e:
                self.log(f"AppMon mod√ºl√º y√ºklenemedi: {e}", "WARNING")
                self.appmon = None
            
            # Launcher mod√ºl√º
            try:
                from core.launcher import init_launcher
                self.launcher = init_launcher(self)
                self.modules['launcher'] = self.launcher
                self.log("Launcher mod√ºl√º y√ºklendi", "INFO")
                
                # AppMon ile Launcher entegrasyonu
                if self.appmon and self.launcher:
                    self.launcher.set_appmon(self.appmon)
                    self.log("Launcher-AppMon entegrasyonu tamamlandƒ±", "INFO")
                    
            except Exception as e:
                self.log(f"Launcher mod√ºl√º y√ºklenemedi: {e}", "WARNING")
                self.launcher = None
            
            # Context Menu mod√ºl√º
            try:
                from rain.contextmenu import init_context_menu_manager
                self.contextmenu = init_context_menu_manager(self)
                self.modules['contextmenu'] = self.contextmenu
                self.log("Context Menu mod√ºl√º y√ºklendi", "INFO")
            except Exception as e:
                self.log(f"Context Menu mod√ºl√º y√ºklenemedi: {e}", "WARNING")
                self.contextmenu = None
            
        except Exception as e:
            self.log(f"Core mod√ºl y√ºkleme hatasƒ±: {e}", "ERROR")
            raise
    
    def _init_user_system(self):
        """Kullanƒ±cƒ± sistemi ba≈ülat"""
        self.logger.info("Initializing user system...")
        
        try:
            from core.users import UserManager
            user_manager = UserManager()
            self.register_module("users", user_manager)
            
            # Varsayƒ±lan kullanƒ±cƒ± olu≈ütur
            user_manager.create_default_user()
            
        except ImportError:
            self.logger.warning("User system not available")
    
    def _init_filesystem(self):
        """Dosya sistemi ba≈ülat"""
        self.logger.info("Initializing filesystem...")
        
        try:
            from core.fs import FileSystem
            fs = FileSystem()
            self.register_module("fs", fs)
            fs.initialize()
            
        except ImportError:
            self.logger.warning("Filesystem not available")
    
    def _init_ui_system(self):
        """Aray√ºz sistemi ba≈ülat"""
        self.logger.info("Initializing UI system...")
        
        try:
            from rain.ui import RainUI
            ui = RainUI(self)
            self.register_module("ui", ui)
            
            # UI ba≈ülatƒ±ldƒ±ktan sonra wallpaper manager'ƒ± y√ºkle
            try:
                from rain.wallpaper import init_wallpaper_manager
                self.wallpaper = init_wallpaper_manager(self)
                self.modules['wallpaper'] = self.wallpaper
                self.log("Wallpaper mod√ºl√º y√ºklendi", "INFO")
            except Exception as e:
                self.log(f"Wallpaper mod√ºl√º y√ºklenemedi: {e}", "WARNING")
                self.wallpaper = None
            
        except ImportError:
            self.logger.warning("UI system not available")
    
    def run(self):
        """Ana sistem d√∂ng√ºs√º"""
        if not self.running:
            raise RuntimeError("System not booted")
        
        self._log_event("SYSTEM_RUNNING", "PyCloud OS main loop started")
        
        try:
            # UI varsa GUI modunda √ßalƒ±≈ü
            ui = self.get_module("ui")
            if ui:
                return ui.run()
            else:
                # CLI modunda √ßalƒ±≈ü
                self._cli_mode()
                return 0
                
        except KeyboardInterrupt:
            self.logger.info("Shutdown requested by user")
            self.shutdown()
            return 0
        except Exception as e:
            self.logger.error(f"System error: {e}")
            self.shutdown()
            return 1
    
    def _cli_mode(self):
        """CLI modunda √ßalƒ±≈ü"""
        print("PyCloud OS CLI Mode")
        print("Type 'help' for commands, 'exit' to quit")
        
        while self.running:
            try:
                command = input("pycloud> ").strip()
                
                if command == "exit":
                    break
                elif command == "help":
                    print(self._get_help_text())
                elif command == "status":
                    uptime = datetime.now() - self.start_time
                    print(f"System uptime: {uptime}")
                    print(f"Loaded modules: {len(self.modules)}")
                elif command == "modules":
                    for name in self.modules:
                        print(f"  - {name}")
                elif command == "users":
                    user_manager = self.get_module("users")
                    if user_manager:
                        users = user_manager.list_users()
                        print(f"Users ({len(users)}):")
                        for user in users:
                            status = "active" if user.is_active else "inactive"
                            print(f"  - {user.username} ({user.display_name}) [{status}]")
                    else:
                        print("User manager not available")
                elif command == "apps":
                    app_explorer = self.get_module("appexplorer")
                    if app_explorer:
                        apps = app_explorer.get_installed_apps()
                        print(f"Installed apps ({len(apps)}):")
                        for app in apps:
                            print(f"  - {app['id']}: {app['name']} v{app['version']}")
                    else:
                        print("App explorer not available")
                elif command == "clapp":
                    try:
                        from clapp.core import get_clapp_manager
                        clapp_manager = get_clapp_manager()
                        if clapp_manager:
                            print("Clapp package manager available")
                            print("Use: clapp list, clapp install <package>, clapp remove <package>")
                        else:
                            print("Clapp manager not available")
                    except ImportError:
                        print("Clapp system not available")
                elif command == "python":
                    python_env = self.get_module("pythonenv")
                    if python_env:
                        info = python_env.get_system_info()
                        python_info = info.get('python_info', {})
                        print(f"Python version: {python_info.get('version', 'Unknown')}")
                        print(f"Python executable: {python_info.get('executable', 'Unknown')}")
                        print(f"Pip available: {python_info.get('pip_available', False)}")
                        print(f"Package count: {info.get('package_count', 0)}")
                    else:
                        print("Python environment manager not available")
                elif command == "packages":
                    python_env = self.get_module("pythonenv")
                    if python_env:
                        packages = python_env.get_package_list()
                        print(f"Python packages ({len(packages)}):")
                        for pkg in packages[:10]:  # ƒ∞lk 10 paket
                            print(f"  - {pkg['name']} v{pkg['version']}")
                        if len(packages) > 10:
                            print(f"  ... and {len(packages) - 10} more")
                    else:
                        print("Python environment manager not available")
                elif command == "widgets":
                    widget_manager = self.get_module("widgets")
                    if widget_manager:
                        widgets = widget_manager.list_widgets()
                        print(f"Active widgets ({len(widgets)}):")
                        for widget in widgets:
                            print(f"  - {widget['widget_id']}: {widget['title']} ({widget['widget_type']})")
                    else:
                        print("Widget manager not available")
                elif command == "themes":
                    theme_manager = self.get_module("theme")
                    if theme_manager:
                        themes = theme_manager.get_available_themes()
                        print(f"Available themes ({len(themes)}):")
                        for theme in themes:
                            current = " (current)" if theme['is_current'] else ""
                            print(f"  - {theme['name']}: {theme['display_name']}{current}")
                    else:
                        print("Theme manager not available")
                elif command == "contextmenu":
                    context_menu = self.get_module("contextmenu")
                    if context_menu:
                        print("Context menu manager available")
                        print("Context menu system provides right-click menus for desktop, files, and apps")
                    else:
                        print("Context menu manager not available")
                elif command == "wallpaper":
                    wallpaper_manager = self.get_module("wallpaper")
                    if wallpaper_manager:
                        wallpapers = wallpaper_manager.get_available_wallpapers()
                        print(f"Available wallpapers ({len(wallpapers)}):")
                        for wp in wallpapers[:5]:  # ƒ∞lk 5 duvar kaƒüƒ±dƒ±
                            print(f"  - {wp['name']} ({wp['type']}) - {wp['size'][0]}x{wp['size'][1]}")
                        if len(wallpapers) > 5:
                            print(f"  ... and {len(wallpapers) - 5} more")
                    else:
                        print("Wallpaper manager not available")
                elif command == "vfs":
                    vfs = self.get_module("vfs")
                    if vfs:
                        stats = vfs.get_security_stats()
                        print(f"VFS Status:")
                        print(f"  - Active: {stats.get('active', False)}")
                        print(f"  - Mount points: {len(stats.get('mount_points', []))}")
                        print(f"  - Registered apps: {len(stats.get('app_profiles', {}))}")
                        print(f"  - Security checks: {stats.get('security_checks', 0)}")
                        print(f"  - Access denials: {stats.get('access_denials', 0)}")
                    else:
                        print("VFS not available")
                elif command == "filepicker":
                    try:
                        from cloud.filepicker import FilePickerWindow
                        print("FilePicker module available")
                        print("Features: VFS integration, security filters, app-specific permissions")
                    except ImportError:
                        print("FilePicker module not available")
                elif command:
                    print(f"Unknown command: {command}")
                    print("Available commands: status, modules, fs, memory, threads, processes, users, apps, services, events, config, logs, shutdown, restart, uptime, clapp, python, packages, widgets, themes, contextmenu, wallpaper, vfs, filepicker")
                    
            except EOFError:
                break
    
    def shutdown(self):
        """Sistemi kapat"""
        if not self.running:
            return
        
        self._log_event("SYSTEM_SHUTDOWN", "PyCloud OS shutting down...")
        self.running = False
        
        # Bridge IPC server'ƒ± kapat
        try:
            from core.bridge import _ipc_server
            if _ipc_server:
                _ipc_server.stop()
        except Exception as e:
            self.logger.warning(f"Bridge IPC server shutdown error: {e}")
        
        # Shutdown hook'larƒ±nƒ± √ßalƒ±≈ütƒ±r
        for hook in self.shutdown_hooks:
            try:
                hook()
            except Exception as e:
                self.logger.error(f"Shutdown hook error: {e}")
        
        # Mod√ºlleri kapat
        for name, module in self.modules.items():
            try:
                if hasattr(module, 'shutdown'):
                    module.shutdown()
                    self.logger.info(f"Module {name} shutdown completed")
            except Exception as e:
                self.logger.error(f"Module {name} shutdown error: {e}")
        
        self._log_event("SYSTEM_SHUTDOWN_COMPLETE", "PyCloud OS shutdown completed")
    
    def restart(self):
        """Sistem yeniden ba≈ülatma"""
        self._log_event("SYSTEM_RESTART", "PyCloud OS restarting...")
        self.shutdown()
        # Ana process'i yeniden ba≈ülatmak i√ßin exit code 2 d√∂nd√ºr
        sys.exit(2)
    
    def get_uptime(self) -> float:
        """Sistem √ßalƒ±≈üma s√ºresini saniye olarak d√∂nd√ºr"""
        if self.start_time:
            return (datetime.now() - self.start_time).total_seconds()
        return 0
    
    def get_system_info(self) -> Dict:
        """Sistem bilgilerini d√∂nd√ºr"""
        return {
            "version": "0.9.0-dev",
            "start_time": self.start_time.isoformat() if self.start_time else None,
            "uptime": self.get_uptime(),
            "modules": list(self.modules.keys()),
            "running": self.running
        }
    
    def _handle_cli_command(self, command: str, args: List[str]) -> str:
        """CLI komutunu i≈üle"""
        try:
            if command == "help":
                return self._get_help_text()
            
            elif command == "status":
                return self._get_system_status()
            
            elif command == "modules":
                return self._list_modules()
            
            elif command == "logs":
                count = int(args[0]) if args and args[0].isdigit() else 10
                return self._get_recent_logs(count)
            
            elif command == "shutdown":
                self.shutdown()
                return "Sistem kapatƒ±lƒ±yor..."
            
            elif command == "restart":
                self.restart()
                return "Sistem yeniden ba≈ülatƒ±lƒ±yor..."
            
            elif command == "uptime":
                uptime = time.time() - self.start_time
                hours = int(uptime // 3600)
                minutes = int((uptime % 3600) // 60)
                seconds = int(uptime % 60)
                return f"Sistem √ßalƒ±≈üma s√ºresi: {hours}s {minutes}d {seconds}s"
            
            elif command == "memory":
                if self.memory:
                    stats = self.memory.get_stats()
                    return f"Bellek kullanƒ±mƒ±: {stats.get('used_percent', 0):.1f}% ({stats.get('used_mb', 0):.1f}MB / {stats.get('total_mb', 0):.1f}MB)"
                return "Memory mod√ºl√º mevcut deƒüil"
            
            elif command == "threads":
                if self.thread:
                    stats = self.thread.get_stats()
                    return f"Thread'ler: {stats.get('active_threads', 0)} aktif, {stats.get('total_threads', 0)} toplam"
                return "Thread mod√ºl√º mevcut deƒüil"
            
            elif command == "processes":
                if self.process:
                    stats = self.process.get_stats()
                    return f"Process'ler: {stats.get('active_processes', 0)} aktif"
                return "Process mod√ºl√º mevcut deƒüil"
            
            elif command == "users":
                if self.users:
                    users = self.users.get_all_users()
                    user_list = [f"- {user['username']} ({user['role']})" for user in users]
                    return f"Kullanƒ±cƒ±lar:\n" + "\n".join(user_list)
                return "Users mod√ºl√º mevcut deƒüil"
            
            elif command == "apps":
                if self.appexplorer:
                    apps = self.appexplorer.get_all_apps()
                    app_list = [f"- {app['name']} v{app['version']} ({app['app_id']})" for app in apps]
                    return f"Kurulu uygulamalar ({len(apps)}):\n" + "\n".join(app_list)
                return "AppExplorer mod√ºl√º mevcut deƒüil"
            
            elif command == "python":
                if self.pythonenv:
                    info = self.pythonenv.get_python_info()
                    return f"Python: {info.version} ({info.executable})\nPip: {'Mevcut' if info.pip_available else 'Mevcut deƒüil'}"
                return "PythonEnv mod√ºl√º mevcut deƒüil"
            
            elif command == "packages":
                if self.pythonenv:
                    packages = self.pythonenv.get_installed_packages()
                    if packages:
                        pkg_list = [f"- {pkg.name} {pkg.version}" for pkg in packages[:10]]
                        return f"Python paketleri ({len(packages)} toplam, ilk 10):\n" + "\n".join(pkg_list)
                    return "Hi√ß Python paketi bulunamadƒ±"
                return "PythonEnv mod√ºl√º mevcut deƒüil"
            
            elif command == "appmon":
                if self.appmon:
                    stats = self.appmon.get_stats()
                    return f"AppMon: {stats['running_apps']} √ßalƒ±≈üan, {stats['monitored_apps']} izlenen uygulama"
                return "AppMon mod√ºl√º mevcut deƒüil"
            
            elif command == "launcher":
                if self.launcher:
                    stats = self.launcher.get_stats()
                    return f"Launcher: {stats['running_apps']} √ßalƒ±≈üan, {stats['queue_size']} kuyrukta"
                return "Launcher mod√ºl√º mevcut deƒüil"
            
            elif command == "widgets":
                # Widget sistemi i√ßin placeholder
                return "Widget sistemi hen√ºz aktif deƒüil"
            
            elif command == "themes":
                # Tema sistemi i√ßin placeholder
                return "Tema sistemi hen√ºz aktif deƒüil"
            
            elif command == "contextmenu":
                # Context menu sistemi i√ßin placeholder
                return "Context menu sistemi hen√ºz aktif deƒüil"
            
            elif command == "wallpaper":
                # Wallpaper sistemi i√ßin placeholder
                return "Wallpaper sistemi hen√ºz aktif deƒüil"
            
            elif command == "clapp":
                # Clapp sistemi i√ßin placeholder
                return "Clapp sistemi hen√ºz aktif deƒüil"
            
            elif command == "vfs":
                vfs = self.get_module("vfs")
                if vfs:
                    stats = vfs.get_security_stats()
                    return f"VFS Status:\n  - Active: {stats.get('active', False)}\n  - Mount points: {len(stats.get('mount_points', []))}\n  - Registered apps: {len(stats.get('app_profiles', {}))}\n  - Security checks: {stats.get('security_checks', 0)}\n  - Access denials: {stats.get('access_denials', 0)}"
                return "VFS not available"
            
            elif command == "filepicker":
                try:
                    from cloud.filepicker import FilePickerWindow
                    return "FilePicker module available\nFeatures: VFS integration, security filters, app-specific permissions"
                except ImportError:
                    return "FilePicker module not available"
            
            else:
                return f"Bilinmeyen komut: {command}. 'help' yazƒ±n."
                
        except Exception as e:
            return f"Komut hatasƒ±: {str(e)}"
    
    def _get_help_text(self) -> str:
        """Yardƒ±m metnini d√∂nd√ºr"""
        return """
PyCloud OS Kernel CLI Komutlarƒ±:

Sistem Komutlarƒ±:
  help          - Bu yardƒ±m metnini g√∂ster
  status        - Sistem durumunu g√∂ster
  modules       - Y√ºkl√º mod√ºlleri listele
  uptime        - Sistem √ßalƒ±≈üma s√ºresini g√∂ster
  shutdown      - Sistemi kapat
  restart       - Sistemi yeniden ba≈ülat

Kaynak ƒ∞zleme:
  memory        - Bellek kullanƒ±mƒ±nƒ± g√∂ster
  threads       - Thread istatistiklerini g√∂ster
  processes     - Process istatistiklerini g√∂ster

Kullanƒ±cƒ± ve Uygulamalar:
  users         - Kullanƒ±cƒ±larƒ± listele
  apps          - Kurulu uygulamalarƒ± listele
  appmon        - Uygulama izleme durumu
  launcher      - Uygulama ba≈ülatƒ±cƒ± durumu

Python Ortamƒ±:
  python        - Python bilgilerini g√∂ster
  packages      - Python paketlerini listele

UI Sistemleri:
  widgets       - Widget durumu
  themes        - Tema durumu
  contextmenu   - Context menu durumu
  wallpaper     - Wallpaper durumu

Paket Y√∂netimi:
  clapp         - Clapp durumu

Log Sistemi:
  logs [sayƒ±]   - Son log kayƒ±tlarƒ±nƒ± g√∂ster (varsayƒ±lan: 10)

√ñrnek: 'status' veya 'logs 20'
        """
    
    def _get_system_status(self) -> str:
        """Sistem durumunu d√∂nd√ºr"""
        uptime = time.time() - self.start_time
        hours = int(uptime // 3600)
        minutes = int((uptime % 3600) // 60)
        
        status = f"""
PyCloud OS Sistem Durumu:
  Durum: {'√áalƒ±≈üƒ±yor' if self.running else 'Durmu≈ü'}
  √áalƒ±≈üma S√ºresi: {hours}s {minutes}d
  Ba≈ülangƒ±√ß: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(self.start_time))}
  Y√ºkl√º Mod√ºller: {len(self.modules)}
  PID: {os.getpid()}
        """
        
        # Kaynak kullanƒ±mƒ±
        if self.memory:
            mem_stats = self.memory.get_stats()
            status += f"  Bellek: {mem_stats.get('used_percent', 0):.1f}%\n"
        
        if self.thread:
            thread_stats = self.thread.get_stats()
            status += f"  Thread'ler: {thread_stats.get('active_threads', 0)}\n"
        
        if self.appmon:
            app_stats = self.appmon.get_stats()
            status += f"  √áalƒ±≈üan Uygulamalar: {app_stats.get('running_apps', 0)}\n"
        
        return status.strip()
    
    def _list_modules(self) -> str:
        """Y√ºkl√º mod√ºlleri listele"""
        if not self.modules:
            return "Hi√ß mod√ºl y√ºkl√º deƒüil"
        
        module_list = []
        for name, module in self.modules.items():
            module_type = type(module).__name__
            status = "‚úì Aktif" if hasattr(module, 'is_active') and module.is_active else "‚úì Y√ºkl√º"
            module_list.append(f"  {name}: {module_type} - {status}")
        
        return f"Y√ºkl√º Mod√ºller ({len(self.modules)}):\n" + "\n".join(module_list)
    
    def _get_recent_logs(self, count: int = 10) -> str:
        """Son log kayƒ±tlarƒ±nƒ± d√∂nd√ºr"""
        if not hasattr(self, 'log_entries') or not self.log_entries:
            return "Hi√ß log kaydƒ± bulunamadƒ±"
        
        recent_logs = self.log_entries[-count:]
        log_lines = []
        
        for entry in recent_logs:
            timestamp = time.strftime('%H:%M:%S', time.localtime(entry['timestamp']))
            level = entry['level']
            message = entry['message']
            log_lines.append(f"[{timestamp}] {level}: {message}")
        
        return f"Son {len(recent_logs)} log kaydƒ±:\n" + "\n".join(log_lines)
    
    def log(self, message: str, level: str = "INFO"):
        """Log mesajƒ± kaydet"""
        timestamp = time.time()
        log_entry = {
            'timestamp': timestamp,
            'level': level,
            'message': message
        }
        self.log_entries.append(log_entry)
        
        # Logger'a da g√∂nder
        if level == "ERROR":
            self.logger.error(message)
        elif level == "WARNING":
            self.logger.warning(message)
        elif level == "DEBUG":
            self.logger.debug(message)
        else:
            self.logger.info(message) 