"""Web search tools for {{ project_name }}."""

from typing import List, Dict, Any, Optional
import logging
import requests
from langchain.tools import BaseTool
from langchain_community.tools.tavily_search import TavilySearchResults
from pydantic import BaseModel, Field

from ..config import settings

logger = logging.getLogger(__name__)

class SearchResult(BaseModel):
    """Search result model."""
    title: str
    url: str
    snippet: str
    score: Optional[float] = None

class WebSearchInput(BaseModel):
    """Input schema for web search."""
    query: str = Field(description="Search query")
    max_results: int = Field(default=5, description="Maximum number of results")

def search_web(query: str, max_results: int = 5) -> List[Dict[str, Any]]:
    """Search the web using available search providers."""
    
    results = []
    
    # Try Tavily first if API key is available
    if settings.TAVILY_API_KEY:
        try:
            tavily_search = TavilySearchResults(
                api_key=settings.TAVILY_API_KEY,
                max_results=max_results
            )
            tavily_results = tavily_search.run(query)
            
            # Convert to standard format
            for result in tavily_results:
                if isinstance(result, dict):
                    results.append({
                        "title": result.get("title", ""),
                        "url": result.get("url", ""),
                        "snippet": result.get("content", ""),
                        "source": "tavily"
                    })
            
            logger.info(f"Tavily search returned {len(results)} results")
            return results
            
        except Exception as e:
            logger.error(f"Tavily search error: {e}")
    
    # Try Serper as fallback if API key is available
    if settings.SERPER_API_KEY and not results:
        try:
            serper_results = _search_with_serper(query, max_results)
            results.extend(serper_results)
            logger.info(f"Serper search returned {len(serper_results)} results")
            
        except Exception as e:
            logger.error(f"Serper search error: {e}")
    
    # If no API keys available, return mock results for development
    if not results:
        logger.warning("No search API keys configured, returning mock results")
        results = _get_mock_search_results(query, max_results)
    
    return results

def _search_with_serper(query: str, max_results: int = 5) -> List[Dict[str, Any]]:
    """Search using Serper API."""
    url = "https://google.serper.dev/search"
    
    payload = {
        'q': query,
        'num': max_results
    }
    headers = {
        'X-API-KEY': settings.SERPER_API_KEY,
        'Content-Type': 'application/json'
    }
    
    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()
    
    data = response.json()
    results = []
    
    # Process organic results
    for item in data.get('organic', []):
        results.append({
            "title": item.get('title', ''),
            "url": item.get('link', ''),
            "snippet": item.get('snippet', ''),
            "source": "serper"
        })
    
    return results

def _get_mock_search_results(query: str, max_results: int = 5) -> List[Dict[str, Any]]:
    """Return mock search results for development/testing."""
    mock_results = []
    
    for i in range(min(max_results, 3)):
        mock_results.append({
            "title": f"Mock Result {i+1} for '{query}'",
            "url": f"https://example.com/result-{i+1}",
            "snippet": f"This is a mock search result snippet for query '{query}'. "
                      f"In a real implementation, this would contain actual search results.",
            "source": "mock"
        })
    
    return mock_results

class TavilySearchTool(BaseTool):
    """LangChain tool wrapper for web search."""
    
    name: str = "web_search"
    description: str = "Search the web for information on any topic"
    args_schema: type[BaseModel] = WebSearchInput
    
    def _run(self, query: str, max_results: int = 5) -> str:
        """Execute the search."""
        try:
            results = search_web(query, max_results)
            
            if not results:
                return f"No search results found for query: {query}"
            
            # Format results for LLM consumption
            formatted_results = []
            for i, result in enumerate(results, 1):
                formatted_results.append(
                    f"{i}. {result['title']}\n"
                    f"   URL: {result['url']}\n"
                    f"   Snippet: {result['snippet']}\n"
                )
            
            return f"Search results for '{query}':\n\n" + "\n".join(formatted_results)
            
        except Exception as e:
            logger.error(f"Search tool error: {e}")
            return f"Search failed: {str(e)}"
    
    async def _arun(self, query: str, max_results: int = 5) -> str:
        """Async version of the search."""
        # For now, just call the sync version
        return self._run(query, max_results)

# Create a global instance for easy import
web_search_tool = TavilySearchTool()
