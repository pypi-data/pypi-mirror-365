"use strict";(self.webpackChunkjupyterlab_chat_extension=self.webpackChunkjupyterlab_chat_extension||[]).push([[515],{5515:(e,t,a)=>{a.r(t),a.d(t,{default:()=>_});var n=a(5063),o=a(9674),r=a(9389),i=a(5607),c=a(9246),s=a(5611),d=a(6907),l=a(7931),h=a(8213),m=a(9598),u=a(1085),g=a(2912),p=a(9104),y=a(9346),C=a(7262),v=a(4150);const f={id:"jupyterlab-chat-extension:chatCommandRegistry",description:"The chat command registry used by the jupyterlab-chat-extension.",autoStart:!0,provides:o.IChatCommandRegistry,activate:e=>new o.ChatCommandRegistry};class I{constructor(){this.id="jupyter-chat:emoji-commands",this._slash_commands=[{name:":heart:",replaceWith:"❤",providerId:this.id,description:"Emoji",icon:"❤"},{name:":smile:",replaceWith:"🙂",providerId:this.id,description:"Emoji",icon:"🙂"},{name:":thinking:",replaceWith:"🤔",providerId:this.id,description:"Emoji",icon:"🤔"},{name:":cool:",replaceWith:"😎",providerId:this.id,description:"Emoji",icon:"😎"}],this._regex=/^:\w*:?/}async listCommandCompletions(e){var t,a;const n=null===(a=null===(t=e.currentWord)||void 0===t?void 0:t.match(this._regex))||void 0===a?void 0:a[0];return n?this._slash_commands.filter((e=>e.name.startsWith(n))):[]}async onSubmit(e){}}const b={id:"jupyterlab-chat-extension:emojiCommandsPlugin",description:"Plugin which adds emoji commands to the chat.",autoStart:!0,requires:[o.IChatCommandRegistry],activate:(e,t)=>{t.addProvider(new I)}};var w=a(3345),M=a.n(w);const T={id:"jupyterlab-chat-extension:mentionCommandsPlugin",description:"Plugin which adds user mention commands.",autoStart:!0,requires:[o.IChatCommandRegistry],activate:(e,t)=>{t.addProvider(new x)}};class x{constructor(){this.id="jupyter-chat:mention-commands",this._regex=/@([\w-]*)/g}async listCommandCompletions(e){var t,a;const{currentWord:n}=e;if(!n)return[];const o=null===(a=null===(t=Array.from(n.matchAll(this._regex)))||void 0===t?void 0:t[0])||void 0===a?void 0:a[1];if(null==o)return[];const r=this._getExistingMentions(e);return Array.from(this._getUsers(e)).filter((e=>e[0].toLowerCase().startsWith(o.toLowerCase()))).filter((e=>!r.has(e[0]))).map((e=>({name:"@"+e[0],providerId:this.id,icon:e[1].icon,spaceOnAccept:!0})))}_getExistingMentions(e){var t;const a=null===(t=e.value)||void 0===t?void 0:t.matchAll(this._regex),n=new Set;for(const e of a){const t=null==e?void 0:e[1];t&&n.add(t)}return n}async onSubmit(e){var t;const a=e.value.matchAll(this._regex);for(const n of a){const a=null==n?void 0:n[1];if(!a)continue;const o=this._getUsers(e).get(a);o&&(null===(t=e.addMention)||void 0===t||t.call(e,o.user))}}_getUsers(e){const t=new Map,{user:a,users:n}=e.chatContext;return n.forEach((e=>{a&&e.username===a.username||(e.mention_name?t.set(e.mention_name,{user:e,icon:M().createElement(o.Avatar,{user:e})}):console.error(`No 'mention_name' property for user '${e.username}'. This user is being omitted from 'MentionCommandProvider._getUsers()'.`))})),t}}const R="Chat",W="jupyterlab-chat-extension:factory",F={id:"jupyterlab-chat-extension:attachmentOpener",description:"The attachment opener registry.",autoStart:!0,provides:o.IAttachmentOpenerRegistry,activate:e=>{const t=new o.AttachmentOpenerRegistry;return t.set("file",(t=>{e.commands.execute("docmanager:open",{path:t.value})})),t.set("notebook",(t=>{e.commands.execute("docmanager:open",{path:t.value})})),t}},D={id:W,description:"Document factories for chat.",autoStart:!0,requires:[u.IRenderMimeRegistry],optional:[v.IActiveCellManagerToken,o.IAttachmentOpenerRegistry,o.IChatCommandRegistry,r.ICollaborativeContentProvider,l.IDefaultFileBrowser,v.IInputToolbarRegistryFactory,i.ILayoutRestorer,o.IMessageFooterRegistry,v.ISelectionWatcherToken,g.ISettingRegistry,c.IThemeManager,c.IToolbarWidgetRegistry,p.ITranslator,v.IWelcomeMessage],provides:v.IChatFactory,activate:(e,t,a,n,r,i,s,d,l,h,m,u,g,y,f,I)=>{const b=null!=f?f:p.nullTranslator;let w;const M=new v.WidgetConfig({});function T(t){const a=M.config.defaultDirectory,n=t.get("defaultDirectory").composite;i&&a&&a!==n&&e.serviceManager.contents.get(a).then((t=>{0===t.content.length&&e.serviceManager.contents.delete(a).catch((e=>{}))})).catch((()=>{}));let o=Promise.resolve(null);i&&n&&a!==n&&(o=e.serviceManager.contents.get(n,{content:!1}).catch((async()=>e.serviceManager.contents.newUntitled({type:"directory"}).then((async t=>e.serviceManager.contents.rename(t.path,n).catch((a=>{throw e.serviceManager.contents.delete(t.path),new Error(a)})))).catch((e=>{throw new Error(e)}))))),o.then((()=>{M.config={sendWithShiftEnter:t.get("sendWithShiftEnter").composite,stackMessages:t.get("stackMessages").composite,unreadNotifications:t.get("unreadNotifications").composite,enableCodeToolbar:t.get("enableCodeToolbar").composite,sendTypingNotification:t.get("sendTypingNotification").composite,defaultDirectory:n}}))}u&&(y&&(w=(0,c.createToolbarFactory)(y,u,R,W,b)),Promise.all([e.restored,u.load(W)]).then((([,e])=>{T(e),e.changed.connect(T)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)})));const x=new c.WidgetTracker({namespace:"chat"});if(e.docRegistry.addFileType(v.chatFileType),i){const e=()=>v.YChat.create();i.sharedModelFactory.registerDocumentFactory("chat",e)}e.serviceManager.ready.then((()=>{const t=e.serviceManager.user.identity,n=new v.LabChatModelFactory({user:t,widgetConfig:M,commands:e.commands,activeCellManager:a,selectionWatcher:m,documentManager:null==s?void 0:s.model.manager});e.docRegistry.addModelFactory(n)})).catch((e=>console.error("The jupyterlab chat model factory is not initialized",e)));const F=new v.ChatWidgetFactory({name:R,label:"Chat",modelName:"chat",fileTypes:["chat"],defaultFor:["chat"],themeManager:g,rmRegistry:t,toolbarFactory:w,translator:b,chatCommandRegistry:r,attachmentOpenerRegistry:n,inputToolbarFactory:d,messageFooterRegistry:h,welcomeMessage:I});if(F.widgetCreated.connect(((t,a)=>{a.context.pathChanged.connect((()=>{x.save(a)})),x.add(a),a.model.unreadChanged.connect((()=>e.commands.notifyCommandChanged(v.CommandIDs.markAsRead)))})),e.docRegistry.addWidgetFactory(F),l){const t=new C.PromiseDelegate,a=()=>{e.commands.hasCommand(v.CommandIDs.openChat)&&(t.resolve(),e.commands.commandChanged.disconnect(a))};e.commands.commandChanged.connect(a),l.restore(x,{command:v.CommandIDs.openChat,args:e=>{var t;return{filepath:null!==(t=e.model.name)&&void 0!==t?t:"",inSidePanel:e instanceof o.ChatWidget,startup:!0}},name:e=>e.model.name,when:t.promise})}return{widgetConfig:M,tracker:x}}},P={id:"jupyterlab-chat-extension:commands",description:"The commands to create or open a chat.",autoStart:!0,requires:[r.ICollaborativeContentProvider,v.IChatFactory],optional:[v.IActiveCellManagerToken,v.IChatPanel,c.ICommandPalette,l.IDefaultFileBrowser,h.ILauncher,v.ISelectionWatcherToken],activate:(e,t,a,r,i,s,l,h,m)=>{const{commands:u}=e,{tracker:g,widgetConfig:p}=a;u.addCommand(v.CommandIDs.createChat,{label:e=>e.isPalette?"Create a new chat":"Chat",caption:"Create a chat",icon:e=>e.isPalette?void 0:o.chatIcon,execute:async t=>{var a,n,o,r;const i=null!==(a=t.inSidePanel)&&void 0!==a&&a,s=t.path;let h=null!==(n=t.name)&&void 0!==n?n:null,m="";if(h||(h=(await c.InputDialog.getText({label:"Name",placeholder:"untitled",title:"Create a new chat"})).value),null===h)return;if(h)if(m=h.endsWith(v.chatFileType.extensions[0])?h:`${h}${v.chatFileType.extensions[0]}`,void 0!==s)m=d.PathExt.join(s,m);else if(i){const e=null!==(o=p.config.defaultDirectory)&&void 0!==o?o:"";m=d.PathExt.join(e,m)}else{const e=null!==(r=null==l?void 0:l.model.path)&&void 0!==r?r:"";m=d.PathExt.join(e,m)}let g=!0;if(m?await e.serviceManager.contents.get(m,{content:!1}).catch((()=>{g=!1})):g=!1,!g){let t=await e.serviceManager.contents.newUntitled({type:"file",ext:v.chatFileType.extensions[0]});if(m&&(t=await e.serviceManager.contents.rename(t.path,m)),!t)return(0,c.showErrorMessage)("Error creating a chat","An error occurred while creating the chat"),"";m=t.path}return u.hasCommand(v.CommandIDs.openChat)?u.execute(v.CommandIDs.openChat,{filepath:m,inSidePanel:i}):u.execute("docmanager:open",{path:`${m}`,factory:R})}}),s&&s.addItem({category:"Chat",command:v.CommandIDs.createChat,args:{isPalette:!0}}),h&&h.add({command:v.CommandIDs.createChat,category:"Other"}),u.addCommand(v.CommandIDs.markAsRead,{caption:"Mark chat as read",icon:o.readIcon,isEnabled:()=>null!==g.currentWidget&&g.currentWidget===e.shell.currentWidget&&g.currentWidget.model.unreadMessages.length>0,execute:async t=>{const a=e.shell.currentWidget;a&&a instanceof v.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(a)?a.model.unreadMessages=[]:console.error(`The command '${v.CommandIDs.markAsRead}' should be executed from the toolbar button only`)}}),g.currentChanged.connect((()=>{u.notifyCommandChanged(v.CommandIDs.markAsRead)})),e.serviceManager.ready.then((()=>{const o=e.serviceManager.user.identity;u.addCommand(v.CommandIDs.openChat,{label:"Open a chat",execute:async s=>{var d,h,g,y,C;const f=null!==(d=s.inSidePanel)&&void 0!==d&&d,I=null!==(h=s.startup)&&void 0!==h&&h;let b=null!==(g=s.filepath)&&void 0!==g?g:null;if(null===b&&(b=(await c.InputDialog.getText({label:"File path",placeholder:"/path/to/the/chat/file",title:"Path of the chat"})).value),!b)return;let w=!0;if(await e.serviceManager.contents.get(b,{content:!1}).catch((()=>{w=!1})),w){if(!f||!i)return u.execute("docmanager:open",{path:`${b}`,factory:R});{if(e.shell instanceof n.NotebookShell){const t=e.shell;(null===(C=null===(y=t.leftHandler)||void 0===y?void 0:y.currentWidget)||void 0===C?void 0:C.id)===i.id&&t.leftHandler.isVisible||t.activateById(i.id)}else e.shell.activateById(i.id);if(i.openIfExists(b))return;const c=await e.serviceManager.contents.get(b),s=t.sharedModelFactory.createNew({path:c.path,format:c.format,contentType:v.chatFileType.contentType,collaborative:!0}),d=new v.LabChatModel({user:o,sharedModel:s,widgetConfig:p,commands:u,activeCellManager:r,selectionWatcher:m,documentManager:null==l?void 0:l.model.manager});d.name=c.path;const h=i.addChat(d);a.tracker.add(h)}}else I?console.warn(`Chat file '${b}' not found during startup restoration`):(0,c.showErrorMessage)("Error opening chat",`'${b}' is not a valid path`)}}),s&&s.addItem({category:"Chat",command:v.CommandIDs.openChat})})).catch((e=>console.error("The command to open a chat is not initialized\n",e))),u.addCommand(v.CommandIDs.focusInput,{caption:"Focus the input of the current chat widget",isEnabled:()=>null!==g.currentWidget,execute:()=>{const t=g.currentWidget;t&&(t instanceof o.ChatWidget&&i?(e.shell.activateById(i.id),i.openIfExists(t.model.name)):e.shell.activateById(t.id),t.model.input.focus())}})}},S={id:"jupyterlab-chat-extension:chat-panel",description:"The chat panel widget.",autoStart:!0,provides:v.IChatPanel,requires:[v.IChatFactory,r.ICollaborativeContentProvider,u.IRenderMimeRegistry],optional:[o.IAttachmentOpenerRegistry,o.IChatCommandRegistry,v.IInputToolbarRegistryFactory,i.ILayoutRestorer,o.IMessageFooterRegistry,c.IThemeManager,v.IWelcomeMessage],activate:(e,t,a,n,r,i,c,s,d,l,h)=>{const{commands:m}=e,u=t.widgetConfig.config.defaultDirectory||"",g=new v.ChatPanel({commands:m,contentsManager:e.serviceManager.contents,rmRegistry:n,themeManager:l,defaultDirectory:u,chatCommandRegistry:i,attachmentOpenerRegistry:r,inputToolbarFactory:c,messageFooterRegistry:d,welcomeMessage:h});return g.id="JupyterlabChat:sidepanel",g.title.icon=o.chatIcon,g.title.caption="Jupyter Chat",t.widgetConfig.configChanged.connect(((e,t)=>{void 0!==t.defaultDirectory&&(g.defaultDirectory=t.defaultDirectory)})),e.shell.add(g,"left",{rank:2e3}),s&&s.add(g,"jupyter-chat"),m.addCommand(v.CommandIDs.moveToSide,{label:"Move the chat to the side panel",caption:"Move the chat to the side panel",icon:y.launchIcon,isEnabled:()=>m.hasCommand(v.CommandIDs.openChat),execute:async()=>{const t=e.shell.currentWidget;if(!(t&&t instanceof v.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(t)))return void console.error(`The command '${v.CommandIDs.moveToSide}' should be executed from the toolbar button only`);const a=t.context.path.split(":").pop();m.execute(v.CommandIDs.openChat,{filepath:a,inSidePanel:!0}),t.dispose()}}),g}},j={id:"jupyterlab-chat-extension:activeCellManager",description:"The active cell manager plugin.",autoStart:!0,requires:[m.INotebookTracker],provides:v.IActiveCellManagerToken,activate:(e,t)=>new o.ActiveCellManager({tracker:t,shell:e.shell})},k={id:"jupyterlab-chat-extension:selectionWatcher",description:"The selection watcher plugin.",autoStart:!0,provides:v.ISelectionWatcherToken,optional:[s.IEditorLanguageRegistry],activate:(e,t)=>new o.SelectionWatcher({shell:e.shell,languages:t})},E={id:"jupyterlab-chat-extension:inputToolbarFactory",description:"The input toolbar registry plugin.",autoStart:!0,provides:v.IInputToolbarRegistryFactory,activate:e=>({create:()=>o.InputToolbarRegistry.defaultToolbarRegistry()})},_=[j,F,P,f,S,D,{id:"jupyterlab-chat/footerRegistry",description:"The footer registry plugin.",autoStart:!0,provides:o.IMessageFooterRegistry,activate:e=>new o.MessageFooterRegistry},E,k,b,T]}}]);