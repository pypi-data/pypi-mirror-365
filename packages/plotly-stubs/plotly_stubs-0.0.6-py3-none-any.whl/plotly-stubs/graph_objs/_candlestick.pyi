# pyright: reportPropertyTypeMismatch=false
from collections.abc import Hashable, Sequence
from typing import Any

import numpy as np
import pandas as pd
from plotly.basedatatypes import BaseTraceType as _BaseTraceType
from plotly.graph_objs.candlestick import Decreasing, Hoverlabel, Increasing, Legendgrouptitle, Line, Stream

class Candlestick(_BaseTraceType):
    _parent_path_str = ...
    _path_str = ...
    _valid_props = ...
    @property
    def close(
        self,
    ) -> Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]: ...
    @close.setter
    def close(
        self, val: Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]
    ) -> None: ...
    @property
    def closesrc(self) -> str | None: ...
    @closesrc.setter
    def closesrc(self, val: str | None) -> None: ...
    @property
    def customdata(
        self,
    ) -> Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]: ...
    @customdata.setter
    def customdata(
        self, val: Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]
    ) -> None: ...
    @property
    def customdatasrc(self) -> str | None: ...
    @customdatasrc.setter
    def customdatasrc(self, val: str | None) -> None: ...
    @property
    def decreasing(self) -> Decreasing: ...
    @decreasing.setter
    def decreasing(self, val: Decreasing | dict[str, Any]) -> None: ...
    @property
    def high(self) -> Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]: ...
    @high.setter
    def high(
        self, val: Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]
    ) -> None: ...
    @property
    def highsrc(self) -> str | None: ...
    @highsrc.setter
    def highsrc(self, val: str | None) -> None: ...
    @property
    def hoverinfo(self) -> str | Sequence[str] | None: ...
    @hoverinfo.setter
    def hoverinfo(self, val: str | Sequence[str] | None) -> None: ...
    @property
    def hoverinfosrc(self) -> str | None: ...
    @hoverinfosrc.setter
    def hoverinfosrc(self, val: str | None) -> None: ...
    @property
    def hoverlabel(self) -> Hoverlabel: ...
    @hoverlabel.setter
    def hoverlabel(self, val: Hoverlabel | dict[str, Any]) -> None: ...
    @property
    def hovertext(self) -> str | Sequence[str]: ...
    @hovertext.setter
    def hovertext(
        self, val: str | float | Sequence[str] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
    ) -> None: ...
    @property
    def hovertextsrc(self) -> str | None: ...
    @hovertextsrc.setter
    def hovertextsrc(self, val: str | None) -> None: ...
    @property
    def ids(self) -> Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str] | None: ...
    @ids.setter
    def ids(
        self, val: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str] | None
    ) -> None: ...
    @property
    def idssrc(self) -> str | None: ...
    @idssrc.setter
    def idssrc(self, val: str | None) -> None: ...
    @property
    def increasing(self) -> Increasing: ...
    @increasing.setter
    def increasing(self, val: Increasing | dict[str, Any]) -> None: ...
    @property
    def legend(self) -> str | None: ...
    @legend.setter
    def legend(self, val: str | None) -> None: ...
    @property
    def legendgroup(self) -> str | int | None: ...
    @legendgroup.setter
    def legendgroup(self, val: str | int | None) -> None: ...
    @property
    def legendgrouptitle(self) -> Legendgrouptitle: ...
    @legendgrouptitle.setter
    def legendgrouptitle(self, val: Legendgrouptitle | dict[str, Any]) -> None: ...
    @property
    def legendrank(self) -> int | float | None: ...
    @legendrank.setter
    def legendrank(self, val: int | float | None) -> None: ...
    @property
    def legendwidth(self) -> None: ...
    @legendwidth.setter
    def legendwidth(self, val: int | float | None) -> None: ...
    @property
    def line(self) -> Line: ...
    @line.setter
    def line(self, val: Line | dict[str, str | int | float]) -> None: ...
    @property
    def low(self) -> Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]: ...
    @low.setter
    def low(
        self, val: Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]
    ) -> None: ...
    @property
    def lowsrc(self) -> str | None: ...
    @lowsrc.setter
    def lowsrc(self, val: str | None) -> None: ...
    @property
    def meta(self) -> Sequence[Any] | dict[str, Any] | np.ndarray[tuple[int, ...], Any]: ...
    @meta.setter
    def meta(self, val: Sequence[Any] | dict[str, Any] | np.ndarray[tuple[int, ...], Any]) -> None: ...
    @property
    def metasrc(self) -> str | None: ...
    @metasrc.setter
    def metasrc(self, val: str | None) -> None: ...
    @property
    def name(self) -> str | int | None: ...
    @name.setter
    def name(self, val: str | int | None) -> None: ...
    @property
    def opacity(self) -> int | float | None: ...
    @opacity.setter
    def opacity(self, val: int | float | None) -> None: ...
    @property
    def open(self) -> Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]: ...
    @open.setter
    def open(
        self, val: Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float]
    ) -> None: ...
    @property
    def opensrc(self) -> str | None: ...
    @opensrc.setter
    def opensrc(self, val: str | None) -> None: ...
    @property
    def selectedpoints(self) -> Sequence[int] | None: ...
    @selectedpoints.setter
    def selectedpoints(self, val: Sequence[int] | None) -> None: ...
    @property
    def showlegend(self) -> bool | None: ...
    @showlegend.setter
    def showlegend(self, val: bool | None) -> None: ...
    @property
    def stream(self) -> Stream: ...
    @stream.setter
    def stream(self, val: Stream | dict[str, int | str]) -> None: ...
    @property
    def text(
        self,
    ) -> str | float | Sequence[str] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]]: ...
    @text.setter
    def text(
        self, val: str | float | Sequence[str] | Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
    ) -> None: ...
    @property
    def textsrc(self) -> str | None: ...
    @textsrc.setter
    def textsrc(self, val: str | None) -> None: ...
    @property
    def uid(self) -> str | int | None: ...
    @uid.setter
    def uid(self, val: str | int | None) -> None: ...
    @property
    def uirevision(self) -> Hashable | None: ...
    @uirevision.setter
    def uirevision(self, val: Hashable | None) -> None: ...
    @property
    def visible(self) -> bool | str | None: ...
    @visible.setter
    def visible(self, val: bool | str | None) -> None: ...
    @property
    def whiskerwidth(self) -> int | float | None: ...
    @whiskerwidth.setter
    def whiskerwidth(self, val: int | float | None) -> None: ...
    @property
    def x(self) -> Sequence[Any] | np.ndarray[tuple[int, ...], np.dtype[Any]] | pd.Series[Any]: ...
    @x.setter
    def x(self, val: Sequence[Any] | np.ndarray[tuple[int, ...], np.dtype[Any]] | pd.Series[Any]) -> None: ...
    @property
    def xaxis(self) -> str | None: ...
    @xaxis.setter
    def xaxis(self, val: str | None) -> None: ...
    @property
    def xcalendar(self) -> str | None: ...
    @xcalendar.setter
    def xcalendar(self, val: str | None) -> None: ...
    @property
    def xhoverformat(self) -> str | None: ...
    @xhoverformat.setter
    def xhoverformat(self, val: str | None) -> None: ...
    @property
    def xperiod(self) -> int | float | str | None: ...
    @xperiod.setter
    def xperiod(self, val: int | float | str | None) -> None: ...
    @property
    def xperiod0(self) -> int | float | str | None: ...
    @xperiod0.setter
    def xperiod0(self, val: int | float | str | None) -> None: ...
    @property
    def xperiodalignment(self) -> str | None: ...
    @xperiodalignment.setter
    def xperiodalignment(self, val: str | None) -> None: ...
    @property
    def xsrc(self) -> str | None: ...
    @xsrc.setter
    def xsrc(self, val: str | None) -> None: ...
    @property
    def yaxis(self) -> str | None: ...
    @yaxis.setter
    def yaxis(self, val: str | None) -> None: ...
    @property
    def yhoverformat(self) -> str | None: ...
    @yhoverformat.setter
    def yhoverformat(self, val: str | None) -> None: ...
    @property
    def zorder(self) -> int | None: ...
    @zorder.setter
    def zorder(self, val: int | None) -> None: ...
    @property
    def type(self) -> str: ...
    def __init__(
        self,
        arg: Candlestick | dict[str, Any] | None = ...,
        close: Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float] | None = ...,
        closesrc: str | None = ...,
        customdata: Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float] | None = ...,
        customdatasrc: str | None = ...,
        decreasing: Decreasing | dict[str, Any] | None = ...,
        high: Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float] | None = ...,
        highsrc: str | None = ...,
        hoverinfo: str | Sequence[str] | None = ...,
        hoverinfosrc: str | None = ...,
        hoverlabel: Hoverlabel | dict[str, Any] | None = ...,
        hovertext: str
        | float
        | Sequence[str]
        | Sequence[float]
        | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
        | None = ...,
        hovertextsrc: str | None = ...,
        ids: Sequence[str] | np.ndarray[tuple[int, ...], np.dtype[np.str_]] | pd.Series[str] | None = ...,
        idssrc: str | None = ...,
        increasing: Increasing | dict[str, Any] | None = ...,
        legend: str | None = ...,
        legendgroup: str | int | None = ...,
        legendgrouptitle: Legendgrouptitle | dict[str, Any] | None = ...,
        legendrank: int | float | None = ...,
        legendwidth: int | float | None = ...,
        line: Line | dict[str, str | int | float] | None = ...,
        low: Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float] | None = ...,
        lowsrc: str | None = ...,
        meta: Sequence[Any] | dict[str, Any] | np.ndarray[tuple[int, ...], Any] | None = ...,
        metasrc: str | None = ...,
        name: str | int | None = ...,
        opacity: int | float | None = ...,
        open: Sequence[float] | np.ndarray[tuple[int, ...], np.dtype[np.float64]] | pd.Series[float] | None = ...,
        opensrc: str | None = ...,
        selectedpoints: Sequence[int] | None = ...,
        showlegend: bool | None = ...,
        stream: Stream | dict[str, int | str] | None = ...,
        text: str
        | float
        | Sequence[str]
        | Sequence[float]
        | np.ndarray[tuple[int, ...], np.dtype[np.float64]]
        | None = ...,
        textsrc: str | None = ...,
        uid: str | int | None = ...,
        uirevision: Hashable | None = ...,
        visible: bool | str | None = ...,
        whiskerwidth: int | float | None = ...,
        x: Sequence[Any] | np.ndarray[tuple[int, ...], np.dtype[Any]] | pd.Series[Any] | None = ...,
        xaxis: str | None = ...,
        xcalendar: str | None = ...,
        xhoverformat: str | None = ...,
        xperiod: int | float | str | None = ...,
        xperiod0: int | float | str | None = ...,
        xperiodalignment: str | None = ...,
        xsrc: str | None = ...,
        yaxis: str | None = ...,
        yhoverformat: str | None = ...,
        zorder: int | None = ...,
        **kwargs: Any,
    ) -> None: ...
