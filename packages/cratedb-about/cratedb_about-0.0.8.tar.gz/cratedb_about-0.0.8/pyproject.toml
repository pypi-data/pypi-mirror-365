[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42", # At least v42 of setuptools required.
  "versioningit",
]

[project]
name = "cratedb-about"
description = "Information about CrateDB, for humans and machines."
readme = "README.md"
keywords = [
  "cratedb",
  "knowledge base",
]
license = "Apache-2.0"
license-files = [ "LICENSE" ]
authors = [
  { name = "CrateDB Engineering" },
]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 1 - Planning",
  "Environment :: Console",
  "Intended Audience :: Customer Service",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Manufacturing",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Telecommunications Industry",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Adaptive Technologies",
  "Topic :: Communications",
  "Topic :: Database",
  "Topic :: Documentation",
  "Topic :: Education",
  "Topic :: Internet",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Office/Business",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Pre-processors",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Version Control",
  "Topic :: System :: Archiving",
  "Topic :: System :: Clustering",
  "Topic :: System :: Distributed Computing",
  "Topic :: System :: Logging",
  "Topic :: System :: Monitoring",
  "Topic :: System :: Networking",
  "Topic :: System :: Systems Administration",
  "Topic :: Text Processing",
  "Topic :: Utilities",
]
dynamic = [
  "version",
]
dependencies = [
  "cattrs[pyyaml]<26",
  "click<9",
  "colorlog<7",
  "hishel<0.2",
  "llms-txt==0.0.4",
  "markdown<4",
  "platformdirs<5",
  "pueblo==0.0.11",
  "requests<3",
  "tiktoken<0.10",
]
optional-dependencies.all = [
  "cratedb-about[manyio,llm]",
]
optional-dependencies.develop = [
  "mypy<1.18",
  "poethepoet<1",
  "pyproject-fmt<3",
  "ruff<0.13",
  "validate-pyproject<1",
]
optional-dependencies.llm = [
  "anthropic<0.60",
  "claudette<0.3",
  "openai<2",
]
optional-dependencies.manyio = [
  "pueblo[fileio]==0.0.11",
]
optional-dependencies.release = [
  "build<2",
  "twine<7",
]
optional-dependencies.test = [
  "pytest<9",
  "pytest-cov<7",
  "pytest-mock<4",
  "requests-mock<2",
]
urls.Changelog = "https://github.com/crate/about/blob/main/CHANGES.md"
urls.Issues = "https://github.com/crate/about/issues"
urls.Repository = "https://github.com/crate/about"

scripts.cratedb-about = "cratedb_about.cli:cli"

[tool.setuptools.package-data]
cratedb_about = [
  "**/*.md",
  "**/*.yaml",
]

[tool.ruff]
line-length = 100

extend-exclude = [
]

lint.select = [
  # Builtins
  "A",
  # Bugbear
  "B",
  # comprehensions
  "C4",
  # Pycodestyle
  "E",
  # eradicate
  "ERA",
  # Pyflakes
  "F",
  # isort
  "I",
  # pandas-vet
  "PD",
  # return
  "RET",
  # Bandit
  "S",
  # print
  "T20",
  "W",
  # flake8-2020
  "YTT",
]

lint.per-file-ignores."tests/*" = [
  "S101", # Allow use of `assert`.
]

[tool.pytest.ini_options]
addopts = """
  -rfEXs -p pytester --strict-markers --verbosity=3
  --cov --cov-report=term-missing --cov-report=xml
  """
minversion = "2.0"
log_level = "DEBUG"
log_cli_level = "DEBUG"
log_format = "%(asctime)-15s [%(name)-36s] %(levelname)-8s: %(message)s"
pythonpath = [
  "src",
]
xfail_strict = true
markers = [
]

[tool.coverage.paths]
source = [
  "src/",
]

[tool.coverage.run]
branch = false
omit = [
  "tests/*",
]

[tool.coverage.report]
fail_under = 0
show_missing = true
exclude_lines = [
  "# pragma: no cover",
  "raise NotImplemented",
]

[tool.mypy]
mypy_path = "src"
packages = [
  "cratedb_about",
]
check_untyped_defs = true
ignore_missing_imports = true
implicit_optional = true
install_types = true
non_interactive = true

[tool.versioningit.vcs]
method = "git-archive"
default-tag = "v0.0.0"
describe-subst = "$Format:%(describe:tags,match=v*)$"

# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]

check = [
  "lint",
  "test",
]

format = [
  { cmd = "ruff format ." },
  # Configure Ruff not to auto-fix (remove!):
  # unused imports (F401), unused variables (F841), `print` statements (T201), and commented-out code (ERA001).
  { cmd = "ruff check --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 --ignore=ERA001 ." },
  { cmd = "pyproject-fmt --keep-full-version pyproject.toml" },
]

lint = [
  { cmd = "ruff format --check ." },
  { cmd = "ruff check ." },
  { cmd = "validate-pyproject pyproject.toml" },
  { cmd = "mypy" },
]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload --skip-existing dist/*" },
]

test = { cmd = "pytest" }
