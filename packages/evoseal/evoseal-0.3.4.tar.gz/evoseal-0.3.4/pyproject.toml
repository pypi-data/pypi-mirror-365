[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "evoseal"
version = "0.3.4"
description = "EVOSEAL: An advanced AI system integrating DGM, OpenEvolve, and SEAL"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "Apache-2.0"}
authors = [
    {name = "Kresna Sucandra"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "PyYAML>=6.0.1",
    "typer[all]>=0.12.0",
    "rich>=13.0.0",
    "requests>=2.31.0",
    "GitPython>=3.1.40",
    "structlog>=23.1.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "tqdm>=4.66.0",
    "python-slugify>=8.0.0",
    "click>=8.0.0",
    "shellingham>=1.5.0",
]

[project.scripts]
evoseal = "evoseal.cli.main:app"

[project.entry-points.typer]
evoseal = "evoseal.cli.main:app"

[project.optional-dependencies]
cli = [
    "typer[all]>=0.12.0",
    "rich>=13.0.0",
    "shellingham>=1.5.0",
]

test = [
    # Core testing
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.23.0",
    "pytest-xdist>=3.3.0",
    "pytest-timeout>=2.3.1",
    "pytest-benchmark>=4.1.0",
    "coverage>=7.0.0",
    "codecov>=2.1.13,<3.0.0",

    # Testing utilities
    "jsonschema>=4.0.0",
    "psutil>=5.9.0",

    # Optional dependencies for specific tests
    "torch>=2.0.0 ; extra == 'all' or extra == 'test' and python_version >= '3.8'",
    "transformers>=4.30.0 ; extra == 'all' or extra == 'test' and python_version >= '3.8'",
]

dev = [
    "black>=24.4.0",
    "isort>=5.13.2",
    "flake8>=7.0.0",
    "mypy>=1.10.0",
    "pylint>=3.1.0",
    "ruff>=0.4.7",
    "pre-commit>=3.6.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
    "types-python-dateutil>=2.8.0",
    "flake8-bugbear>=24.2.6",
    "flake8-comprehensions>=3.14.0",
    "pylint-pytest>=1.1.2",
    "pylint-plugin-utils>=0.8.2",
    "commitizen>=3.17.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["evoseal", "evoseal.*"]
exclude = ["tests", "tests.*"]

# Formatting
[tool.black]
line-length = 100
target-version = ["py39"]
include = '\.pyi?$'
skip-string-normalization = true
exclude = '''
(
    \.semgrep-venv
    | \.venv.*
    | venv.*
    | env.*
    | \.env.*
    | dgm
    | openevolve
    | SEAL.*
)
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [".venv*", "venv*", "env*", ".env*", ".semgrep-venv/*", "dgm/*", "openevolve/*", "SEAL*/*"]

# Linting
[tool.ruff]
# Basic settings
line-length = 100
target-version = "py39"
exclude = [".venv*", "venv*", "env*", ".env*", ".semgrep-venv/*", "dgm/*", "openevolve/*", "SEAL*/*"]

[tool.ruff.lint]
# Enable rules
select = ["E4", "F", "I001", "B", "C4", "UP", "N", "PL", "RUF100"]

# Ignore rules handled by other tools
ignore = ["E203", "E501", "F401", "F403"]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",  # Allow unused imports in __init__.py
    "PLC0415",  # Allow imports inside functions for lazy loading
    "UP036"  # Ignore version block error
]
# Allow complexity in CLI commands
"**/cli/commands/*.py" = [
    "PLR0912",  # Allow many branches in CLI commands
    "PLR0913",  # Allow many arguments in CLI commands
    "PLR0915"   # Allow many statements in CLI commands
]
"tests/*" = ["S101", "E402"]  # Ignore assert statements and import order in tests
"**/version_database.py" = ["PLR0913"]  # Allow >5 arguments in this module

# Mypy configuration has been moved to mypy.ini for better control
# over the configuration and to avoid TOML parsing issues with regex patterns.

[tool.pylint."messages control"]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "fixme"
]
max-line-length = 88

# Testing
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --cov=evoseal --cov-report=term-missing"

[tool.coverage.run]
source = ["evoseal"]
omit = ["*/tests/*"]

[tool.coverage.report]
show_missing = true
skip_covered = true
