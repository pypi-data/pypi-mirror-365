[project]
name = "qtype"
version = "0.0.1"
description = "DSL for Generative AI Prototyping"
authors = [{ name="Lou Kratz", email="lou.kratz+qtype@bazaarvoice.com" }]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "jsonschema>=4.24.0",
    "pydantic>=2.11.5",
    "pyyaml>=6.0.2",
    "python-dotenv>=1.0.0",
    "openai>=1.93.0",
    "fsspec>=2025.5.1",
    "pydantic-yaml>=1.5.1"
]
license = "APACHE-2.0"
license-files = ["LICEN[CS]E*"]

[project.urls]
Homepage = "https://github.com/bazaarvoice/qtype"

[dependency-groups]
dev = [
    "arize-phoenix>=11.2.2",
    "boto3>=1.34.0",
    "coverage>=7.0.0",
    "ipython>=8.37.0",
    "isort>=5.13.0",
    "mkdocs-exclude>=1.0.2",
    "mkdocs-material>=9.6.15",
    "mkdocs>=1.6.1",
    "mkdocstrings-python>=1.16.12",
    "mkdocstrings>=0.30.0",
    "mypy>=1.8.0",
    "networkx>=3.4.2",
    "pre-commit>=3.6.0",
    "pymdown-extensions>=10.16",
    "pytest-cov>=6.0.0",
    "pytest>=8.4.1",
    "ruff>=0.1.0",
    "types-PyYAML>=6.0.2",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]
interpreter = [
    "arize-phoenix-otel>=0.12.1",
    "boto3>=1.34.0",
    "fastapi>=0.116.1",
    "llama-index-embeddings-bedrock>=0.5.2",
    "llama-index-embeddings-openai>=0.3.1",
    "llama-index-llms-bedrock-converse>=0.7.4",
    "llama-index-llms-bedrock>=0.3.8",
    "llama-index>=0.12.45",
    "openinference-instrumentation-llama-index>=4.3.1",
    "psycopg2-binary>=2.9.10",
    "uvicorn[standard]>=0.35.0",
]

[tool.uv]
# Install dev dependencies by default when running uv sync
default-groups = ["dev"]
# Use highest resolution strategy for dependencies  
resolution = "highest"
# Compile bytecode for faster subsequent runs
compile-bytecode = true

[project.scripts]
qtype = "qtype.cli:main"

[tool.setuptools.packages.find]
include = ["qtype*"]
exclude = ["tests*"]

# Tool configurations
[tool.ruff]
line-length = 79
target-version = "py310"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint]
select = ["E", "F", "W"]
ignore = ["E501"]  # Let ruff handle line length

[tool.isort]
line_length = 79
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.coverage.run]
source = ["qtype"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "-ra",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "network: marks tests as requiring network access",
]
