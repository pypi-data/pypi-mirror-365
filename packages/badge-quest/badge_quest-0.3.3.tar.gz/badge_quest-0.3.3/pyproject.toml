[project]
name = "badge-quest"
version = "0.3.3"
description = "Collect, learn, repeat. A reflection badge system for Learning Management Systems."
authors = [
    {name = "Michael", email = "michael@example.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["education", "badges", "reflection", "lms", "blackboard", "gamification"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Framework :: Flask",
]

dependencies = [
    "flask>=3.0.0",
    "flask-cors>=4.0.0",
    "textblob>=0.17.1",
    "textstat>=0.7.3",
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "python-Levenshtein>=0.20.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "basedpyright>=1.0.0",
]

[project.scripts]
badgequest = "badgequest.cli:main"

[project.urls]
Homepage = "https://github.com/michael-borck/badge-quest"
Documentation = "https://github.com/michael-borck/badge-quest/tree/main/docs"
Repository = "https://github.com/michael-borck/badge-quest"
Issues = "https://github.com/michael-borck/badge-quest/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/badgequest"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
]

[tool.ruff.lint.isort]
known-first-party = ["badgequest"]

[tool.basedpyright]
venvPath = "."
venv = ".venv"
typeCheckingMode = "standard"
pythonVersion = "3.10"
pythonPlatform = "Linux"
reportMissingImports = true
reportMissingTypeStubs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "--strict-markers",
    "--cov=badgequest",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src/badgequest"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]