"""
Vulnerability model for LanaLyzer.

Represents detected vulnerabilities in the analyzed code.
"""

from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional

from lanalyzer.models.base import BaseModel
from lanalyzer.models.sink import Sink
from lanalyzer.models.source import Source


@dataclass
class Vulnerability(BaseModel):
    """
    Represents a detected vulnerability in the code.

    A vulnerability occurs when data from a source flows to a sink without
    proper validation or sanitization.

    Attributes:
        rule: Name of the rule that was violated
        message: Description of the vulnerability
        file: Path to the file where the vulnerability was found
        source: Information about the source of tainted data
        sink: Information about the sink where tainted data was used
        tainted_variable: Name of the tainted variable
        severity: Severity level of the vulnerability (high, medium, low)
        confidence: Confidence level of the detection (high, medium, low)
        call_chain: List of function calls connecting source to sink
        code_snippet: Code snippet showing the vulnerability
        remediation: Suggested remediation for the vulnerability
        cwe: Common Weakness Enumeration (CWE) identifier
    """

    rule: str
    message: str
    file: str
    source: Dict[str, Any]
    sink: Dict[str, Any]
    tainted_variable: str = ""
    severity: str = "medium"  # high, medium, low
    confidence: str = "medium"  # high, medium, low
    call_chain: List[Dict[str, Any]] = field(default_factory=list)
    code_snippet: Optional[str] = None
    remediation: Optional[str] = None
    cwe: Optional[str] = None

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "Vulnerability":
        """
        Create a Vulnerability instance from a dictionary.

        Args:
            data: Dictionary with vulnerability data

        Returns:
            Vulnerability instance
        """
        return cls(
            rule=data.get("rule", "Unknown"),
            message=data.get("message", ""),
            file=data.get("file", ""),
            source=data.get("source", {}),
            sink=data.get("sink", {}),
            tainted_variable=data.get("tainted_variable", ""),
            severity=data.get("severity", "medium"),
            confidence=data.get("confidence", "medium"),
            call_chain=data.get("call_chain", []),
            code_snippet=data.get("code_snippet"),
            remediation=data.get("remediation"),
            cwe=data.get("cwe"),
        )

    def to_dict(self) -> Dict[str, Any]:
        """
        Convert to dictionary for serialization.

        Returns:
            Dictionary representation
        """
        result: Dict[str, Any] = {
            "rule": self.rule,
            "message": self.message,
            "file": self.file,
            "source": self.source,
            "sink": self.sink,
            "tainted_variable": self.tainted_variable,
            "severity": self.severity,
            "confidence": self.confidence,
        }

        # Only include non-empty optional fields
        if self.call_chain:
            result["call_chain"] = self.call_chain
        if self.code_snippet:
            result["code_snippet"] = self.code_snippet
        if self.remediation:
            result["remediation"] = self.remediation
        if self.cwe:
            result["cwe"] = self.cwe

        return result

    def get_source_obj(self) -> Optional[Source]:
        """
        Get the source object.

        Returns:
            Source object if source data is valid, None otherwise
        """
        if not self.source:
            return None
        return Source.from_dict(self.source)

    def get_sink_obj(self) -> Optional[Sink]:
        """
        Get the sink object.

        Returns:
            Sink object if sink data is valid, None otherwise
        """
        if not self.sink:
            return None
        return Sink.from_dict(self.sink)

    def get_description(self) -> str:
        """
        Get a human-readable description of the vulnerability.

        Returns:
            Description string
        """
        source_obj = self.get_source_obj()
        sink_obj = self.get_sink_obj()

        source_desc = source_obj.get_description() if source_obj else "Unknown source"
        sink_desc = sink_obj.get_description() if sink_obj else "Unknown sink"

        return (
            f"{self.rule} ({self.severity.upper()}): {self.message}\n"
            f"  - Source: {source_desc}\n"
            f"  - Sink: {sink_desc}"
            + (
                f"\n  - Tainted variable: {self.tainted_variable}"
                if self.tainted_variable
                else ""
            )
        )
