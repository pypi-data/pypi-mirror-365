"""
Vulnerability report data models for MCP server.

This module defines the Pydantic models for vulnerability report requests
and responses, supporting different report types (CVE, CNVD, etc.).
"""

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, field_validator


class ReportType(str, Enum):
    """Supported vulnerability report types."""

    CVE = "CVE"
    CNVD = "CNVD"


class SeverityLevel(str, Enum):
    """Vulnerability severity levels."""

    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"
    INFO = "INFO"


class ThreatLevel(str, Enum):
    """CNVD threat levels."""

    SUPER_CRITICAL = "超危"
    HIGH = "高危"
    MEDIUM = "中危"
    LOW = "低危"


class VulnerabilityReportRequest(BaseModel):
    """Request model for vulnerability report generation."""

    report_type: ReportType = Field(
        ..., description="Type of vulnerability report to generate (CVE or CNVD)"
    )

    vulnerability_data: Dict[str, Any] = Field(
        ..., description="Vulnerability analysis results from Lanalyzer"
    )

    additional_info: Optional[Dict[str, Any]] = Field(
        default_factory=dict, description="Additional information for report generation"
    )

    # CVE-specific fields
    cve_id: Optional[str] = Field(
        None, description="CVE identifier (required for CVE reports)"
    )

    cvss_score: Optional[float] = Field(
        None,
        ge=0.0,
        le=10.0,
        description="CVSS score (0.0-10.0, required for CVE reports)",
    )

    cvss_vector: Optional[str] = Field(
        None, description="CVSS vector string (required for CVE reports)"
    )

    affected_products: Optional[str] = Field(
        None, description="Affected products description"
    )

    vulnerability_type: Optional[str] = Field(
        None,
        description="Type of vulnerability (e.g., SQL Injection, Command Injection)",
    )

    # CVE CVSS metrics
    attack_vector: Optional[str] = Field(None, description="CVSS Attack Vector")
    attack_complexity: Optional[str] = Field(None, description="CVSS Attack Complexity")
    privileges_required: Optional[str] = Field(
        None, description="CVSS Privileges Required"
    )
    user_interaction: Optional[str] = Field(None, description="CVSS User Interaction")
    scope: Optional[str] = Field(None, description="CVSS Scope")
    confidentiality_impact: Optional[str] = Field(
        None, description="CVSS Confidentiality Impact"
    )
    integrity_impact: Optional[str] = Field(None, description="CVSS Integrity Impact")
    availability_impact: Optional[str] = Field(
        None, description="CVSS Availability Impact"
    )

    # CNVD-specific fields
    cnvd_id: Optional[str] = Field(
        None, description="CNVD identifier (required for CNVD reports)"
    )

    cnnvd_id: Optional[str] = Field(
        None, description="CNNVD identifier (required for CNVD reports)"
    )

    threat_level: Optional[ThreatLevel] = Field(
        None, description="CNVD threat level (required for CNVD reports)"
    )

    exploit_difficulty: Optional[str] = Field(
        None, description="Difficulty of exploiting the vulnerability"
    )

    remote_exploit: Optional[str] = Field(
        None, description="Whether remote exploitation is possible"
    )

    local_exploit: Optional[str] = Field(
        None, description="Whether local exploitation is possible"
    )

    poc_available: Optional[str] = Field(
        None, description="Whether proof-of-concept is available"
    )

    exploit_available: Optional[str] = Field(
        None, description="Whether exploit code is available"
    )

    vendor_patch: Optional[str] = Field(None, description="Vendor patch information")

    third_party_patch: Optional[str] = Field(
        None, description="Third-party patch information"
    )

    @field_validator("cve_id")
    @classmethod
    def validate_cve_id_format(cls, v):
        """Validate CVE ID format when provided."""
        if v is not None and not v.startswith("CVE-"):
            raise ValueError('CVE ID must start with "CVE-"')
        return v

    @field_validator("cvss_score")
    @classmethod
    def validate_cvss_score_range(cls, v):
        """Validate CVSS score is in valid range."""
        if v is not None and not (0.0 <= v <= 10.0):
            raise ValueError("CVSS score must be between 0.0 and 10.0")
        return v

    def validate_required_fields(self) -> None:
        """Validate that required fields are present based on report type."""
        if self.report_type == ReportType.CVE:
            required_cve_fields = [
                "cve_id",
                "cvss_score",
                "cvss_vector",
                "affected_products",
                "vulnerability_type",
                "attack_vector",
                "attack_complexity",
                "privileges_required",
                "user_interaction",
                "scope",
                "confidentiality_impact",
                "integrity_impact",
                "availability_impact",
            ]

            missing_fields = []
            for field in required_cve_fields:
                if getattr(self, field) is None:
                    missing_fields.append(field)

            if missing_fields:
                raise ValueError(f"Missing required CVE fields: {missing_fields}")

        elif self.report_type == ReportType.CNVD:
            required_cnvd_fields = [
                "cnvd_id",
                "cnnvd_id",
                "affected_products",
                "vulnerability_type",
                "threat_level",
                "exploit_difficulty",
                "remote_exploit",
                "local_exploit",
                "poc_available",
                "exploit_available",
                "vendor_patch",
                "third_party_patch",
            ]

            missing_fields = []
            for field in required_cnvd_fields:
                if getattr(self, field) is None:
                    missing_fields.append(field)

            if missing_fields:
                raise ValueError(f"Missing required CNVD fields: {missing_fields}")


class VulnerabilityReportResponse(BaseModel):
    """Response model for vulnerability report generation."""

    success: bool = Field(..., description="Whether report generation was successful")

    report_content: Optional[str] = Field(
        None, description="Generated vulnerability report content"
    )

    report_type: Optional[ReportType] = Field(
        None, description="Type of report that was generated"
    )

    metadata: Dict[str, Any] = Field(
        default_factory=dict,
        description="Additional metadata about the generated report",
    )

    errors: List[str] = Field(
        default_factory=list,
        description="List of errors encountered during report generation",
    )

    warnings: List[str] = Field(
        default_factory=list,
        description="List of warnings encountered during report generation",
    )
