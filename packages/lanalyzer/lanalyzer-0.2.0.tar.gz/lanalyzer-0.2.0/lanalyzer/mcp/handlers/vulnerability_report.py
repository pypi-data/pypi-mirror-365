"""
Vulnerability report MCP handler for Lanalyzer.

This module implements the vulnerability report generation handlers for MCP requests.
"""

from typing import Any, Dict, Optional

from lanalyzer.logger import get_logger

from ..exceptions import MCPValidationError, handle_exception
from ..models.vulnerability_report import (
    ReportType,
    VulnerabilityReportRequest,
    VulnerabilityReportResponse,
)
from ..templates import CNVDReportTemplate, CVEReportTemplate
from .base import BaseMCPHandler

logger = get_logger(__name__)


class VulnerabilityReportMCPHandler(BaseMCPHandler):
    """Handles MCP protocol vulnerability report generation requests for Lanalyzer."""

    def __init__(self, debug: bool = False):
        """
        Initialize the vulnerability report MCP handler.

        Args:
            debug: Whether to enable debug output
        """
        super().__init__(debug)

        # Initialize report templates
        self.cve_template = CVEReportTemplate()
        self.cnvd_template = CNVDReportTemplate()

        # Template mapping
        self.template_map = {
            ReportType.CVE: self.cve_template,
            ReportType.CNVD: self.cnvd_template,
        }

    async def handle_vulnerability_report_request(
        self, request: VulnerabilityReportRequest
    ) -> VulnerabilityReportResponse:
        """
        Handle a vulnerability report generation request.

        Args:
            request: The vulnerability report request

        Returns:
            VulnerabilityReportResponse: The report generation response
        """
        try:
            if self.debug:
                logger.debug(
                    f"Processing vulnerability report request: {request.report_type}"
                )

            # Validate request fields based on report type
            try:
                request.validate_required_fields()
            except ValueError as e:
                # Convert ValueError to MCPValidationError for consistent error handling
                validation_error = MCPValidationError(
                    message=f"Request validation failed: {str(e)}",
                    error_code="VALIDATION_FAILED",
                )
                error_response = handle_exception(validation_error)
                return VulnerabilityReportResponse(
                    success=False,
                    report_content=None,
                    report_type=None,
                    errors=[error_response["message"]],
                )

            # Get appropriate template
            template = self.template_map.get(request.report_type)
            if not template:
                return VulnerabilityReportResponse(
                    success=False,
                    report_content=None,
                    report_type=None,
                    errors=[f"Unsupported report type: {request.report_type}"],
                )

            # Prepare data for template
            template_data = self._prepare_template_data(request)

            # Extract and merge vulnerability info to ensure all required fields are present
            vuln_info = template.extract_vulnerability_info(request.vulnerability_data)
            template_data.update(vuln_info)

            # Generate report
            try:
                report_content = template.format_report(template_data)

                # Prepare metadata
                metadata = {
                    "report_type": request.report_type.value,
                    "template_name": template.template_name,
                    "vulnerability_count": 1,  # Single vulnerability report
                    "generation_timestamp": template.format_date(None),
                }

                # Add report-specific metadata
                if request.report_type == ReportType.CVE:
                    metadata.update(
                        {"cve_id": request.cve_id, "cvss_score": request.cvss_score}
                    )
                elif request.report_type == ReportType.CNVD:
                    metadata.update(
                        {
                            "cnvd_id": request.cnvd_id,
                            "threat_level": request.threat_level,
                        }
                    )

                return VulnerabilityReportResponse(
                    success=True,
                    report_content=report_content,
                    report_type=request.report_type,
                    metadata=metadata,
                )

            except Exception as e:
                logger.error(f"Error generating report: {e}")
                error_response = handle_exception(e)
                return VulnerabilityReportResponse(
                    success=False,
                    report_content=None,
                    report_type=None,
                    errors=[f"Report generation failed: {error_response['message']}"],
                )

        except Exception as e:
            logger.error(f"Unexpected error in vulnerability report handler: {e}")
            error_response = handle_exception(e)
            return VulnerabilityReportResponse(
                success=False,
                report_content=None,
                report_type=None,
                errors=[f"Unexpected error: {error_response['message']}"],
            )

    def _prepare_template_data(
        self, request: VulnerabilityReportRequest
    ) -> Dict[str, Any]:
        """
        Prepare data for template rendering.

        Args:
            request: The vulnerability report request

        Returns:
            Dictionary containing data for template rendering
        """
        # Start with vulnerability data
        template_data = dict(request.vulnerability_data)

        # Add additional info
        if request.additional_info:
            template_data.update(request.additional_info)

        # Add report-specific fields based on report type
        if request.report_type == ReportType.CVE:
            template_data.update(
                {
                    "cve_id": request.cve_id,
                    "cvss_score": request.cvss_score,
                    "cvss_vector": request.cvss_vector,
                    "affected_products": request.affected_products,
                    "vulnerability_type": request.vulnerability_type,
                    "attack_vector": request.attack_vector,
                    "attack_complexity": request.attack_complexity,
                    "privileges_required": request.privileges_required,
                    "user_interaction": request.user_interaction,
                    "scope": request.scope,
                    "confidentiality_impact": request.confidentiality_impact,
                    "integrity_impact": request.integrity_impact,
                    "availability_impact": request.availability_impact,
                }
            )

        elif request.report_type == ReportType.CNVD:
            template_data.update(
                {
                    "cnvd_id": request.cnvd_id,
                    "cnnvd_id": request.cnnvd_id,
                    "affected_products": request.affected_products,
                    "vulnerability_type": request.vulnerability_type,
                    "threat_level": request.threat_level,
                    "exploit_difficulty": request.exploit_difficulty,
                    "remote_exploit": request.remote_exploit,
                    "local_exploit": request.local_exploit,
                    "poc_available": request.poc_available,
                    "exploit_available": request.exploit_available,
                    "vendor_patch": request.vendor_patch,
                    "third_party_patch": request.third_party_patch,
                }
            )

        return template_data

    def get_supported_report_types(self) -> list:
        """
        Get list of supported report types.

        Returns:
            List of supported report type strings
        """
        return [report_type.value for report_type in ReportType]

    def validate_report_request(self, request_data: Dict[str, Any]) -> Optional[str]:
        """
        Validate vulnerability report request data.

        Args:
            request_data: Raw request data dictionary

        Returns:
            Error message if validation fails, None if valid
        """
        try:
            # Try to create request object to validate
            request = VulnerabilityReportRequest(**request_data)
            request.validate_required_fields()
            return None
        except ValueError as e:
            # Handle validation errors specifically
            validation_error = MCPValidationError(
                message=f"Request validation failed: {str(e)}",
                error_code="VALIDATION_FAILED",
            )
            error_response = handle_exception(validation_error)
            return error_response["message"]
        except Exception as e:
            # Handle other exceptions
            error_response = handle_exception(e)
            return error_response["message"]

    async def get_report_template_info(self, report_type: str) -> Dict[str, Any]:
        """
        Get information about a specific report template.

        Args:
            report_type: Type of report template

        Returns:
            Dictionary containing template information
        """
        try:
            report_type_enum = ReportType(report_type)
            template = self.template_map.get(report_type_enum)

            if not template:
                return {"error": f"Unsupported report type: {report_type}"}

            return {
                "report_type": report_type,
                "template_name": template.template_name,
                "required_fields": template.required_fields,
                "common_fields": template.COMMON_REQUIRED_FIELDS,
                "template_specific_fields": template.TEMPLATE_REQUIRED_FIELDS,
            }

        except ValueError:
            validation_error = MCPValidationError(
                message=f"Invalid report type: {report_type}",
                error_code="INVALID_REPORT_TYPE",
            )
            error_response = handle_exception(validation_error)
            return {"error": error_response["message"]}
        except Exception as e:
            error_response = handle_exception(e)
            return {"error": error_response["message"]}
