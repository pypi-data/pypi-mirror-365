[project]
name = "lanalyzer"
version = "0.2.0"
description = "Python Taint Analysis Tool for finding security vulnerabilities"
authors = [{ name = "Lanalyzer Author", email = "8533596@gmail.com" }]
requires-python = ">=3.10,<3.11"
readme = "README.md"
license = "AGPL-3.0-only"
keywords = [
    "security",
    "static-analysis",
    "taint-analysis",
    "vulnerability-detection",
    "mcp",
    "model-context-protocol",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Topic :: Security",
    "Topic :: Software Development :: Quality Assurance",
]
dependencies = [
    "requests>=2.32.3,<3",
    "colorama>=0.4.6,<0.5",
    "rich>=13.7.0,<14",
    "jinja2>=3.1.3,<4",
    "pyyaml>=6.0.1,<7",
    "astroid>=3.0.2,<4",
    "click>=8.1.7,<9",
    "psutil>=5.9.0,<6",
]

[project.urls]
Repository = "https://github.com/bayuncao/lanalyzer"

[project.scripts]
lanalyzer = "lanalyzer.main:run_lanalyzer"

[project.optional-dependencies]
mcp = [
    "fastapi>=0.103.0,<0.115.0",
    "uvicorn[standard]>=0.23.2,<0.30.0",
    "pydantic>=2.4.0,<3.0.0",
    "fastmcp>=2.0.0,<3.0.0",
]
dev = [
    "pytest>=7.4.0,<9.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<6.0.0",
    "black>=23.7.0,<25.0.0",
    "isort>=5.12.0,<6.0.0",
    "mypy>=1.5.1,<2.0.0",
    "flake8>=6.1.0,<7.0.0",
    "pre-commit>=4.2.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "httpx>=0.24.0,<1.0.0",
]

[dependency-groups]
dev = [
    "pytest>=7.4.0,<9.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<6.0.0",
    "black>=23.7.0,<25.0.0",
    "isort>=5.12.0,<6.0.0",
    "mypy>=1.5.1,<2.0.0",
    "flake8>=6.1.0,<7.0.0",
    "pre-commit>=4.2.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "httpx>=0.24.0,<1.0.0",
]

[tool.hatch.build.targets.sdist]
include = ["/lanalyzer", "/rules", "/examples", "/README.md", "/LICENSE"]

[tool.hatch.build.targets.wheel]
packages = ["lanalyzer"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ["py310"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lanalyzer"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "0.2.0"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "astroid.*",
    "fastmcp.*",
    "uvicorn.*",
    "cloudpickle.*",
    "grpc.*",
    "google.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "0.2.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "mcp: marks tests related to MCP functionality",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["lanalyzer"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*", "*/examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
