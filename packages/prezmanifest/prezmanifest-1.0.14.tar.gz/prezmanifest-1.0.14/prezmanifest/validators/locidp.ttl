PREFIX : <https://linked.data.gov.au/def/eia-dp/validator/>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX schema: <https://schema.org/>
PREFIX sh: <http://www.w3.org/ns/shacl#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX time: <http://www.w3.org/2006/time#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>


<https://linked.data.gov.au/def/loci-dp/validator>
    a owl:Ontology ;
    schema:dateCreated "2021-04-01"^^xsd:date ;
    schema:creator <http://orcid.org/0000-0002-8742-7730> ;
    schema:dateModified "2025-05-19"^^xsd:date ;
    schema:publisher <https://linked.data.gov.au/org/ga> ;
    schema:description "The Loc-I Data Profile SHACL validator." ;
    schema:name "Loc-I Data Profile Validator" ;
    schema:hasPart
        :Requirement-D-exists ,
        :Requirement-D-name ,
        :Requirement-D-desc ,
        :Requirement-D-created ,
        :Requirement-D-modified ,
        :Requirement-D-creator ,
        :Requirement-D-publisher ,
        :Requirement-D-history ,
        :Requirement-D-license ,
        :Requirement-D-parts ,
        :Requirement-FC-name ,
        :Requirement-FC-part ,
        :Requirement-FC-spatial ,
        :Requirement-FC-temporal ,
        :Requirement-FC-parts ,
        :Requirement-F-part ,
        :Requirement-F-geometry ;
.

<https://linked.data.gov.au/org/ga>
    a schema:Organization ;
    schema:name "Geoscience Australia" ;
    schema:url "https://www.ga.gov.au"^^xsd:anyURI ;
.

<http://orcid.org/0000-0002-8742-7730>
    schema:affiliation <https://kurrawong.ai> ;
    schema:email "nick@kurrawong.ai"^^xsd:anyURI ;
    schema:name "Nicholas J Car" ;
.

<https://kurrawong.ai>
    a schema:Organization ;
    schema:name "KurrawongAI" ;
    schema:url "https://kurrawong.ai"^^xsd:anyURI ;
.

:Requirement-D-exists
	a sh:NodeShape ;
    sh:targetNode schema:Dataset ;
    sh:property [
        sh:path [ sh:inversePath rdf:type ] ;
        sh:minCount 1 ;
        sh:message "Each graph MUST have at least one Dataset instance" ;
    ] ;
.

:Requirement-D-name
	a sh:NodeShape ;
	sh:targetClass schema:Dataset ;
    sh:message "Each Dataset MUST have one and only one name which is to be a text literal, indicated using the schema:name predicate" ;
    sh:property [
        sh:path schema:name ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype rdf:langString ]
            [ sh:datatype xsd:string ]
        ) ;
    ] ;
.

:Requirement-D-desc
	a sh:NodeShape ;
	sh:targetClass schema:Dataset ;
    sh:message "Each Dataset MUST have one and description which is to be a text literal, indicated using the schema:description predicate" ;
    sh:property [
        sh:path schema:description ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype rdf:langString ]
            [ sh:datatype xsd:string ]
        ) ;
    ] ;
.

# :Requirement-D-id
# nothing to validate

:Requirement-D-created
	a sh:NodeShape ;
	sh:targetClass schema:Dataset ;
    sh:message "Requirement D-created: Each Dataset MUST have exactly one created date indicated using the schema:dateCreated predicate with a literal value of either xsd:date, xsd:dateTime or xsd:dateTimeStamp type" ;
    sh:property [
        sh:path schema:dateCreated ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:dateTime ]
            [ sh:datatype xsd:date ]
            [ sh:datatype xsd:dateTimeStamp ]
            [ sh:datatype xsd:gYear ]
        ) ;
    ]
.

:Requirement-D-modified
	a sh:NodeShape ;
	sh:targetClass schema:Dataset ;
    sh:message "Requirement D-modified: Each Dataset MUST have exactly one created date indicated using the schema:dateModified predicate with a literal value of either xsd:date, xsd:dateTime or xsd:dateTimeStamp type" ;
    sh:property [
        sh:path schema:dateModified ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype xsd:dateTime ]
            [ sh:datatype xsd:date ]
            [ sh:datatype xsd:dateTimeStamp ]
        ) ;
    ]
.

:Requirement-D-creator
	a sh:NodeShape ;
    sh:targetClass schema:Dataset ;
	sh:property [
		sh:path schema:creator ;
        sh:minCount 1 ;
		sh:description "Requirement D-creator: Each Dataset MUST indicate one or more agents with the schema:creator predicate, typed as an schema:Person or schema:Organization" ;
        sh:or (
            [ sh:class schema:Organization ]
            [ sh:class schema:Person ]
        ) ;
	] ;
.

:Requirement-D-publisher
	a sh:NodeShape ;
    sh:targetClass schema:Dataset ;
	sh:property [
		sh:path schema:publisher ;
		sh:description "Requirement D-publisher: Each Dataset MUST indicate one or more agents with the schema:publisher predicate, typed as an schema:Person or schema:Organization" ;
        sh:minCount 1 ;
        sh:or (
            [ sh:class schema:Organization ]
            [ sh:class schema:Person ]
        ) ;
	] ;
.

:Requirement-D-history
	a sh:NodeShape ;
	sh:targetClass schema:Dataset ;
    sh:message "Requirement D-history: Each Dataset SHOULD indicate how it was produced or its origin by use of one of the following predicates: skos:historyNote, schema:citation, prov:wasDerivedFrom" ;
    sh:or (
        :provenance-properties-01
        :provenance-properties-02
        :provenance-properties-04
    ) ;
    sh:severity sh:Warning ;
.

:Requirement-D-license
	a sh:NodeShape ;
	sh:targetClass schema:Dataset ;
    sh:message "Requirement D-license: Each Dataset MUST indicate a license that defines conditions for its use with the schema:license predicate with the value indicated coming from either the RDF Licenses dataset or being locally-defined odrl:Policy instance" ;
    sh:property [
        sh:path schema:license ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:nodeKind sh:IRI ;
    ]
.

:Requirement-FC-name
	a sh:NodeShape ;
	sh:targetClass geo:FeatureCollection ;
    sh:message "Each Feature Collection MUST have one and only one name which is to be a text literal, indicated using the schema:name predicate" ;
    sh:property [
        sh:path schema:name ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [ sh:datatype rdf:langString ]
            [ sh:datatype xsd:string ]
        ) ;
    ] ;
.

# :Requirement-FC-id
# nothing to test

:Requirement-FC-part-of
	a sh:NodeShape ;
	sh:targetClass geo:FeatureCollection ;
    sh:message "Requirement FC-part: Each Feature Collection MUST indicate that it is part of exactly one schema:Dataset instance with use of the schema:isPartOf predicate or the Dataset must indicate the Feature Collection is a part of it with schema:hasPart" ;
    sh:or (
        [
            sh:property [
                sh:path schema:isPartOf ;
                sh:minCount 1 ;
                sh:maxCount 1 ;
                sh:class schema:Dataset ;
            ]
        ]
        [
            sh:property [
                sh:path [ sh:inversePath schema:hasPart ] ;
                sh:minCount 1 ;
                sh:maxCount 1 ;
                sh:class schema:Dataset ;
            ]
        ]
    ) ;
.

:Requirement-FC-spatial
	a sh:NodeShape ;
	sh:targetClass geo:FeatureCollection ;
    sh:message "Requirement FC-spatial: A Feature Collection MAY indicate the total area that the features within it cover by using the geo:hasGeometry predicate or a sub property of it such as geo:hasBoundingBox" ;
    sh:property [
        sh:maxCount 1 ;
        sh:path ( geo:hasGeometry geo:hasBoundingBox geo:hasCentroid ) ;
        sh:class geo:Geometry ;
    ] ;
.

:Requirement-FC-temporal
	a sh:NodeShape ;
	sh:targetClass geo:FeatureCollection ;
    sh:message "Requirement FC-temporal: A Feature Collection MAY indicate the total temporal range that the features within it cover by using the time:hasTime predicate" ;
    sh:property [
        sh:maxCount 1 ;
        sh:path time:hasTime ;
        sh:class time:TemporalEntity ;
    ] ;
.

:Requirement-F-part-of
	a sh:NodeShape ;
	sh:targetClass geo:Feature ;
    sh:message "Requirement F-part: Each Feature MUST indicate that it is part of exactly one geo:FeatureCollection instance with use of the schema:isPartOf predicate" ;
    sh:or (
        [
            sh:property [
                sh:path schema:isPartOf ;
                sh:minCount 1 ;
                sh:maxCount 1 ;
                sh:class geo:FeatureCollection ;
            ]
        ]
        [
            sh:property [
                sh:path [ sh:inversePath schema:hasPart ] ;
                sh:minCount 1 ;
                sh:maxCount 1 ;
                sh:class geo:FeatureCollection ;
            ]
        ]
    ) ;
.

# :Requirement-F-id
# nothing to test

:Requirement-F-geometry
	a sh:NodeShape ;
	sh:targetClass geo:Feature ;
    sh:message "Requirement FC-geometry: If a Feature indicates a geometry, MUST do so using the geo:hasGeometry predicate or sub properties of it" ;
    sh:property [
        sh:path [
            sh:alternativePath (
                geo:hasGeometry
                geo:hasDefaultGeometry
                geo:hasBoundingBox
                geo:hasCentroid
            ) ;
        ] ;
        sh:minCount 1 ;
        sh:Class geo:Geometry ;
    ]
.

:provenance-properties-01
    a sh:PropertyShape ;
    sh:path prov:wasDerivedFrom ;
    sh:minCount 1 ;
    sh:nodeKind sh:IRI ;
.

:provenance-properties-02
    a sh:PropertyShape ;
    sh:path schema:citation ;
    sh:minCount 1 ;
    sh:or (
        [ sh:datatype xsd:anyURI ]
        [ sh:datatype xsd:string ]
    ) ;
.

:provenance-properties-04
    a sh:PropertyShape ;
    sh:path skos:historyNote ;
    sh:minCount 1 ;
    sh:or (
        [ sh:datatype rdf:langString ]
        [ sh:datatype xsd:string ]
    ) ;
.