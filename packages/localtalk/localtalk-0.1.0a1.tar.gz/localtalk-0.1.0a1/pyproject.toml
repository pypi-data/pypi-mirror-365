[project]
name = "localtalk"
version = "0.1.0-alpha.1"
description = "A local/offline-capable voice assistant with speech recognition, LLM processing, and text-to-speech"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Anthony Wu", email = "pls-file-gh-issue@users.noreply.github.com"}
]
license = {text = "MIT"}
keywords = ["voice-assistant", "tts", "speech-recognition", "llm", "offline", "apple-silicon", "privacy", "local"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Environment :: MacOS X",
]

dependencies = [
    "mlx>=0.0.1",
    "mlx-audio>=0.0.1",
    "mlx-vlm>=0.1.6",
    "numpy>=1.23.5",
    "openai-whisper>=20240930",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "sounddevice>=0.5.2",
    "soundfile>=0.12.1",
    "transformers>=4.0.0",
]

[project.optional-dependencies]
chatterbox = [
    "chatterbox-tts>=0.1.0",
    "nltk>=3.9.1",
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.5.0",
]

[project.scripts]
localtalk = "localtalk.cli:main"

[project.urls]
Homepage = "https://github.com/anthonywu/localtalk"
Documentation = "https://github.com/anthonywu/localtalk#readme"
Repository = "https://github.com/anthonywu/localtalk.git"
Issues = "https://github.com/anthonywu/localtalk/issues"

[build-system]
requires = ["uv_build>=0.8.3,<0.9.0"]
build-backend = "uv_build"

[tool.ruff]
target-version = "py311"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by formatter
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-ra -q --strict-markers --cov=localtalk"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]
