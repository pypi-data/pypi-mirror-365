[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "neurostrip"
dynamic = ["version"]
description = "CNN based skull stripping (brain masking) from MRI"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Bryn Lloyd" }]
keywords = ["MRI", "skull stripping", "brain masking", "CNN", "medical imaging"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: Image Processing",
]
requires-python = ">=3.9"
dependencies = ["numpy", "SimpleITK"]

[project.optional-dependencies]
gpu = ["onnxruntime-gpu>=1.17.0"]
cpu = ["onnxruntime>=1.17.0"]
dev = [
    "pre-commit>=3.7.0",
    "ruff>=0.5.5",
    "mypy>=1.10.0",
    "bandit>=1.7.0",
    "safety>=3.2.0",
    "typos>=1.23.0",
    "pytest>=8.2.0",
    "pytest-cov>=5.0.0",
]

[project.scripts]
neurostrip = "neurostrip.main:main"

[project.urls]
Homepage = "https://github.com/dyollb/neurostrip"
Repository = "https://github.com/dyollb/neurostrip"
Issues = "https://github.com/dyollb/neurostrip/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.dynamic]
version = {attr = "neurostrip.__version__"}

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I001", # isort
    "N",    # noqa comments
    "UP",   # pyupgrade
    "SIM",   # simplify
    "PL",    # pylint
]
ignore = [
    "E501", # Line too long
    "N813", # Variable name should be lowercase
]

per-file-ignores = { "__init__.py" = [
    "F401",
], "tests/*" = [
    "D",
    "S101",
    "PLR2004",
] }

[tool.ruff-format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
fix = true

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
exclude = [
    "tests/", "slicer_plugin/"
]

[[tool.mypy.overrides]]
module = ["SimpleITK.*", "onnxruntime.*"]
ignore_missing_imports = true

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", ".venv"]
skips = ["B101"]                  # Skip assert_used test

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*", "*/site-packages/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["--strict-markers", "--strict-config", "--verbose"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
