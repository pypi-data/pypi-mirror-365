# -*- coding: utf-8 -*-
'''
diacamma.invoice tests package

@author: Laurent GAY
@organization: sd-libre.fr
@contact: info@sd-libre.fr
@copyright: 2017 sd-libre.fr
@license: This file is part of Lucterios.

Lucterios is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Lucterios is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Lucterios.  If not, see <http://www.gnu.org/licenses/>.
'''

from __future__ import unicode_literals
from shutil import rmtree
from _io import StringIO
from datetime import timedelta, datetime
from unittest.mock import patch

from django.contrib.auth.models import Permission
from django.utils import timezone

from lucterios.framework.filetools import get_user_dir
from lucterios.framework.test import LucteriosTest, add_empty_user
from lucterios.CORE.parameters import Params
from lucterios.contacts.test_tools import initial_contact
from lucterios.mailing.test_tools import TestReceiver, configSMTP, decode_b64

from diacamma.invoice.test_tools import InvoiceTest, default_area, default_articles, insert_storage, \
    default_categories, create_kit, default_multiprice
from diacamma.accounting.test_tools import initial_thirds_fr, default_compta_fr, \
    create_account
from diacamma.accounting.views_entries import EntryAccountList
from diacamma.payoff.test_tools import default_bankaccount_fr
from diacamma.payoff.views import SupportingThirdValid
from diacamma.invoice.views import ArticleShow, BillAddModify, DetailAddModify, BillShow, BillTransition, ArticleList, \
    BillList, ArticleAddModify, BillToBill
from diacamma.invoice.views_storage import StorageSheetList, StorageSheetAddModify, StorageSheetShow, StorageDetailAddModify, \
    StorageSheetTransition, StorageDetailImport, StorageDetailDel, \
    StorageSituation, StorageHistoric, InventorySheetList, \
    InventorySheetAddModify, InventorySheetShow, InventoryDetailCopy, \
    InventorySheetTransition, InventoryDetailModify, InventoryDetailFinalize
from diacamma.invoice.models import Article, StorageSheet, StorageDetail, \
    get_or_create_customer
from lucterios.CORE.models import LucteriosUser
from diacamma.invoice.views_summary import CurrentCart, CurrentCartAddArticle, \
    CurrentCartDel, CurrentCartShow, CurrentCartValid


class StorageTest(InvoiceTest):

    def setUp(self):
        initial_thirds_fr()
        LucteriosTest.setUp(self)
        default_compta_fr()
        default_bankaccount_fr()
        rmtree(get_user_dir(), True)
        default_categories()
        default_articles(with_storage=True, vat_mode=0)
        self.jack_contact = initial_contact(add_empty_user())
        default_area()

    def test_receipt(self):
        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '3'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 11)
        self.assert_json_equal('LABELFORM', 'reference', "ABC3")

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_grid_equal('storage', {"area": "Lieu de stockage", "qty": "Quantité", "amount": "Montant", "mean": "Prix moyen", "available": "disponible"}, 1)
        self.assert_json_equal('', '#storage/headers/@2/@0', "amount")
        self.assert_json_equal('', '#storage/headers/@2/@2', "C2EUR")
        self.assert_json_equal('', '#storage/headers/@3/@0', "mean")
        self.assert_json_equal('', '#storage/headers/@2/@2', "C2EUR")

        self.assert_json_equal('', 'storage/@0/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@0/qty', {"value": "0,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@0/amount', {"value": 0.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@0/mean', '')
        self.assert_json_equal('', 'storage/@0/available', {"value": "0,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_count_equal('moving', 0)

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 0)

        self.factory.xfer = StorageSheetAddModify()
        self.calljson('/diacamma.invoice/storageSheetAddModify', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetAddModify')
        self.assert_count_equal('', 8)

        self.factory.xfer = StorageSheetAddModify()
        self.calljson('/diacamma.invoice/storageSheetAddModify',
                      {'sheet_type': 0, 'date': '2014-04-01', 'SAVE': 'YES', 'storagearea': 1, 'comment': "arrivage massif!"}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageSheetAddModify')
        self.assertEqual(self.response_json['action']['id'], "diacamma.invoice/storageSheetShow")
        self.assertEqual(len(self.response_json['action']['params']), 1)
        self.assertEqual(self.response_json['action']['params']['storagesheet'], 1)

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "1"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_count_equal('', 12)
        self.assert_json_equal('', '#sheet_type/formatnum', {"0": "réception de stock", "1": "sortie de stock", "2": "transfert de stock"})
        self.assert_json_equal('', '#status/formatnum', {"0": "en création", "1": "validé"})
        self.assert_json_equal('LABELFORM', 'sheet_type', 0)
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_json_equal('LABELFORM', 'storagearea', "Lieu 1")
        self.assert_count_equal('storagedetail', 0)
        self.assert_count_equal('#storagedetail/actions', 4)
        self.assert_json_equal('LABELFORM', 'total', 0.0)
        self.assert_json_equal('', '#total/formatnum', "C2EUR")

        self.factory.xfer = StorageDetailAddModify()
        self.calljson('/diacamma.invoice/storageDetailAddModify', {'storagesheet': "1"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageDetailAddModify')
        self.assert_count_equal('', 8)
        self.assert_json_equal('SELECT', 'article', 1)
        self.assert_json_equal('FLOAT', 'quantity', 1.0)
        self.assert_json_equal('', '#quantity/min', 0.0)
        self.assert_json_equal('', '#quantity/max', 9999999.99)
        self.assert_json_equal('', '#quantity/prec', 3)

        self.factory.xfer = StorageDetailAddModify()
        self.calljson('/diacamma.invoice/storageDetailAddModify', {'storagesheet': "1", "article": 1, 'CHANGE_ART': 'YES'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageDetailAddModify')
        self.assert_count_equal('', 8)
        self.assert_json_equal('SELECT', 'article', 1)
        self.assert_json_equal('FLOAT', 'quantity', 1.0)
        self.assert_json_equal('', '#quantity/min', 0.0)
        self.assert_json_equal('', '#quantity/max', 9999999.99)
        self.assert_json_equal('', '#quantity/prec', 3)

        self.factory.xfer = StorageDetailAddModify()
        self.calljson('/diacamma.invoice/storageDetailAddModify', {'storagesheet': "1", "article": 2, 'CHANGE_ART': 'YES'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageDetailAddModify')
        self.assert_count_equal('', 8)
        self.assert_json_equal('SELECT', 'article', 2)
        self.assert_json_equal('FLOAT', 'quantity', 1.0)
        self.assert_json_equal('', '#quantity/min', 0.0)
        self.assert_json_equal('', '#quantity/max', 9999999.99)
        self.assert_json_equal('', '#quantity/prec', 1)

        self.factory.xfer = StorageDetailAddModify()
        self.calljson('/diacamma.invoice/storageDetailAddModify', {'storagesheet': "1", "article": 4, 'CHANGE_ART': 'YES'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageDetailAddModify')
        self.assert_json_equal('SELECT', 'article', 4)
        self.assert_json_equal('FLOAT', 'quantity', 1.0)
        self.assert_json_equal('SELECT', 'article', 4)
        self.assert_json_equal('', '#quantity/min', 0.0)
        self.assert_json_equal('', '#quantity/max', 9999999.99)
        self.assert_json_equal('', '#quantity/prec', 0)

        self.factory.xfer = StorageDetailAddModify()
        self.calljson('/diacamma.invoice/storageDetailAddModify', {'storagesheet': "1", 'SAVE': 'YES', "article": 1, "price": 7.25, "quantity": 10}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageDetailAddModify')

        self.factory.xfer = StorageDetailAddModify()
        self.calljson('/diacamma.invoice/storageDetailAddModify', {'storagesheet': "1", 'SAVE': 'YES', "article": 4, "price": 1.00, "quantity": 25}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageDetailAddModify')

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "1"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_count_equal('', 12)
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_count_equal('storagedetail', 2)
        self.assert_json_equal('', '#storagedetail/headers/@1/@0', "price")
        self.assert_json_equal('', '#storagedetail/headers/@1/@2', "C2EUR")
        self.assert_json_equal('', 'storagedetail/@0/article', "ABC1")
        self.assert_json_equal('', 'storagedetail/@0/price', 7.25)
        self.assert_json_equal('', 'storagedetail/@0/quantity_txt', "10,000")
        self.assert_json_equal('', 'storagedetail/@1/article', "ABC4")
        self.assert_json_equal('', 'storagedetail/@1/price', 1.00)
        self.assert_json_equal('', 'storagedetail/@1/quantity_txt', "25")
        self.assert_json_equal('LABELFORM', 'total', 97.5)

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 1)
        self.assert_count_equal('moving', 0)

        self.factory.xfer = StorageSheetTransition()
        self.calljson('/diacamma.invoice/storageSheetTransition',
                      {'CONFIRME': 'YES', 'storagesheet': 1, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageSheetTransition')

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "1"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_count_equal('', 11)
        self.assert_json_equal('LABELFORM', 'status', 1)
        self.assert_count_equal('storagedetail', 2)
        self.assert_json_equal('LABELFORM', 'total', 97.5)

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 2)
        self.assert_json_equal('', '#storage/headers/@2/@0', "amount")
        self.assert_json_equal('', '#storage/headers/@2/@2', "C2EUR")
        self.assert_json_equal('', '#storage/headers/@3/@0', "mean")
        self.assert_json_equal('', '#storage/headers/@3/@2', "C2EUR")

        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "10,000")
        self.assert_json_equal('', 'storage/@0/amount', 72.50)
        self.assert_json_equal('', 'storage/@0/mean', 7.25)
        self.assert_json_equal('', 'storage/@1/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@1/qty', {"value": "10,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@1/amount', {"value": 72.5, "format": "{[b]}{0}{[/b]}"})

        self.assert_count_equal('moving', 1)
        self.assert_json_equal('', 'moving/@0/storagesheet.date', "2014-04-01")
        self.assert_json_equal('', 'moving/@0/storagesheet.comment', "arrivage massif!")
        self.assert_json_equal('', 'moving/@0/quantity_txt', "10,000")

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 1)

    def test_exit(self):
        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '3'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 11)
        self.assert_json_equal('LABELFORM', 'reference', "ABC3")

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_grid_equal('storage', {"area": "Lieu de stockage", "qty": "Quantité", "amount": "Montant", "mean": "Prix moyen", "available": "disponible"}, 1)
        self.assert_json_equal('', 'storage/@0/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@0/qty', {"value": "0,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@0/amount', {"value": 0.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_grid_equal('moving', {"storagesheet.date": "date", "storagesheet.comment": "commentaire", "price": "prix d'achat", "quantity_txt": "quantité"}, 0)  # nb=4

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 0)

        self.factory.xfer = StorageSheetAddModify()
        self.calljson('/diacamma.invoice/storageSheetAddModify', {'sheet_type': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetAddModify')
        self.assert_count_equal('', 5)

        self.factory.xfer = StorageSheetAddModify()
        self.calljson('/diacamma.invoice/storageSheetAddModify',
                      {'sheet_type': 1, 'date': '2014-04-01', 'SAVE': 'YES', 'storagearea': 1, 'comment': "casses!"}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageSheetAddModify')
        self.assertEqual(self.response_json['action']['id'], "diacamma.invoice/storageSheetShow")
        self.assertEqual(len(self.response_json['action']['params']), 1)
        self.assertEqual(self.response_json['action']['params']['storagesheet'], 1)

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "1"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_count_equal('', 8)
        self.assert_json_equal('LABELFORM', 'sheet_type', 1)
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_json_equal('LABELFORM', 'storagearea', "Lieu 1")
        self.assert_count_equal('storagedetail', 0)
        self.assert_count_equal('#storagedetail/actions', 4)

        self.factory.xfer = StorageDetailAddModify()
        self.calljson('/diacamma.invoice/storageDetailAddModify', {'storagesheet': "1"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageDetailAddModify')
        self.assert_count_equal('', 8)

        self.factory.xfer = StorageDetailAddModify()
        self.calljson('/diacamma.invoice/storageDetailAddModify', {'storagesheet': "1", 'SAVE': 'YES', "article": 1, "quantity": 7}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageDetailAddModify')

        self.factory.xfer = StorageDetailAddModify()
        self.calljson('/diacamma.invoice/storageDetailAddModify', {'storagesheet': "1", 'SAVE': 'YES', "article": 4, "quantity": 6}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageDetailAddModify')

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "1"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_count_equal('', 8)
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_count_equal('storagedetail', 2)
        self.assert_json_equal('', 'storagedetail/@0/article', "ABC1")
        self.assert_json_equal('', 'storagedetail/@0/quantity_txt', "7,000")
        self.assert_json_equal('', 'storagedetail/@1/article', "ABC4")
        self.assert_json_equal('', 'storagedetail/@1/quantity_txt', "6")
        self.assert_json_equal('LABELFORM', 'info',
                               ["L'article ABC1 est en quantité insuffisante", "L'article ABC4 est en quantité insuffisante"])

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 1)
        self.assert_count_equal('moving', 0)

        self.factory.xfer = StorageSheetTransition()
        self.calljson('/diacamma.invoice/storageSheetTransition',
                      {'CONFIRME': 'YES', 'storagesheet': 1, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.exception', 'diacamma.invoice', 'storageSheetTransition')

        insert_storage()

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "10,000")
        self.assert_json_equal('', 'storage/@0/amount', 50.00)
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', 20.00)
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 70.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_count_equal('moving', 2)
        self.assert_json_equal('', 'moving/@0/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'moving/@0/storagesheet.comment', "B")
        self.assert_json_equal('', 'moving/@0/quantity_txt', "5,000")
        self.assert_json_equal('', 'moving/@1/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'moving/@1/storagesheet.comment', "A")
        self.assert_json_equal('', 'moving/@1/quantity_txt', "10,000")

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "1"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_count_equal('', 8)
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_count_equal('storagedetail', 2)
        self.assert_json_equal('', 'storagedetail/@0/article', "ABC1")
        self.assert_json_equal('', 'storagedetail/@0/quantity_txt', "7,000")
        self.assert_json_equal('', 'storagedetail/@1/article', "ABC4")
        self.assert_json_equal('', 'storagedetail/@1/quantity_txt', "6")
        self.assert_json_equal('LABELFORM', 'info', [])

        self.factory.xfer = StorageSheetTransition()
        self.calljson('/diacamma.invoice/storageSheetTransition',
                      {'CONFIRME': 'YES', 'storagesheet': 1, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageSheetTransition')

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "1"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_count_equal('', 7)
        self.assert_json_equal('LABELFORM', 'status', 1)
        self.assert_count_equal('storagedetail', 2)

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "3,000")
        self.assert_json_equal('', 'storage/@0/amount', "15.00")
        self.assert_json_equal('', 'storage/@0/mean', 5.00)
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', "20.00")
        self.assert_json_equal('', 'storage/@1/mean', 4.00)
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "8,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 35.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/mean', {"value": 4.38, "format": "{[b]}{0}{[/b]}"})
        self.assert_count_equal('moving', 3)
        self.assert_json_equal('', 'moving/@0/storagesheet.date', "2014-04-01")
        self.assert_json_equal('', 'moving/@0/storagesheet.comment', "casses!")
        self.assert_json_equal('', 'moving/@0/quantity_txt', "-7,000")
        self.assert_json_equal('', 'moving/@1/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'moving/@1/storagesheet.comment', "B")
        self.assert_json_equal('', 'moving/@1/quantity_txt', "5,000")
        self.assert_json_equal('', 'moving/@2/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'moving/@2/storagesheet.comment', "A")
        self.assert_json_equal('', 'moving/@2/quantity_txt', "10,000")

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1, 'sheet_type': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 1)

    def test_transfer(self):
        insert_storage()

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_json_equal('LABELFORM', 'last_buy_price', 4.00)
        self.assert_json_equal('LABELFORM', 'mean_buy_price', 4.67)
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "10,000")
        self.assert_json_equal('', 'storage/@0/amount', 50.0)
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', 20.0)
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 70.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_count_equal('moving', 2)
        self.assert_json_equal('', 'moving/@0/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'moving/@0/storagesheet.comment', "B")
        self.assert_json_equal('', 'moving/@0/quantity_txt', "5,000")
        self.assert_json_equal('', 'moving/@1/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'moving/@1/storagesheet.comment', "A")
        self.assert_json_equal('', 'moving/@1/quantity_txt', "10,000")

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 0)

        self.factory.xfer = StorageSheetAddModify()
        self.calljson('/diacamma.invoice/storageSheetAddModify',
                      {'sheet_type': 2, 'date': '2014-05-15', 'SAVE': 'YES', 'storagearea': 1, 'comment': "move"}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageSheetAddModify')
        self.assertEqual(self.response_json['action']['id'], "diacamma.invoice/storageSheetShow")
        self.assertEqual(len(self.response_json['action']['params']), 1)
        self.assertEqual(self.response_json['action']['params']['storagesheet'], 3)

        self.factory.xfer = StorageDetailAddModify()
        self.calljson('/diacamma.invoice/storageDetailAddModify', {'storagesheet': "3", 'SAVE': 'YES', "article": 1, "quantity": 7}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageDetailAddModify')

        self.factory.xfer = StorageDetailAddModify()
        self.calljson('/diacamma.invoice/storageDetailAddModify', {'storagesheet': "3", 'SAVE': 'YES', "article": 4, "quantity": 6}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageDetailAddModify')

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "3"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_count_equal('', 8)
        self.assert_json_equal('LABELFORM', 'sheet_type', 2)
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_json_equal('LABELFORM', 'storagearea', "Lieu 1")
        self.assert_count_equal('storagedetail', 2)
        self.assert_json_equal('', 'storagedetail/@0/article', "ABC1")
        self.assert_json_equal('', 'storagedetail/@0/quantity_txt', "7,000")
        self.assert_json_equal('', 'storagedetail/@1/article', "ABC4")
        self.assert_json_equal('', 'storagedetail/@1/quantity_txt', "6")
        self.assert_json_equal('LABELFORM', 'info', [])

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1, 'sheet_type': 2}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 1)

        self.factory.xfer = StorageSheetTransition()
        self.calljson('/diacamma.invoice/storageSheetTransition',
                      {'storagesheet': 3, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetTransition')
        self.assert_select_equal('target_area', {2: "Lieu 2", 3: "Lieu 3"})

        self.factory.xfer = StorageSheetTransition()
        self.calljson('/diacamma.invoice/storageSheetTransition',
                      {'CONFIRME': 'YES', 'target_area': 2, 'storagesheet': 3, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageSheetTransition')

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "3"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_count_equal('', 7)
        self.assert_json_equal('LABELFORM', 'status', 1)
        self.assert_count_equal('storagedetail', 2)

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_json_equal('LABELFORM', 'last_buy_price', 5.00)
        self.assert_json_equal('LABELFORM', 'mean_buy_price', 4.67)
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "3,000")
        self.assert_json_equal('', 'storage/@0/amount', 15.0)
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "12,000")
        self.assert_json_equal('', 'storage/@1/amount', 55.0)
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "15,000", "format": "{[b]}{0}{[/b]}"}),
        self.assert_json_equal('', 'storage/@2/amount', {"value": 70.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_count_equal('moving', 4)
        self.assert_json_equal('', 'moving/@0/storagesheet.date', "2014-05-15")
        self.assert_json_equal('', 'moving/@0/storagesheet.comment', "move")
        self.assert_json_equal('', 'moving/@0/quantity_txt', "-7,000")
        self.assert_json_equal('', 'moving/@1/storagesheet.date', "2014-05-15")
        self.assert_json_equal('', 'moving/@1/storagesheet.comment', "move")
        self.assert_json_equal('', 'moving/@1/quantity_txt', "7,000")
        self.assert_json_equal('', 'moving/@2/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'moving/@2/storagesheet.comment', "B")
        self.assert_json_equal('', 'moving/@2/quantity_txt', "5,000")
        self.assert_json_equal('', 'moving/@3/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'moving/@3/storagesheet.comment', "A")
        self.assert_json_equal('', 'moving/@3/quantity_txt', "10,000")

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1, 'sheet_type': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 1)

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1, 'sheet_type': 0}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 3)

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1, 'sheet_type': 2}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 0)

    def test_bill(self):
        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '3'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 11)
        self.assert_json_equal('LABELFORM', 'reference', "ABC3")

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 1)
        self.assert_json_equal('', 'storage/@0/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@0/qty', {"value": "0,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@0/amount', {"value": 0.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_count_equal('moving', 0)

        self.factory.xfer = BillAddModify()
        self.calljson('/diacamma.invoice/billAddModify',
                      {'bill_type': 1, 'date': '2015-04-01', 'SAVE': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billAddModify')
        self.factory.xfer = SupportingThirdValid()
        self.calljson('/diacamma.payoff/supportingThirdValid',
                      {'supporting': 1, 'third': 6}, False)
        self.assert_observer('core.acknowledge', 'diacamma.payoff', 'supportingThirdValid')

        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify', {'bill': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'detailAddModify')
        self.assert_count_equal('', 10)
        self.assert_select_equal('article', 4)  # nb=4

        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify', {'bill': 1, 'article': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'detailAddModify')
        self.assert_count_equal('', 12)
        self.assert_select_equal('storagearea', 0)  # nb=0

        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 1, 'article': 1, 'designation': 'article A', 'price': '1.11', 'quantity': 5, 'storagearea': 1}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')
        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 1, 'article': 2, 'designation': 'article B', 'price': '2.22', 'quantity': 5, 'storagearea': 2}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')
        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 1, 'article': 3, 'designation': 'article C', 'price': '3.33', 'quantity': 5}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')

        self.factory.xfer = BillShow()
        self.calljson('/diacamma.invoice/billShow', {'bill': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billShow')
        self.assert_count_equal('detail', 3)
        self.assert_json_equal('LABELFORM', 'info', ["L'article ABC1 est en quantité insuffisante", "L'article ABC2 est en quantité insuffisante"])
        self.assert_json_equal('', '#info/formatstr', "{[font color=\"red\"]}%s{[/font]}")

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 1)
        self.assert_count_equal('moving', 0)

        self.factory.xfer = BillTransition()
        self.calljson('/diacamma.invoice/billTransition',
                      {'CONFIRME': 'YES', 'bill': 1, 'withpayoff': False, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.exception', 'diacamma.invoice', 'billTransition')

        insert_storage()

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "10,000")
        self.assert_json_equal('', 'storage/@0/amount', 50.00)
        self.assert_json_equal('', 'storage/@0/mean', 5.0)
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', 20.00)
        self.assert_json_equal('', 'storage/@1/mean', 4.0)
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 70.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/mean', {"value": 4.67, "format": "{[b]}{0}{[/b]}"})
        self.assert_count_equal('moving', 2)
        self.assert_json_equal('', 'moving/@0/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'moving/@0/storagesheet.comment', "B")
        self.assert_json_equal('', 'moving/@0/quantity_txt', "5,000")
        self.assert_json_equal('', 'moving/@1/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'moving/@1/storagesheet.comment', "A")
        self.assert_json_equal('', 'moving/@1/quantity_txt', "10,000")

        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify', {'bill': 1, 'article': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'detailAddModify')
        self.assert_count_equal('', 12)
        self.assert_select_equal('storagearea', {1: "Lieu 1 [10.000]", 2: "Lieu 2 [5.000]"})

        self.factory.xfer = BillShow()
        self.calljson('/diacamma.invoice/billShow', {'bill': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billShow')
        self.assert_count_equal('detail', 3)
        self.assert_json_equal('LABELFORM', 'info', [])

        self.factory.xfer = BillTransition()
        self.calljson('/diacamma.invoice/billTransition',
                      {'CONFIRME': 'YES', 'bill': 1, 'withpayoff': False, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billTransition')

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "5,000")
        self.assert_json_equal('', 'storage/@0/amount', 25.00)
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', 20.00)
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "10,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 45.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_count_equal('moving', 3)
        self.assert_json_equal('', 'moving/@0/storagesheet.date', "2015-04-01")
        self.assert_json_equal('', 'moving/@0/storagesheet.comment', "facture A-1 - 1 avril 2015")
        self.assert_json_equal('', 'moving/@0/quantity_txt', "-5,000")
        self.assert_json_equal('', 'moving/@1/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'moving/@1/storagesheet.comment', "B")
        self.assert_json_equal('', 'moving/@1/quantity_txt', "5,000")
        self.assert_json_equal('', 'moving/@2/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'moving/@2/storagesheet.comment', "A")
        self.assert_json_equal('', 'moving/@2/quantity_txt', "10,000")

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1, 'sheet_type': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 2)

    def test_quotation(self):
        insert_storage()

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "10,000")
        self.assert_json_equal('', 'storage/@0/amount', 50.00)
        self.assert_json_equal('', 'storage/@0/mean', 5.0)
        self.assert_json_equal('', 'storage/@0/available', "10,000")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', 20.00)
        self.assert_json_equal('', 'storage/@1/mean', 4.0)
        self.assert_json_equal('', 'storage/@1/available', "5,000")
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 70.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/mean', {"value": 4.67, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/available', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_count_equal('moving', 2)
        self.assert_json_equal('', 'moving/@0/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'moving/@0/storagesheet.comment', "B")
        self.assert_json_equal('', 'moving/@0/quantity_txt', "5,000")
        self.assert_json_equal('', 'moving/@1/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'moving/@1/storagesheet.comment', "A")
        self.assert_json_equal('', 'moving/@1/quantity_txt', "10,000")

        self.factory.xfer = BillAddModify()
        self.calljson('/diacamma.invoice/billAddModify',
                      {'bill_type': 0, 'date': '2015-04-01', 'SAVE': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billAddModify')
        self.factory.xfer = SupportingThirdValid()
        self.calljson('/diacamma.payoff/supportingThirdValid',
                      {'supporting': 1, 'third': 6}, False)
        self.assert_observer('core.acknowledge', 'diacamma.payoff', 'supportingThirdValid')
        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 1, 'article': 1, 'designation': 'article A', 'price': '1.11', 'quantity': 5, 'storagearea': 1}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "10,000")
        self.assert_json_equal('', 'storage/@0/amount', 50.00)
        self.assert_json_equal('', 'storage/@0/mean', 5.0)
        self.assert_json_equal('', 'storage/@0/available', "10,000")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', 20.00)
        self.assert_json_equal('', 'storage/@1/mean', 4.0)
        self.assert_json_equal('', 'storage/@1/available', "5,000")
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 70.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/mean', {"value": 4.67, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/available', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})

        self.factory.xfer = BillTransition()
        self.calljson('/diacamma.invoice/billTransition',
                      {'CONFIRME': 'YES', 'bill': 1, 'withpayoff': False, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billTransition')

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "10,000")
        self.assert_json_equal('', 'storage/@0/amount', 50.00)
        self.assert_json_equal('', 'storage/@0/mean', 5.0)
        self.assert_json_equal('', 'storage/@0/available', "5,000")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', 20.00)
        self.assert_json_equal('', 'storage/@1/mean', 4.0)
        self.assert_json_equal('', 'storage/@1/available', "5,000")
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 70.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/mean', {"value": 4.67, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/available', {"value": "10,000", "format": "{[b]}{0}{[/b]}"})

    def test_order(self):
        insert_storage()

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "10,000")
        self.assert_json_equal('', 'storage/@0/amount', 50.00)
        self.assert_json_equal('', 'storage/@0/mean', 5.0)
        self.assert_json_equal('', 'storage/@0/available', "10,000")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', 20.00)
        self.assert_json_equal('', 'storage/@1/mean', 4.0)
        self.assert_json_equal('', 'storage/@1/available', "5,000")
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 70.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/mean', {"value": 4.67, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/available', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_count_equal('moving', 2)
        self.assert_json_equal('', 'moving/@0/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'moving/@0/storagesheet.comment', "B")
        self.assert_json_equal('', 'moving/@0/quantity_txt', "5,000")
        self.assert_json_equal('', 'moving/@1/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'moving/@1/storagesheet.comment', "A")
        self.assert_json_equal('', 'moving/@1/quantity_txt', "10,000")

        self.factory.xfer = BillAddModify()
        self.calljson('/diacamma.invoice/billAddModify',
                      {'bill_type': 4, 'date': '2015-04-01', 'SAVE': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billAddModify')
        self.factory.xfer = SupportingThirdValid()
        self.calljson('/diacamma.payoff/supportingThirdValid',
                      {'supporting': 1, 'third': 6}, False)
        self.assert_observer('core.acknowledge', 'diacamma.payoff', 'supportingThirdValid')
        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 1, 'article': 1, 'designation': 'article A', 'price': '1.11', 'quantity': 5, 'storagearea': 1}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "10,000")
        self.assert_json_equal('', 'storage/@0/amount', 50.00)
        self.assert_json_equal('', 'storage/@0/mean', 5.0)
        self.assert_json_equal('', 'storage/@0/available', "10,000")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', 20.00)
        self.assert_json_equal('', 'storage/@1/mean', 4.0)
        self.assert_json_equal('', 'storage/@1/available', "5,000")
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 70.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/mean', {"value": 4.67, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/available', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})

        self.factory.xfer = BillTransition()
        self.calljson('/diacamma.invoice/billTransition',
                      {'CONFIRME': 'YES', 'bill': 1, 'withpayoff': False, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billTransition')

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "10,000")
        self.assert_json_equal('', 'storage/@0/amount', 50.00)
        self.assert_json_equal('', 'storage/@0/mean', 5.0)
        self.assert_json_equal('', 'storage/@0/available', "5,000")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', 20.00)
        self.assert_json_equal('', 'storage/@1/mean', 4.0)
        self.assert_json_equal('', 'storage/@1/available', "5,000")
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "15,000", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 70.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/mean', {"value": 4.67, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/available', {"value": "10,000", "format": "{[b]}{0}{[/b]}"})

    def test_kit(self):
        insert_storage()

        # Article 1 | "Lieu 1" qty=10 amount=50.0 (5) | "Lieu 2" qty=05 amount=20.0 (4)
        # Article 2 | "Lieu 1" qty=15 amount=60.0 (4) | "Lieu 2" qty=10 amount=30.0 (3)
        create_kit('KIT01', 68.74, {1: 2.0, 2: 3.0})

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': 6}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 15)
        self.assert_json_equal('LABELFORM', 'reference', "KIT01")
        self.assert_count_equal('kit_article', 2)
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "5")
        self.assert_json_equal('', 'storage/@0/amount', 110.00)
        self.assert_json_equal('', 'storage/@0/mean', 22.0)
        self.assert_json_equal('', 'storage/@0/available', "5")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "2")
        self.assert_json_equal('', 'storage/@1/amount', 34.00)
        self.assert_json_equal('', 'storage/@1/mean', 17.0)
        self.assert_json_equal('', 'storage/@1/available', "2")
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "7", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 144, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/mean', {"value": 20.57, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/available', {"value": '7', "format": "{[b]}{0}{[/b]}"})

        self.factory.xfer = BillAddModify()
        self.calljson('/diacamma.invoice/billAddModify',
                      {'bill_type': 1, 'date': '2015-04-01', 'SAVE': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billAddModify')
        self.factory.xfer = SupportingThirdValid()
        self.calljson('/diacamma.payoff/supportingThirdValid',
                      {'supporting': 1, 'third': 6}, False)
        self.assert_observer('core.acknowledge', 'diacamma.payoff', 'supportingThirdValid')
        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 1, 'article': 1, 'designation': 'article A', 'price': '1.11', 'quantity': 4, 'storagearea': 1}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')
        self.factory.xfer = BillShow()
        self.calljson('/diacamma.invoice/billShow', {'bill': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billShow')
        self.assert_json_equal('LABELFORM', 'info', [])
        self.factory.xfer = BillTransition()
        self.calljson('/diacamma.invoice/billTransition',
                      {'CONFIRME': 'YES', 'bill': 1, 'withpayoff': False, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billTransition')

        self.factory.xfer = BillAddModify()
        self.calljson('/diacamma.invoice/billAddModify',
                      {'bill_type': 0, 'date': '2015-04-01', 'SAVE': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billAddModify')
        self.factory.xfer = SupportingThirdValid()
        self.calljson('/diacamma.payoff/supportingThirdValid',
                      {'supporting': 2, 'third': 6}, False)
        self.assert_observer('core.acknowledge', 'diacamma.payoff', 'supportingThirdValid')
        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 2, 'article': 2, 'designation': 'article A', 'price': '1.11', 'quantity': 7, 'storagearea': 2}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')
        self.factory.xfer = BillShow()
        self.calljson('/diacamma.invoice/billShow', {'bill': 2}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billShow')
        self.assert_json_equal('LABELFORM', 'info', [])
        self.factory.xfer = BillTransition()
        self.calljson('/diacamma.invoice/billTransition',
                      {'CONFIRME': 'YES', 'bill': 2, 'withpayoff': False, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billTransition')

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': 6}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 15)
        self.assert_json_equal('LABELFORM', 'reference', "KIT01")
        self.assert_count_equal('kit_article', 2)
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "3")
        self.assert_json_equal('', 'storage/@0/amount', 66.00)
        self.assert_json_equal('', 'storage/@0/mean', 22.0)
        self.assert_json_equal('', 'storage/@0/available', "3")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "2")
        self.assert_json_equal('', 'storage/@1/amount', 34.00)
        self.assert_json_equal('', 'storage/@1/mean', 17.0)
        self.assert_json_equal('', 'storage/@1/available', "1")
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "5", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 100, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/mean', {"value": 20.0, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/available', {"value": '4', "format": "{[b]}{0}{[/b]}"})

    def test_bill_kit(self):
        insert_storage()
        create_kit('KIT01', 68.74, {1: 2.0, 2: 3.0})
        # Article 1 | "Lieu 1" qty=10 amount=50.0 (5) | "Lieu 2" qty=05 amount=20.0 (4)
        # Article 2 | "Lieu 1" qty=15 amount=60.0 (4) | "Lieu 2" qty=10 amount=30.0 (3)

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1, 'sheet_type': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 0)

        self.factory.xfer = BillAddModify()
        self.calljson('/diacamma.invoice/billAddModify',
                      {'bill_type': 1, 'date': '2015-05-07', 'SAVE': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billAddModify')
        self.factory.xfer = SupportingThirdValid()
        self.calljson('/diacamma.payoff/supportingThirdValid',
                      {'supporting': 1, 'third': 6}, False)
        self.assert_observer('core.acknowledge', 'diacamma.payoff', 'supportingThirdValid')
        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 1, 'article': 6, 'designation': 'Kit', 'price': '15.14', 'quantity': 3, 'storagearea': 1}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')
        self.factory.xfer = BillShow()
        self.calljson('/diacamma.invoice/billShow', {'bill': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billShow')
        self.assert_json_equal('LABELFORM', 'info', [])
        self.factory.xfer = BillTransition()
        self.calljson('/diacamma.invoice/billTransition',
                      {'CONFIRME': 'YES', 'bill': 1, 'withpayoff': False, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billTransition')

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1, 'sheet_type': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 1)

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "4,000")
        self.assert_json_equal('', 'storage/@0/amount', 20.00)
        self.assert_json_equal('', 'storage/@0/available', "4,000")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', 20.00)
        self.assert_json_equal('', 'storage/@1/available', "5,000")
        self.assert_count_equal('moving', 3)
        self.assert_json_equal('', 'moving/@0/storagesheet.date', "2015-05-07")
        self.assert_json_equal('', 'moving/@0/storagesheet.comment', "facture A-1 - 7 mai 2015")
        self.assert_json_equal('', 'moving/@0/quantity_txt', "-6,000")
        self.assert_json_equal('', 'moving/@1/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'moving/@1/storagesheet.comment', "B")
        self.assert_json_equal('', 'moving/@1/quantity_txt', "5,000")
        self.assert_json_equal('', 'moving/@2/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'moving/@2/storagesheet.comment', "A")
        self.assert_json_equal('', 'moving/@2/quantity_txt', "10,000")

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '2'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC2")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "6,0")
        self.assert_json_equal('', 'storage/@0/amount', 24.00)
        self.assert_json_equal('', 'storage/@0/available', "6,0")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "10,0")
        self.assert_json_equal('', 'storage/@1/amount', 30.00)
        self.assert_json_equal('', 'storage/@1/available', "10,0")
        self.assert_count_equal('moving', 3)
        self.assert_json_equal('', 'moving/@0/storagesheet.date', "2015-05-07")
        self.assert_json_equal('', 'moving/@0/storagesheet.comment', "facture A-1 - 7 mai 2015")
        self.assert_json_equal('', 'moving/@0/quantity_txt', "-9,0")
        self.assert_json_equal('', 'moving/@1/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'moving/@1/storagesheet.comment', "B")
        self.assert_json_equal('', 'moving/@1/quantity_txt', "10,0")
        self.assert_json_equal('', 'moving/@2/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'moving/@2/storagesheet.comment', "A")
        self.assert_json_equal('', 'moving/@2/quantity_txt', "15,0")

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': 6}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 15)
        self.assert_json_equal('LABELFORM', 'reference', "KIT01")
        self.assert_count_equal('kit_article', 2)
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "2")
        self.assert_json_equal('', 'storage/@0/amount', 44.00)
        self.assert_json_equal('', 'storage/@0/mean', 22.0)
        self.assert_json_equal('', 'storage/@0/available', "2")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "2")
        self.assert_json_equal('', 'storage/@1/amount', 34.00)
        self.assert_json_equal('', 'storage/@1/mean', 17.0)
        self.assert_json_equal('', 'storage/@1/available', "2")
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "4", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 78, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/mean', {"value": 19.5, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/available', {"value": '4', "format": "{[b]}{0}{[/b]}"})

    def test_quotation_kit(self):
        insert_storage()
        create_kit('KIT01', 68.74, {1: 2.0, 2: 3.0})
        # Article 1 | "Lieu 1" qty=10 amount=50.0 (5) | "Lieu 2" qty=05 amount=20.0 (4)
        # Article 2 | "Lieu 1" qty=15 amount=60.0 (4) | "Lieu 2" qty=10 amount=30.0 (3)

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1, 'sheet_type': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 0)

        self.factory.xfer = BillAddModify()
        self.calljson('/diacamma.invoice/billAddModify',
                      {'bill_type': 0, 'date': '2015-05-07', 'SAVE': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billAddModify')
        self.factory.xfer = SupportingThirdValid()
        self.calljson('/diacamma.payoff/supportingThirdValid',
                      {'supporting': 1, 'third': 6}, False)
        self.assert_observer('core.acknowledge', 'diacamma.payoff', 'supportingThirdValid')
        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 1, 'article': 6, 'designation': 'Kit', 'price': '15.14', 'quantity': 3, 'storagearea': 1}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')
        self.factory.xfer = BillShow()
        self.calljson('/diacamma.invoice/billShow', {'bill': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billShow')
        self.assert_json_equal('LABELFORM', 'info', [])
        self.factory.xfer = BillTransition()
        self.calljson('/diacamma.invoice/billTransition',
                      {'CONFIRME': 'YES', 'bill': 1, 'withpayoff': False, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billTransition')

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1, 'sheet_type': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 0)

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "10,000")
        self.assert_json_equal('', 'storage/@0/amount', 50.00)
        self.assert_json_equal('', 'storage/@0/available', "4,000")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "5,000")
        self.assert_json_equal('', 'storage/@1/amount', 20.00)
        self.assert_json_equal('', 'storage/@1/available', "5,000")
        self.assert_count_equal('moving', 2)

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '2'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 18)
        self.assert_json_equal('LABELFORM', 'reference', "ABC2")
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "15,0")
        self.assert_json_equal('', 'storage/@0/amount', 60.00)
        self.assert_json_equal('', 'storage/@0/available', "6,0")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "10,0")
        self.assert_json_equal('', 'storage/@1/amount', 30.00)
        self.assert_json_equal('', 'storage/@1/available', "10,0")
        self.assert_count_equal('moving', 2)

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': 6}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_count_equal('', 15)
        self.assert_json_equal('LABELFORM', 'reference', "KIT01")
        self.assert_count_equal('kit_article', 2)
        self.assert_count_equal('storage', 3)
        self.assert_json_equal('', 'storage/@0/area', "Lieu 1")
        self.assert_json_equal('', 'storage/@0/qty', "5")
        self.assert_json_equal('', 'storage/@0/amount', 110.00)
        self.assert_json_equal('', 'storage/@0/mean', 22.0)
        self.assert_json_equal('', 'storage/@0/available', "2")
        self.assert_json_equal('', 'storage/@1/area', "Lieu 2")
        self.assert_json_equal('', 'storage/@1/qty', "2")
        self.assert_json_equal('', 'storage/@1/amount', 34.00)
        self.assert_json_equal('', 'storage/@1/mean', 17.0)
        self.assert_json_equal('', 'storage/@1/available', "2")
        self.assert_json_equal('', 'storage/@2/area', {"value": "Total", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/qty', {"value": "7", "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/amount', {"value": 144, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/mean', {"value": 20.57, "format": "{[b]}{0}{[/b]}"})
        self.assert_json_equal('', 'storage/@2/available', {"value": '4', "format": "{[b]}{0}{[/b]}"})

    def test_import(self):
        self.factory.xfer = ArticleList()
        self.calljson('/diacamma.invoice/articleList', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleList')
        self.assert_count_equal('', 8)
        self.assert_grid_equal('article', {"reference": "référence", "designation": "désignation", "price": "prix", "unit": "unité",
                                           "stockable": "stockable", "categories": "catégories", "stockage_total": "quantités", "available_total": "disponible"}, 4)
        self.assert_json_equal('', '#article/headers/@2/@0', "price")
        self.assert_json_equal('', '#article/headers/@2/@2', "C2EUR")

        self.assert_json_equal('', 'article/@0/reference', "ABC1")
        self.assert_json_equal('', 'article/@0/stockage_total', "0,000")
        self.assert_json_equal('', 'article/@1/reference', "ABC2")
        self.assert_json_equal('', 'article/@1/stockage_total', "0,0")
        self.assert_json_equal('', 'article/@2/reference', "ABC3")
        self.assert_json_equal('', 'article/@2/stockage_total', None)
        self.assert_json_equal('', 'article/@3/reference', "ABC4")
        self.assert_json_equal('', 'article/@3/stockage_total', "0")

        csv_content = """'num','prix','qty'
'ABC1','1.11','10.00'
'ABC2','2,22','5.00'
'ABC3','3.33','25,00'
'XYZ0','6.66','88.00'
'ABC4','4,44','20.00'
'ABC5','5.55','15.00'
"""
        self.factory.xfer = StorageSheetAddModify()
        self.calljson('/diacamma.invoice/storageSheetAddModify',
                      {'sheet_type': 0, 'date': '2014-04-01', 'SAVE': 'YES', 'storagearea': 1, 'comment': "arrivage massif!"}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageSheetAddModify')

        self.factory.xfer = StorageDetailImport()
        self.calljson('/diacamma.invoice/storageDetailImport', {'storagesheet': "1", 'step': 2, 'modelname': 'invoice.StorageDetail', 'quotechar': "'",
                                                                'delimiter': ',', 'encoding': 'utf-8', 'dateformat': '%d/%m/%Y', 'importcontent': StringIO(csv_content)}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageDetailImport')
        self.assert_count_equal('', 11)
        self.assert_select_equal('fld_article', 3)  # nb=3
        self.assert_select_equal('fld_price', 3)  # nb=3
        self.assert_select_equal('fld_quantity', 3)  # nb=3
        self.assert_count_equal('Array', 6)
        self.assert_count_equal('#Array/actions', 0)
        self.assertEqual(len(self.json_actions), 1)
        self.assert_action_equal('POST', self.json_actions[0], ('Annuler', 'mdi:mdi-cancel'))

        self.factory.xfer = StorageDetailImport()
        self.calljson('/diacamma.invoice/storageDetailImport', {'storagesheet': "1", 'step': 3, 'modelname': 'invoice.StorageDetail', 'quotechar': "'", 'delimiter': ',',
                                                                'encoding': 'utf-8', 'dateformat': '%d/%m/%Y', 'importcontent0': csv_content,
                                                                "fld_article": "num", "fld_price": "prix", "fld_quantity": "qty", }, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageDetailImport')
        self.assert_count_equal('', 6)
        self.assert_count_equal('Array', 6)
        self.assert_count_equal('#Array/actions', 0)
        self.assertEqual(len(self.json_actions), 1)
        self.assert_action_equal('POST', self.json_actions[0], ('Annuler', 'mdi:mdi-cancel'))

        self.factory.xfer = StorageDetailImport()
        self.calljson('/diacamma.invoice/storageDetailImport', {'storagesheet': "1", 'step': 4, 'modelname': 'invoice.StorageDetail', 'quotechar': "'", 'delimiter': ',',
                                                                'encoding': 'utf-8', 'dateformat': '%d/%m/%Y', 'importcontent0': csv_content,
                                                                "fld_article": "num", "fld_price": "prix", "fld_quantity": "qty", }, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageDetailImport')
        self.assert_count_equal('', 3)
        self.assert_json_equal('LABELFORM', 'result', "5 éléments ont été importés")
        self.assert_json_equal('LABELFORM', 'import_error', ["article 'XYZ0' inconnu(e) !"])
        self.assertEqual(len(self.json_actions), 1)

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "1"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_count_equal('', 12)
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_count_equal('storagedetail', 5)
        self.assert_json_equal('', 'storagedetail/@0/article', "ABC1")
        self.assert_json_equal('', 'storagedetail/@1/article', "ABC2")
        self.assert_json_equal('', 'storagedetail/@2/article', "ABC3")
        self.assert_json_equal('', 'storagedetail/@3/article', "ABC4")
        self.assert_json_equal('', 'storagedetail/@4/article', "ABC5")
        self.assert_json_equal('LABELFORM', 'info', ["L'article ABC3 est en non stockable", "L'article ABC5 est en non stockable"])

        self.factory.xfer = StorageDetailDel()
        self.calljson('/diacamma.invoice/storageDetailDel', {'storagedetail': "3", 'CONFIRME': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageDetailDel')
        self.factory.xfer = StorageDetailDel()
        self.calljson('/diacamma.invoice/storageDetailDel', {'storagedetail': "5", 'CONFIRME': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageDetailDel')

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "1"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_json_equal('LABELFORM', 'info', [])

        self.factory.xfer = StorageSheetTransition()
        self.calljson('/diacamma.invoice/storageSheetTransition',
                      {'CONFIRME': 'YES', 'storagesheet': 1, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'storageSheetTransition')

        self.factory.xfer = ArticleList()
        self.calljson('/diacamma.invoice/articleList', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleList')
        self.assert_count_equal('', 8)
        self.assert_count_equal('article', 4)
        self.assert_json_equal('', 'article/@0/reference', "ABC1")
        self.assert_json_equal('', 'article/@0/stockage_total', "10,000")
        self.assert_json_equal('', 'article/@1/reference', "ABC2")
        self.assert_json_equal('', 'article/@1/stockage_total', "5,0")
        self.assert_json_equal('', 'article/@2/reference', "ABC3")
        self.assert_json_equal('', 'article/@2/stockage_total', None)
        self.assert_json_equal('', 'article/@3/reference', "ABC4")
        self.assert_json_equal('', 'article/@3/stockage_total', "20")

    def test_situation(self):
        insert_storage()
        self.factory.xfer = StorageSituation()
        self.calljson('/diacamma.invoice/storageSituation', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSituation')
        self.assert_count_equal('', 13)
        self.assert_json_equal('LABELFORM', 'nb', 6)
        self.assert_json_equal('', '#nb/formatnum', "N0")
        self.assert_json_equal('LABELFORM', 'total', 250.0)
        self.assert_json_equal('', '#total/formatnum', "C2EUR")
        self.assert_count_equal('articlesituation', 6)
        self.assert_json_equal('', '#articlesituation/headers/@4/@0', "amount")
        self.assert_json_equal('', '#articlesituation/headers/@4/@2', "C2EUR")
        self.assert_json_equal('', '#articlesituation/headers/@5/@0', "mean")
        self.assert_json_equal('', '#articlesituation/headers/@5/@2', "C2EUR")

        self.assert_json_equal('', 'articlesituation/@0/article', "ABC1")
        self.assert_json_equal('', 'articlesituation/@0/storagearea', 'Lieu 1')
        self.assert_json_equal('', 'articlesituation/@0/quantity_txt', "10,000")
        self.assert_json_equal('', 'articlesituation/@0/amount', 50.0)
        self.assert_json_equal('', 'articlesituation/@0/mean', 5.0)
        self.assert_json_equal('', 'articlesituation/@1/article', "ABC1")
        self.assert_json_equal('', 'articlesituation/@1/storagearea', 'Lieu 2')
        self.assert_json_equal('', 'articlesituation/@1/quantity_txt', "5,000")
        self.assert_json_equal('', 'articlesituation/@1/amount', 20.0)
        self.assert_json_equal('', 'articlesituation/@1/mean', 4.0)

        self.assert_json_equal('', 'articlesituation/@2/article', "ABC2")
        self.assert_json_equal('', 'articlesituation/@2/storagearea', 'Lieu 1')
        self.assert_json_equal('', 'articlesituation/@2/quantity_txt', "15,0")
        self.assert_json_equal('', 'articlesituation/@2/amount', 60.0)
        self.assert_json_equal('', 'articlesituation/@3/article', "ABC2")
        self.assert_json_equal('', 'articlesituation/@3/storagearea', 'Lieu 2')
        self.assert_json_equal('', 'articlesituation/@3/quantity_txt', "10,0")
        self.assert_json_equal('', 'articlesituation/@3/amount', 30.0)

        self.assert_json_equal('', 'articlesituation/@4/article', "ABC4")
        self.assert_json_equal('', 'articlesituation/@4/storagearea', 'Lieu 1')
        self.assert_json_equal('', 'articlesituation/@4/quantity_txt', "20")
        self.assert_json_equal('', 'articlesituation/@4/amount', 60.0)
        self.assert_json_equal('', 'articlesituation/@5/article', "ABC4")
        self.assert_json_equal('', 'articlesituation/@5/storagearea', 'Lieu 2')
        self.assert_json_equal('', 'articlesituation/@5/quantity_txt', "15")
        self.assert_json_equal('', 'articlesituation/@5/amount', 30.0)

        self.factory.xfer = StorageSituation()
        self.calljson('/diacamma.invoice/storageSituation', {'storagearea': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSituation')
        self.assert_count_equal('', 13)
        self.assert_json_equal('LABELFORM', 'nb', 3)
        self.assert_json_equal('LABELFORM', 'total', 170.00)
        self.assert_count_equal('articlesituation', 3)
        self.assert_json_equal('', 'articlesituation/@0/article', "ABC1")
        self.assert_json_equal('', 'articlesituation/@0/storagearea', 'Lieu 1')
        self.assert_json_equal('', 'articlesituation/@0/quantity_txt', "10,000")
        self.assert_json_equal('', 'articlesituation/@0/amount', 50.0)

        self.assert_json_equal('', 'articlesituation/@1/article', "ABC2")
        self.assert_json_equal('', 'articlesituation/@1/storagearea', 'Lieu 1')
        self.assert_json_equal('', 'articlesituation/@1/quantity_txt', "15,0")
        self.assert_json_equal('', 'articlesituation/@1/amount', 60.00)

        self.assert_json_equal('', 'articlesituation/@2/article', "ABC4")
        self.assert_json_equal('', 'articlesituation/@2/storagearea', 'Lieu 1')
        self.assert_json_equal('', 'articlesituation/@2/quantity_txt', "20")
        self.assert_json_equal('', 'articlesituation/@2/amount', 60.00)
        self.assert_json_equal('LABELFORM', 'total', 170.00)

        self.factory.xfer = StorageSituation()
        self.calljson('/diacamma.invoice/storageSituation', {'ref_filter': 'BC1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSituation')
        self.assert_count_equal('', 13)
        self.assert_count_equal('articlesituation', 2)
        self.assert_json_equal('', 'articlesituation/@0/article', "ABC1")
        self.assert_json_equal('', 'articlesituation/@0/storagearea', 'Lieu 1')
        self.assert_json_equal('', 'articlesituation/@0/quantity_txt', "10,000")
        self.assert_json_equal('', 'articlesituation/@0/amount', 50.00)
        self.assert_json_equal('', 'articlesituation/@1/article', "ABC1")
        self.assert_json_equal('', 'articlesituation/@1/storagearea', 'Lieu 2')
        self.assert_json_equal('', 'articlesituation/@1/quantity_txt', "5,000")
        self.assert_json_equal('', 'articlesituation/@1/amount', 20.00)
        self.assert_json_equal('LABELFORM', 'total', 70.00)

        self.factory.xfer = StorageSituation()
        self.calljson('/diacamma.invoice/storageSituation', {'cat_filter': '3'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSituation')
        self.assert_count_equal('', 13)
        self.assert_count_equal('articlesituation', 2)
        self.assert_json_equal('', 'articlesituation/@0/article', "ABC4")
        self.assert_json_equal('', 'articlesituation/@0/storagearea', 'Lieu 1')
        self.assert_json_equal('', 'articlesituation/@0/quantity_txt', "20")
        self.assert_json_equal('', 'articlesituation/@0/amount', 60.00)
        self.assert_json_equal('', 'articlesituation/@1/article', "ABC4")
        self.assert_json_equal('', 'articlesituation/@1/storagearea', 'Lieu 2')
        self.assert_json_equal('', 'articlesituation/@1/quantity_txt', "15")
        self.assert_json_equal('', 'articlesituation/@1/amount', 30.00)
        self.assert_json_equal('LABELFORM', 'total', 90.0)

        self.factory.xfer = StorageSituation()
        self.calljson('/diacamma.invoice/storageSituation', {'hide_empty': False}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSituation')
        self.assert_count_equal('', 13)
        self.assert_count_equal('articlesituation', 6)

    def test_historic(self):
        insert_storage(True)
        self.factory.xfer = StorageHistoric()
        self.calljson('/diacamma.invoice/storageHistoric', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageHistoric')
        self.assert_count_equal('', 8)
        self.assert_count_equal('storagedetail', 9)
        self.assert_json_equal('', 'storagedetail/@0/article', "ABC1")
        self.assert_json_equal('', 'storagedetail/@0/storagesheet.date', "2014-01-05")
        self.assert_json_equal('', 'storagedetail/@0/quantity', "-1.000")
        self.assert_json_equal('', 'storagedetail/@1/article', "ABC2")
        self.assert_json_equal('', 'storagedetail/@1/storagesheet.date', "2014-01-05")
        self.assert_json_equal('', 'storagedetail/@1/quantity', "-2.0")
        self.assert_json_equal('', 'storagedetail/@2/article', "ABC4")
        self.assert_json_equal('', 'storagedetail/@2/storagesheet.date', "2014-01-05")
        self.assert_json_equal('', 'storagedetail/@2/quantity', "-3")

        self.assert_json_equal('', 'storagedetail/@3/article', "ABC1")
        self.assert_json_equal('', 'storagedetail/@3/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'storagedetail/@3/quantity', "5.000")
        self.assert_json_equal('', 'storagedetail/@4/article', "ABC2")
        self.assert_json_equal('', 'storagedetail/@4/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'storagedetail/@4/quantity', "10.0")
        self.assert_json_equal('', 'storagedetail/@5/article', "ABC4")
        self.assert_json_equal('', 'storagedetail/@5/storagesheet.date', "2014-01-02")
        self.assert_json_equal('', 'storagedetail/@5/quantity', "15")

        self.assert_json_equal('', 'storagedetail/@6/article', "ABC1")
        self.assert_json_equal('', 'storagedetail/@6/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'storagedetail/@6/quantity', "10.000")
        self.assert_json_equal('', 'storagedetail/@7/article', "ABC2")
        self.assert_json_equal('', 'storagedetail/@7/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'storagedetail/@7/quantity', "15.0")
        self.assert_json_equal('', 'storagedetail/@8/article', "ABC4")
        self.assert_json_equal('', 'storagedetail/@8/storagesheet.date', "2014-01-01")
        self.assert_json_equal('', 'storagedetail/@8/quantity', "20")

        self.factory.xfer = StorageHistoric()
        self.calljson('/diacamma.invoice/storageHistoric', {'begin_date': '2014-01-02', 'end_date': '2014-01-04'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageHistoric')
        self.assert_count_equal('', 8)
        self.assert_count_equal('storagedetail', 3)

        self.factory.xfer = StorageHistoric()
        self.calljson('/diacamma.invoice/storageHistoric', {'storagearea': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageHistoric')
        self.assert_count_equal('', 8)
        self.assert_count_equal('storagedetail', 6)

        self.factory.xfer = StorageHistoric()
        self.calljson('/diacamma.invoice/storageHistoric', {'cat_filter': 3}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageHistoric')
        self.assert_count_equal('', 8)
        self.assert_count_equal('storagedetail', 3)

        self.factory.xfer = StorageHistoric()
        self.calljson('/diacamma.invoice/storageHistoric', {'ref_filter': 'BC2'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageHistoric')
        self.assert_count_equal('', 8)
        self.assert_count_equal('storagedetail', 3)

    def test_inventory_empty(self):
        Article.objects.create(reference='ABC6', designation="Article 06",
                               price="6.89", unit="", isdisabled=False, accountposting_id=4, vat=None, stockable=1, qtyDecimal=0)
        insert_storage(True)
        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 4)

        self.factory.xfer = InventorySheetList()
        self.calljson('/diacamma.invoice/inventorySheetList', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetList')
        self.assert_count_equal('', 4)
        self.assert_count_equal('inventorysheet', 0)

        self.factory.xfer = InventorySheetAddModify()
        self.calljson('/diacamma.invoice/inventorySheetAddModify', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetAddModify')
        self.assert_count_equal('', 4)
        self.assert_select_equal('storagearea', {1: "Lieu 1", 2: "Lieu 2", 3: "Lieu 3"})

        self.factory.xfer = InventorySheetAddModify()
        self.calljson('/diacamma.invoice/inventorySheetAddModify', {'SAVE': 'YES', 'storagearea': 2, 'comment': 'blablabla', 'date': '2015-07-13'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventorySheetAddModify')

        self.factory.xfer = InventorySheetShow()
        self.calljson('/diacamma.invoice/inventorySheetShow', {'inventorysheet': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetShow')
        self.assert_count_equal('', 2 + 4 + 4 + 1)
        self.assert_json_equal('LABELFORM', 'date', '2015-07-13')
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_json_equal('LABELFORM', 'storagearea', 'Lieu 2')
        self.assert_json_equal('LABELFORM', 'comment', "blablabla")
        self.assert_count_equal('inventorydetail', 4)
        self.assert_count_equal('#inventorydetail/actions', 3)
        self.assert_json_equal('', 'inventorydetail/@0/article', "ABC1")
        self.assert_json_equal('', 'inventorydetail/@0/article.designation', "Article 01")
        self.assert_json_equal('', 'inventorydetail/@0/real_quantity_txt', '5,000')
        self.assert_json_equal('', 'inventorydetail/@0/quantity_txt', None)
        self.assert_json_equal('', 'inventorydetail/@1/article', "ABC2")
        self.assert_json_equal('', 'inventorydetail/@1/article.designation', "Article 02")
        self.assert_json_equal('', 'inventorydetail/@1/real_quantity_txt', "10,0")
        self.assert_json_equal('', 'inventorydetail/@1/quantity_txt', None)
        self.assert_json_equal('', 'inventorydetail/@2/article', "ABC4")
        self.assert_json_equal('', 'inventorydetail/@2/article.designation', "Article 04")
        self.assert_json_equal('', 'inventorydetail/@2/real_quantity_txt', "15")
        self.assert_json_equal('', 'inventorydetail/@2/quantity_txt', None)
        self.assert_json_equal('', 'inventorydetail/@3/article', "ABC6")
        self.assert_json_equal('', 'inventorydetail/@3/article.designation', "Article 06")
        self.assert_json_equal('', 'inventorydetail/@3/real_quantity_txt', "0")
        self.assert_json_equal('', 'inventorydetail/@3/quantity_txt', None)
        self.assertEqual(len(self.json_actions), 3)
        self.assert_action_equal('POST', self.json_actions[0], (str('Modifier'), 'mdi:mdi-pencil-outline', 'diacamma.invoice', 'inventorySheetAddModify', 1, 1, 0))
        self.assert_action_equal('GET', self.json_actions[1], (str('Imprimer'), 'mdi:mdi-printer-outline', 'diacamma.invoice', 'inventorySheetPrint', 0, 1, 0))

        self.factory.xfer = InventorySheetShow()
        self.calljson('/diacamma.invoice/inventorySheetShow', {'inventorysheet': 1, 'enter_mode': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetShow')
        self.assert_count_equal('inventorydetail', 4)

        self.factory.xfer = InventorySheetShow()
        self.calljson('/diacamma.invoice/inventorySheetShow', {'inventorysheet': 1, 'enter_mode': 2}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetShow')
        self.assert_count_equal('inventorydetail', 0)

        self.factory.xfer = InventorySheetShow()
        self.calljson('/diacamma.invoice/inventorySheetShow', {'inventorysheet': 1, 'enter_mode': 3}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetShow')
        self.assert_count_equal('inventorydetail', 3)

        self.factory.xfer = InventoryDetailCopy()
        self.calljson('/diacamma.invoice/inventoryDetailCopy', {'inventorysheet': 1, 'inventorydetail': '1;2;3;4'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventoryDetailCopy')

        self.factory.xfer = InventorySheetShow()
        self.calljson('/diacamma.invoice/inventorySheetShow', {'inventorysheet': 1, 'enter_mode': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetShow')
        self.assert_count_equal('inventorydetail', 0)

        self.factory.xfer = InventorySheetShow()
        self.calljson('/diacamma.invoice/inventorySheetShow', {'inventorysheet': 1, 'enter_mode': 2}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetShow')
        self.assert_count_equal('inventorydetail', 4)
        self.assert_count_equal('#inventorydetail/actions', 2)
        self.assert_json_equal('', 'inventorydetail/@0/article', "ABC1")
        self.assert_json_equal('', 'inventorydetail/@0/real_quantity_txt', '5,000')
        self.assert_json_equal('', 'inventorydetail/@0/quantity_txt', '5,000')
        self.assert_json_equal('', 'inventorydetail/@1/article', "ABC2")
        self.assert_json_equal('', 'inventorydetail/@1/real_quantity_txt', "10,0")
        self.assert_json_equal('', 'inventorydetail/@1/quantity_txt', "10,0")
        self.assert_json_equal('', 'inventorydetail/@2/article', "ABC4")
        self.assert_json_equal('', 'inventorydetail/@2/real_quantity_txt', "15")
        self.assert_json_equal('', 'inventorydetail/@2/quantity_txt', "15")
        self.assert_json_equal('', 'inventorydetail/@3/article', "ABC6")
        self.assert_json_equal('', 'inventorydetail/@3/real_quantity_txt', "0")
        self.assert_json_equal('', 'inventorydetail/@3/quantity_txt', "0")
        self.assertEqual(len(self.json_actions), 4)
        self.assert_action_equal('POST', self.json_actions[0], (str('Valider'), 'mdi:mdi-share', 'diacamma.invoice', 'inventorySheetTransition', 0, 1, 1, {'TRANSITION': 'valid'}))

        self.factory.xfer = InventorySheetTransition()
        self.calljson('/diacamma.invoice/inventorySheetTransition',
                      {'CONFIRME': 'YES', 'inventorysheet': 1, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventorySheetTransition')

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 4)

    def test_inventory_changed(self):
        Article.objects.create(reference='ABC6', designation="Article 06",
                               price="6.89", unit="", isdisabled=False, accountposting_id=4, vat=None, stockable=1, qtyDecimal=0)
        insert_storage(True)
        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 4)

        self.factory.xfer = InventorySheetAddModify()
        self.calljson('/diacamma.invoice/inventorySheetAddModify', {'SAVE': 'YES', 'storagearea': 2, 'comment': 'blablabla', 'date': '2015-07-13'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventorySheetAddModify')

        self.factory.xfer = InventorySheetShow()
        self.calljson('/diacamma.invoice/inventorySheetShow', {'inventorysheet': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetShow')
        self.assert_json_equal('LABELFORM', 'date', '2015-07-13')
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_json_equal('LABELFORM', 'storagearea', 'Lieu 2')
        self.assert_json_equal('LABELFORM', 'comment', "blablabla")
        self.assert_count_equal('inventorydetail', 4)
        self.assert_count_equal('#inventorydetail/actions', 3)
        self.assert_json_equal('', 'inventorydetail/@0/article', "ABC1")
        self.assert_json_equal('', 'inventorydetail/@0/real_quantity_txt', '5,000')
        self.assert_json_equal('', 'inventorydetail/@0/quantity_txt', None)
        self.assert_json_equal('', 'inventorydetail/@1/article', "ABC2")
        self.assert_json_equal('', 'inventorydetail/@1/real_quantity_txt', "10,0")
        self.assert_json_equal('', 'inventorydetail/@1/quantity_txt', None)
        self.assert_json_equal('', 'inventorydetail/@2/article', "ABC4")
        self.assert_json_equal('', 'inventorydetail/@2/real_quantity_txt', "15")
        self.assert_json_equal('', 'inventorydetail/@2/quantity_txt', None)
        self.assert_json_equal('', 'inventorydetail/@3/article', "ABC6")
        self.assert_json_equal('', 'inventorydetail/@3/real_quantity_txt', "0")
        self.assert_json_equal('', 'inventorydetail/@3/quantity_txt', None)
        self.assertEqual(len(self.json_actions), 3)

        self.factory.xfer = InventoryDetailModify()
        self.calljson('/diacamma.invoice/inventoryDetailModify', {'inventorysheet': 1, 'inventorydetail': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventoryDetailModify')
        self.assert_count_equal('', 5)
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_json_equal('LABELFORM', 'designation', "Article 01")
        self.assert_json_equal('LABELFORM', 'real_quantity', "5,000")
        self.assert_json_equal('FLOAT', 'quantity', 5.0)

        self.factory.xfer = InventoryDetailModify()
        self.calljson('/diacamma.invoice/inventoryDetailModify', {'SAVE': 'YES', 'inventorysheet': 1, 'inventorydetail': '1', 'quantity': 4.0}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventoryDetailModify')

        self.factory.xfer = InventoryDetailModify()
        self.calljson('/diacamma.invoice/inventoryDetailModify', {'SAVE': 'YES', 'inventorysheet': 1, 'inventorydetail': '2', 'quantity': 8.0}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventoryDetailModify')

        self.factory.xfer = InventoryDetailModify()
        self.calljson('/diacamma.invoice/inventoryDetailModify', {'SAVE': 'YES', 'inventorysheet': 1, 'inventorydetail': '3', 'quantity': 15.0}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventoryDetailModify')

        self.factory.xfer = InventoryDetailModify()
        self.calljson('/diacamma.invoice/inventoryDetailModify', {'SAVE': 'YES', 'inventorysheet': 1, 'inventorydetail': '4', 'quantity': 3.0}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventoryDetailModify')

        self.factory.xfer = InventorySheetShow()
        self.calljson('/diacamma.invoice/inventorySheetShow', {'inventorysheet': 1, 'enter_mode': 2}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetShow')
        self.assert_count_equal('inventorydetail', 4)
        self.assert_json_equal('', 'inventorydetail/@0/article', "ABC1")
        self.assert_json_equal('', 'inventorydetail/@0/real_quantity_txt', '5,000')
        self.assert_json_equal('', 'inventorydetail/@0/quantity_txt', '4,000')
        self.assert_json_equal('', 'inventorydetail/@1/article', "ABC2")
        self.assert_json_equal('', 'inventorydetail/@1/real_quantity_txt', "10,0")
        self.assert_json_equal('', 'inventorydetail/@1/quantity_txt', "8,0")
        self.assert_json_equal('', 'inventorydetail/@2/article', "ABC4")
        self.assert_json_equal('', 'inventorydetail/@2/real_quantity_txt', "15")
        self.assert_json_equal('', 'inventorydetail/@2/quantity_txt', "15")
        self.assert_json_equal('', 'inventorydetail/@3/article', "ABC6")
        self.assert_json_equal('', 'inventorydetail/@3/real_quantity_txt', "0")
        self.assert_json_equal('', 'inventorydetail/@3/quantity_txt', "3")
        self.assertEqual(len(self.json_actions), 4)
        self.assert_action_equal('POST', self.json_actions[0], (str('Valider'), 'mdi:mdi-share', 'diacamma.invoice', 'inventorySheetTransition', 0, 1, 1, {'TRANSITION': 'valid'}))

        self.factory.xfer = InventorySheetTransition()
        self.calljson('/diacamma.invoice/inventorySheetTransition',
                      {'CONFIRME': 'YES', 'inventorysheet': 1, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventorySheetTransition')

        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 6)

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "5"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_json_equal('LABELFORM', 'sheet_type', 0)
        self.assert_json_equal('LABELFORM', 'status', 1)
        self.assert_json_equal('LABELFORM', 'storagearea', "Lieu 2")
        self.assert_json_equal('LABELFORM', 'comment', "Entrée d'article suite à inventaire")
        self.assert_count_equal('storagedetail', 1)
        self.assert_json_equal('', 'storagedetail/@0/article', "ABC6")
        self.assert_json_equal('', 'storagedetail/@0/price', 0.0)
        self.assert_json_equal('', 'storagedetail/@0/quantity_txt', "3")

        self.factory.xfer = StorageSheetShow()
        self.calljson('/diacamma.invoice/storageSheetShow', {'storagesheet': "6"}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetShow')
        self.assert_json_equal('LABELFORM', 'sheet_type', 1)
        self.assert_json_equal('LABELFORM', 'status', 1)
        self.assert_json_equal('LABELFORM', 'storagearea', "Lieu 2")
        self.assert_json_equal('LABELFORM', 'comment', "Sortie d'article suite à inventaire")
        self.assert_count_equal('storagedetail', 2)
        self.assert_json_equal('', 'storagedetail/@0/article', "ABC1")
        self.assert_json_equal('', 'storagedetail/@0/quantity_txt', "-1,000")
        self.assert_json_equal('', 'storagedetail/@1/article', "ABC2")
        self.assert_json_equal('', 'storagedetail/@1/quantity_txt', "-2,0")

    def test_inventory_finalize(self):
        insert_storage(True)
        self.factory.xfer = StorageSheetList()
        self.calljson('/diacamma.invoice/storageSheetList', {'status': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'storageSheetList')
        self.assert_count_equal('storagesheet', 4)

        self.factory.xfer = InventorySheetAddModify()
        self.calljson('/diacamma.invoice/inventorySheetAddModify', {'SAVE': 'YES', 'storagearea': 2, 'comment': 'blablabla', 'date': '2015-07-13'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventorySheetAddModify')

        self.factory.xfer = InventoryDetailModify()
        self.calljson('/diacamma.invoice/inventoryDetailModify', {'SAVE': 'YES', 'inventorysheet': 1, 'inventorydetail': '1', 'quantity': 4.0}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventoryDetailModify')

        self.factory.xfer = InventoryDetailModify()
        self.calljson('/diacamma.invoice/inventoryDetailModify', {'SAVE': 'YES', 'inventorysheet': 1, 'inventorydetail': '2', 'quantity': 8.0}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventoryDetailModify')

        self.factory.xfer = InventorySheetShow()
        self.calljson('/diacamma.invoice/inventorySheetShow', {'inventorysheet': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetShow')
        self.assert_json_equal('LABELFORM', 'date', '2015-07-13')
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_json_equal('LABELFORM', 'storagearea', 'Lieu 2')
        self.assert_json_equal('LABELFORM', 'comment', "blablabla")
        self.assert_count_equal('inventorydetail', 3)
        self.assert_count_equal('#inventorydetail/actions', 3)
        self.assert_json_equal('', 'inventorydetail/@0/article', "ABC1")
        self.assert_json_equal('', 'inventorydetail/@0/real_quantity_txt', '5,000')
        self.assert_json_equal('', 'inventorydetail/@0/quantity_txt', '4,000')
        self.assert_json_equal('', 'inventorydetail/@1/article', "ABC2")
        self.assert_json_equal('', 'inventorydetail/@1/real_quantity_txt', "10,0")
        self.assert_json_equal('', 'inventorydetail/@1/quantity_txt', '8,0')
        self.assert_json_equal('', 'inventorydetail/@2/article', "ABC4")
        self.assert_json_equal('', 'inventorydetail/@2/real_quantity_txt', "15")
        self.assert_json_equal('', 'inventorydetail/@2/quantity_txt', None)
        self.assertEqual(len(self.json_actions), 3)

        Article.objects.create(reference='ABC6', designation="Article 06",
                               price="6.89", unit="", isdisabled=False, accountposting_id=4, vat=None, stockable=1, qtyDecimal=0)

        self.factory.xfer = InventorySheetShow()
        self.calljson('/diacamma.invoice/inventorySheetShow', {'inventorysheet': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetShow')
        self.assert_count_equal('inventorydetail', 3)

        self.factory.xfer = InventorySheetAddModify()
        self.calljson('/diacamma.invoice/inventorySheetAddModify', {'SAVE': 'YES', 'inventorysheet': 1, 'storagearea': 2, 'comment': 'blablabla', 'date': '2015-07-13'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'inventorySheetAddModify')

        self.factory.xfer = InventorySheetShow()
        self.calljson('/diacamma.invoice/inventorySheetShow', {'inventorysheet': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetShow')
        self.assert_json_equal('LABELFORM', 'date', '2015-07-13')
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_json_equal('LABELFORM', 'storagearea', 'Lieu 2')
        self.assert_json_equal('LABELFORM', 'comment', "blablabla")
        self.assert_count_equal('inventorydetail', 4)
        self.assert_count_equal('#inventorydetail/actions', 3)
        self.assert_json_equal('', 'inventorydetail/@0/article', "ABC1")
        self.assert_json_equal('', 'inventorydetail/@0/real_quantity_txt', '5,000')
        self.assert_json_equal('', 'inventorydetail/@0/quantity_txt', '4,000')
        self.assert_json_equal('', 'inventorydetail/@1/article', "ABC2")
        self.assert_json_equal('', 'inventorydetail/@1/real_quantity_txt', "10,0")
        self.assert_json_equal('', 'inventorydetail/@1/quantity_txt', '8,0')
        self.assert_json_equal('', 'inventorydetail/@2/article', "ABC4")
        self.assert_json_equal('', 'inventorydetail/@2/real_quantity_txt', "15")
        self.assert_json_equal('', 'inventorydetail/@2/quantity_txt', None)
        self.assert_json_equal('', 'inventorydetail/@3/article', "ABC6")
        self.assert_json_equal('', 'inventorydetail/@3/real_quantity_txt', "0")
        self.assert_json_equal('', 'inventorydetail/@3/quantity_txt', None)
        self.assertEqual(len(self.json_actions), 3)

        self.factory.xfer = InventoryDetailFinalize()
        self.calljson('/diacamma.invoice/inventoryDetailFinalize', {'CONFIRME': 'YES', 'inventorysheet': 1}, False)
        self.assert_observer('core.dialogbox', 'diacamma.invoice', 'inventoryDetailFinalize')
        self.assert_json_equal('', 'text', '2 articles ont été reportés.')

        self.factory.xfer = InventorySheetShow()
        self.calljson('/diacamma.invoice/inventorySheetShow', {'inventorysheet': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'inventorySheetShow')
        self.assert_json_equal('LABELFORM', 'date', '2015-07-13')
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_json_equal('LABELFORM', 'storagearea', 'Lieu 2')
        self.assert_json_equal('LABELFORM', 'comment', "blablabla")
        self.assert_count_equal('inventorydetail', 4)
        self.assert_count_equal('#inventorydetail/actions', 2)
        self.assert_json_equal('', 'inventorydetail/@0/article', "ABC1")
        self.assert_json_equal('', 'inventorydetail/@0/real_quantity_txt', '5,000')
        self.assert_json_equal('', 'inventorydetail/@0/quantity_txt', '4,000')
        self.assert_json_equal('', 'inventorydetail/@1/article', "ABC2")
        self.assert_json_equal('', 'inventorydetail/@1/real_quantity_txt', "10,0")
        self.assert_json_equal('', 'inventorydetail/@1/quantity_txt', '8,0')
        self.assert_json_equal('', 'inventorydetail/@2/article', "ABC4")
        self.assert_json_equal('', 'inventorydetail/@2/real_quantity_txt', "15")
        self.assert_json_equal('', 'inventorydetail/@2/quantity_txt', "15")
        self.assert_json_equal('', 'inventorydetail/@3/article', "ABC6")
        self.assert_json_equal('', 'inventorydetail/@3/real_quantity_txt', "0")
        self.assert_json_equal('', 'inventorydetail/@3/quantity_txt', "0")
        self.assertEqual(len(self.json_actions), 4)

    def test_cart_disabled(self):
        self.factory.xfer = CurrentCart()
        self.calljson('/diacamma.invoice/currentCart', {}, False)
        self.assert_observer('core.exception', 'diacamma.invoice', 'currentCart')

    def test_cart_simple(self):
        Params.setvalue('invoice-cart-active', True)
        Params.setvalue('invoice-cart-timeout', 3)
        sheet = StorageSheet.objects.create(sheet_type=0, date='2014-01-01', storagearea_id=1, comment="A")
        StorageDetail.objects.create(storagesheet=sheet, article_id=1, price=5.00, quantity=10.0)
        StorageDetail.objects.create(storagesheet=sheet, article_id=2, price=4.00, quantity=15.0)
        sheet.valid()
        third = get_or_create_customer(self.jack_contact.id)
        self._create_bill([{'article': 1, 'designation': 'article 1', 'price': '12.34', 'quantity': 3}], 5, timezone.now().date() - timedelta(days=5), third.id)

        self.factory.user = LucteriosUser.objects.get(username='empty')
        self.factory.user.user_permissions.set(Permission.objects.all())
        self.factory.user.save()

        self.factory.xfer = BillList()
        self.calljson('/diacamma.invoice/billList', {'status_filter': -1, 'type_filter': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billList')
        self.assert_count_equal('bill', 1)

        self.factory.xfer = CurrentCart()
        self.calljson('/diacamma.invoice/currentCart', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'currentCart')
        self.assert_count_equal('', 45)
        self.assert_json_equal('LABELFORM', "cart_info", "{[center]}0 article(s){[center]}{[i]}{[p align='right']}0,00 €{[/p]}{[/i]}")
        self.assert_json_equal('SELECT', 'cat_filter', 0)
        self.assert_select_equal('cat_filter', 4)
        self.assert_json_equal('LABELFORM', 'ref_article_1', "ABC1")
        self.assert_json_equal('LABELFORM', 'price_article_1', 12.34)
        self.assert_json_equal('FLOAT', 'qty_article_1', 1)
        self.assert_json_equal('LABELFORM', 'ref_article_2', "ABC2")
        self.assert_json_equal('LABELFORM', 'price_article_2', 56.78)
        self.assert_json_equal('FLOAT', 'qty_article_2', 1)
        self.assert_json_equal('LABELFORM', 'ref_article_3', "ABC3")
        self.assert_json_equal('LABELFORM', 'price_article_3', 324.97)
        self.assert_json_equal('FLOAT', 'qty_article_3', 1)
        self.assert_json_equal('LABELFORM', 'ref_article_4', "ABC4")
        self.assert_json_equal('LABELFORM', 'price_article_4', 1.31)
        self.assert_json_equal('LABELFORM', 'no_article_4', "épuisé")

        self.factory.xfer = BillList()
        self.calljson('/diacamma.invoice/billList', {'status_filter': -1, 'type_filter': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billList')
        self.assert_count_equal('bill', 1)
        self.assert_json_equal('', 'bill/@0/id', 2)
        self.assert_json_equal('', 'bill/@0/bill_type', 5)
        self.assert_json_equal('', 'bill/@0/third', "MISTER jack")
        self.assert_json_equal('', 'bill/@0/total', 0.00)
        self.assert_json_equal('', 'bill/@0/status', 0)

        self.factory.xfer = CurrentCartAddArticle()
        self.calljson('/diacamma.invoice/currentCartAddArticle', {'article': 1, "bill": 2, "qty_article_1": 10}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'currentCartAddArticle')
        self.factory.xfer = CurrentCartAddArticle()
        self.calljson('/diacamma.invoice/currentCartAddArticle', {'article': 2, "bill": 2, "qty_article_2": 10}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'currentCartAddArticle')
        self.factory.xfer = CurrentCartAddArticle()
        self.calljson('/diacamma.invoice/currentCartAddArticle', {'article': 3, "bill": 2, "qty_article_3": 10}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'currentCartAddArticle')
        self.factory.xfer = CurrentCartAddArticle()
        self.calljson('/diacamma.invoice/currentCartAddArticle', {'article': 4, "bill": 2, "qty_article_4": 10}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'currentCartAddArticle')

        self.factory.xfer = BillList()
        self.calljson('/diacamma.invoice/billList', {'status_filter': -1, 'type_filter': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billList')
        self.assert_count_equal('bill', 1)
        self.assert_json_equal('', 'bill/@0/id', 2)
        self.assert_json_equal('', 'bill/@0/bill_type', 5)
        self.assert_json_equal('', 'bill/@0/third', "MISTER jack")
        self.assert_json_equal('', 'bill/@0/total', 3940.9)  # 12.34 * 10 + 56.78 * 10 + 324.97 * 10
        self.assert_json_equal('', 'bill/@0/status', 0)

        self.factory.xfer = CurrentCart()
        self.calljson('/diacamma.invoice/currentCart', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'currentCart')
        self.assert_json_equal('LABELFORM', "cart_info", "{[center]}3 article(s){[center]}{[i]}{[p align='right']}3 940,90 €{[/p]}{[/i]}")
        self.assert_select_equal('cat_filter', 4)
        self.assert_json_equal('LABELFORM', 'ref_article_1', "ABC1")
        self.assert_json_equal('LABELFORM', 'price_article_1', 12.34)
        self.assert_json_equal('LABELFORM', 'no_article_1', "épuisé")
        self.assert_json_equal('LABELFORM', 'ref_article_2', "ABC2")
        self.assert_json_equal('LABELFORM', 'price_article_2', 56.78)
        self.assert_json_equal('FLOAT', 'qty_article_2', 1)
        self.assert_json_equal('LABELFORM', 'ref_article_3', "ABC3")
        self.assert_json_equal('LABELFORM', 'price_article_3', 324.97)
        self.assert_json_equal('FLOAT', 'qty_article_3', 1)
        self.assert_json_equal('LABELFORM', 'ref_article_4', "ABC4")
        self.assert_json_equal('LABELFORM', 'price_article_4', 1.31)
        self.assert_json_equal('LABELFORM', 'no_article_4', "épuisé")

        self.factory.xfer = CurrentCartDel()
        self.calljson('/diacamma.invoice/currentCartDel', {"bill": 2}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'currentCartDel')

        self.factory.xfer = BillList()
        self.calljson('/diacamma.invoice/billList', {'status_filter': -1, 'type_filter': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billList')
        self.assert_count_equal('bill', 0)

        self.factory.xfer = CurrentCart()
        self.calljson('/diacamma.invoice/currentCart', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'currentCart')
        self.assert_count_equal('', 45)
        self.assert_json_equal('LABELFORM', "cart_info", "{[center]}0 article(s){[center]}{[i]}{[p align='right']}0,00 €{[/p]}{[/i]}")
        self.assert_select_equal('cat_filter', 4)
        self.assert_json_equal('LABELFORM', 'ref_article_1', "ABC1")
        self.assert_json_equal('LABELFORM', 'price_article_1', 12.34)
        self.assert_json_equal('FLOAT', 'qty_article_1', 1)
        self.assert_json_equal('LABELFORM', 'ref_article_2', "ABC2")
        self.assert_json_equal('LABELFORM', 'price_article_2', 56.78)
        self.assert_json_equal('FLOAT', 'qty_article_2', 1)
        self.assert_json_equal('LABELFORM', 'ref_article_3', "ABC3")
        self.assert_json_equal('LABELFORM', 'price_article_3', 324.97)
        self.assert_json_equal('FLOAT', 'qty_article_3', 1)
        self.assert_json_equal('LABELFORM', 'ref_article_4', "ABC4")
        self.assert_json_equal('LABELFORM', 'price_article_4', 1.31)
        self.assert_json_equal('LABELFORM', 'no_article_4', "épuisé")

    @patch("django.utils.timezone.now")
    def test_cart_advance(self, mock_now):
        mock_now.return_value = datetime(year=2015, month=4, day=1)
        self.maxDiff = 2000
        Params.setvalue('invoice-cart-active', True)
        Params.setvalue('invoice-cart-email-subject', 'Nouveau panier')
        Params.setvalue('invoice-cart-default-comment', 'Envoi par la poste')
        Params.setvalue('invoice-cart-email-body', '#name{[br/]}{[br/]}Ci-joint dans ce mail #reference.{[br/]}#nb devis est créé, chaque responsable de zone de stockage vous les renverra prochainement.{[br/]}{[br/]}Cordialement')
        sheet1 = StorageSheet.objects.create(sheet_type=0, date='2014-01-01', storagearea_id=1, comment="A")
        StorageDetail.objects.create(storagesheet=sheet1, article_id=1, price=5.00, quantity=5.0)
        StorageDetail.objects.create(storagesheet=sheet1, article_id=2, price=4.00, quantity=15.0)
        sheet1.valid()
        sheet2 = StorageSheet.objects.create(sheet_type=0, date='2014-01-01', storagearea_id=2, comment="A")
        StorageDetail.objects.create(storagesheet=sheet2, article_id=1, price=5.00, quantity=10.0)
        sheet2.valid()
        third = get_or_create_customer(self.jack_contact.id)
        self._create_bill([{'article': 1, 'designation': 'article 1', 'price': '12.34', 'quantity': 3}], 5, timezone.now().date() - timedelta(days=5), third.id)

        self.factory.user = LucteriosUser.objects.get(username='empty')
        self.factory.user.user_permissions.set(Permission.objects.all())
        self.factory.user.save()

        self.factory.xfer = BillList()
        self.calljson('/diacamma.invoice/billList', {'status_filter': -1, 'type_filter': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billList')
        self.assert_count_equal('bill', 1)

        self.factory.xfer = CurrentCart()
        self.calljson('/diacamma.invoice/currentCart', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'currentCart')
        self.assert_json_equal('LABELFORM', "cart_info", "{[center]}1 article(s){[center]}{[i]}{[p align='right']}37,02 €{[/p]}{[/i]}")

        self.factory.xfer = CurrentCartDel()
        self.calljson('/diacamma.invoice/currentCartDel', {"bill": 1}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'currentCartDel')

        self.factory.xfer = BillList()
        self.calljson('/diacamma.invoice/billList', {'status_filter': -1, 'type_filter': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billList')
        self.assert_count_equal('bill', 0)

        self.factory.xfer = CurrentCart()
        self.calljson('/diacamma.invoice/currentCart', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'currentCart')
        self.assert_json_equal('LABELFORM', "cart_info", "{[center]}0 article(s){[center]}{[i]}{[p align='right']}0,00 €{[/p]}{[/i]}")

        self.factory.xfer = CurrentCartAddArticle()
        self.calljson('/diacamma.invoice/currentCartAddArticle', {'article': 1, "bill": 2, "qty_article_1": 4}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'currentCartAddArticle')
        self.factory.xfer = CurrentCartAddArticle()
        self.calljson('/diacamma.invoice/currentCartAddArticle', {'article': 2, "bill": 2, "qty_article_2": 10}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'currentCartAddArticle')

        self.factory.xfer = CurrentCart()
        self.calljson('/diacamma.invoice/currentCart', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'currentCart')
        self.assert_json_equal('LABELFORM', "cart_info", "{[center]}2 article(s){[center]}{[i]}{[p align='right']}617,16 €{[/p]}{[/i]}")
        self.assert_json_equal('FLOAT', 'qty_article_1', 1)
        self.assert_json_equal('FLOAT', 'qty_article_2', 1)
        self.assert_json_equal('FLOAT', 'qty_article_3', 1)
        self.assert_json_equal('LABELFORM', 'no_article_4', "épuisé")

        self.factory.xfer = CurrentCartShow()
        self.calljson('/diacamma.invoice/currentCartShow', {'bill': 2}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'currentCartShow')
        self.assert_count_equal('', 11)
        self.assert_json_equal('LINK', 'third', "MISTER jack")
        self.assert_count_equal('detail', 2)
        self.assert_json_equal('', 'detail/@0/article', 'ABC1')
        self.assert_json_equal('', 'detail/@0/quantity_txt', '4,000')
        self.assert_json_equal('', 'detail/@0/storagearea', 'Lieu 2')

        self.factory.xfer = CurrentCartAddArticle()
        self.calljson('/diacamma.invoice/currentCartAddArticle', {'article': 1, "bill": 2, "qty_article_1": 11}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'currentCartAddArticle')

        self.factory.xfer = BillList()
        self.calljson('/diacamma.invoice/billList', {'status_filter': -1, 'type_filter': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billList')
        self.assert_count_equal('bill', 1)
        self.assert_json_equal('', 'bill/@0/id', 2)
        self.assert_json_equal('', 'bill/@0/total', 752.9)  # 12.34 * 15 + 56.78 * 10

        self.factory.xfer = CurrentCart()
        self.calljson('/diacamma.invoice/currentCart', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'currentCart')
        self.assert_json_equal('LABELFORM', "cart_info", "{[center]}3 article(s){[center]}{[i]}{[p align='right']}752,90 €{[/p]}{[/i]}")
        self.assert_json_equal('LABELFORM', 'no_article_1', "épuisé")
        self.assert_json_equal('FLOAT', 'qty_article_2', 1)
        self.assert_json_equal('FLOAT', 'qty_article_3', 1)
        self.assert_json_equal('LABELFORM', 'no_article_4', "épuisé")

        self.factory.xfer = CurrentCartShow()
        self.calljson('/diacamma.invoice/currentCartShow', {'bill': 2}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'currentCartShow')
        self.assert_count_equal('', 11)
        self.assert_json_equal('LINK', 'third', "MISTER jack")
        self.assert_count_equal('detail', 3)
        self.assert_json_equal('', 'detail/@2/article', 'ABC1')
        self.assert_json_equal('', 'detail/@2/price', 12.34)
        self.assert_json_equal('', 'detail/@2/quantity_txt', '5,000')
        self.assert_json_equal('', 'detail/@2/storagearea', 'Lieu 1')
        self.assert_json_equal('', 'detail/@2/total', 61.7)
        self.assert_json_equal('', 'detail/@1/article', 'ABC2')
        self.assert_json_equal('', 'detail/@1/price', 56.78)
        self.assert_json_equal('', 'detail/@1/quantity_txt', '10,0')
        self.assert_json_equal('', 'detail/@1/storagearea', 'Lieu 1')
        self.assert_json_equal('', 'detail/@1/total', 567.8)
        self.assert_json_equal('', 'detail/@0/article', 'ABC1')
        self.assert_json_equal('', 'detail/@0/price', 12.34)
        self.assert_json_equal('', 'detail/@0/quantity_txt', '10,000')
        self.assert_json_equal('', 'detail/@0/storagearea', 'Lieu 2')
        self.assert_json_equal('', 'detail/@0/total', 123.4)
        self.assert_count_equal('#detail/actions', 1)
        self.assert_action_equal('DELETE', self.get_json_path('#detail/actions/@0'), ("Supprimer", "mdi:mdi-delete-outline", "diacamma.invoice", "currentCartDelDetail", 0, 1, 0))
        self.assert_json_equal('LABELFORM', 'total_excltax', 752.9)
        self.assert_json_equal('LABELFORM', 'info', [])
        self.assertEqual(len(self.json_actions), 3)
        self.assertEqual(self.json_actions[0]['id'], 'diacamma.invoice/currentCartValid')
        self.assertEqual(self.json_actions[1]['id'], 'diacamma.invoice/currentCart')
        self.assertEqual(self.json_actions[2]['id'], '')

        configSMTP('localhost', 2026)
        server = TestReceiver()
        server.start(2026)
        try:
            self.assertEqual(0, server.count())

            self.factory.xfer = CurrentCartValid()
            self.calljson('/diacamma.invoice/currentCartValid', {"bill": 2}, False)
            self.assert_observer('core.custom', 'diacamma.invoice', 'currentCartValid')
            self.assert_count_equal('', 3)
            self.assert_json_equal('MEMO', 'comment', 'Envoi par la poste')

            self.factory.xfer = CurrentCartValid()
            self.calljson('/diacamma.invoice/currentCartValid', {"bill": 2, "CONFIRME": "YES", 'comment': 'Récupération sur place'}, False)
            self.assert_observer('core.acknowledge', 'diacamma.invoice', 'currentCartValid')

            self.assertEqual(1, server.count())
            _msg_txt, msg, msg_file = server.check_first_message('Nouveau panier', 3, {'To': 'jack@worldcompany.com', 'rcpttos': 'jack@worldcompany.com;Avrel.Dalton@worldcompany.com;William.Dalton@worldcompany.com;mr-sylvestre@worldcompany.com'})
            self.assertEqual('<html>jack MISTER<br/><br/>Ci-joint dans ce mail Panier A-1.<br/>2 devis est créé, chaque responsable de zone de stockage vous les renverra prochainement.<br/><br/>Cordialement</html>', decode_b64(msg.get_payload()))
            self.assertTrue('panier_A-1_MISTER jack.pdf' in msg_file.get('Content-Type', ''), msg_file.get('Content-Type', ''))
            self.save_pdf(base64_content=msg_file.get_payload())
        finally:
            server.stop()

        self.factory.xfer = CurrentCartShow()
        self.calljson('/diacamma.invoice/currentCartShow', {'bill': 2}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'currentCartShow')
        self.assert_count_equal('', 10)
        self.assert_json_equal('LINK', 'third', "MISTER jack")
        self.assert_count_equal('detail', 3)
        self.assert_json_equal('', 'detail/@2/article', 'ABC1')
        self.assert_json_equal('', 'detail/@2/price', 12.34)
        self.assert_json_equal('', 'detail/@2/quantity_txt', '5,000')
        self.assert_json_equal('', 'detail/@2/storagearea', 'Lieu 1')
        self.assert_json_equal('', 'detail/@2/total', 61.7)
        self.assert_json_equal('', 'detail/@1/article', 'ABC2')
        self.assert_json_equal('', 'detail/@1/price', 56.78)
        self.assert_json_equal('', 'detail/@1/quantity_txt', '10,0')
        self.assert_json_equal('', 'detail/@1/storagearea', 'Lieu 1')
        self.assert_json_equal('', 'detail/@1/total', 567.8)
        self.assert_json_equal('', 'detail/@0/article', 'ABC1')
        self.assert_json_equal('', 'detail/@0/price', 12.34)
        self.assert_json_equal('', 'detail/@0/quantity_txt', '10,000')
        self.assert_json_equal('', 'detail/@0/storagearea', 'Lieu 2')
        self.assert_json_equal('', 'detail/@0/total', 123.4)
        self.assert_count_equal('#detail/actions', 0)
        self.assert_json_equal('LABELFORM', 'total_excltax', 752.9)
        self.assert_json_equal('LABELFORM', 'comment', 'Récupération sur place')
        self.assert_json_equal('LABELFORM', 'lbl_email_info', 'Courriel envoyé le ', txtrange=True)
        self.assertEqual(len(self.json_actions), 2)
        self.assertEqual(self.json_actions[0]['id'], 'diacamma.invoice/currentCart')
        self.assertEqual(self.json_actions[1]['id'], '')

        self.factory.xfer = BillList()
        self.calljson('/diacamma.invoice/billList', {'status_filter': -2, 'type_filter': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billList')
        self.assert_count_equal('bill', 3)
        self.assert_json_equal('', 'bill/@0/id', 3)
        self.assert_json_equal('', 'bill/@0/bill_type', 0)
        self.assert_json_equal('', 'bill/@0/third', "MISTER jack")
        self.assert_json_equal('', 'bill/@0/status', 0)
        self.assert_json_equal('', 'bill/@0/total', 629.5)
        self.assert_json_equal('', 'bill/@1/id', 4)
        self.assert_json_equal('', 'bill/@1/bill_type', 0)
        self.assert_json_equal('', 'bill/@1/third', "MISTER jack")
        self.assert_json_equal('', 'bill/@1/status', 0)
        self.assert_json_equal('', 'bill/@1/total', 123.4)
        self.assert_json_equal('', 'bill/@2/id', 2)
        self.assert_json_equal('', 'bill/@2/bill_type', 5)
        self.assert_json_equal('', 'bill/@2/third', "MISTER jack")
        self.assert_json_equal('', 'bill/@2/status', 3)
        self.assert_json_equal('', 'bill/@2/total', 752.9)

    def test_cart_multiprice(self):
        Params.setvalue('invoice-cart-active', True)
        Params.setvalue('invoice-cart-timeout', 3)
        Params.setvalue('invoice-cart-default-category', 2)
        self.jack_contact.set_custom_values({'custom_3': "abc"})
        default_multiprice()
        sheet = StorageSheet.objects.create(sheet_type=0, date='2014-01-01', storagearea_id=1, comment="A")
        StorageDetail.objects.create(storagesheet=sheet, article_id=1, price=5.00, quantity=10.0)
        StorageDetail.objects.create(storagesheet=sheet, article_id=2, price=4.00, quantity=15.0)
        sheet.valid()

        self.factory.user = LucteriosUser.objects.get(username='empty')
        self.factory.user.user_permissions.set(Permission.objects.all())
        self.factory.user.save()

        self.factory.xfer = BillList()
        self.calljson('/diacamma.invoice/billList', {'status_filter': -1, 'type_filter': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billList')
        self.assert_count_equal('bill', 0)

        self.factory.xfer = CurrentCart()
        self.calljson('/diacamma.invoice/currentCart', {}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'currentCart')
        self.assert_count_equal('', 31)
        self.assert_json_equal('LABELFORM', "cart_info", "{[center]}0 article(s){[center]}{[i]}{[p align='right']}0,00 €{[/p]}{[/i]}")
        self.assert_json_equal('SELECT', 'cat_filter', 2)
        self.assert_select_equal('cat_filter', 4)
        self.assert_json_equal('LABELFORM', 'ref_article_2', "ABC2")
        self.assert_json_equal('LABELFORM', 'price_article_2', 45.42)
        self.assert_json_equal('FLOAT', 'qty_article_2', 1)
        self.assert_json_equal('LABELFORM', 'ref_article_3', "ABC3")
        self.assert_json_equal('LABELFORM', 'price_article_3', 259.98)
        self.assert_json_equal('FLOAT', 'qty_article_3', 1)

        self.factory.xfer = CurrentCartAddArticle()
        self.calljson('/diacamma.invoice/currentCartAddArticle', {'article': 2, "bill": 1, "qty_article_2": 10}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'currentCartAddArticle')

        self.factory.xfer = BillList()
        self.calljson('/diacamma.invoice/billList', {'status_filter': -1, 'type_filter': -1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billList')
        self.assert_count_equal('bill', 1)
        self.assert_json_equal('', 'bill/@0/bill_type', 5)
        self.assert_json_equal('', 'bill/@0/third', "MISTER jack")
        self.assert_json_equal('', 'bill/@0/total', 454.24)  # 45,42 * 10
        self.assert_json_equal('', 'bill/@0/status', 0)

    def test_quotation_subscription(self):
        create_account(['4191'], 1, None)
        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_json_equal('LABELFORM', 'accountposting', "code1")

        self.factory.xfer = ArticleAddModify()
        self.calljson('/diacamma.invoice/articleAddModify',
                      {'article': 1, 'accountposting': 5, 'SAVE': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'articleAddModify')

        self.factory.xfer = ArticleShow()
        self.calljson('/diacamma.invoice/articleShow', {'article': '1'}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'articleShow')
        self.assert_json_equal('LABELFORM', 'reference', "ABC1")
        self.assert_json_equal('LABELFORM', 'accountposting', "code_sub")

        self.factory.xfer = BillAddModify()
        self.calljson('/diacamma.invoice/billAddModify',
                      {'bill_type': 0, 'date': '2015-04-01', 'SAVE': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billAddModify')
        self.factory.xfer = SupportingThirdValid()
        self.calljson('/diacamma.payoff/supportingThirdValid',
                      {'supporting': 1, 'third': 6}, False)
        self.assert_observer('core.acknowledge', 'diacamma.payoff', 'supportingThirdValid')
        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 1, 'article': 1, 'designation': 'article A', 'price': '1.11', 'quantity': 5}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')
        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 1, 'article': 5, 'designation': 'article E', 'price': '10', 'quantity': 1}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')

        self.factory.xfer = BillShow()
        self.calljson('/diacamma.invoice/billShow', {'bill': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billShow')
        self.assert_count_equal('', 13)
        self.assert_json_equal('LABELFORM', 'title', 'devis')
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_count_equal('detail', 2)
        self.assert_json_equal('', 'detail/@0/article', 'ABC1')
        self.assert_json_equal('', 'detail/@0/price', 1.11)
        self.assert_json_equal('', 'detail/@0/quantity_txt', '5,000')
        self.assert_json_equal('', 'detail/@0/storagearea', None)
        self.assert_json_equal('', 'detail/@0/total', 5.55)
        self.assert_json_equal('', 'detail/@1/article', 'ABC5')
        self.assert_json_equal('', 'detail/@1/total', 10.0)
        self.assert_json_equal('LABELFORM', 'info', [])
        self.assert_json_equal('LABELFORM', 'warning', ["L'article ABC1 est en quantité insuffisante"])
        self.assert_json_equal('', '#warning/formatstr', "{[font color=\"orange\"]}%s{[/font]}")

        self.factory.xfer = BillTransition()
        self.calljson('/diacamma.invoice/billTransition',
                      {'CONFIRME': 'YES', 'bill': 1, 'withpayoff': False, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billTransition')

        self.factory.xfer = BillShow()
        self.calljson('/diacamma.invoice/billShow', {'bill': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billShow')
        self.assert_count_equal('', 11)
        self.assert_json_equal('LABELFORM', 'title', 'devis')
        self.assert_json_equal('LABELFORM', 'status', 1)
        self.assert_count_equal('detail', 2)
        self.assert_json_equal('', 'detail/@0/article', 'ABC1')
        self.assert_json_equal('', 'detail/@0/price', 1.11)
        self.assert_json_equal('', 'detail/@0/quantity_txt', '5,000')
        self.assert_json_equal('', 'detail/@0/storagearea', None)
        self.assert_json_equal('', 'detail/@0/total', 5.55)
        self.assert_json_equal('', 'detail/@1/article', 'ABC5')
        self.assert_json_equal('', 'detail/@1/total', 10.0)
        self.assert_json_equal('LABELFORM', 'warning', ["L'article ABC1 est en quantité insuffisante"])

    def test_order_subscription(self):
        create_account(['4191'], 1, None)
        self.factory.xfer = ArticleAddModify()
        self.calljson('/diacamma.invoice/articleAddModify',
                      {'article': 1, 'accountposting': 5, 'SAVE': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'articleAddModify')

        self.factory.xfer = EntryAccountList()
        self.calljson('/diacamma.accounting/entryAccountList',
                      {'year': '1', 'journal': '0', 'filter': '0'}, False)
        self.assert_observer('core.custom', 'diacamma.accounting', 'entryAccountList')
        self.assert_count_equal('entryline', 0)

        self.factory.xfer = BillAddModify()
        self.calljson('/diacamma.invoice/billAddModify',
                      {'bill_type': 4, 'date': '2015-04-01', 'SAVE': 'YES'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billAddModify')
        self.factory.xfer = SupportingThirdValid()
        self.calljson('/diacamma.payoff/supportingThirdValid',
                      {'supporting': 1, 'third': 6}, False)
        self.assert_observer('core.acknowledge', 'diacamma.payoff', 'supportingThirdValid')
        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 1, 'article': 1, 'designation': 'article A', 'price': '1.11', 'quantity': 5}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')
        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 1, 'article': 5, 'designation': 'article E', 'price': '10', 'quantity': 1}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')

        self.factory.xfer = BillTransition()
        self.calljson('/diacamma.invoice/billTransition',
                      {'CONFIRME': 'YES', 'bill': 1, 'nbpayoff': 1,
                       'payoff00_amount': '15.55', 'payoff00_payer': "Ma'a Dalton", 'payoff00_date_payoff': '2015-04-07', 'payoff00_mode': 0, 'payoff00_reference': 'abc', 'payoff00_bank_account': 0, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billTransition')

        self.factory.xfer = BillShow()
        self.calljson('/diacamma.invoice/billShow', {'bill': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billShow')
        self.assert_count_equal('', 14)
        self.assert_json_equal('LABELFORM', 'title', 'commande')
        self.assert_json_equal('LABELFORM', 'status', 1)
        self.assert_count_equal('detail', 2)
        self.assert_json_equal('', 'detail/@0/article', 'ABC1')
        self.assert_json_equal('', 'detail/@0/price', 1.11)
        self.assert_json_equal('', 'detail/@0/quantity_txt', '5,000')
        self.assert_json_equal('', 'detail/@0/storagearea', None)
        self.assert_json_equal('', 'detail/@0/total', 5.55)
        self.assert_json_equal('', 'detail/@1/article', 'ABC5')
        self.assert_json_equal('', 'detail/@1/total', 10.0)
        self.assert_count_equal('payoff', 1)
        self.assert_json_equal('', 'payoff/@0/date', "2015-04-07")
        self.assert_json_equal('', 'payoff/@0/mode', 0)
        self.assert_json_equal('', 'payoff/@0/amount', 15.55)
        self.assert_json_equal('', 'payoff/@0/payer', "Ma'a Dalton")
        self.assert_json_equal('LABELFORM', 'warning', ["L'article ABC1 est en quantité insuffisante"])

        self.factory.xfer = EntryAccountList()
        self.calljson('/diacamma.accounting/entryAccountList',
                      {'year': '1', 'journal': '4', 'filter': '0'}, False)
        self.assert_observer('core.custom', 'diacamma.accounting', 'entryAccountList')
        self.assert_count_equal('entryline', 3)
        self.assert_json_equal('', 'entryline/@0/entry.num', None)
        self.assert_json_equal('', 'entryline/@0/entry.date_entry', None)
        self.assert_json_equal('', 'entryline/@0/entry.date_value', '2015-04-07')
        self.assert_json_equal('', 'entryline/@0/designation_ref', 'règlement de Commande A-1')
        self.assert_json_equal('', 'entryline/@0/entry_account', '[411 Dalton Jack]')
        self.assert_json_equal('', 'entryline/@0/credit', 10.0)
        self.assert_json_equal('', 'entryline/@0/costaccounting', None)
        self.assert_json_equal('', 'entryline/@0/link', None)
        self.assert_json_equal('', 'entryline/@1/entry.num', None)
        self.assert_json_equal('', 'entryline/@1/entry.date_entry', None)
        self.assert_json_equal('', 'entryline/@1/entry.date_value', '2015-04-07')
        self.assert_json_equal('', 'entryline/@1/designation_ref', 'règlement de Commande A-1')
        self.assert_json_equal('', 'entryline/@1/entry_account', '[4191 Dalton Jack]')
        self.assert_json_equal('', 'entryline/@1/credit', 5.55)
        self.assert_json_equal('', 'entryline/@1/costaccounting', None)
        self.assert_json_equal('', 'entryline/@1/link', None)
        self.assert_json_equal('', 'entryline/@2/entry_account', '[531] 531')
        self.assert_json_equal('', 'entryline/@2/debit', -15.55)

        self.factory.xfer = BillToBill()
        self.calljson('/diacamma.invoice/billToBill', {'CONFIRME': 'YES', 'bill': 1, 'billdate': '2015-06-14'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billToBill')

        self.factory.xfer = BillShow()
        self.calljson('/diacamma.invoice/billShow', {'bill': 1}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billShow')
        self.assert_json_equal('LABELFORM', 'title', 'commande')
        self.assert_json_equal('LABELFORM', 'status', 3)

        self.factory.xfer = BillShow()
        self.calljson('/diacamma.invoice/billShow', {'bill': 2}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billShow')
        self.assert_json_equal('LABELFORM', 'title', 'facture')
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_json_equal('LABELFORM', 'info', ["L'article ABC1 est en quantité insuffisante"])
        self.assert_count_equal('detail', 2)
        self.assert_json_equal('', 'detail/@0/id', 3)
        self.assert_json_equal('', 'detail/@0/article', 'ABC1')
        self.assert_json_equal('', 'detail/@0/price', 1.11)
        self.assert_json_equal('', 'detail/@0/quantity_txt', '5,000')
        self.assert_json_equal('', 'detail/@0/storagearea', None)
        self.assert_json_equal('', 'detail/@0/total', 5.55)
        self.assert_json_equal('', 'detail/@1/article', 'ABC5')
        self.assert_json_equal('', 'detail/@1/total', 10.0)
        self.assert_count_equal('payoff', 1)
        self.assert_json_equal('', 'payoff/@0/date', "2015-06-14")
        self.assert_json_equal('', 'payoff/@0/mode', 6)
        self.assert_json_equal('', 'payoff/@0/amount', 15.55)
        self.assert_json_equal('', 'payoff/@0/payer', "Dalton Jack")
        self.assert_json_equal('', 'payoff/@0/reference', "Transfert de provision de commande A-1 - 1 avril 2015")

        self.factory.xfer = EntryAccountList()
        self.calljson('/diacamma.accounting/entryAccountList',
                      {'year': '1', 'journal': '5', 'filter': '0'}, False)
        self.assert_observer('core.custom', 'diacamma.accounting', 'entryAccountList')
        self.assert_count_equal('entryline', 2)
        self.assert_json_equal('', 'entryline/@0/entry.num', None)
        self.assert_json_equal('', 'entryline/@0/entry.date_entry', None)
        self.assert_json_equal('', 'entryline/@0/entry.date_value', '2015-06-14')
        self.assert_json_equal('', 'entryline/@0/designation_ref', 'Transfert de provision de commande A-1 - 1 avril 2015')
        self.assert_json_equal('', 'entryline/@0/entry_account', '[411 Dalton Jack]')
        self.assert_json_equal('', 'entryline/@0/credit', 5.55)
        self.assert_json_equal('', 'entryline/@0/link', None)
        self.assert_json_equal('', 'entryline/@1/entry.num', None)
        self.assert_json_equal('', 'entryline/@1/entry.date_entry', None)
        self.assert_json_equal('', 'entryline/@1/entry.date_value', '2015-06-14')
        self.assert_json_equal('', 'entryline/@1/designation_ref', 'Transfert de provision de commande A-1 - 1 avril 2015')
        self.assert_json_equal('', 'entryline/@1/entry_account', '[4191 Dalton Jack]')
        self.assert_json_equal('', 'entryline/@1/debit', -5.55)
        self.assert_json_equal('', 'entryline/@1/link', 'A')

        self.factory.xfer = EntryAccountList()
        self.calljson('/diacamma.accounting/entryAccountList',
                      {'year': '1', 'journal': '4', 'filter': '0'}, False)
        self.assert_observer('core.custom', 'diacamma.accounting', 'entryAccountList')
        self.assert_count_equal('entryline', 3)
        self.assert_json_equal('', 'entryline/@0/entry_account', '[411 Dalton Jack]')
        self.assert_json_equal('', 'entryline/@0/credit', 10.0)
        self.assert_json_equal('', 'entryline/@0/link', None)
        self.assert_json_equal('', 'entryline/@1/entry_account', '[4191 Dalton Jack]')
        self.assert_json_equal('', 'entryline/@1/credit', 5.55)
        self.assert_json_equal('', 'entryline/@1/link', 'A')

        self.factory.xfer = BillTransition()
        self.calljson('/diacamma.invoice/billTransition', {'CONFIRME': 'YES', 'bill': 2, 'nbpayoff': 0, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.exception', 'diacamma.invoice', 'billTransition')

        insert_storage()

        self.factory.xfer = DetailAddModify()
        self.calljson('/diacamma.invoice/detailAddModify',
                      {'SAVE': 'YES', 'bill': 2, 'detail': 3, 'article': 1, 'designation': 'article A', 'price': '1.11', 'quantity': 5, 'storagearea': 1}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'detailAddModify')

        self.factory.xfer = BillShow()
        self.calljson('/diacamma.invoice/billShow', {'bill': 2}, False)
        self.assert_observer('core.custom', 'diacamma.invoice', 'billShow')
        self.assert_json_equal('LABELFORM', 'title', 'facture')
        self.assert_json_equal('LABELFORM', 'status', 0)
        self.assert_json_equal('LABELFORM', 'info', [])
        self.assert_count_equal('detail', 2)
        self.assert_count_equal('payoff', 1)

        self.factory.xfer = BillTransition()
        self.calljson('/diacamma.invoice/billTransition', {'CONFIRME': 'YES', 'bill': 2, 'nbpayoff': 0, 'TRANSITION': 'valid'}, False)
        self.assert_observer('core.acknowledge', 'diacamma.invoice', 'billTransition')

        self.factory.xfer = EntryAccountList()
        self.calljson('/diacamma.accounting/entryAccountList',
                      {'year': '1', 'journal': '3', 'filter': '0'}, False)
        self.assert_observer('core.custom', 'diacamma.accounting', 'entryAccountList')
        self.assert_count_equal('entryline', 2)
        self.assert_json_equal('', 'entryline/@0/designation_ref', 'Facture A-1')
        self.assert_json_equal('', 'entryline/@0/entry_account', '[411 Dalton Jack]')
        self.assert_json_equal('', 'entryline/@0/debit', -15.55)
        self.assert_json_equal('', 'entryline/@0/link', 'C')
        self.assert_json_equal('', 'entryline/@1/designation_ref', 'Facture A-1')
        self.assert_json_equal('', 'entryline/@1/entry_account', '[701] 701')
        self.assert_json_equal('', 'entryline/@1/credit', 15.55)
        self.assert_json_equal('', 'entryline/@1/link', None)

        self.factory.xfer = EntryAccountList()
        self.calljson('/diacamma.accounting/entryAccountList',
                      {'year': '1', 'journal': '4', 'filter': '0'}, False)
        self.assert_observer('core.custom', 'diacamma.accounting', 'entryAccountList')
        self.assert_count_equal('entryline', 3)
        self.assert_json_equal('', 'entryline/@0/entry_account', '[411 Dalton Jack]')
        self.assert_json_equal('', 'entryline/@0/credit', 10.0)
        self.assert_json_equal('', 'entryline/@0/link', 'C')
        self.assert_json_equal('', 'entryline/@1/entry_account', '[4191 Dalton Jack]')
        self.assert_json_equal('', 'entryline/@1/credit', 5.55)
        self.assert_json_equal('', 'entryline/@1/link', 'A')

        self.factory.xfer = EntryAccountList()
        self.calljson('/diacamma.accounting/entryAccountList',
                      {'year': '1', 'journal': '5', 'filter': '0'}, False)
        self.assert_observer('core.custom', 'diacamma.accounting', 'entryAccountList')
        self.assert_count_equal('entryline', 2)
        self.assert_json_equal('', 'entryline/@0/entry_account', '[411 Dalton Jack]')
        self.assert_json_equal('', 'entryline/@0/credit', 5.55)
        self.assert_json_equal('', 'entryline/@0/link', 'C')
        self.assert_json_equal('', 'entryline/@1/entry_account', '[4191 Dalton Jack]')
        self.assert_json_equal('', 'entryline/@1/debit', -5.55)
        self.assert_json_equal('', 'entryline/@1/link', 'A')
