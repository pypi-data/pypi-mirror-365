# coding: utf-8

"""
    RCABench API

    RCABench - A comprehensive root cause analysis benchmarking platform for microservices This API provides endpoints for managing datasets, algorithms, evaluations, and fault injections for root cause analysis in distributed systems and microservices architectures.

    The version of the OpenAPI document: 1.0.1
    Contact: team@rcabench.com
    Generated by OpenAPI Generator (https://rcabench.openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from rcabench.openapi.models.dto_generic_response_dto_analyze_injections_resp import DtoGenericResponseDtoAnalyzeInjectionsResp

from rcabench.openapi.api_client import ApiClient, RequestSerialized
from rcabench.openapi.api_response import ApiResponse
from rcabench.openapi.rest import RESTResponseType


class AnalyzerApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://rcabench.openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_v1_analyzers_injections_get(
        self,
        project_name: Annotated[Optional[StrictStr], Field(description="项目名称过滤")] = None,
        env: Annotated[Optional[StrictStr], Field(description="环境标签过滤")] = None,
        batch: Annotated[Optional[StrictStr], Field(description="批次标签过滤")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="分类标签过滤")] = None,
        benchmark: Annotated[Optional[StrictStr], Field(description="基准测试类型过滤")] = None,
        status: Annotated[Optional[StrictInt], Field(description="状态过滤，具体值参考字段映射接口(/mapping)")] = None,
        fault_type: Annotated[Optional[StrictInt], Field(description="故障类型过滤，具体值参考字段映射接口(/mapping)")] = None,
        lookback: Annotated[Optional[StrictStr], Field(description="时间范围查询，支持自定义相对时间(1h/24h/7d)或custom 默认不设置")] = None,
        custom_start_time: Annotated[Optional[datetime], Field(description="自定义开始时间，RFC3339格式，当lookback=custom时必需")] = None,
        custom_end_time: Annotated[Optional[datetime], Field(description="自定义结束时间，RFC3339格式，当lookback=custom时必需")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DtoGenericResponseDtoAnalyzeInjectionsResp:
        """分析故障注入数据

        使用多种筛选条件分析故障注入数据，返回包括效率、多样性、种子之间的距离等统计信息

        :param project_name: 项目名称过滤
        :type project_name: str
        :param env: 环境标签过滤
        :type env: str
        :param batch: 批次标签过滤
        :type batch: str
        :param tag: 分类标签过滤
        :type tag: str
        :param benchmark: 基准测试类型过滤
        :type benchmark: str
        :param status: 状态过滤，具体值参考字段映射接口(/mapping)
        :type status: int
        :param fault_type: 故障类型过滤，具体值参考字段映射接口(/mapping)
        :type fault_type: int
        :param lookback: 时间范围查询，支持自定义相对时间(1h/24h/7d)或custom 默认不设置
        :type lookback: str
        :param custom_start_time: 自定义开始时间，RFC3339格式，当lookback=custom时必需
        :type custom_start_time: datetime
        :param custom_end_time: 自定义结束时间，RFC3339格式，当lookback=custom时必需
        :type custom_end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_analyzers_injections_get_serialize(
            project_name=project_name,
            env=env,
            batch=batch,
            tag=tag,
            benchmark=benchmark,
            status=status,
            fault_type=fault_type,
            lookback=lookback,
            custom_start_time=custom_start_time,
            custom_end_time=custom_end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DtoGenericResponseDtoAnalyzeInjectionsResp",
            '400': "DtoGenericResponseAny",
            '500': "DtoGenericResponseAny",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_v1_analyzers_injections_get_with_http_info(
        self,
        project_name: Annotated[Optional[StrictStr], Field(description="项目名称过滤")] = None,
        env: Annotated[Optional[StrictStr], Field(description="环境标签过滤")] = None,
        batch: Annotated[Optional[StrictStr], Field(description="批次标签过滤")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="分类标签过滤")] = None,
        benchmark: Annotated[Optional[StrictStr], Field(description="基准测试类型过滤")] = None,
        status: Annotated[Optional[StrictInt], Field(description="状态过滤，具体值参考字段映射接口(/mapping)")] = None,
        fault_type: Annotated[Optional[StrictInt], Field(description="故障类型过滤，具体值参考字段映射接口(/mapping)")] = None,
        lookback: Annotated[Optional[StrictStr], Field(description="时间范围查询，支持自定义相对时间(1h/24h/7d)或custom 默认不设置")] = None,
        custom_start_time: Annotated[Optional[datetime], Field(description="自定义开始时间，RFC3339格式，当lookback=custom时必需")] = None,
        custom_end_time: Annotated[Optional[datetime], Field(description="自定义结束时间，RFC3339格式，当lookback=custom时必需")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DtoGenericResponseDtoAnalyzeInjectionsResp]:
        """分析故障注入数据

        使用多种筛选条件分析故障注入数据，返回包括效率、多样性、种子之间的距离等统计信息

        :param project_name: 项目名称过滤
        :type project_name: str
        :param env: 环境标签过滤
        :type env: str
        :param batch: 批次标签过滤
        :type batch: str
        :param tag: 分类标签过滤
        :type tag: str
        :param benchmark: 基准测试类型过滤
        :type benchmark: str
        :param status: 状态过滤，具体值参考字段映射接口(/mapping)
        :type status: int
        :param fault_type: 故障类型过滤，具体值参考字段映射接口(/mapping)
        :type fault_type: int
        :param lookback: 时间范围查询，支持自定义相对时间(1h/24h/7d)或custom 默认不设置
        :type lookback: str
        :param custom_start_time: 自定义开始时间，RFC3339格式，当lookback=custom时必需
        :type custom_start_time: datetime
        :param custom_end_time: 自定义结束时间，RFC3339格式，当lookback=custom时必需
        :type custom_end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_analyzers_injections_get_serialize(
            project_name=project_name,
            env=env,
            batch=batch,
            tag=tag,
            benchmark=benchmark,
            status=status,
            fault_type=fault_type,
            lookback=lookback,
            custom_start_time=custom_start_time,
            custom_end_time=custom_end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DtoGenericResponseDtoAnalyzeInjectionsResp",
            '400': "DtoGenericResponseAny",
            '500': "DtoGenericResponseAny",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_v1_analyzers_injections_get_without_preload_content(
        self,
        project_name: Annotated[Optional[StrictStr], Field(description="项目名称过滤")] = None,
        env: Annotated[Optional[StrictStr], Field(description="环境标签过滤")] = None,
        batch: Annotated[Optional[StrictStr], Field(description="批次标签过滤")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="分类标签过滤")] = None,
        benchmark: Annotated[Optional[StrictStr], Field(description="基准测试类型过滤")] = None,
        status: Annotated[Optional[StrictInt], Field(description="状态过滤，具体值参考字段映射接口(/mapping)")] = None,
        fault_type: Annotated[Optional[StrictInt], Field(description="故障类型过滤，具体值参考字段映射接口(/mapping)")] = None,
        lookback: Annotated[Optional[StrictStr], Field(description="时间范围查询，支持自定义相对时间(1h/24h/7d)或custom 默认不设置")] = None,
        custom_start_time: Annotated[Optional[datetime], Field(description="自定义开始时间，RFC3339格式，当lookback=custom时必需")] = None,
        custom_end_time: Annotated[Optional[datetime], Field(description="自定义结束时间，RFC3339格式，当lookback=custom时必需")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """分析故障注入数据

        使用多种筛选条件分析故障注入数据，返回包括效率、多样性、种子之间的距离等统计信息

        :param project_name: 项目名称过滤
        :type project_name: str
        :param env: 环境标签过滤
        :type env: str
        :param batch: 批次标签过滤
        :type batch: str
        :param tag: 分类标签过滤
        :type tag: str
        :param benchmark: 基准测试类型过滤
        :type benchmark: str
        :param status: 状态过滤，具体值参考字段映射接口(/mapping)
        :type status: int
        :param fault_type: 故障类型过滤，具体值参考字段映射接口(/mapping)
        :type fault_type: int
        :param lookback: 时间范围查询，支持自定义相对时间(1h/24h/7d)或custom 默认不设置
        :type lookback: str
        :param custom_start_time: 自定义开始时间，RFC3339格式，当lookback=custom时必需
        :type custom_start_time: datetime
        :param custom_end_time: 自定义结束时间，RFC3339格式，当lookback=custom时必需
        :type custom_end_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_analyzers_injections_get_serialize(
            project_name=project_name,
            env=env,
            batch=batch,
            tag=tag,
            benchmark=benchmark,
            status=status,
            fault_type=fault_type,
            lookback=lookback,
            custom_start_time=custom_start_time,
            custom_end_time=custom_end_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DtoGenericResponseDtoAnalyzeInjectionsResp",
            '400': "DtoGenericResponseAny",
            '500': "DtoGenericResponseAny",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_v1_analyzers_injections_get_serialize(
        self,
        project_name,
        env,
        batch,
        tag,
        benchmark,
        status,
        fault_type,
        lookback,
        custom_start_time,
        custom_end_time,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_name is not None:
            
            _query_params.append(('project_name', project_name))
            
        if env is not None:
            
            _query_params.append(('env', env))
            
        if batch is not None:
            
            _query_params.append(('batch', batch))
            
        if tag is not None:
            
            _query_params.append(('tag', tag))
            
        if benchmark is not None:
            
            _query_params.append(('benchmark', benchmark))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if fault_type is not None:
            
            _query_params.append(('fault_type', fault_type))
            
        if lookback is not None:
            
            _query_params.append(('lookback', lookback))
            
        if custom_start_time is not None:
            if isinstance(custom_start_time, datetime):
                _query_params.append(
                    (
                        'custom_start_time',
                        custom_start_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('custom_start_time', custom_start_time))
            
        if custom_end_time is not None:
            if isinstance(custom_end_time, datetime):
                _query_params.append(
                    (
                        'custom_end_time',
                        custom_end_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('custom_end_time', custom_end_time))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/analyzers/injections',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


