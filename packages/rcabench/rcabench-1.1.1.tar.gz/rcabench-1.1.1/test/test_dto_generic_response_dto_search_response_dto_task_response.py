# coding: utf-8

"""
    RCABench API

    RCABench - A comprehensive root cause analysis benchmarking platform for microservices This API provides endpoints for managing datasets, algorithms, evaluations, and fault injections for root cause analysis in distributed systems and microservices architectures.

    The version of the OpenAPI document: 1.0.1
    Contact: team@rcabench.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from rcabench.models.dto_generic_response_dto_search_response_dto_task_response import DtoGenericResponseDtoSearchResponseDtoTaskResponse

class TestDtoGenericResponseDtoSearchResponseDtoTaskResponse(unittest.TestCase):
    """DtoGenericResponseDtoSearchResponseDtoTaskResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DtoGenericResponseDtoSearchResponseDtoTaskResponse:
        """Test DtoGenericResponseDtoSearchResponseDtoTaskResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DtoGenericResponseDtoSearchResponseDtoTaskResponse`
        """
        model = DtoGenericResponseDtoSearchResponseDtoTaskResponse()
        if include_optional:
            return DtoGenericResponseDtoSearchResponseDtoTaskResponse(
                code = 56,
                data = rcabench.models.dto/search_response_dto_task_response.dto.SearchResponse-dto_TaskResponse(
                    applied_filters = [
                        rcabench.models.dto/search_filter.dto.SearchFilter(
                            field = '', 
                            operator = rcabench.models.operator.operator(), 
                            value = rcabench.models.value.value(), 
                            values = [
                                None
                                ], )
                        ], 
                    applied_sort = [
                        rcabench.models.dto/sort_option.dto.SortOption(
                            direction = rcabench.models.direction.direction(), 
                            field = '', )
                        ], 
                    items = [
                        rcabench.models.dto/task_response.dto.TaskResponse(
                            created_at = '', 
                            group_id = '', 
                            id = '', 
                            immediate = True, 
                            logs = [
                                ''
                                ], 
                            project = rcabench.models.project.project(), 
                            project_id = 56, 
                            status = '', 
                            trace_id = '', 
                            type = '', 
                            updated_at = '', )
                        ], 
                    pagination = rcabench.models.dto/pagination_info.dto.PaginationInfo(
                        page = 1, 
                        size = 20, 
                        total = 100, 
                        total_pages = 5, ), ),
                message = '',
                timestamp = 56
            )
        else:
            return DtoGenericResponseDtoSearchResponseDtoTaskResponse(
        )
        """

    def testDtoGenericResponseDtoSearchResponseDtoTaskResponse(self):
        """Test DtoGenericResponseDtoSearchResponseDtoTaskResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
