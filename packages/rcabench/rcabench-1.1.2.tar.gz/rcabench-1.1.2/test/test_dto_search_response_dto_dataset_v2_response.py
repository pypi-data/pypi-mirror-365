# coding: utf-8

"""
    RCABench API

    RCABench - A comprehensive root cause analysis benchmarking platform for microservices This API provides endpoints for managing datasets, algorithms, evaluations, and fault injections for root cause analysis in distributed systems and microservices architectures.

    The version of the OpenAPI document: 1.0.1
    Contact: team@rcabench.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from rcabench.models.dto_search_response_dto_dataset_v2_response import DtoSearchResponseDtoDatasetV2Response

class TestDtoSearchResponseDtoDatasetV2Response(unittest.TestCase):
    """DtoSearchResponseDtoDatasetV2Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DtoSearchResponseDtoDatasetV2Response:
        """Test DtoSearchResponseDtoDatasetV2Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DtoSearchResponseDtoDatasetV2Response`
        """
        model = DtoSearchResponseDtoDatasetV2Response()
        if include_optional:
            return DtoSearchResponseDtoDatasetV2Response(
                applied_filters = [
                    rcabench.models.dto/search_filter.dto.SearchFilter(
                        field = '', 
                        operator = rcabench.models.operator.operator(), 
                        value = '', 
                        values = [
                            ''
                            ], )
                    ],
                applied_sort = [
                    rcabench.models.dto/sort_option.dto.SortOption(
                        direction = rcabench.models.direction.direction(), 
                        field = '', )
                    ],
                items = [
                    rcabench.models.dto/dataset_v2_response.dto.DatasetV2Response(
                        checksum = '', 
                        created_at = '', 
                        data_source = '', 
                        description = '', 
                        download_url = '', 
                        file_count = 56, 
                        format = '', 
                        id = 56, 
                        injections = [
                            rcabench.models.dto/dataset_v2_injection_relation_response.dto.DatasetV2InjectionRelationResponse(
                                created_at = '', 
                                fault_injection = rcabench.models.fault_injection.fault_injection(), 
                                fault_injection_id = 56, 
                                id = 56, 
                                updated_at = '', )
                            ], 
                        is_public = True, 
                        labels = [
                            rcabench.models.database/label.database.Label(
                                category = '', 
                                color = '', 
                                created_at = '', 
                                description = '', 
                                id = 56, 
                                is_system = True, 
                                key = '', 
                                updated_at = '', 
                                usage = 56, 
                                value = '', )
                            ], 
                        name = '', 
                        project = rcabench.models.project.project(), 
                        project_id = 56, 
                        status = 56, 
                        type = '', 
                        updated_at = '', 
                        version = '', )
                    ],
                pagination = rcabench.models.dto/pagination_info.dto.PaginationInfo(
                    page = 1, 
                    size = 20, 
                    total = 100, 
                    total_pages = 5, )
            )
        else:
            return DtoSearchResponseDtoDatasetV2Response(
        )
        """

    def testDtoSearchResponseDtoDatasetV2Response(self):
        """Test DtoSearchResponseDtoDatasetV2Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
