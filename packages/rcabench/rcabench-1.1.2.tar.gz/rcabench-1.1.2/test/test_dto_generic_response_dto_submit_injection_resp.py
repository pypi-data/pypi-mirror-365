# coding: utf-8

"""
    RCABench API

    RCABench - A comprehensive root cause analysis benchmarking platform for microservices This API provides endpoints for managing datasets, algorithms, evaluations, and fault injections for root cause analysis in distributed systems and microservices architectures.

    The version of the OpenAPI document: 1.0.1
    Contact: team@rcabench.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from rcabench.models.dto_generic_response_dto_submit_injection_resp import DtoGenericResponseDtoSubmitInjectionResp

class TestDtoGenericResponseDtoSubmitInjectionResp(unittest.TestCase):
    """DtoGenericResponseDtoSubmitInjectionResp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DtoGenericResponseDtoSubmitInjectionResp:
        """Test DtoGenericResponseDtoSubmitInjectionResp
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DtoGenericResponseDtoSubmitInjectionResp`
        """
        model = DtoGenericResponseDtoSubmitInjectionResp()
        if include_optional:
            return DtoGenericResponseDtoSubmitInjectionResp(
                code = 56,
                data = rcabench.models.dto/submit_injection_resp.dto.SubmitInjectionResp(
                    duplicated_count = 56, 
                    group_id = '', 
                    original_count = 56, 
                    traces = [
                        rcabench.models.dto/trace.dto.Trace(
                            head_task_id = '', 
                            index = 56, 
                            trace_id = '', )
                        ], ),
                message = '',
                timestamp = 56
            )
        else:
            return DtoGenericResponseDtoSubmitInjectionResp(
        )
        """

    def testDtoGenericResponseDtoSubmitInjectionResp(self):
        """Test DtoGenericResponseDtoSubmitInjectionResp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
