# coding: utf-8

"""
    RCABench API

    RCABench - A comprehensive root cause analysis benchmarking platform for microservices This API provides endpoints for managing datasets, algorithms, evaluations, and fault injections for root cause analysis in distributed systems and microservices architectures.

    The version of the OpenAPI document: 1.0.1
    Contact: team@rcabench.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from rcabench.models.dto_dataset_v2_search_req import DtoDatasetV2SearchReq

class TestDtoDatasetV2SearchReq(unittest.TestCase):
    """DtoDatasetV2SearchReq unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DtoDatasetV2SearchReq:
        """Test DtoDatasetV2SearchReq
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DtoDatasetV2SearchReq`
        """
        model = DtoDatasetV2SearchReq()
        if include_optional:
            return DtoDatasetV2SearchReq(
                date_range = rcabench.models.dto/date_range_filter.dto.DateRangeFilter(
                    end_time = '', 
                    start_time = '', ),
                include = [
                    ''
                    ],
                is_public = True,
                label_keys = [
                    ''
                    ],
                label_values = [
                    ''
                    ],
                page = 1,
                project_ids = [
                    56
                    ],
                search = '',
                size = 1,
                size_range = rcabench.models.dto/size_range_filter.dto.SizeRangeFilter(
                    max_size = 56, 
                    min_size = 56, ),
                sort_by = '',
                sort_order = '',
                statuses = [
                    56
                    ],
                types = [
                    ''
                    ]
            )
        else:
            return DtoDatasetV2SearchReq(
        )
        """

    def testDtoDatasetV2SearchReq(self):
        """Test DtoDatasetV2SearchReq"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
