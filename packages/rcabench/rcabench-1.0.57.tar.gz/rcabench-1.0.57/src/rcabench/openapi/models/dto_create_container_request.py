# coding: utf-8

"""
    RCABench API

    RCABench - A comprehensive root cause analysis benchmarking platform for microservices This API provides endpoints for managing datasets, algorithms, evaluations, and fault injections for root cause analysis in distributed systems and microservices architectures.

    The version of the OpenAPI document: 1.0.1
    Contact: team@rcabench.com
    Generated by OpenAPI Generator (https://rcabench.openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from rcabench.openapi.models.dto_build_options import DtoBuildOptions
from rcabench.openapi.models.dto_build_source import DtoBuildSource
from typing import Optional, Set
from typing_extensions import Self

class DtoCreateContainerRequest(BaseModel):
    """
    Container creation request for v2 API
    """ # noqa: E501
    build_options: Optional[DtoBuildOptions] = Field(default=None, description="@Description Container build options")
    build_source: Optional[DtoBuildSource] = Field(default=None, description="@Description Container build source configuration")
    command: Optional[StrictStr] = Field(default=None, description="@Description Container startup command @example /bin/bash")
    env_vars: Optional[List[StrictStr]] = Field(default=None, description="@Description Environment variables")
    image: StrictStr = Field(description="@Description Docker image name @example my-image")
    is_public: Optional[StrictBool] = Field(default=None, description="@Description Whether the container is public")
    name: StrictStr = Field(description="@Description Container name @example my-container")
    tag: Optional[StrictStr] = Field(default=None, description="@Description Docker image tag @example latest")
    type: StrictStr = Field(description="@Description Container type (algorithm or benchmark) @example algorithm")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["build_options", "build_source", "command", "env_vars", "image", "is_public", "name", "tag", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['algorithm', 'benchmark']):
            raise ValueError("must be one of enum values ('algorithm', 'benchmark')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoCreateContainerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of build_options
        if self.build_options:
            _dict['build_options'] = self.build_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of build_source
        if self.build_source:
            _dict['build_source'] = self.build_source.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoCreateContainerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "build_options": DtoBuildOptions.from_dict(obj["build_options"]) if obj.get("build_options") is not None else None,
            "build_source": DtoBuildSource.from_dict(obj["build_source"]) if obj.get("build_source") is not None else None,
            "command": obj.get("command"),
            "env_vars": obj.get("env_vars"),
            "image": obj.get("image"),
            "is_public": obj.get("is_public"),
            "name": obj.get("name"),
            "tag": obj.get("tag"),
            "type": obj.get("type")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


