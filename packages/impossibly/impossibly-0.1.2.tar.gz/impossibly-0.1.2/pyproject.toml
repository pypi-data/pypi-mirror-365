[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "impossibly"
version = "0.1.2"
description = "An agentic architecture for idea generation & critical thinking"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [
    {name = "Jackson Grove"},
]
keywords = ["ai", "agents", "llm", "orchestration", "tools", "agentic", "architecture"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "python-dotenv>=1.0.0",
    "click>=8.0.0",
    "openai>=1.0.0",
    "anthropic>=0.4.0",
]

[project.urls]
Homepage = "https://github.com/jacksongrove/impossibly"
"Bug Reports" = "https://github.com/jacksongrove/impossibly/issues"
Documentation = "https://github.com/jacksongrove/impossibly/blob/main/README.md"

[project.optional-dependencies]
openai = ["openai>=1.0.0"]
anthropic = ["anthropic>=0.4.0"]
all = ["openai>=1.0.0", "anthropic>=0.4.0"]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "mock>=5.0.0",
    "openai>=1.0.0",
    "anthropic>=0.4.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "mock>=5.0.0",
    "openai>=1.0.0",
    "anthropic>=0.4.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "build>=1.0.0",
    "wheel>=0.40.0",
    "twine>=4.0.0",
    "setuptools>=61.0.0",
]

[project.scripts]
impossibly = "impossibly.cli.test_commands:tests"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
markers = [
    # RAG functionality markers
    "rag: tests for retrieval-augmented generation (RAG) functionality",
    "rag_text: tests for RAG with text files",
    "rag_large: tests for RAG with large text files",
    "rag_image: tests for RAG with image files",
    "rag_unsupported: tests for RAG with unsupported file types",
    "rag_content: tests for RAG content reaching agent",
    "rag_multiple: tests for RAG with multiple files",
    
    # Agent interaction markers
    "agent_memory: tests for agent memory and conversation history",
    "multi_agent: tests for multi-agent collaboration",
    "cross_agent: tests for sharing memory between agents",
    "multi_step: tests for multi-step reasoning through graphs",
    
    # Tool functionality markers
    "tools: tests for tool functionality",
    "tools_direct: tests for direct tool execution",
    "tools_validation: tests for tool parameter validation",
    "tools_error: tests for tool error handling",
    "tools_async: tests for asynchronous tools",
    
    # Image capability markers
    "image: tests for image handling capabilities",
    "image_input: tests for agent initialization with image input",
    "image_analysis: tests for image analysis capabilities",
    "multi_image: tests for handling multiple images in one request",
    "image_graph: tests for image agents in graphs"
] 