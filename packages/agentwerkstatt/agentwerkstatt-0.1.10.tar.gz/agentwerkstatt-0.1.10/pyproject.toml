[build-system]
requires = ["setuptools>=61.0", "setuptools-scm>=8.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agentwerkstatt"
dynamic = ["version"]
description = "AgentWerkstatt, a minimalistic agentic framework"
readme = "README.md"
# license = {text = "MIT"}
authors = [
    {name = "Hannes Hapke"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Filesystems",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["ai", "agent", "minimalistic"]
requires-python = ">=3.10"
dependencies = [
    "httpx>=0.24.0",
    "python-dotenv>=1.0.0",
    "absl-py>=1.0.0",
    "PyYAML>=6.0.0",
]

[project.optional-dependencies]
tracing = [
    "langfuse>=3.2.1",
]
memory = [
    "mem0ai>=0.1.115",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
observability = [
    "langfuse>=3.2.1",
]

[project.scripts]
agentwerkstatt = "agentwerkstatt.cli:cli"

[project.urls]
Homepage = "https://github.com/hanneshapke/agentwerkstatt"
Documentation = "https://github.com/hanneshapke/agentwerkstatt#readme"
Repository = "https://github.com/hanneshapke/agentwerkstatt.git"
"Bug Tracker" = "https://github.com/hanneshapke/agentwerkstatt/issues"
"Discussions" = "https://github.com/hanneshapke/agentwerkstatt/discussions"
"Contributing" = "https://github.com/hanneshapke/agentwerkstatt/blob/main/CONTRIBUTING.md"

[tool.setuptools]
packages = [
    "agentwerkstatt",
    "agentwerkstatt.llms",
    "agentwerkstatt.services",
    "agentwerkstatt.tools"
]

[tool.setuptools.package-dir]
"agentwerkstatt" = "."
"agentwerkstatt.llms" = "llms"
"agentwerkstatt.services" = "services"
"agentwerkstatt.tools" = "tools"

[tool.setuptools.package-data]
agentwerkstatt = ["**/config.yaml", "**/docker-compose.yaml", "**/Dockerfile*", "**/*.md"]

[tool.setuptools_scm]
# Enable setuptools-scm for dynamic versioning from git tags
write_to = "_version.py"
# Use version format without local identifiers for test-pypi compatibility
version_scheme = "post-release"
local_scheme = "no-local-version"

# Development scripts for contributor workflow
[tool.hatch.envs.default.scripts]
format-and-lint = [
    "ruff check --fix",
    "ruff format",
]
quality-check = [
    "ruff check",
    "ruff format --check",
    "mypy .",
]
test = "pytest"
test-cov = "pytest --cov=. --cov-report=html --cov-report=term --cov-branch --cov-fail-under=85"
pre-commit = [
    "ruff check --fix",
    "ruff format",
    "mypy .",
    "pytest",
]

[tool.ruff]
# Ruff configuration
line-length = 100
target-version = "py310"

# Exclude directories and generated files
exclude = [
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "_version.py",  # Auto-generated by setuptools-scm
]

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Plus additional codes for better code quality
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
]

ignore = [
    "E501", # line too long (handled by formatter)
]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["N999"]      # Allow project name AgentWerkstatt in all __init__.py files
"__init__.py" = ["N999"]        # Allow project name AgentWerkstatt in root __init__.py
"tests/**/*.py" = ["S101"]      # Allow assert statements in tests

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Indent with spaces
indent-style = "space"
# Respect magic trailing commas
skip-magic-trailing-comma = false
# Automatically detect line ending
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
# Temporarily very permissive for initial CI/CD setup
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
show_error_codes = true
explicit_package_bases = true
# Ignore missing imports for external libraries
ignore_missing_imports = true
# Temporarily ignore specific error types
disable_error_code = ["var-annotated", "attr-defined", "assignment", "override", "arg-type", "no-any-return", "call-arg", "abstract"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[dependency-groups]
dev = [
    "mypy>=1.17.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.12.5",
    "setuptools>=61.0",
    "setuptools-scm>=8.3.1",
    "types-pyyaml>=6.0.12.20250516",
]

[tool.coverage.run]
branch = true
source = ["."]
omit = [
    "tests/*",
    "*/__init__.py",
    "_version.py",
    "setup.py",
    "conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
