from __future__ import annotations
import typing as t
import pandas as pd
from pydantic import ConfigDict, BaseModel, field_validator
from .utils import reform_for_multiindex_df
import numpy as np


def _is_finite_series(value: (list[float] | list[str]) | dict):
    r""":meta private:"""
    if (
        isinstance(value, list)
        and not any(isinstance(x, str) for x in value)
        and not np.isfinite(np.array(value)).all()
    ):
        raise ValueError("Time series can only contain finite values")


class BaseTimeSeries(BaseModel):
    r""":meta private:"""

    # required to apply validation to extra fields that are allowed but not specified in the schema (e.g. related to
    # ancillaries)
    def model_post_init(self, __context: t.Any) -> None:
        if self.model_extra is not None:
            for k, v in self.model_extra.items():
                _is_finite_series(v)

    @field_validator("*", mode="after")
    @classmethod
    def is_finite(cls, value: list[float] | dict) -> list[float] | dict:
        _is_finite_series(value)
        return value


class SolarTimeSeries(BaseTimeSeries):
    r"""
    Time series results for PV/Generation-only simulations or for the PV-only sub-simulation of a hybrid simulation
    """

    ideal_tracker_rotation: t.Optional[list] = None
    r"""Ideal or "true"-tracking angle for single axis tracking systems.
    
    - Units: degrees with horizontal equal to 0\ |degrees|
    - For backtracking systems this angle will differ from the actual tracker angle
    - Only generated for :class:`~generation_models.generation_models.PVGenerationModel` simulations
      where :attr:`PVGenerationModel.system_design.tracking <generation_models.generation_models.\
      PVSystemDesign.tracking>` is a :class:`~generation_models.generation_models.SingleAxisTracking`
      instance
    """

    front_total_poa: t.Optional[list] = None
    r"""Total plane of array (POA) irradiance that strikes the front face of the PV
    array after accounting for shading, soiling and incidence angle modifier (IAM) losses
    
    - Units: W/m\ :sup:`2`
    - Only generated for :class:`~generation_models.generation_models.PVGenerationModel` simulations
    """

    rear_total_poa: t.Optional[list] = None
    r"""Total plane of array (POA) irradiance that strikes the rear face of the PV
    array after accounting for rear irradiance losses (as defined by the
    :attr:`~generation_models.generation_models.DCLosses.rear_irradiance` input
    and incidence angle modifier (IAM) losses

    - Units: W/m\ :sup:`2`
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` simulations where
      :attr:`PVGenerationModel.pv_module.bifacial <generation_models.generation_models.\
      PVModuleMermoudLejeune.bifacial>` is ``True``
    """

    effective_total_poa: t.Optional[list] = None
    r"""Total plane of array (POA) irradiance available to the PV array for conversion to electrical power. Includes
    front-side and rear-side contributions for bifacial systems but also accounts for the
    :attr:`~generation_models.generation_models.PVModuleMermoudLejeune.bifaciality` factor, such that
    
    :math:`POA_{eff\_total} = POA_{front\_total} + bifaciality * POA_{rear\_total}`
    
    - Units: W/m\ :sup:`2`
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` simulations
    """

    array_dc_snow_loss: t.Optional[list] = None
    r"""Loss due to build up of snow on solar array. Modeled as a DC power reduction (as opposed to e.g. a
    reduction in irradiance) and applied just before the conversion to AC power.
    
    - Units: kW
    - Only non-zero if :attr:`PVGenerationModel.losses.enable_snow_model <generation_models.\
      generation_models.DCLosses.enable_snow_model>` is ``True``
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` simulations
    """

    array_gross_dc_power: t.Optional[list] = None
    r"""DC power generated by the PV array after modeling irradiance-to-power conversion and time varying losses
    (e.g. :attr:`array_dc_snow_loss`), but *before* modeling constant derate factors
    (e.g. :attr:`~generation_models.generation_models.DCLosses.lid` loss)
    
    - Units: kW
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` simulations
    """

    array_dc_power: t.Optional[list] = None
    r"""DC power generated by the PV array (or other generation source) at the DC bus, i.e. the point
    in the idealized model flow just before DC-to-AC conversion (e.g. the combined inverter inputs).

    - Units: kW
    - Represents the maximum power point (MPP) power of the array (constrained by the inverter MPP tracking
      voltage window). It does not represent the reduced DC power that results from inverter clipping. As such, it is
      equivalent to PVSyst's EArrayMPP and not EArray
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` or
      :class:`~generation_models.generation_models.DCExternalGenerationModel` simulations
    - For :class:`~generation_models.generation_models.DCExternalGenerationModel` simulations
      this is equivalent to the provided :attr:`DCExternalGenerationModel.production_override.power <\
      generation_models.generation_models.DCProductionProfile.power>`
    """

    array_dc_voltage: t.Optional[list] = None
    r"""DC voltage generated by the PV array (or other generation source) at the DC bus, i.e. the point
    in the idealized model flow just before DC-to-AC conversion (.e.g the combined inverter inputs).

    - Units: V
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` or
      :class:`~generation_models.generation_models.DCExternalGenerationModel` simulations
    - For :class:`~generation_models.generation_models.DCExternalGenerationModel` simulations
      this is equivalent to the provided :attr:`DCExternalGenerationModel.production_override.voltage <\
      generation_models.generation_models.DCProductionProfile.voltage>`
    """

    inverter_mppt_dc_voltage: t.Optional[list] = None
    r"""*Deprecated, instead use* :attr:`array_dc_voltage`.
    
    - Units: V
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` simulations
    """

    inverter_mppt_loss: t.Optional[list] = None
    r"""Loss due to operating at the edges of the maximum power point (MPP) voltage window, i.e. off of the MPP.
    Applied just after the irradiance-to-power conversion.
    
    - Units: kW
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` simulations
    """

    inverter_clipping_loss: t.Optional[list] = None
    r"""Loss due to inverter power clipping, including clipping that occurs due to a thermal derate of the inverter
    nameplate power.
    
    - Units: kW
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` or
      :class:`~generation_models.generation_models.DCExternalGenerationModel` simulations
    """

    inverter_night_tare_loss: t.Optional[list] = None
    r"""Loss due to inverter standby power draw, applied when the input DC power is below the turn on threshold

    - Units: kW
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` or
      :class:`~generation_models.generation_models.DCExternalGenerationModel` simulations
    """

    inverter_power_consumption_loss: t.Optional[list] = None
    r"""Loss due to inverter power consumption during operation, applied when the input DC power is above the turn on
    threshold. Note that depending on the inverter model used, there is a different relationship to
    :attr:`inverter_efficiency`. For the CEC inverter model
    (:class:`~generation_models.generation_models.Inverter` class), the efficiency includes the
    consumption loss. For the OND inverter model
    (:class:`~generation_models.generation_models.ONDInverter` class), the consumption loss depends
    on the :attr:`~generation_models.generation_models.ONDInverter.aux_loss` input and is applied
    after conversion and clipping.

    - Units: kW
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` or
      :class:`~generation_models.generation_models.DCExternalGenerationModel` simulations
    """

    inverter_efficiency: t.Optional[list] = None
    r"""Inverter conversion (DC to AC) efficiency. Does not include clipping effects, which are returned separately
    as :attr:`inverter_clipping_loss`.

    - Units: kW
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` or
      :class:`~generation_models.generation_models.DCExternalGenerationModel` simulations
    """

    ambient_temp: t.Optional[list] = None
    r"""Ambient Temperature. This is provided as a convenience for simulations where Tyba pulls a solar resource
    dataset based on project location. If ambient temperature was provided as part of a solar resource or external
    generation dataset, this will be equivalent. 

    - Units: |degrees|\ C
    """

    gross_ac_power: list
    r"""AC power at the combined inverter outputs. *For*
    :class:`~generation_models.generation_models.ACExternalGenerationModel` *simulations, it is
    equivalent to* :attr:`mv_ac_power` *and can be ignored.*
    
    - Units: kW
    """

    mv_transformer_loss: t.Optional[list] = None
    r"""Total loss due to operation of a medium voltage (MV) transformer, the sum of :attr:`mv_transformer_load_loss`
    and :attr:`mv_transformer_no_load_loss`.
    
    - Units: kW
    - Only generated when e.g. :attr:`PVGenerationModel.losses.mv_transformer <generation_models.\
      generation_models.Losses.mv_transformer>` is not ``None``
    """

    mv_transformer_load_loss: t.Optional[list] = None
    r"""Load-dependent loss due to operation of medium voltage (MV) transformer (coil losses). Depends on
    :attr:`~generation_models.generation_models.Transformer.load_loss` factor.

    - Units: kW
    - Only generated when e.g. :attr:`PVGenerationModel.losses.mv_transformer <generation_models.\
      generation_models.Losses.mv_transformer>` is not ``None``
    """

    mv_transformer_no_load_loss: t.Optional[list] = None
    r"""Constant loss due to operation of medium voltage (MV) transformer (core losses). Depends on
    :attr:`~generation_models.generation_models.Transformer.no_load_loss` factor

    - Units: kW
    - Only generated when e.g. :attr:`PVGenerationModel.losses.mv_transformer <generation_models.\
      generation_models.Losses.mv_transformer>` is not ``None``
    """

    mv_ac_power: list
    r"""Total AC power at medium voltage (MV) AC bus, e.g. the panel that collects all of the MV transformer outputs
    
    - Units: kW
    - For :class:`~generation_models.generation_models.ACExternalGenerationModel` simulations
      this is equivalent to the provided :attr:`ACExternalGenerationModel.production_override.power <\
      generation_models.generation_models.ACProductionProfile.power>`
    """

    ac_wiring_loss: list
    r"""Loss due to resistance of medium voltage (MV) AC wiring that connects the MV AC bus, either to a high voltage
    transformer (if modeled) or the project switchgear. Depends on
    :attr:`~generation_models.generation_models.ACLosses.ac_wiring` input.
    
    - Units: kW
    """

    hv_transformer_loss: t.Optional[list] = None
    r"""Total loss due to operation of high voltage (HV) transformer (i.e. a GSU or substation), the sum of
    :attr:`hv_transformer_load_loss` and :attr:`hv_transformer_no_load_loss`.

    - Units: kW
    - Only generated when e.g. :attr:`PVGenerationModel.losses.hv_transformer <generation_models.\
      generation_models.Losses.hv_transformer>` is not ``None``
    """

    hv_transformer_load_loss: t.Optional[list] = None
    r"""Load-dependent loss (coil losses) due to operation of high voltage (HV) transformer (i.e. a GSU or substation).
    Depends on :attr:`~generation_models.generation_models.Transformer.load_loss` factor.

    - Units: kW
    - Only generated when e.g. :attr:`PVGenerationModel.losses.hv_transformer <generation_models.\
      generation_models.Losses.hv_transformer>` is not ``None``
    """

    hv_transformer_no_load_loss: t.Optional[list] = None
    r"""Constant loss (core losses) due to operation of high voltage (HV) transformer (i.e. a GSU or substation).
    Depends on :attr:`~generation_models.generation_models.Transformer.no_load_loss` factor.

    - Units: kW
    - Only generated when e.g. :attr:`PVGenerationModel.losses.hv_transformer <generation_models.\
      generation_models.Losses.hv_transformer>` is not ``None``
    """

    transformer_load_loss: list
    r"""*Deprecated, see* :attr:`hv_transformer_load_loss`.
    
    - Units: kW
    - If e.g. :attr:`PVGenerationModel.losses.hv_transformer <generation_models.\
      generation_models.Losses.hv_transformer>` is ``None``, will be all zeros.
    """

    transformer_no_load_loss: list
    r"""*Deprecated, see* :attr:`hv_transformer_no_load_loss`.

    - Units: kW
    - If e.g. :attr:`PVGenerationModel.losses.hv_transformer <generation_models.\
      generation_models.Losses.hv_transformer>` is ``None``, will be all zeros.
    """

    hv_ac_power: list
    r"""Total AC power measured at the switchgear/project boundary. This point is also defined as the high voltage
    (HV) bus because if a high voltage transformer/GSU/substation is modeled, this corresponds to the HV transformer
    output.

    - Units: kW
    """

    ac_transmission_loss: list
    r"""Loss due to resistance of high voltage (HV) AC lines that connect the switchgear to the actual point of
    interconnection (POI). Depends on
    :attr:`~generation_models.generation_models.ACLosses.transmission` input
    
    - Units: kW
    """

    gen: list
    r"""Power at the point of interconnection (POI), prior to clipping the values to the
    limit defined by e.g. :attr:`PVGenerationModel.system_design.poi_limit <generation_models.\
    generation_models.BaseSystemDesign.poi_limit>`

    - Units: kW
    """

    poi_unadjusted: list
    r"""Power at the point of interconnection (POI), after applying POI clipping but before applying the user-defined
    :attr:`~generation_models.generation_models.ACLosses.poi_adjustment`

    - Units: kW
    """

    system_power: list
    r"""Power at the point of interconnection (POI) after accounting for all losses/adjustments

    - Units: kW
    """

    positive_system_power: list
    r"""Positive-only values of :attr:`system_power` time series, where negative values have been set to zero. Useful
    when trying to quantify AC solar generation or if, for example, power drawn from the grid (inverter standby)
    is valued at a different price than generated power
    
    - Units: kW
    """

    negative_system_power: list
    r"""Negative-only values of :attr:`system_power` time series, where positive values have been set to zero. Useful
    if, for example, power drawn from the grid (inverter standby) is valued at a different price than generated power

    - Units: kW
    """

    curtailed_system_power: t.Optional[list] = None
    r"""-"""

    net_system_power: t.Optional[list] = None
    r"""-"""

    net_positive_system_power: t.Optional[list] = None
    r"""-"""

    sam_design_parameters: dict
    r"""Dict of raw `PySAM <https://nrel-pysam.readthedocs.io/en/v2.1.4/index.html>`__ inputs. As such, variable
    names will not correspond to those used in the Tyba model schema, but
    it can be useful for understanding very specific settings used in the PV simulation. See SAM documentation
    (link above) for more details.
    
    - Only non-empty for :class:`~generation_models.generation_models.PVGenerationModel`
      simulations
    """


class SolarWaterfall(BaseModel):
    r"""Loss waterfall results based on the first year (8760 hours) of simulation results. For simulations of less
    than 1 year, the entire
    :attr:`~generation_models.generation_models.PVGenerationModel.project_term` is considered.
    However, due to limitations of the underlying `PySAM <https://nrel-pysam.readthedocs.io/en/v2.1.4/index.html>`__
    model, waterfall items upstream of :attr:`dc_net_ann` will not be generated for simulations less than 1 year long.
    """

    gh_ann: t.Optional[float] = None
    r"""Annual `Global Horizontal Irradiance <gh_>`_. This is based on the
    :attr:`~generation_models.generation_models.PVGenerationModel.solar_resource` input and not
    generated directly by Tyba.

    .. _gh: https://pvpmc.sandia.gov/modeling-steps/1-weather-design-inputs/irradiance-and-insolation-2/global-
        horizontal-irradiance/

    - Units: Wh/m\ :sup:`2`
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    nominal_poa_ann: t.Optional[float] = None
    r"""Annual plane of array (POA) irradiance that strikes the front face of the PV
    array based solely on transposition, i.e. prior to accounting for shading, soiling
    and incidence angle modifier (IAM) losses. Does not include rearside irradiance for bifacial systems

    - Units: Wh/m\ :sup:`2`
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    shading_lp: t.Optional[float] = None
    r"""Annual fraction of :attr:`nominal_poa_ann` (front side) that is lost due to diffuse and linear beam shading,
    i.e. not including any DC power loss due to beam shading when true-tracking (the "electrical effect")

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    soiling_lp: t.Optional[float] = None
    r"""Annual fraction of :attr:`nominal_poa_ann` (front side) that is lost due to soiling.

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    reflection_lp: t.Optional[float] = None
    r"""Annual fraction of :attr:`nominal_poa_ann` (front side) that is lost due to reflection/incident angle modifier
    losses.

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    bifacial_lp: t.Optional[float] = None
    r"""Annual fractional gain in plane of array (POA) irradiance due to irradiance that strikes the rear face of the
    PV array after accounting for rear irradiance losses (as defined by the
    :attr:`~generation_models.generation_models.DCLosses.rear_irradiance` input)
    and incidence angle modifier (IAM) losses. This does not include bifaciality factor (see docs for
    :attr:`SolarTimeSeries.rear_total_poa` and :attr:`SolarTimeSeries.effective_total_poa` for more details).

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    dc_nominal_ann: t.Optional[float] = None
    r"""Annual DC power generated by the PV array assuming all irradiance is converted to power at the STC/nominal
    module efficiency

    - Units: kWh
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    snow_lp: t.Optional[float] = None
    r"""Annual fraction of DC power lost due to buildup of snow on solar array.

    - Units: kW
    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    module_temp_lp: t.Optional[float] = None
    r"""Annual fraction of DC power that is lost due to operating at non-STC temperature and irradiance. Due to
    limitations in `PySAM <https://nrel-pysam.readthedocs.io/en/v2.1.4/index.html>`__, this also includes the fraction
    of DC power lost due to beam shading when true-tracking (the "electrical effect")

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    mppt_lp: t.Optional[float] = None
    r"""Annual fraction of DC power lost due to operating at the edges of the maximum power point (MPP) voltage window,
    i.e. off of the MPP.

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    mismatch_lp: t.Optional[float] = None
    r"""Annual fraction of DC power lost due mismatch, should correspond to the
    :attr:`~generation_models.generation_models.DCLosses.mismatch` input.

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    diodes_lp: t.Optional[float] = None
    r"""Annual fraction of DC power lost due resistance in the diodes and connections of the PV array, should
    correspond to the :attr:`~generation_models.generation_models.DCLosses.diodes_connections` input.

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    dc_wiring_lp: t.Optional[float] = None
    r"""Annual fraction of DC power lost due resistance in the DC wiring of the PV array, should correspond to the
    :attr:`~generation_models.generation_models.DCLosses.dc_wiring` input.

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    tracking_error_lp: t.Optional[float] = None
    r"""Annual fraction of DC power lost due to tracking system error in single-axis tracking PV arrays, should
    correspond to the :attr:`~generation_models.generation_models.DCLosses.tracking_error` input.

    - Units: unitless fraction
    - Will be null when :attr:`PVGenerationModel.system_design.tracking <generation_models.\
      generation_models.PVSystemDesign.tracking>` is a
      :class:`~generation_models.generation_models.FixedTilt` instance
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    mppt_error_lp: t.Optional[float] = None
    r"""*Deprecated (as well as misnamed). Equivalent to* :attr:`tracking_error_lp`, *use that instead.*
    """

    nameplate_lp: t.Optional[float] = None
    r"""Annual fractional impact to DC power from deviations between the nameplate module rating provided by a
    manufacturer and actual/tested performance, should
    correspond to the :attr:`~generation_models.generation_models.DCLosses.nameplate` input.

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    dc_optimizer_lp: t.Optional[float] = None
    r"""Annual fractional impact to DC power from dc optimizer operation, should
    correspond to the :attr:`~generation_models.generation_models.DCLosses.dc_optimizer` input.

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    dc_avail_lp: t.Optional[float] = None
    r"""Annual fractional impact of DC power adjustment (which could be used to model e.g. DC availability), should
    correspond to the :attr:`~generation_models.generation_models.DCLosses.dc_array_adjustment` input.

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` instance at least 1 year long
    """

    dc_net_ann: t.Optional[float] = None
    r"""Annual DC power generated by the project at the DC bus, i.e. the point
    in the idealized model flow just before DC-to-AC conversion (e.g. the combined inverter inputs).

    - Units: kWh
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` or
      :class:`~generation_models.generation_models.DCExternalGenerationModel` instance
    - See the docs for :attr:`SolarTimeSeries.array_dc_power` or :attr:`SolarStorageTimeSeries.solar_storage_dc_power`
      for more details
    """

    inverter_clipping_lp: t.Optional[float] = None
    r"""Annual fraction of AC power lost due to inverter power clipping, including clipping that occurs due to a
    thermal derate of the inverter nameplate power.

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` or
      :class:`~generation_models.generation_models.DCExternalGenerationModel` instance
    """

    inverter_consumption_lp: t.Optional[float] = None
    r"""Annual fraction of AC power lost due to inverter power consumption during operation. See
    :attr:`SolarTimeSeries.inverter_power_consumption_loss` for how to interpret depending on inverter model.

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` or
      :class:`~generation_models.generation_models.DCExternalGenerationModel` instance
    """

    inverter_nightcons_lp: t.Optional[float] = None
    r"""Annual fraction of AC power lost due to inverter standby power draw.
    
    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` or
      :class:`~generation_models.generation_models.DCExternalGenerationModel` instance
    """

    inverter_efficiency_lp: t.Optional[float] = None
    r"""Annual fraction of AC power lost due to conversion (DC to AC) efficiency. Does
    not include consumption or clipping effects, which are returned separately as :attr:`inverter_consumption_lp`
    and :attr:`inverter_clipping_lp` respectively.

    - Units: unitless fraction
    - Only generated if the simulation or :attr:`PVStorageModel.pv_inputs <\
      generation_models.generation_models.PVStorageModel.pv_inputs>` is a
      :class:`~generation_models.generation_models.PVGenerationModel` or
      :class:`~generation_models.generation_models.DCExternalGenerationModel` instance
    """

    ac_gross_ann: float
    r"""Annual AC power at the combined inverter outputs. *For*
    simulations or* :attr:`PVStorageModel.pv_inputs <\
    generation_models.generation_models.PVStorageModel.pv_inputs>` *of type*
    :class:`~generation_models.generation_models.ACExternalGenerationModel` *this
    will be the first year sum of* :attr:`ACExternalGenerationModel.production_override.power <\
    generation_models.generation_models.ACProductionProfile.power>`, *and* :attr:`mv_transformer_lp`
    *will be zero, e.g. the MV AC generation source is modeled as the output of inverters with integrated MV
    transformers.*

    - Units: kWh
    """

    mv_transformer_lp: float
    r"""Annual fraction of AC power lost due to operation of a medium voltage (MV) transformer

    - Units: unitless fraction
    """

    ac_wiring_lp: float
    r"""Annual fraction of AC power lost due to resistance of medium voltage (MV) AC wiring that connects the MV AC 
    bus, either to a high voltage transformer (if modeled) or the project switchgear.

    - Units: unitless fraction
    """

    hv_transformer_lp: float
    r"""Annual fraction of AC power lost due to operation of a high voltage (HV) transformer (i.e. a GSU or substation)

    - Units: unitless fraction
    """

    transformer_lp: float
    r"""*Deprecated, see* :attr: `hv_transformer_lp`.

    - Units: unitless fraction
    """

    transmission_lp: float
    r"""Annual fraction of AC power lost due to resistance of high voltage (HV) AC lines that connect the switchgear
    to the actual point of interconnection (POI)

    - Units: unitless fraction
    """

    poi_clipping_lp: float
    r"""Annual fraction of AC power lost due to clipping the AC power to the
    limit defined by e.g. :attr:`PVGenerationModel.system_design.poi_limit <generation_models.\
    generation_models.BaseSystemDesign.poi_limit>`

    - Units: unitless fraction
    """

    ac_availcurtail_lp: float
    r"""Annual adjustment of AC power due to the user-defined
    :attr:`~generation_models.generation_models.ACLosses.poi_adjustment`

    - Units: unitless fraction
    """

    annual_energy: float
    r"""Annual AC power at the point of interconnection (POI) after accounting for all losses/adjustments

    - Units: kWh
    """

    @field_validator("*", mode="after")
    @classmethod
    def is_finite(cls, value: float) -> float:
        if not np.isfinite(value):
            raise ValueError("Waterfall values must be finite")
        return value


class SolarStorageTimeSeries(BaseTimeSeries):
    r"""Power flow-related time series results for hybrid simulations"""

    battery_internal_energy: list
    r"""Energy stored in the BESS at the end of each time interval. Corresponds to
    :attr:`OptimizerTimeSeries.internal_energy`. Note values will be higher than the amount of usable energy in the
    BESS due to losses between the point of coupling and the internal structure of the cells (the idealized battery
    "vessel").
    
    - Units: kWh
    """

    battery_internal_energy_max: list
    r"""Available energy capacity of the BESS. Like :attr:`battery_internal_energy`, values will be larger than the
    maximum usable capacity of the BESS. For each BESS
    :attr:`~generation_models.generation_models.BatteryParams.term` the starting value will be
    :attr:`~generation_models.generation_models.BatteryParams.energy_capacity` divided by
    :attr:`~generation_models.generation_models.BatteryParams.discharge_efficiency`. The values will
    decrease based on the specified
    :attr:`~generation_models.generation_models.BatteryParams.capacity_degradation_model`.
    
    - Units: kWh
    """

    battery_limit: t.Union[float, list]
    r"""Power limit applied at the point of BESS coupling. These values are based on limits and losses that occur
    between the point of coupling and point of interconnection (POI). For example: The POI limit, export limit,
    import limit, temperature-dependent inverter capacity, BESS charge and discharge specifications, and component and
    wiring losses.
    
    - Units: kW
    - In some cases, e.g. when no time-varying limits have been applied, the battery_limit is constant for all time
      steps and may be returned as a single value, otherwise it will be a time series.
    """

    battery_output: list
    r"""Power flow to/from the BESS at the point of coupling.
    
    - Units: kW
    - Positive values correspond to BESS discharge, negative values correspond to BESS charge.
    - Note that the relationship between
      :attr:`battery_internal_energy` and ``battery_output`` is dependent on the current BESS charge and discharge
      efficiency, which will vary with time if an
      :attr:`~generation_models.generation_models.BatteryParams.efficiency_degradation_model`
      has been specified
    """

    excess_power_at_coupling: list
    r"""Power flowing to the BESS point of coupling from the PV array (or other generation source) that is in excess
    of the :attr:`battery_limit`. Can be compared to both :attr:`battery_limit` and :attr:`captured_excess_at_coupling`
    to understand how much the BESS is improving system generation relative to a PV-only system with the same
    equipment/limits.
    
    - Units: kW
    """

    captured_excess_at_coupling: list
    r"""Excess power flowing to the BESS point of coupling from the PV array (or other generation source) that is
    used to charge the BESS. Can be compared to both :attr:`battery_limit` and :attr:`excess_power_at_coupling`
    to understand how much the BESS is improving system generation relative to a PV-only system with the same
    equipment/limits.

    - Units: kW
    """

    solar_storage_dc_voltage: t.Optional[list] = None
    r"""DC voltage at the DC bus (the point of coupling) for DC-coupled hybrid systems. This will be
    equivalent to :attr:`PVStorageModel.solar_only.array_dc_voltage <SolarTimeSeries.array_dc_voltage>` when the PV
    array (or other generation source) is generating. When the BESS is operating alone it will default to the
    inverter nominal voltage.

    - Units: V
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc`
    - DC bus is the point in the idealized model flow just before DC-to-AC conversion (.e.g the combined inverter
      inputs)
    """

    solar_storage_dc_power: t.Optional[list] = None
    r"""Combined DC power of the BESS and PV Array (or other generation source) at the DC bus for DC-coupled hybrid
    systems. 

    - Units: kW
    - Positive values correspond to power flowing towards the POI, negative values correspond to power flowing away
      from the POI.
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc`
    - DC bus is the point in the idealized model flow just before DC-to-AC conversion (.e.g the combined inverter
      inputs)
    """

    solar_storage_power_at_coupling: list
    r"""Combined power (DC or AC) of the BESS and PV Array (or other generation source) at the point of BESS coupling
    for hybrid systems.

    - Units: kW
    - Positive values correspond to power flowing towards the POI, negative values correspond to power flowing away
      from the POI.
    """

    inverter_clipping_loss: t.Optional[list] = None
    r"""Loss due to inverter power clipping, including clipping that occurs due to a thermal derate of the inverter
    nameplate power.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc`
    """

    inverter_tare_loss: t.Optional[list] = None
    r"""Loss due to inverter standby power draw, applied when the input DC power is below the turn on threshold

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc`
    """

    inverter_parasitic_loss: t.Optional[list] = None
    r"""Duplicate of :attr:`inverter_tare_loss`
    
    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc`
    """

    inverter_consumption_loss: t.Optional[list] = None
    r"""Loss due to inverter power consumption during operation, applied when the input DC power is above the turn on
    threshold. Note that depending on the inverter model used, there is a different relationship to
    :attr:`inverter_efficiency`. For the CEC inverter model
    (:class:`~generation_models.generation_models.Inverter` class), the efficiency includes the
    consumption loss. For the OND inverter model
    (:class:`~generation_models.generation_models.ONDInverter` class), the consumption loss depends
    on the :attr:`~generation_models.generation_models.ONDInverter.aux_loss` input and is applied
    after conversion and clipping.

    - Units: kW
    - Only generated for
      :class:`~generation_models.generation_models.PVGenerationModel` or
      :class:`~generation_models.generation_models.DCExternalGenerationModel` simulations
    """

    inverter_efficiency: t.Optional[list] = None
    r"""Inverter conversion (DC to AC) efficiency. Does not include clipping effects, which are returned separately
    as :attr:`inverter_clipping_loss`.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc`
    """

    solar_storage_gross_ac_power: t.Optional[list] = None
    r"""Combined AC power of the BESS and PV Array (or other generation source) at the combined inverter outputs for
    DC-coupled hybrid systems. 

    - Units: kW
    - Positive values correspond to power flowing towards the POI, negative values correspond to power flowing away
      from the POI.
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc`
    """

    mv_xfmr_loss: t.Optional[list] = None
    r"""Total loss due to operation of a medium voltage (MV) transformer, the sum of :attr:`mv_xfmr_load_loss`
    and :attr:`mv_xfmr_no_load_loss`.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc` and e.g.
      :attr:`PVStorageModel.pv_inputs.losses.mv_transformer <generation_models.\
      generation_models.Losses.mv_transformer>` is not ``None``
    """

    mv_xfmr_load_loss: t.Optional[list] = None
    r"""Load-dependent loss due to operation of medium voltage (MV) transformer (coil losses). Depends on
    :attr:`~generation_models.generation_models.Transformer.load_loss` factor.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc` and e.g.
      :attr:`PVStorageModel.pv_inputs.losses.mv_transformer <generation_models.\
      generation_models.Losses.mv_transformer>` is not ``None``
    """

    mv_xfmr_no_load_loss: t.Optional[list] = None
    r"""Constant loss due to operation of medium voltage (MV) transformer (core losses). Depends on
    :attr:`~generation_models.generation_models.Transformer.no_load_loss` factor

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc` and e.g.
      :attr:`PVStorageModel.pv_inputs.losses.mv_transformer <generation_models.\
      generation_models.Losses.mv_transformer>` is not ``None``
    """

    solar_storage_ac_power: list
    r"""Equivalent to :attr:`solar_storage_mv_ac_power` when
    :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
    :attr:`~generation_models.generation_models.StorageCoupling.dc` or
    :attr:`~generation_models.generation_models.StorageCoupling.ac`, equivalent to
    :attr:`solar_storage_hv_ac_power` when
    :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
    :attr:`~generation_models.generation_models.StorageCoupling.hv_ac`.
    
    - Units: kW 
    """

    solar_storage_mv_ac_power: t.Optional[list] = None
    r"""Combined AC power of the BESS and PV Array (or other generation source) at medium voltage (MV) AC bus for
    hybrid systems. 

    - Units: kW
    - Positive values correspond to power flowing towards the POI, negative values correspond to power flowing away
      from the POI.
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc` or
      :attr:`~generation_models.generation_models.StorageCoupling.ac`
    - MV Bus is the panel that collects all of the MV transformer outputs
    """

    hvac_loss: t.Optional[list] = None
    r"""Losses due to BESS HVAC operation. Applied at the MV Bus when
    :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
    :attr:`~generation_models.generation_models.StorageCoupling.dc` or
    :attr:`~generation_models.generation_models.StorageCoupling.ac` and at the HV Bus when
    :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
    :attr:`~generation_models.generation_models.StorageCoupling.hv_ac`
    
    - Units: kW
    - Only generated when there is a battery term with
      :attr:`~generation_models.generation_models.BatteryParams.hvac` as a
      :class:`~generation_models.generation_models.BatteryHVACParams` instance
    """

    ac_wiring_loss: t.Optional[list] = None
    r"""Loss due to resistance of medium voltage (MV) AC wiring that connects the MV AC bus, either to a high voltage
    transformer (if modeled) or the project switchgear. Depends on
    :attr:`~generation_models.generation_models.ACLosses.ac_wiring` input.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc` or
      :attr:`~generation_models.generation_models.StorageCoupling.ac` 
    """

    hv_xfmr_loss: t.Optional[list] = None
    r"""Total loss due to operation of high voltage (HV) transformer (i.e. a GSU or substation), the sum of
    :attr:`hv_xfmr_load_loss` and :attr:`hv_xfmr_no_load_loss`.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc` or
      :attr:`~generation_models.generation_models.StorageCoupling.ac` and e.g.
      :attr:`PVGenerationModel.losses.hv_transformer <generation_models.\
      generation_models.Losses.hv_transformer>` is not ``None``
    """

    hv_xfmr_load_loss: t.Optional[list] = None
    r"""Load-dependent loss (coil losses) due to operation of high voltage (HV) transformer (i.e. a GSU or substation).
    Depends on :attr:`~generation_models.generation_models.Transformer.load_loss` factor.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc` or
      :attr:`~generation_models.generation_models.StorageCoupling.ac` and e.g.
      :attr:`PVGenerationModel.losses.hv_transformer <generation_models.\
      generation_models.Losses.hv_transformer>` is not ``None``
    """

    hv_xfmr_no_load_loss: t.Optional[list] = None
    r"""Constant loss (core losses) due to operation of high voltage (HV) transformer (i.e. a GSU or substation).
    Depends on :attr:`~generation_models.generation_models.Transformer.no_load_loss` factor.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc` or
      :attr:`~generation_models.generation_models.StorageCoupling.ac` and e.g.
      :attr:`PVGenerationModel.losses.hv_transformer <generation_models.\
      generation_models.Losses.hv_transformer>` is not ``None``
    """

    transformer_loss: t.Optional[list] = None
    r"""*Deprecated, see* :attr: `hv_xfmr_loss`.
    
    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` is
      :attr:`~generation_models.generation_models.StorageCoupling.dc` or
      :attr:`~generation_models.generation_models.StorageCoupling.ac` and e.g.
      :attr:`PVGenerationModel.losses.hv_transformer <generation_models.\
      generation_models.Losses.hv_transformer>` is not ``None``
    """

    solar_storage_hv_ac_power: list
    r"""Combined AC power of the BESS and PV Array (or other generation source) at the switchgear/project boundary.
    This point is also defined as the high voltage (HV) bus because if a high voltage transformer/GSU/substation is
    modeled, this corresponds to the HV transformer output.

    - Units: kW
    - Positive values correspond to power flowing towards the POI, negative values correspond to power flowing away
      from the POI.
    - HV Bus is the measurement point at the switchgear/project boundary. If a high voltage transformer/GSU/substation
      is modeled, this corresponds to the HV transformer output
    """

    transmission_loss: list
    r"""Loss due to resistance of high voltage (HV) AC lines that connect the switchgear to the actual point of
    interconnection (POI). Depends on
    :attr:`~generation_models.generation_models.ACLosses.transmission` input

    - Units: kW
    """

    solar_storage_gen: list
    r"""Power at the point of interconnection (POI), prior to clipping the values to the
    limit defined by e.g. :attr:`PVGenerationModel.system_design.poi_limit <generation_models.\
    generation_models.BaseSystemDesign.poi_limit>`

    - Units: kW
    """

    solar_storage_poi_unadjusted: list
    r"""Power at the point of interconnection (POI), after applying POI clipping but before applying the user-defined
    :attr:`~generation_models.generation_models.ACLosses.poi_adjustment`

    - Units: kW
    """

    solar_storage_poi: list
    r"""Power at the point of interconnection (POI) after accounting for all losses/adjustments

    - Units: kW
    """

    positive_solar_storage_poi: list
    r"""Positive-only values of :attr:`solar_storage_poi` time series, where negative values have been set to zero.

    - Units: kW
    """

    negative_solar_storage_poi: list
    r"""Negative-only values of :attr:`solar_storage_poi` time series, where positive values have been set to zero.

    - Units: kW
    """


class SolarStorageWaterfall(SolarWaterfall):
    r"""Loss waterfall results based on the first year (8760 hours) of simulation results. For simulations of less
    than 1 year, the entire
    :attr:`PVStorageModel.pv_inputs.project_term <generation_models.generation_models.\
    PVGenerationModel.project_term>` is considered.
    However, due to limitations of the underlying `PySAM <https://nrel-pysam.readthedocs.io/en/v2.1.4/index.html>`__
    model, waterfall items upstream of :attr:`dc_net_ann` will not be generated for simulations less than 1 year long.
    """

    battery_operation_lp: float
    r"""Annual fractional energy impact due to operation of the BESS
    
    - Units: unitless fraction
    """

    excess_power_at_coupling_lp: float
    r"""Annual fraction of power flowing to the point of BESS coupling from the PV array (or other generation source)
    that is in excess of the :attr:`SolarStorageTimeSeries.battery_limit`
    
    - Units: unitless fraction
    """

    captured_excess_at_coupling_lp: float
    r"""Annual fraction of excess power flowing to the point of BESS coupling from the PV array (or other generation
    source) that is used to charge the BESS.
    
    - Units: unitless fraction
    """

    bess_hvac_lp: t.Optional[float] = None
    r"""Annual fraction of AC power that is lost to power the BESS HVAC system.
    
    - Units: unitless fraction
    - Only generated when there is a battery term with
      :attr:`~generation_models.generation_models.BatteryParams.hvac` is a
      :class:`~generation_models.generation_models.BatteryHVACParams` instance
    """


class OptimizerTimeSeries(BaseTimeSeries):
    r"""Time series results associated with BESS optimization and operation. Note that unless otherwise specified,
    all time series apply at the BESS modeling boundary. For
    :class:`~generation_models.generation_models.PVStorageModel` simulations the BESS modeling
    boundary is equivalent to the point of BESS coupling. For
    :class:`~generation_models.generation_models.StandaloneStorageModel` simulations where
    :attr:`~generation_models.generation_models.StandaloneStorageModel.downstream_system` is not
    ``None`` the BESS modeling boundary is specified by
    :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from`. Otherwise, the
    BESS modeling boundary can be considered the point of interconnection (POI).
    """

    model_config = ConfigDict(extra="allow")

    # note this might not be present because there were no hvac inputs, but also because for standalone+downstream and
    #  hybrid this signal is moved into system/solar_storage
    hvac_loss: t.Optional[list] = None
    r"""Losses due to BESS HVAC operation. Will only be generated as part of
    :class:`StandaloneStorageModelSimpleResults`. In that case, will be applied at the BESS modeling boundary. For
    hybrid or standalone storage with downstream losses see
    :attr:`PVStorageModelResults.solar_storage.hvac_loss <SolarStorageTimeSeries.hvac_loss>` or
    :attr:`StandaloneStorageModelWithDownstreamResults.system.hvac_loss <StandaloneStorageSystemTimeSeries.hvac_loss>`
    respectively.

    - Units: kW
    - Only generated when there is a battery term with
      :attr:`~generation_models.generation_models.BatteryParams.hvac` as a
      :class:`~generation_models.generation_models.BatteryHVACParams` instance
    """

    import_limit_at_coupling: t.Optional[list] = None
    r"""The limit defined by the import limit input (e.g. 
    :attr:`PVStorageModel.import_limit <generation_models.generation_models.PVStorageModel.\
    import_limit>`) but adjusted based on system loses to apply at the BESS modeling boundary.
    
    - Units: kW
    - Using convention that towards the POI/grid is positive, all values will be <= 0
    """

    export_limit_at_coupling: t.Optional[list] = None
    r"""The limit defined by the export limit input (e.g.
    :attr:`PVStorageModel.export_limit <generation_models.generation_models.PVStorageModel.\
    export_limit>` but adjusted based on system loses to apply at the BESS modeling boundary.

    - Units: kW
    - Using convention that towards the POI/grid is positive, all values will be >= 0
    """

    target_load: t.Optional[list] = None
    r"""The lowest target load that applies for each time interval at the BESS modeling boundary in BTM
    simulations with monthly/seasonal demand charges. Note that for overlapping demand charges, multiple targets may
    apply to a given time interval but for simplicity only the lowest is reported here. See
    :attr:`~generation_models.generation_models.LoadPeakReduction.seasonal_peak_windows` for more
    details.
    
    - Units: kW
    - Positive values correspond to power flowing from the POI towards the BESS modeling boundary
    - Only generated when e.g. :attr:`StandaloneStorageModel.load_peak_reduction <generation_models.\
      generation_models.StandaloneStorageModel.load_peak_reduction>` is not ``None`` and
      :attr:`~generation_models.generation_models.LoadPeakReduction.seasonal_peak_windows` are given.
    """

    charge_actual: list
    r"""BESS charging power at the BESS modeling boundary. Represents BESS charging behavior in the base case, where
    reserve market utilization and PV array (or other generation) power are defined by e.g.
    :attr:`ScalarUtilization.actual <generation_models.generation_models.ScalarUtilization.actual>`
    and :attr:`solar_actual` (if applicable).

    - Units: kW
    - All values will be >= 0 (Zero if BESS discharging or at rest)
    - Represents the mean power across the time interval     
    """

    discharge_actual: list
    r"""BESS discharging power at the BESS modeling boundary. Represents BESS discharging behavior in the base case,
    where reserve market utilization and PV array (or other generation) power are defined by e.g.
    :attr:`ScalarUtilization.actual <generation_models.generation_models.ScalarUtilization.actual>`
    and :attr:`solar_actual` (if applicable).

    - Units: kW
    - All values will be >= 0 (Zero if BESS charging or at rest)
    - Represents the mean power across the time interval    
    """

    charge: list
    r"""Duplicate of :attr:`charge_actual`
    """

    discharge: list
    r"""Duplicate of :attr:`discharge_actual`
    """

    charge_hi: list
    r"""The highest BESS charging power that might result at the BESS modeling boundary due to uncertainty in reserve
    market utilization and PV array (or other generation) power (if applicable).

    - Units: kW
    - All values will be >= 0   
    """

    discharge_hi: list
    r"""The highest BESS discharging power that might result at the BESS modeling boundary due to uncertainty in reserve
    market utilization and PV array (or other generation) power (if applicable).

    - Units: kW
    - All values will be >= 0   
    """

    charge_lo: list
    r"""The lowest BESS charging power that might result at the BESS modeling boundary due to uncertainty in reserve
    market utilization and PV array (or other generation) power (if applicable).

    - Units: kW
    - All values will be >= 0   
    """

    discharge_lo: list
    r"""The lowest BESS discharging power that might result at the BESS modeling boundary due to uncertainty in reserve
    market utilization and PV array (or other generation) power (if applicable).

    - Units: kW
    - All values will be >= 0   
    """

    battery_output: list
    r"""Power flow to/from the BESS at the BESS modeling boundary. Sum of the :attr:`charge` and :attr:`discharge`
    time series subject to power flow sign conventions.

    - Units: kW
    - Positive values correspond to BESS discharge, negative values correspond to BESS charge.
    - Note that the relationship between
      :attr:`internal_energy` and ``battery_output`` is dependent on the current BESS charge and discharge
      efficiency, which will vary with time if an
      :attr:`~generation_models.generation_models.BatteryParams.efficiency_degradation_model`
      has been specified
    """

    output: list
    r"""Duplicate of :attr:`battery_output`
    """

    total_output: list
    r"""Total power flow at the BESS modeling boundary. For
    :class:`~generation_models.generation_models.PVStorageModel` simulations this is the combined
    power from the BESS+PV (or other generation source) at the point of BESS coupling. For standalone storage
    simulations, will be equivalent to :attr:`battery_output`.

    - Units: kW
    - Positive values correspond to flow towards the POI, negative values correspond to flow away from the POI.
    """

    internal_energy: list
    r"""Duplicate of :attr:`soe_actual`
    """

    soe_actual: list
    r"""Realized energy stored in the BESS (state of energy or SOE) at the *end* of each time interval. Represents the
    SOE that results when :attr:`charge_actual` and :attr:`discharge_actual` are applied at each time interval. As
    such, will not start with the user-specified initial SOE (since this applies to the *beginning* of the first time
    interval). Note values will be higher than the amount of usable energy in the BESS due
    to all losses between the BESS modeling boundary and the internal structure of the cells
    (the idealized battery "vessel").
    
    - Units: kWh
    """
    # For devs and power users: If uncertain_soe=True, then the associated initial soe is initial_soe.actual

    soe_lo: list
    r"""Lower bound of energy stored in the BESS (state of energy or SOE) at the *end* of each time interval.
    Represents the SOE that results when :attr:`charge_lo` and :attr:`discharge_hi` are applied to a beginning SOE of
    :attr:`soe_hb_actual`.

    - Units: kWh
    """
    # For devs and power users: If uncertain_soe=True, then the associated initial soe is initial_soe.lo, and for each
    # time interval represents the SOE that results when :attr:`charge_lo` and :attr:`discharge_hi` are applied to a
    # beginning SOE of :attr:`soe_hb_lo`.

    soe_hi: list
    r"""Upper bound of energy stored in the BESS (state of energy or SOE) at the *end* of each time interval.
    Represents the SOE that results when :attr:`charge_hi` and :attr:`discharge_lo` are applied to a beginning SOE of
    :attr:`soe_hb_actual`.

    - Units: kWh
    """
    # For devs and power users: If uncertain_soe=True, then the associated initial soe is initial_soe.hi, and for each
    # time interval represents the SOE that results when :attr:`charge_hi` and :attr:`discharge_lo` are applied to a
    # beginning SOE of :attr:`soe_hb_hi`.

    soe_hb_actual: list
    r"""Realized energy stored in the BESS (state of energy or SOE) at the *beginning* of each time interval.
    Equivalent to the value of :attr:`soe_actual` in the previous time interval. As such, will start with the
    user-specified initial SOE (since this applies to the beginning of the first time interval)

    - Units: kWh
    """

    soe_hb_lo: list
    r"""Lower bound of energy stored in the BESS (state of energy or SOE) at the *beginning* of each time interval.
    Equivalent to the value of :attr:`soe_lo` in the previous time interval.

    - Units: kWh
    """

    soe_hb_hi: list
    r"""Upper bound of energy stored in the BESS (state of energy or SOE) at the *beginning* of each time interval.
    Equivalent to the value of :attr:`soe_hi` in the previous time interval.

    - Units: kWh
    """

    soe_mean_actual: list
    r"""Mean value of energy stored in the BESS (state of energy or SOE) *across each time interval*, i.e. the average
    of :attr:`soe_actual` and :attr:`soe_hb_actual` for each time interval.

    - Units: kWh
    """

    soe_mean_lo: list
    r"""Mean value of lower-bound energy stored in the BESS (state of energy or SOE) *across each time interval*, i.e.
    the average of :attr:`soe_lo` and :attr:`soe_hb_lo` for each time interval.

    - Units: kWh
    """

    soe_mean_hi: list
    r"""Mean value of upper-bound energy stored in the BESS (state of energy or SOE) *across each time interval*, i.e.
    the average of :attr:`soe_hi` and :attr:`soe_hb_hi` for each time interval.

    - Units: kWh
    """

    # For now we don't document PQ in the API so we'll only document outputs for QO

    dam_charge: t.Optional[list] = None
    r"""Day Ahead Market (DAM) award component of :attr:`charge_actual` at the BESS modeling boundary.
    
    - Units: kW
    - All values will be >= 0 (Zero if BESS discharging or at rest)
    - Only generated when
      :attr:`~generation_models.generation_models.StorageSolverOptions.energy_strategy` is
      :attr:`~generation_models.generation_models.EnergyStrategy.da` or
      :attr:`~generation_models.generation_models.EnergyStrategy.dart` (quantity-only)
    """

    dam_discharge: t.Optional[list] = None
    r"""Day Ahead Market (DAM) award component of :attr:`discharge_actual` at the BESS modeling boundary.

    - Units: kW
    - All values will be >= 0 (Zero if BESS charging or at rest)
    - Only generated when
      :attr:`~generation_models.generation_models.StorageSolverOptions.energy_strategy` is
      :attr:`~generation_models.generation_models.EnergyStrategy.da` or
      :attr:`~generation_models.generation_models.EnergyStrategy.dart` (quantity-only)
    """

    dam_solar: t.Optional[list] = None
    r"""Day Ahead Market (DAM) award component of :attr:`solar_actual` at the BESS modeling boundary.

    - Units: kW
    - Only generated for attr:`~generation_models.generation_models.PVStorageModel` sims where
      :attr:`~generation_models.generation_models.StorageSolverOptions.energy_strategy` is
      :attr:`~generation_models.generation_models.EnergyStrategy.da` or
      :attr:`~generation_models.generation_models.EnergyStrategy.dart` (quantity-only)
    """

    dam_base_point: t.Optional[list] = None
    r"""Total Day Ahead Market (DAM) award at the BESS modeling boundary. Sum of the :attr:`dam_charge` and
    :attr:`dam_discharge` (and :attr:`dam_solar` for hybrid) time series, subject to power flow sign conventions.

    - Units: kW
    - Positive values correspond to flow towards the POI, negative values correspond to flow away from the POI.
    - Only generated when
      :attr:`~generation_models.generation_models.StorageSolverOptions.energy_strategy` is
      :attr:`~generation_models.generation_models.EnergyStrategy.da` or
      :attr:`~generation_models.generation_models.EnergyStrategy.dart` (quantity-only)
    """

    rtm_charge: t.Optional[list] = None
    r"""Real Time Market (RTM) award component of :attr:`charge_actual` at the BESS modeling boundary.
    
    - Units: kW
    - All values will be >= 0 (Zero if BESS discharging or at rest)
    - Only generated when
      :attr:`~generation_models.generation_models.StorageSolverOptions.energy_strategy` is
      :attr:`~generation_models.generation_models.EnergyStrategy.rt` or
      :attr:`~generation_models.generation_models.EnergyStrategy.dart` (quantity-only)
    """

    rtm_discharge: t.Optional[list] = None
    r"""Real Time Market (RTM) award component of :attr:`discharge_actual` at the BESS modeling boundary.
    
    - Units: kW
    - All values will be >= 0 (Zero if BESS charging or at rest)
    - Only generated when
      :attr:`~generation_models.generation_models.StorageSolverOptions.energy_strategy` is
      :attr:`~generation_models.generation_models.EnergyStrategy.rt` or
      :attr:`~generation_models.generation_models.EnergyStrategy.dart` (quantity-only)
    """

    rtm_solar: t.Optional[list] = None
    r"""Real Time Market (RTM) award component of :attr:`solar_actual` at the BESS modeling boundary.

    - Units: kW
    - Only generated for attr:`~generation_models.generation_models.PVStorageModel` sims where
      :attr:`~generation_models.generation_models.StorageSolverOptions.energy_strategy` is
      :attr:`~generation_models.generation_models.EnergyStrategy.rt` or
      :attr:`~generation_models.generation_models.EnergyStrategy.dart` (quantity-only)
    """

    rtm_base_point: t.Optional[list] = None
    r"""Total Real Time Market (RTM) award at the BESS modeling boundary. Sum of the :attr:`rtm_charge` and
    :attr:`rtm_discharge` (and :attr:`rtm_solar` for hybrid) time series, subject to power flow sign conventions.

    - Units: kW
    - Positive values correspond to flow towards the POI, negative values correspond to flow away from the POI.
    - Only generated when
      :attr:`~generation_models.generation_models.StorageSolverOptions.energy_strategy` is
      :attr:`~generation_models.generation_models.EnergyStrategy.rt` or
      :attr:`~generation_models.generation_models.EnergyStrategy.dart` (quantity-only)
    """

    rtm_price: t.Optional[list] = None
    r"""Real-time market (RTM) prices. Equivalent to the
    :attr:`~generation_models.generation_models.DARTPrices.rtm` input, but included in the results
    for convenience.
    """

    dam_price: t.Optional[list] = None
    r"""Day Ahead Market (DAM) prices. Equivalent to the
    :attr:`~generation_models.generation_models.DARTPrices.dam` input, but included in the results
    for convenience.
    """

    imbalance: t.Optional[list] = None
    r"""Imbalance market prices. Equivalent to the
    :attr:`~generation_models.generation_models.DARTPrices.imbalance` input, but included in the
    results for convenience.
    """

    solar_actual: t.Optional[list] = None
    r"""Realized power from the PV array (or other generation source) at the BESS modeling boundary. Will align with
    the given generation inputs and specifically :attr:`ACProductionProfile.power.actual <generation_models.\
    generation_models.BoundedSignal.actual>` if modeling uncertain solar. Does not include standby
    losses and can further differ from its generation equivalent
    due to two factors: (1) economic curtailment that is modeled for energy prices below the negative of the
    :attr:`generation_models.generation_models.PVStorageModel.solar_revenue_adder` and (2) if solar
    participates in reserve markets (i.e.
    :attr:`~generation_models.generation_models.StorageSolverOptions.flexible_solar` is ``True``)
    
    - Units: kWh
    - Only generated for :class:`~generation_models.generation_models.PVStorageModel` simulations
    """

    solar_hi: t.Optional[list] = None
    r"""Upper bound power from the PV array (or other generation source) at the BESS modeling boundary. Relevant when
    modeling uncertain solar, in which case it will be mostly equivalent to
    :attr:`ACProductionProfile.power.max <generation_models.generation_models.BoundedSignal.max>`.
    Otherwise, will be equivalent to :attr:`solar_actual`. Can differ from its input due to two factors: (1) economic
    curtailment that is modeled for energy prices below the negative of the
    :attr:`generation_models.generation_models.PVStorageModel.solar_revenue_adder` and (2) if solar
    participates in reserve markets (i.e.
    :attr:`~generation_models.generation_models.StorageSolverOptions.flexible_solar` is ``True``)

    - Units: kWh
    - Only generated for :class:`generation_models.generation_models.PVStorageModel` simulations
    """

    solar_lo: t.Optional[list] = None
    r"""Lower bound power from the PV array (or other generation source) at the BESS modeling boundary. Relevant when
    modeling uncertain solar, in which case it will be mostly equivalent to
    :attr:`ACProductionProfile.power.min <generation_models.generation_models.BoundedSignal.min>`.
    Otherwise, will be equivalent to :attr:`solar_actual`. Can differ from its input due to two factors: (1) economic
    curtailment that is modeled for energy prices below the negative of the
    :attr:`generation_models.generation_models.PVStorageModel.solar_revenue_adder` and (2) if solar
    participates in reserve markets (i.e.
    :attr:`~generation_models.generation_models.StorageSolverOptions.flexible_solar` is ``True``)

    - Units: kWh
    - Only generated for :class:`generation_models.generation_models.PVStorageModel` simulations
    """

    net_load: t.Optional[list] = None
    r"""The net load at the BESS modeling boundary in BTM simulations after the BESS and PV array (or other generation
    source) behavior is accounted for. 

    - Units: kW
    - Positive values correspond to power flowing from the POI towards the BESS modeling boundary
    - Only generated when e.g. :attr:`StandaloneStorageModel.load_peak_reduction <generation_models.\
      generation_models.StandaloneStorageModel.load_peak_reduction>` is not ``None``
    """

    RESERVE_MARKET_price: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`, a ``_price`` time
    series will be generated. Will match the
    :attr:`~generation_models.generation_models.ReserveMarket.price` input but is generated for
    convenience 
    """

    RESERVE_MARKET_offer: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`, an ``_offer`` time
    series will be generated. This is the power offer made in that market for each time interval (assumed to also be
    awarded).
    
    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_utilized_max: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`, a ``_utilized_max``
    time series will be generated. This is the upper-bound portion of :attr:`RESERVE_MARKET_offer` that could be
    called and impact BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_utilized_min: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`, a ``_utilized_min``
    time series will be generated. This is the lower-bound portion of :attr:`RESERVE_MARKET_offer` that could be
    called and impact BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_utilized_actual: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`, a
    ``_utilized_actual`` time series will be generated. This is the portion of :attr:`RESERVE_MARKET_offer` that is
    modeled as called and actually impacts BESS state of energy

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_realized: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`, a
    ``_realized`` time series will be generated. This is a duplicate of :attr:`RESERVE_MARKET_utilized_actual`.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_flex_offer: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. If
    :attr:`~generation_models.generation_models.StorageSolverOptions.flexible_solar` is ``True``,
    a ``_flex_offer`` time series will be generated for each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`. This is the portion
    of the :attr:`RESERVE_MARKET_offer` that will be met with flexible PV array production. 

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_flex_max: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. If
    :attr:`~generation_models.generation_models.StorageSolverOptions.flexible_solar` is ``True``,
    a ``_flex_max`` time series will be generated for each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`. This is the
    upper-bound portion of :attr:`RESERVE_MARKET_flex_offer` that could be called and impact BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_flex_min: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. If
    :attr:`~generation_models.generation_models.StorageSolverOptions.flexible_solar` is ``True``,
    a ``_flex_min`` time series will be generated for each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`. This is the
    lower-bound portion of :attr:`RESERVE_MARKET_flex_offer` that could be called and impact BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_flex_actual: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. If
    :attr:`~generation_models.generation_models.StorageSolverOptions.flexible_solar` is ``True``,
    a ``_flex_actual`` time series will be generated for each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`. This is the portion
    of :attr:`RESERVE_MARKET_flex_offer` that is modeled as called and actually impacts BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_discharge_offer: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`up reserve market <generation_models.generation_models.ReserveMarkets.up>`, a
    ``_discharge_offer`` time series will be generated. This is the portion of the :attr:`RESERVE_MARKET_offer` that
    will be met with BESS discharge. 

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_discharge_max: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`up reserve market <generation_models.generation_models.ReserveMarkets.up>`, a
    ``_discharge_max`` time series will be generated. This is the upper-bound portion of
    :attr:`RESERVE_MARKET_discharge_offer` that could be called and impact BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_discharge_min: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`up reserve market <generation_models.generation_models.ReserveMarkets.up>`, a
    ``_discharge_min`` time series will be generated. This is the lower-bound portion of
    :attr:`RESERVE_MARKET_discharge_offer` that could be called and impact BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_discharge_actual: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`up reserve market <generation_models.generation_models.ReserveMarkets.up>`, a
    ``_discharge_actual`` time series will be generated. This is the portion
    of :attr:`RESERVE_MARKET_discharge_offer` that is modeled as called and actually impacts BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_stop_charge_offer: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`up reserve market <generation_models.generation_models.ReserveMarkets.up>`, a
    ``_stop_charge_offer`` time series will be generated. This is the portion of the :attr:`RESERVE_MARKET_offer`
    that will be met by stopping/reducing BESS charging. 

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_stop_charge_max: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`up reserve market <generation_models.generation_models.ReserveMarkets.up>`, a
    ``_stop_charge_max`` time series will be generated. This is the upper-bound portion of
    :attr:`RESERVE_MARKET_stop_charge_offer` that could be called and impact BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_stop_charge_min: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`up reserve market <generation_models.generation_models.ReserveMarkets.up>`, a
    ``_stop_charge_min`` time series will be generated. This is the lower-bound portion of
    :attr:`RESERVE_MARKET_stop_charge_offer` that could be called and impact BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_stop_charge_actual: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`up reserve market <generation_models.generation_models.ReserveMarkets.up>`, a
    ``_stop_charge_actual`` time series will be generated. This is the portion
    of :attr:`RESERVE_MARKET_stop_charge_offer` that is modeled as called and actually impacts BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_charge_offer: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`down reserve market <generation_models.generation_models.ReserveMarkets.down>`, a
    ``_charge_offer`` time series will be generated. This is the portion of the :attr:`RESERVE_MARKET_offer` that
    will be met with BESS charge. 

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_charge_max: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`down reserve market <generation_models.generation_models.ReserveMarkets.down>`, a
    ``_charge_max`` time series will be generated. This is the upper-bound portion of
    :attr:`RESERVE_MARKET_charge_offer` that could be called and impact BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_charge_min: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`down reserve market <generation_models.generation_models.ReserveMarkets.down>`, a
    ``_charge_min`` time series will be generated. This is the lower-bound portion of
    :attr:`RESERVE_MARKET_charge_offer` that could be called and impact BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_charge_actual: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`down reserve market <generation_models.generation_models.ReserveMarkets.down>`, a
    ``_charge_actual`` time series will be generated. This is the portion
    of :attr:`RESERVE_MARKET_charge_offer` that is modeled as called and actually impacts BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_stop_discharge_offer: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`down reserve market <generation_models.generation_models.ReserveMarkets.down>`, a
    ``_stop_discharge_offer`` time series will be generated. This is the portion of the :attr:`RESERVE_MARKET_offer`
    that will be met by stopping/reducing BESS discharging. 

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_stop_discharge_max: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`down reserve market <generation_models.generation_models.ReserveMarkets.down>`, a
    ``_stop_discharge_max`` time series will be generated. This is the upper-bound portion of
    :attr:`RESERVE_MARKET_stop_discharge_offer` that could be called and impact BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_stop_discharge_min: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`down reserve market <generation_models.generation_models.ReserveMarkets.down>`, a
    ``_stop_discharge_min`` time series will be generated. This is the lower-bound portion of
    :attr:`RESERVE_MARKET_stop_discharge_offer` that could be called and impact BESS state of energy.

    - Units: kW
    - Average power over the interval
    """

    RESERVE_MARKET_stop_discharge_actual: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`down reserve market <generation_models.generation_models.ReserveMarkets.down>`, a
    ``_stop_discharge_actual`` time series will be generated. This is the portion
    of :attr:`RESERVE_MARKET_stop_discharge_offer` that is modeled as called and actually impacts BESS state of energy.

    - Units: kW
    - Average power over the interval
    """


class MarketAwardsTimeSeries(BaseTimeSeries):
    r"""Time series results intended to represent market awards for use in revenue calculation. Many time series differ
    from those in :class:`OptimizerTimeSeries` because they roughly apply at the point of interconnection
    (POI) as opposed to the BESS modeling boundary, but their purpose is calculating revenue and they should not be
    treated as physical power components at the POI.

    Note also that here the POI corresponds with :attr:`~SolarStorageTimeSeries.solar_storage_poi_unadjusted` or
    :attr:`~StandaloneStorageSystemTimeSeries.poi_unadjusted` because the
    :attr:`~generation_models.generation_models.ACLosses.poi_adjustment` applied downstream is
    intended to roughly model system availability and thus wouldn't be considered during BESS operation/optimization
    """

    model_config = ConfigDict(extra="allow")

    charge: list
    r"""Equivalent to :attr:`OptimizerTimeSeries.charge_actual` but corrected to represent charge power at the point
    of interconnection (POI).
    
    - Units: kW 
    """

    discharge: list
    r"""Equivalent to :attr:`OptimizerTimeSeries.discharge_actual` but corrected to represent discharge power at the
    point of interconnection (POI).

    - Units: kW 
    """

    total_output: list
    r"""Equivalent to :attr:`~SolarStorageTimeSeries.solar_storage_poi_unadjusted` or
    :attr:`~StandaloneStorageSystemTimeSeries.poi_unadjusted` but with standby losses (such as those generated by
    inverters or transformers) removed. While these point of interconnection (POI) loads might be settled in the
    wholesale market they are not treated as part of offers and thus not part of any awards.
    
    - Units: kW
    - All values will be >= 0
    """

    rt_tare: list
    r"""Net standby losses at the point of interconnection (POI), i.e. the difference between
    e.g. :attr:`~StandaloneStorageSystemTimeSeries.poi_unadjusted` and :attr:`total_output`. These might be charged
    the real time market (RTM) price or perhaps e.g. some retail energy price. 
    
    - Units: kW
    - All values will be <= 0
    """

    dam_charge: list
    r"""Equivalent to :attr:`OptimizerTimeSeries.dam_charge` but corrected to represent settlement at the point
    of interconnection (POI).

    - Units: kW 
    """

    dam_discharge: list
    r"""Equivalent to :attr:`OptimizerTimeSeries.dam_discharge` but corrected to represent settlement at the point
    of interconnection (POI).

    - Units: kW 
    """

    dam_base_point: list
    r"""Equivalent to :attr:`OptimizerTimeSeries.dam_base_point` but corrected to represent settlement at the point
    of interconnection (POI).

    - Units: kW
    """

    negative_dam_base_point: list
    r"""Negative of :attr:`dam_base_point`.
    
    - Units: kW
    """

    rtm_charge: list
    r"""Equivalent to :attr:`OptimizerTimeSeries.rtm_charge` but corrected to represent settlement at the point
    of interconnection (POI).

    - Units: kW 
    """

    rtm_discharge: list
    r"""Equivalent to :attr:`OptimizerTimeSeries.rtm_discharge` but corrected to represent settlement at the point
    of interconnection (POI).

    - Units: kW 
    """

    rtm_base_point: list
    r"""Equivalent to :attr:`OptimizerTimeSeries.rtm_base_point` but corrected to represent settlement at the point
    of interconnection (POI).

    - Units: kW 
    """

    solar_actual: t.Optional[list] = None
    r"""Equivalent to :attr:`OptimizerTimeSeries.solar_actual` but corrected to represent settlement at the point
    of interconnection (POI).

    - Units: kW
    - For hybrid systems, does not always represent the fraction of
      :attr:`~SolarStorageTimeSeries.solar_storage_poi_unadjusted`
      attributable to PV generation (or other generation). It is simply the PV power at the point of BESS coupling
      derated to represent POI power, inline with how most markets treat hybrid assets. For example, if the PV is
      charging the BESS *and* exporting to the grid :attr:`solar_actual` will reflect both flows, not just the
      exporting flow that actually reaches the POI. 
    """

    dam_solar: t.Optional[list] = None
    r"""Equivalent to :attr:`OptimizerTimeSeries.dam_solar` but corrected to represent settlement at the point
    of interconnection (POI).

    - Units: kW
    - See :attr:`solar_actual` for hybrid gotchas
    """

    rtm_solar: t.Optional[list] = None
    r"""Equivalent to :attr:`OptimizerTimeSeries.rtm_solar` but corrected to represent settlement at the point
    of interconnection (POI).

    - Units: kW
    - See :attr:`solar_actual` for hybrid gotchas
    """

    RESERVE_MARKET_offer: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`, an ``_offer`` time
    series will be generated. Equivalent to :attr:`OptimizerTimeSeries.RESERVE_MARKET_offer` since reserve markets
    settle at BESS meters.

    - Units: kW
    """

    RESERVE_MARKET_realized: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`, a
    ``_realized`` time series will be generated. Equivalent to :attr:`OptimizerTimeSeries.RESERVE_MARKET_realized`
    since reserve markets settle at BESS meters.

    - Units: kW
    """

    RESERVE_MARKET_flex_actual: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. If
    :attr:`~generation_models.generation_models.StorageSolverOptions.flexible_solar` is ``True``,
    a ``_flex_actual`` time series will be generated for each specified
    :class:`reserve market <generation_models.generation_models.ReserveMarket>`. Equivalent to
    :attr:`OptimizerTimeSeries.RESERVE_MARKET_flex_actual` since reserve markets settle at BESS meters.

    - Units: kW
    """

    RESERVE_MARKET_discharge_offer: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`up reserve market <generation_models.generation_models.ReserveMarkets.up>`, a
    ``_discharge_offer`` time series will be generated. Equivalent to
    :attr:`OptimizerTimeSeries.RESERVE_MARKET_discharge_offer` since reserve markets settle at BESS meters.

    - Units: kW
    """

    RESERVE_MARKET_discharge_actual: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`up reserve market <generation_models.generation_models.ReserveMarkets.up>`, a
    ``_discharge_actual`` time series will be generated. Equivalent to
    :attr:`OptimizerTimeSeries.RESERVE_MARKET_discharge_actual` since reserve markets settle at BESS meters.

    - Units: kW
    """

    RESERVE_MARKET_stop_charge_offer: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`up reserve market <generation_models.generation_models.ReserveMarkets.up>`, a
    ``_stop_charge_offer`` time series will be generated. Equivalent to
    :attr:`OptimizerTimeSeries.RESERVE_MARKET_stop_charge_offer` since reserve markets settle at BESS meters.

    - Units: kW
    """

    RESERVE_MARKET_stop_charge_actual: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`up reserve market <generation_models.generation_models.ReserveMarkets.up>`, a
    ``_stop_charge_actual`` time series will be generated. Equivalent to
    :attr:`OptimizerTimeSeries.RESERVE_MARKET_stop_charge_actual` since reserve markets settle at BESS meters.

    - Units: kW
    """

    RESERVE_MARKET_charge_offer: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`down reserve market <generation_models.generation_models.ReserveMarkets.down>`, a
    ``_charge_offer`` time series will be generated. Equivalent to
    :attr:`OptimizerTimeSeries.RESERVE_MARKET_charge_offer` since reserve markets settle at BESS meters.

    - Units: kW
    """

    RESERVE_MARKET_charge_actual: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`down reserve market <generation_models.generation_models.ReserveMarkets.down>`, a
    ``_charge_actual`` time series will be generated. Equivalent to
    :attr:`OptimizerTimeSeries.RESERVE_MARKET_charge_actual` since reserve markets settle at BESS meters.

    - Units: kW
    """

    RESERVE_MARKET_stop_discharge_offer: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`down reserve market <generation_models.generation_models.ReserveMarkets.down>`, a
    ``_stop_discharge_offer`` time series will be generated. Equivalent to
    :attr:`OptimizerTimeSeries.RESERVE_MARKET_stop_discharge_offer` since reserve markets settle at BESS meters.

    - Units: kW
    """

    RESERVE_MARKET_stop_discharge_actual: t.Optional[list] = None
    r"""*PLACEHOLDER, not a real output*. For each specified
    :attr:`down reserve market <generation_models.generation_models.ReserveMarkets.down>`, a
    ``_stop_discharge_actual`` time series will be generated. Equivalent to
    :attr:`OptimizerTimeSeries.RESERVE_MARKET_stop_discharge_actual` since reserve markets settle at BESS meters.

    - Units: kW
    """


class StandaloneStorageSystemTimeSeries(BaseTimeSeries):
    r"""Time series results for standalone storage simulations where
    :attr:`~generation_models.generation_models.StandaloneStorageModel.downstream_system` is not
    ``None``
    """

    battery_internal_energy: list
    r"""Energy stored in the BESS at the end of each time interval. Corresponds to
    :attr:`OptimizerTimeSeries.internal_energy`. Note values will be higher than the amount of usable energy in the
    BESS due to losses between the point of coupling and the internal structure of the cells (the idealized battery
    "vessel").

    - Units: kWh
    """

    battery_internal_energy_max: list
    r"""Available energy capacity of the BESS. Like :attr:`battery_internal_energy`, values will be larger than the
    maximum usable capacity of the BESS. For each BESS
    :attr:`~generation_models.generation_models.BatteryParams.term` the starting value will be
    :attr:`~generation_models.generation_models.BatteryParams.energy_capacity` divided by
    :attr:`~generation_models.generation_models.BatteryParams.discharge_efficiency`. The values will
    decrease based on the specified
    :attr:`~generation_models.generation_models.BatteryParams.capacity_degradation_model`.

    - Units: kWh
    """

    battery_limit: t.Union[float, list]
    r"""Power limit applied at the point of BESS coupling. These values are based on limits and losses that occur
    between the point of coupling and point of interconnection (POI). For example: The POI limit, export limit,
    import limit, temperature-dependent inverter capacity, BESS charge and discharge specifications, and component and
    wiring losses.

    - Units: kW
    - In some cases, e.g. when no time-varying limits have been applied, the battery_limit is constant for all time
      steps and may be returned as a single value, otherwise it will be a time series.
    """

    battery_output: list
    r"""Power flow to/from the BESS at the point of coupling.

    - Units: kW
    - Positive values correspond to BESS discharge, negative values correspond to BESS charge.
    - Note that the relationship between
      :attr:`battery_internal_energy` and ``battery_output`` is dependent on the current BESS charge and discharge
      efficiency, which will vary with time if an
      :attr:`~generation_models.generation_models.BatteryParams.efficiency_degradation_model`
      has been specified
    """

    dc_power: t.Optional[list] = None
    r"""DC power at the DC bus.

    - Units: kW
    - Positive values correspond to power flowing towards the POI, negative values correspond to power flowing away
      from the POI.
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC`
    - DC bus is the point in the idealized model flow just before DC-to-AC conversion (.e.g the combined inverter
      inputs)
    """

    dc_voltage: t.Optional[list] = None
    r"""DC voltage at the DC bus. Will default to the inverter nominal voltage when the BESS is operating.

    - Units: V
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC`
    - DC bus is the point in the idealized model flow just before DC-to-AC conversion (.e.g the combined inverter
      inputs)
    """

    inverter_clipping_loss: t.Optional[list] = None
    r"""Loss due to inverter power clipping, including clipping that occurs due to a thermal derate of the inverter
    nameplate power.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC`
    """

    inverter_tare_loss: t.Optional[list] = None
    r"""Loss due to inverter standby power draw, applied when the input DC power is below the turn on threshold

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC`
    """

    inverter_parasitic_loss: t.Optional[list] = None
    r"""Duplicate of :attr:`inverter_tare_loss`

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC`
    """

    inverter_consumption_loss: t.Optional[list] = None
    r"""Loss due to inverter power consumption during operation, applied when the input DC power is above the turn on
    threshold. Note that depending on the inverter model used, there is a different relationship to
    :attr:`inverter_efficiency`. For the CEC inverter model
    (:class:`~generation_models.generation_models.Inverter` class), the efficiency includes the
    consumption loss. For the OND inverter model
    (:class:`~generation_models.generation_models.ONDInverter` class), the consumption loss depends
    on the :attr:`~generation_models.generation_models.ONDInverter.aux_loss` input and is applied
    after conversion and clipping.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC`
    """

    inverter_efficiency: t.Optional[list] = None
    r"""Inverter conversion (DC to AC) efficiency. Does not include clipping effects, which are returned separately
    as :attr:`inverter_clipping_loss`.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC`
    """

    gross_ac_power: t.Optional[list] = None
    r"""AC power at the combined inverter outputs. 

    - Units: kW
    - Positive values correspond to power flowing towards the POI, negative values correspond to power flowing away
      from the POI.
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC`
    """

    mv_xfmr_loss: t.Optional[list] = None
    r"""Total loss due to operation of a medium voltage (MV) transformer, the sum of :attr:`mv_xfmr_load_loss`
    and :attr:`mv_xfmr_no_load_loss`.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC` and
      :attr:`StandaloneStorageModel.downstream_system.losses.mv_transformer <generation_models.\
      generation_models.Losses.mv_transformer>` is not ``None``
    """

    mv_xfmr_load_loss: t.Optional[list] = None
    r"""Load-dependent loss due to operation of medium voltage (MV) transformer (coil losses). Depends on
    :attr:`~generation_models.generation_models.Transformer.load_loss` factor.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC` and
      :attr:`StandaloneStorageModel.downstream_system.losses.mv_transformer <generation_models.\
      generation_models.Losses.mv_transformer>` is not ``None``
    """

    mv_xfmr_no_load_loss: t.Optional[list] = None
    r"""Constant loss due to operation of medium voltage (MV) transformer (core losses). Depends on
    :attr:`~generation_models.generation_models.Transformer.no_load_loss` factor

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC` and
      :attr:`StandaloneStorageModel.downstream_system.losses.mv_transformer <generation_models.\
      generation_models.Losses.mv_transformer>` is not ``None``
    """

    ac_power: list
    r"""Equivalent to :attr:`mv_ac_power` when
    :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
    :attr:`~generation_models.generation_models.Bus.DC` or
    :attr:`~generation_models.generation_models.Bus.MV`, equivalent to
    :attr:`hv_ac_power` when
    :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
    :attr:`~generation_models.generation_models.Bus.HV`.
    
    - Units: kW 
    """

    mv_ac_power: t.Optional[list] = None
    r"""Total AC power at medium voltage (MV) AC bus, e.g. the panel that collects all of the MV transformer outputs

    - Units: kW
    """

    hvac_loss: t.Optional[list] = None
    r"""Losses due to BESS HVAC operation. Applied at the MV Bus when
    :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
    :attr:`~generation_models.generation_models.Bus.DC` or
    :attr:`~generation_models.generation_models.Bus.MV` and at the HV Bus when
    :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
    :attr:`~generation_models.generation_models.Bus.HV`

    - Units: kW
    - Only generated when there is a battery term with
      :attr:`~generation_models.generation_models.BatteryParams.hvac` as a
      :class:`~generation_models.generation_models.BatteryHVACParams` instance
    """

    ac_wiring_loss: t.Optional[list] = None
    r"""Loss due to resistance of medium voltage (MV) AC wiring that connects the MV AC bus, either to a high voltage
    transformer (if modeled) or the project switchgear. Depends on
    :attr:`~generation_models.generation_models.ACLosses.ac_wiring` input.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC` or
      :attr:`~generation_models.generation_models.Bus.MV` 
    """

    hv_xfmr_loss: t.Optional[list] = None
    r"""Total loss due to operation of high voltage (HV) transformer (i.e. a GSU or substation), the sum of
    :attr:`hv_xfmr_load_loss` and :attr:`hv_xfmr_no_load_loss`.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC` or
      :attr:`~generation_models.generation_models.Bus.MV` and
      :attr:`~generation_models.generation_models.Losses.hv_transformer` is not ``None``
    """

    hv_xfmr_load_loss: t.Optional[list] = None
    r"""Load-dependent loss (coil losses) due to operation of high voltage (HV) transformer (i.e. a GSU or substation).
    Depends on :attr:`~generation_models.generation_models.Transformer.load_loss` factor.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC` or
      :attr:`~generation_models.generation_models.Bus.MV` and
      :attr:`~generation_models.generation_models.Losses.hv_transformer` is not ``None``
    """

    hv_xfmr_no_load_loss: t.Optional[list] = None
    r"""Constant loss (core losses) due to operation of high voltage (HV) transformer (i.e. a GSU or substation).
    Depends on :attr:`~generation_models.generation_models.Transformer.no_load_loss` factor.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC` or
      :attr:`~generation_models.generation_models.Bus.MV` and
      :attr:`~generation_models.generation_models.Losses.hv_transformer` is not ``None``
    """

    transformer_loss: t.Optional[list] = None
    r"""*Deprecated, see* :attr: `hv_xfmr_loss`.

    - Units: kW
    - Only generated when
      :attr:`~generation_models.generation_models.DownstreamSystem.model_losses_from` is
      :attr:`~generation_models.generation_models.Bus.DC` or
      :attr:`~generation_models.generation_models.Bus.MV` and
      :attr:`~generation_models.generation_models.Losses.hv_transformer` is not ``None``
    """

    hv_ac_power: list
    r"""Total AC power measured at the switchgear/project boundary. This point is also defined as the high voltage
    (HV) bus because if a high voltage transformer/GSU/substation is modeled, this corresponds to the HV transformer
    output.

    - Units: kW
    """

    transmission_loss: list
    r"""Loss due to resistance of high voltage (HV) AC lines that connect the switchgear to the actual point of
    interconnection (POI). Depends on
    :attr:`~generation_models.generation_models.ACLosses.transmission` input

    - Units: kW
    """

    gen: list
    r"""Power at the point of interconnection (POI), prior to clipping the values to the
    limit defined by e.g.
    :attr:`StandaloneStorageModel.downstream_system.system_design.poi_limit <generation_models.\
    generation_models.BaseSystemDesign.poi_limit>`

    - Units: kW
    """

    poi_unadjusted: list
    r"""Power at the point of interconnection (POI), after applying POI clipping but before applying the user-defined
    :attr:`~generation_models.generation_models.ACLosses.poi_adjustment`

    - Units: kW
    """

    poi: list
    r"""Power at the point of interconnection (POI) after accounting for all losses/adjustments

    - Units: kW
    """

    positive_poi: list
    r"""Positive-only values of :attr:`poi` time series, where negative values have been set to zero.

    - Units: kW
    """

    negative_poi: list
    r"""Negative-only values of :attr:`poi` time series, where positive values have been set to zero.

    - Units: kW
    """


class GenerationModelResults(SolarTimeSeries):
    r"""Results schema returned when a
    :class:`~generation_models.generation_models.PVGenerationModel`,
    :class:`~generation_models.generation_models.ACExternalGenerationModel` or
    :class:`~generation_models.generation_models.DCExternalGenerationModel` simulation is run
    """

    tyba_api_loss_waterfall: SolarWaterfall
    r"""Waterfall-style loss data for first year (8760 hours) or results
    """

    warnings: t.List[str]
    r"""List of warnings generated during simulations. These warnings do not indicate errors in the simulation, but
    arise when the given inputs may result in inaccurate or unexpected results. For example, a common scenario that
    will raise a warning is if an inverter has been defined with e.g.
    :attr:`~generation_models.generation_models.Inverter.includes_xfmr` equal to ``False`` but no MV
    transformer has been defined. In this case, the simulation would inaccurately neglect MV transformer losses.
    """

    coupling: None
    r"""Key used internally. :attr:`coupling` equal to ``None`` indicates that the simulation is PV- (or generation)
    only and does not consider storage.
    """

    def time_series_df(self):
        return pd.DataFrame(
            self.model_dump(
                exclude={
                    "tyba_api_loss_waterfall",
                    "warnings",
                    "coupling",
                    "sam_design_parameters",
                },
                exclude_none=True,
            )
        )


class PVStorageModelResults(BaseModel):
    r"""Results schema returned when a :class:`~generation_models.generation_models.PVStorageModel`
    simulation is run
    """

    solar_only: SolarTimeSeries
    r"""Power flow-related time series data for the PV- (or generation) only simulation corresponding to the given
    generation inputs. Useful for comparing to the results in :attr:`solar_storage` to better understand the value of
    a hybrid vs PV-only project"""

    solar_storage: SolarStorageTimeSeries
    r"""Power flow-related time series results"""

    waterfall: SolarStorageWaterfall
    r"""Waterfall-style loss data for first year (8760 hours) or results
    """

    optimizer: OptimizerTimeSeries
    r"""Time series results associated with BESS optimization and operation
    """

    market_awards: t.Optional[MarketAwardsTimeSeries] = None
    r"""Time series results intended to represent market awards for use in revenue calculation
    """

    warnings: t.List[str]
    r"""List of warnings generated during simulations. See :attr:`GenerationModelResults.warnings` for more information
    """

    coupling: str
    r"""Key used internally. Reflects the
    :attr:`~generation_models.generation_models.PVStorageModel.storage_coupling` input
    """

    def time_series_df(self):
        model_dict = self.model_dump(
            exclude={
                "solar_only": {"sam_design_parameters"},
                "waterfall": True,
                "warnings": True,
                "coupling": True,
            },
            exclude_none=True,
        )
        if isinstance(model_dict["solar_storage"]["battery_limit"], float):
            model_dict["solar_storage"]["battery_limit"] = [model_dict["solar_storage"]["battery_limit"]] * len(
                model_dict["solar_storage"]["battery_internal_energy_max"]
            )
        return pd.DataFrame(reform_for_multiindex_df(model_dict))


class StandaloneStorageModelWithDownstreamResults(BaseModel):
    r"""Results schema returned when a
    :class:`~generation_models.generation_models.StandaloneStorageModel` simulation is run with a
    :attr:`~generation_models.generation_models.StandaloneStorageModel.downstream_system` specified
    """

    system: StandaloneStorageSystemTimeSeries
    r"""Power flow-related time series results"""

    optimizer_outputs: OptimizerTimeSeries
    r"""Time series results associated with BESS optimization and operation
    """

    market_awards: t.Optional[MarketAwardsTimeSeries] = None
    r"""Time series results intended to represent market awards for use in revenue calculation
    """

    def time_series_df(self):
        model_dict = self.model_dump(exclude_none=True)
        return pd.DataFrame(reform_for_multiindex_df(model_dict))


class StandaloneStorageModelSimpleResults(OptimizerTimeSeries):
    r"""Results schema returned when a
    :class:`~generation_models.generation_models.StandaloneStorageModel` simulation is run without a
    :attr:`~generation_models.generation_models.StandaloneStorageModel.downstream_system` specified.
    Note that in this case, all time series apply at the point of interconnection (POI).
    """

    model_config = ConfigDict(extra="allow")

    def time_series_df(self):
        return pd.DataFrame(self.model_dump(exclude_none=True))

    def default_dict(self):
        r"""Added to support inclusion into v2 output schema

        :meta private:
        """
        return self.model_dump(exclude_none=True)
