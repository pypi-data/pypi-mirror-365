{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-picker-column_entry_js.js","mappings":"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","sources":["./node_modules/@ionic/core/dist/esm/ion-picker-column.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, f as Host, i as getElement } from './index-bcd8859b.js';\nimport { d as doc } from './index-a5d50daf.js';\nimport { r as raf, g as getElementRoot } from './helpers-da915de8.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-ac164e4c.js';\nimport { a as isPlatform, b as getIonMode } from './ionic-global-e6c98cd0.js';\nimport { c as createColorClasses } from './theme-01f3f29c.js';\nimport './capacitor-59395cbd.js';\n\nconst pickerColumnCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;max-width:100%;height:200px;font-size:22px;text-align:center}.picker-opts{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0px;padding-bottom:0px;min-width:26px;max-height:200px;outline:none;text-align:inherit;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none}.picker-item-empty{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.picker-opts::-webkit-scrollbar{display:none}::slotted(ion-picker-column-option){display:block;scroll-snap-align:center}.picker-item-empty,:host(:not([disabled])) ::slotted(ion-picker-column-option.option-disabled){scroll-snap-align:none}::slotted([slot=prefix]),::slotted([slot=suffix]){max-width:200px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}::slotted([slot=prefix]){-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0;padding-bottom:0;-ms-flex-pack:end;justify-content:end}::slotted([slot=suffix]){-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0;padding-bottom:0;-ms-flex-pack:start;justify-content:start}:host(.picker-column-disabled) .picker-opts{overflow-y:hidden}:host(.picker-column-disabled) ::slotted(ion-picker-column-option){cursor:default;opacity:0.4;pointer-events:none}@media (any-hover: hover){:host(:focus) .picker-opts{outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\nconst IonPickerColumnStyle0 = pickerColumnCss;\n\nconst PickerColumn = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.isScrolling = false;\n        this.isColumnVisible = false;\n        this.canExitInputMode = true;\n        this.centerPickerItemInView = (target, smooth = true, canExitInputMode = true) => {\n            const { isColumnVisible, scrollEl } = this;\n            if (isColumnVisible && scrollEl) {\n                // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n                const top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\n                if (scrollEl.scrollTop !== top) {\n                    /**\n                     * Setting this flag prevents input\n                     * mode from exiting in the picker column's\n                     * scroll callback. This is useful when the user manually\n                     * taps an item or types on the keyboard as both\n                     * of these can cause a scroll to occur.\n                     */\n                    this.canExitInputMode = canExitInputMode;\n                    scrollEl.scroll({\n                        top,\n                        left: 0,\n                        behavior: smooth ? 'smooth' : undefined,\n                    });\n                }\n            }\n        };\n        this.setPickerItemActiveState = (item, isActive) => {\n            if (isActive) {\n                item.classList.add(PICKER_ITEM_ACTIVE_CLASS);\n            }\n            else {\n                item.classList.remove(PICKER_ITEM_ACTIVE_CLASS);\n            }\n        };\n        /**\n         * When ionInputModeChange is emitted, each column\n         * needs to check if it is the one being made available\n         * for text entry.\n         */\n        this.inputModeChange = (ev) => {\n            if (!this.numericInput) {\n                return;\n            }\n            const { useInputMode, inputModeColumn } = ev.detail;\n            /**\n             * If inputModeColumn is undefined then this means\n             * all numericInput columns are being selected.\n             */\n            const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n            if (!useInputMode || !isColumnActive) {\n                this.setInputModeActive(false);\n                return;\n            }\n            this.setInputModeActive(true);\n        };\n        /**\n         * Setting isActive will cause a re-render.\n         * As a result, we do not want to cause the\n         * re-render mid scroll as this will cause\n         * the picker column to jump back to\n         * whatever value was selected at the\n         * start of the scroll interaction.\n         */\n        this.setInputModeActive = (state) => {\n            if (this.isScrolling) {\n                this.scrollEndCallback = () => {\n                    this.isActive = state;\n                };\n                return;\n            }\n            this.isActive = state;\n        };\n        /**\n         * When the column scrolls, the component\n         * needs to determine which item is centered\n         * in the view and will emit an ionChange with\n         * the item object.\n         */\n        this.initializeScrollListener = () => {\n            /**\n             * The haptics for the wheel picker are\n             * an iOS-only feature. As a result, they should\n             * be disabled on Android.\n             */\n            const enableHaptics = isPlatform('ios');\n            const { el, scrollEl } = this;\n            let timeout;\n            let activeEl = this.activeItem;\n            const scrollCallback = () => {\n                raf(() => {\n                    if (!scrollEl)\n                        return;\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        timeout = undefined;\n                    }\n                    if (!this.isScrolling) {\n                        enableHaptics && hapticSelectionStart();\n                        this.isScrolling = true;\n                    }\n                    /**\n                     * Select item in the center of the column\n                     * which is the month/year that we want to select\n                     */\n                    const bbox = scrollEl.getBoundingClientRect();\n                    const centerX = bbox.x + bbox.width / 2;\n                    const centerY = bbox.y + bbox.height / 2;\n                    /**\n                     * elementFromPoint returns the top-most element.\n                     * This means that if an ion-backdrop is overlaying the\n                     * picker then the appropriate picker column option will\n                     * not be selected. To account for this, we use elementsFromPoint\n                     * and use an Array.find to find the appropriate column option\n                     * at that point.\n                     *\n                     * Additionally, the picker column could be used in the\n                     * Shadow DOM (i.e. in ion-datetime) so we need to make\n                     * sure we are choosing the correct host otherwise\n                     * the elements returns by elementsFromPoint will be\n                     * retargeted. To account for this, we check to see\n                     * if the picker column has a parent shadow root. If\n                     * so, we use that shadow root when doing elementsFromPoint.\n                     * Otherwise, we just use the document.\n                     */\n                    const rootNode = el.getRootNode();\n                    const hasParentShadow = rootNode instanceof ShadowRoot;\n                    const referenceNode = hasParentShadow ? rootNode : doc;\n                    /**\n                     * If the reference node is undefined\n                     * then it's likely that doc is undefined\n                     * due to being in an SSR environment.\n                     */\n                    if (referenceNode === undefined) {\n                        return;\n                    }\n                    const elementsAtPoint = referenceNode.elementsFromPoint(centerX, centerY);\n                    /**\n                     * elementsFromPoint can returns multiple elements\n                     * so find the relevant picker column option if one exists.\n                     */\n                    const newActiveElement = elementsAtPoint.find((el) => el.tagName === 'ION-PICKER-COLUMN-OPTION');\n                    if (activeEl !== undefined) {\n                        this.setPickerItemActiveState(activeEl, false);\n                    }\n                    if (newActiveElement === undefined || newActiveElement.disabled) {\n                        return;\n                    }\n                    /**\n                     * If we are selecting a new value,\n                     * we need to run haptics again.\n                     */\n                    if (newActiveElement !== activeEl) {\n                        enableHaptics && hapticSelectionChanged();\n                        if (this.canExitInputMode) {\n                            /**\n                             * The native iOS wheel picker\n                             * only dismisses the keyboard\n                             * once the selected item has changed\n                             * as a result of a swipe\n                             * from the user. If `canExitInputMode` is\n                             * `false` then this means that the\n                             * scroll is happening as a result of\n                             * the `value` property programmatically changing\n                             * either by an application or by the user via the keyboard.\n                             */\n                            this.exitInputMode();\n                        }\n                    }\n                    activeEl = newActiveElement;\n                    this.setPickerItemActiveState(newActiveElement, true);\n                    timeout = setTimeout(() => {\n                        this.isScrolling = false;\n                        enableHaptics && hapticSelectionEnd();\n                        /**\n                         * Certain tasks (such as those that\n                         * cause re-renders) should only be done\n                         * once scrolling has finished, otherwise\n                         * flickering may occur.\n                         */\n                        const { scrollEndCallback } = this;\n                        if (scrollEndCallback) {\n                            scrollEndCallback();\n                            this.scrollEndCallback = undefined;\n                        }\n                        /**\n                         * Reset this flag as the\n                         * next scroll interaction could\n                         * be a scroll from the user. In this\n                         * case, we should exit input mode.\n                         */\n                        this.canExitInputMode = true;\n                        this.setValue(newActiveElement.value);\n                    }, 250);\n                });\n            };\n            /**\n             * Wrap this in an raf so that the scroll callback\n             * does not fire when component is initially shown.\n             */\n            raf(() => {\n                if (!scrollEl)\n                    return;\n                scrollEl.addEventListener('scroll', scrollCallback);\n                this.destroyScrollListener = () => {\n                    scrollEl.removeEventListener('scroll', scrollCallback);\n                };\n            });\n        };\n        /**\n         * Tells the parent picker to\n         * exit text entry mode. This is only called\n         * when the selected item changes during scroll, so\n         * we know that the user likely wants to scroll\n         * instead of type.\n         */\n        this.exitInputMode = () => {\n            const { parentEl } = this;\n            if (parentEl == null)\n                return;\n            parentEl.exitInputMode();\n            /**\n             * setInputModeActive only takes\n             * effect once scrolling stops to avoid\n             * a component re-render while scrolling.\n             * However, we want the visual active\n             * indicator to go away immediately, so\n             * we call classList.remove here.\n             */\n            this.el.classList.remove('picker-column-active');\n        };\n        this.isActive = false;\n        this.disabled = false;\n        this.value = undefined;\n        this.color = 'primary';\n        this.numericInput = false;\n    }\n    valueChange() {\n        if (this.isColumnVisible) {\n            /**\n             * Only scroll the active item into view when the picker column\n             * is actively visible to the user.\n             */\n            this.scrollActiveItemIntoView(true);\n        }\n    }\n    /**\n     * Only setup scroll listeners\n     * when the picker is visible, otherwise\n     * the container will have a scroll\n     * height of 0px.\n     */\n    componentWillLoad() {\n        /**\n         * We cache parentEl in a local variable\n         * so we don't need to keep accessing\n         * the class variable (which comes with\n         * a small performance hit)\n         */\n        const parentEl = (this.parentEl = this.el.closest('ion-picker'));\n        const visibleCallback = (entries) => {\n            /**\n             * Browsers will sometimes group multiple IO events into a single callback.\n             * As a result, we want to grab the last/most recent event in case there are multiple events.\n             */\n            const ev = entries[entries.length - 1];\n            if (ev.isIntersecting) {\n                const { activeItem, el } = this;\n                this.isColumnVisible = true;\n                /**\n                 * Because this initial call to scrollActiveItemIntoView has to fire before\n                 * the scroll listener is set up, we need to manage the active class manually.\n                 */\n                const oldActive = getElementRoot(el).querySelector(`.${PICKER_ITEM_ACTIVE_CLASS}`);\n                if (oldActive) {\n                    this.setPickerItemActiveState(oldActive, false);\n                }\n                this.scrollActiveItemIntoView();\n                if (activeItem) {\n                    this.setPickerItemActiveState(activeItem, true);\n                }\n                this.initializeScrollListener();\n            }\n            else {\n                this.isColumnVisible = false;\n                if (this.destroyScrollListener) {\n                    this.destroyScrollListener();\n                    this.destroyScrollListener = undefined;\n                }\n            }\n        };\n        /**\n         * Set the root to be the parent picker element\n         * This causes the IO callback\n         * to be fired in WebKit as soon as the element\n         * is visible. If we used the default root value\n         * then WebKit would only fire the IO callback\n         * after any animations (such as a modal transition)\n         * finished, and there would potentially be a flicker.\n         */\n        new IntersectionObserver(visibleCallback, { threshold: 0.001, root: this.parentEl }).observe(this.el);\n        if (parentEl !== null) {\n            // TODO(FW-2832): type\n            parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\n        }\n    }\n    componentDidRender() {\n        const { el, activeItem, isColumnVisible, value } = this;\n        if (isColumnVisible && !activeItem) {\n            const firstOption = el.querySelector('ion-picker-column-option');\n            /**\n             * If the picker column does not have an active item and the current value\n             * does not match the first item in the picker column, that means\n             * the value is out of bounds. In this case, we assign the value to the\n             * first item to match the scroll position of the column.\n             *\n             */\n            if (firstOption !== null && firstOption.value !== value) {\n                this.setValue(firstOption.value);\n            }\n        }\n    }\n    /** @internal  */\n    async scrollActiveItemIntoView(smooth = false) {\n        const activeEl = this.activeItem;\n        if (activeEl) {\n            this.centerPickerItemInView(activeEl, smooth, false);\n        }\n    }\n    /**\n     * Sets the value prop and fires the ionChange event.\n     * This is used when we need to fire ionChange from\n     * user-generated events that cannot be caught with normal\n     * input/change event listeners.\n     * @internal\n     */\n    async setValue(value) {\n        if (this.disabled === true || this.value === value) {\n            return;\n        }\n        this.value = value;\n        this.ionChange.emit({ value });\n    }\n    /**\n     * Sets focus on the scrollable container within the picker column.\n     * Use this method instead of the global `pickerColumn.focus()`.\n     */\n    async setFocus() {\n        if (this.scrollEl) {\n            this.scrollEl.focus();\n        }\n    }\n    get activeItem() {\n        const { value } = this;\n        const options = Array.from(this.el.querySelectorAll('ion-picker-column-option'));\n        return options.find((option) => {\n            /**\n             * If the whole picker column is disabled, the current value should appear active\n             * If the current value item is specifically disabled, it should not appear active\n             */\n            if (!this.disabled && option.disabled) {\n                return false;\n            }\n            return option.value === value;\n        });\n    }\n    render() {\n        const { color, disabled, isActive, numericInput } = this;\n        const mode = getIonMode(this);\n        return (h(Host, { key: '59648ef23cef1ab6d30955bb95bc23e670ec7256', class: createColorClasses(color, {\n                [mode]: true,\n                ['picker-column-active']: isActive,\n                ['picker-column-numeric-input']: numericInput,\n                ['picker-column-disabled']: disabled,\n            }) }, h(\"slot\", { key: 'fd93192d4945b2c33e0fe93cc90b505f2cec12fc', name: \"prefix\" }), h(\"div\", { key: '99e49c6d58badd2fe5e75f0ebcd4bc00eb50aa58', class: \"picker-opts\", tabindex: disabled ? undefined : 0, ref: (el) => {\n                this.scrollEl = el;\n            } }, h(\"div\", { key: 'bb44892ef179b25373e45e4b4bc4d1fa617b1ea1', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: '9ee7aeb8468bbb03f7192d56849dae089b7a0250', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: '0baa4bda4bf02a8d06dbf3392b1516ca8ea8d26a', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"slot\", { key: 'ff4cad20fd82ab66599473f60d10c18dc1dc76d8' }), h(\"div\", { key: '04dcb0390209081e6223b90e45b8f2ef0fdf94bd', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: '734e3b431a30ce93957e1452516efc86e29ff9c9', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: '1c68dcf9a029e607bb6bc9c19cd02214914eb6d7', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\")), h(\"slot\", { key: 'd85210cc99c8c1bf83eb1cd51540ebe875d4adeb', name: \"suffix\" })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"valueChange\"]\n    }; }\n};\nconst PICKER_ITEM_ACTIVE_CLASS = 'option-active';\nPickerColumn.style = IonPickerColumnStyle0;\n\nexport { PickerColumn as ion_picker_column };\n"],"names":["r","registerInstance","d","createEvent","h","f","Host","i","getElement","doc","raf","g","getElementRoot","a","hapticSelectionStart","b","hapticSelectionChanged","hapticSelectionEnd","isPlatform","getIonMode","c","createColorClasses","pickerColumnCss","IonPickerColumnStyle0","PickerColumn","constructor","hostRef","ionChange","isScrolling","isColumnVisible","canExitInputMode","centerPickerItemInView","target","smooth","scrollEl","top","offsetTop","clientHeight","scrollTop","scroll","left","behavior","undefined","setPickerItemActiveState","item","isActive","classList","add","PICKER_ITEM_ACTIVE_CLASS","remove","inputModeChange","ev","numericInput","useInputMode","inputModeColumn","detail","isColumnActive","el","setInputModeActive","state","scrollEndCallback","initializeScrollListener","enableHaptics","timeout","activeEl","activeItem","scrollCallback","clearTimeout","bbox","getBoundingClientRect","centerX","x","width","centerY","y","height","rootNode","getRootNode","hasParentShadow","ShadowRoot","referenceNode","elementsAtPoint","elementsFromPoint","newActiveElement","find","tagName","disabled","exitInputMode","setTimeout","setValue","value","addEventListener","destroyScrollListener","removeEventListener","parentEl","color","valueChange","scrollActiveItemIntoView","componentWillLoad","closest","visibleCallback","entries","length","isIntersecting","oldActive","querySelector","IntersectionObserver","threshold","root","observe","componentDidRender","firstOption","_this","_asyncToGenerator","_this2","emit","setFocus","_this3","focus","options","Array","from","querySelectorAll","option","render","mode","key","class","name","tabindex","ref","watchers","style","ion_picker_column"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}