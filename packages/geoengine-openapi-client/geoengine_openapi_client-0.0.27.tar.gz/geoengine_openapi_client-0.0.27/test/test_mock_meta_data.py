# coding: utf-8

"""
    Geo Engine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.8.0
    Contact: dev@geoengine.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from geoengine_openapi_client.models.mock_meta_data import MockMetaData

class TestMockMetaData(unittest.TestCase):
    """MockMetaData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MockMetaData:
        """Test MockMetaData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MockMetaData`
        """
        model = MockMetaData()
        if include_optional:
            return MockMetaData(
                loading_info = geoengine_openapi_client.models.mock_dataset_data_source_loading_info.MockDatasetDataSourceLoadingInfo(
                    points = [
                        geoengine_openapi_client.models.coordinate2_d.Coordinate2D(
                            x = 1.337, 
                            y = 1.337, )
                        ], ),
                result_descriptor = geoengine_openapi_client.models.vector_result_descriptor.VectorResultDescriptor(
                    bbox = geoengine_openapi_client.models.bounding_box2_d.BoundingBox2D(
                        lower_left_coordinate = geoengine_openapi_client.models.coordinate2_d.Coordinate2D(
                            x = 1.337, 
                            y = 1.337, ), 
                        upper_right_coordinate = geoengine_openapi_client.models.coordinate2_d.Coordinate2D(
                            x = 1.337, 
                            y = 1.337, ), ), 
                    columns = {
                        'key' : geoengine_openapi_client.models.vector_column_info.VectorColumnInfo(
                            data_type = 'category', 
                            measurement = null, )
                        }, 
                    data_type = 'Data', 
                    spatial_reference = '', 
                    time = geoengine_openapi_client.models.time_interval.TimeInterval(
                        end = 56, 
                        start = 56, ), ),
                type = 'MockMetaData'
            )
        else:
            return MockMetaData(
                loading_info = geoengine_openapi_client.models.mock_dataset_data_source_loading_info.MockDatasetDataSourceLoadingInfo(
                    points = [
                        geoengine_openapi_client.models.coordinate2_d.Coordinate2D(
                            x = 1.337, 
                            y = 1.337, )
                        ], ),
                result_descriptor = geoengine_openapi_client.models.vector_result_descriptor.VectorResultDescriptor(
                    bbox = geoengine_openapi_client.models.bounding_box2_d.BoundingBox2D(
                        lower_left_coordinate = geoengine_openapi_client.models.coordinate2_d.Coordinate2D(
                            x = 1.337, 
                            y = 1.337, ), 
                        upper_right_coordinate = geoengine_openapi_client.models.coordinate2_d.Coordinate2D(
                            x = 1.337, 
                            y = 1.337, ), ), 
                    columns = {
                        'key' : geoengine_openapi_client.models.vector_column_info.VectorColumnInfo(
                            data_type = 'category', 
                            measurement = null, )
                        }, 
                    data_type = 'Data', 
                    spatial_reference = '', 
                    time = geoengine_openapi_client.models.time_interval.TimeInterval(
                        end = 56, 
                        start = 56, ), ),
                type = 'MockMetaData',
        )
        """

    def testMockMetaData(self):
        """Test MockMetaData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
