# coding: utf-8

"""
    Geo Engine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.8.0
    Contact: dev@geoengine.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from geoengine_openapi_client.models.typed_data_provider_definition import TypedDataProviderDefinition

class TestTypedDataProviderDefinition(unittest.TestCase):
    """TypedDataProviderDefinition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TypedDataProviderDefinition:
        """Test TypedDataProviderDefinition
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TypedDataProviderDefinition`
        """
        model = TypedDataProviderDefinition()
        if include_optional:
            return TypedDataProviderDefinition(
                api_token = '',
                api_url = '',
                cache_ttl = 0,
                description = '',
                filter_label = '',
                id = '',
                name = '',
                priority = 56,
                project_id = '',
                type = 'Aruna',
                gdal_config = [
                    [
                        ''
                        ]
                    ],
                s3_access_key = '',
                s3_secret_key = '',
                s3_url = '',
                stac_url = '',
                collections = [
                    geoengine_openapi_client.models.dataset_layer_listing_collection.DatasetLayerListingCollection(
                        description = '', 
                        name = '', 
                        tags = [
                            ''
                            ], )
                    ],
                base_url = '',
                data = '',
                overviews = '',
                discrete_vrs = [
                    ''
                    ],
                provenance = [
                    geoengine_openapi_client.models.provenance.Provenance(
                        citation = '', 
                        license = '', 
                        uri = '', )
                    ],
                vector_spec = geoengine_openapi_client.models.edr_vector_spec.EdrVectorSpec(
                    time = '', 
                    x = '', 
                    y = '', ),
                autocomplete_timeout = 56,
                columns = [
                    ''
                    ],
                db_config = geoengine_openapi_client.models.database_connection_config.DatabaseConnectionConfig(
                    database = '', 
                    host = '', 
                    password = '', 
                    port = 0, 
                    schema = '', 
                    user = '', ),
                abcd_db_config = geoengine_openapi_client.models.database_connection_config.DatabaseConnectionConfig(
                    database = '', 
                    host = '', 
                    password = '', 
                    port = 0, 
                    schema = '', 
                    user = '', ),
                collection_api_auth_token = '',
                collection_api_url = '',
                pangaea_url = '',
                bands = [
                    geoengine_openapi_client.models.stac_band.StacBand(
                        data_type = 'U8', 
                        name = '', 
                        no_data_value = 1.337, )
                    ],
                gdal_retries = 0,
                query_buffer = geoengine_openapi_client.models.stac_query_buffer.StacQueryBuffer(
                    end_seconds = 56, 
                    start_seconds = 56, ),
                stac_api_retries = geoengine_openapi_client.models.stac_api_retries.StacApiRetries(
                    exponential_backoff_factor = 1.337, 
                    initial_delay_ms = 0, 
                    number_of_retries = 0, ),
                zones = [
                    geoengine_openapi_client.models.stac_zone.StacZone(
                        epsg = 0, 
                        name = '', )
                    ],
                api_key = ''
            )
        else:
            return TypedDataProviderDefinition(
                api_token = '',
                api_url = '',
                cache_ttl = 0,
                description = '',
                filter_label = '',
                id = '',
                name = '',
                project_id = '',
                type = 'Aruna',
                gdal_config = [
                    [
                        ''
                        ]
                    ],
                s3_access_key = '',
                s3_secret_key = '',
                s3_url = '',
                stac_url = '',
                collections = [
                    geoengine_openapi_client.models.dataset_layer_listing_collection.DatasetLayerListingCollection(
                        description = '', 
                        name = '', 
                        tags = [
                            ''
                            ], )
                    ],
                base_url = '',
                data = '',
                overviews = '',
                autocomplete_timeout = 56,
                columns = [
                    ''
                    ],
                db_config = geoengine_openapi_client.models.database_connection_config.DatabaseConnectionConfig(
                    database = '', 
                    host = '', 
                    password = '', 
                    port = 0, 
                    schema = '', 
                    user = '', ),
                abcd_db_config = geoengine_openapi_client.models.database_connection_config.DatabaseConnectionConfig(
                    database = '', 
                    host = '', 
                    password = '', 
                    port = 0, 
                    schema = '', 
                    user = '', ),
                collection_api_auth_token = '',
                collection_api_url = '',
                pangaea_url = '',
                bands = [
                    geoengine_openapi_client.models.stac_band.StacBand(
                        data_type = 'U8', 
                        name = '', 
                        no_data_value = 1.337, )
                    ],
                zones = [
                    geoengine_openapi_client.models.stac_zone.StacZone(
                        epsg = 0, 
                        name = '', )
                    ],
        )
        """

    def testTypedDataProviderDefinition(self):
        """Test TypedDataProviderDefinition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
