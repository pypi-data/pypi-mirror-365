[tool.poetry]
name = "codeenigma"
version = "1.2.0a0"
description = "A lightweight, open-source tool for Python code obfuscation. CodeEnigma helps protect your logic from reverse engineering and unauthorized access, making it a practical alternative to PyArmor for securely distributing your Python applications"
authors = ["Krishnan S G <krishsg525@gmail.com>"]
license = "MIT"
readme = "README.md"
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries",
    "Topic :: Security",
    "Topic :: Utilities",
    "Operating System :: OS Independent"
]
keywords = ["obfuscation", "code protection", "python security", "pyarmor alternative", "secure distribution"]

[tool.poetry.urls]
Homepage = "https://github.com/KrishnanSG/codeenigma"
Source = "https://github.com/KrishnanSG/codeenigma"
Tracker = "https://github.com/KrishnanSG/codeenigma/issues"


[tool.poetry.scripts]
codeenigma = "codeenigma.cli:app"

[tool.poetry.dependencies]
python = ">=3.10, <3.14"
cryptography = ">=40.0.4"
typer = {extras = ["all"], version = ">=0.14.0"}
rich = ">=13.0.0"
setuptools = ">=70.0.0"
cython = ">=3.0.0"
toml = ">=0.9.2"
poetry = ">=2.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.1.0"
ruff = "^0.12.0"
coverage = "^7.9.2"
pytest-xdist = "^3.8.0"


[tool.poetry.group.build.dependencies]
pyinstaller = "^6.14.1"

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]

# Pydocstyle settings for docstring conventions
[lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
combine-as-imports = true
force-single-line = false

# Formatting settings
[format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.coverage.run]
relative_files = true
omit = [
    "tests/*",
    "setup.py",
    "*/__init__.py",
]