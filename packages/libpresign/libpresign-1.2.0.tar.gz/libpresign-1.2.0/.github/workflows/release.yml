name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run release in dry-run mode'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.repository == 'myk0la-b/libpresign'
    
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install semantic-release
        run: |
          npm install -g semantic-release@latest
          npm install -g @semantic-release/git@latest
          npm install -g @semantic-release/github@latest
          npm install -g @semantic-release/changelog@latest
          npm install -g @semantic-release/exec@latest
          npm install -g @semantic-release/commit-analyzer@latest
          npm install -g @semantic-release/release-notes-generator@latest
          npm install -g conventional-changelog-conventionalcommits@latest
      
      - name: Install project dependencies
        run: |
          # Since we don't have a lockfile, we'll install in editable mode
          # This approach works for libraries without lockfiles
          uv pip install --system -e .
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Run semantic-release (dry run)
        if: inputs.dry_run == true
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: npx semantic-release --dry-run
      
      - name: Run semantic-release
        if: inputs.dry_run != true
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: npx semantic-release
      
      - name: Get release version
        id: get-version
        if: inputs.dry_run != true
        run: |
          VERSION=$(python -c "import libpresign; print(libpresign.__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Released version: $VERSION"
    
    outputs:
      version: ${{ steps.get-version.outputs.version }}

  trigger-wheels:
    name: Trigger Wheel Building
    needs: release
    if: needs.release.outputs.version != ''
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
      
      - name: Trigger wheel workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'wheels.yml',
              ref: 'main',
              inputs: {
                release_version: '${{ needs.release.outputs.version }}'
              }
            });

  update-docs:
    name: Update Documentation
    needs: release
    if: needs.release.outputs.version != ''
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
      
      - name: Trigger docs workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'docs.yml',
              ref: 'main'
            });