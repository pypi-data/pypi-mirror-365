# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .access_token import AccessToken
from .organization_membership import OrganizationMembership
from .personal_access_token_principal_account_type import PersonalAccessTokenPrincipalAccountType


class PersonalAccessTokenPrincipal(UniversalBaseModel):
    id: typing.Optional[str] = None
    access_token: typing_extensions.Annotated[typing.Optional[AccessToken], FieldMetadata(alias="accessToken")] = None
    account_type: typing_extensions.Annotated[
        typing.Optional[PersonalAccessTokenPrincipalAccountType], FieldMetadata(alias="accountType")
    ] = None
    organization_memberships: typing_extensions.Annotated[
        typing.Optional[typing.List[OrganizationMembership]], FieldMetadata(alias="organizationMemberships")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
