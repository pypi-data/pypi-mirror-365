@name: 使用YAML变量的HTTP请求示例
@description: 演示如何使用YAML变量文件中的客户端配置和模板
@tags: [HTTP, API, YAML, 模板]
@author: Felix
@date: 2024-04-01

# 注意：运行此测试用例需要使用 --yaml-vars 命令行参数指定vars.yaml文件
# 例如：pytest-dsl --yaml-vars pytest_dsl/examples/http/vars.yaml pytest_dsl/examples/http/http_with_yaml.auto

# 使用命名客户端配置
[HTTP请求],客户端:'jsonplaceholder',配置:'''
        method: GET
        url: /users/${api_test_data.user_id}
        captures:
            username: ["jsonpath", "$.username"]
            email: ["jsonpath", "$.email"]
            company_name: ["jsonpath", "$.company.name"]
        asserts:
            - ["status", "eq", 200]
            - ["jsonpath", "$.id", "eq", ${api_test_data.user_id}]
    '''

[打印],内容:'用户信息 - 用户名: ${username}, 邮箱: ${email}, 公司: ${company_name}'

# 使用模板
[HTTP请求],客户端:'jsonplaceholder',模板:'json_post',配置:'''
        url: /posts
        request:
            json:
                title: 使用模板创建的文章
                body: 这是使用模板创建的测试文章内容
                userId: ${api_test_data.user_id}
        captures:
            new_post_id: ["jsonpath", "$.id"]
    '''

[打印],内容:'使用模板创建的文章ID: ${new_post_id}'

# 使用默认客户端（httpbin.org）
[HTTP请求],配置:'''
        method: GET
        url: /get
        request:
            params:
                user_id: ${api_test_data.user_id}
                username: ${api_test_data.username}
        captures:
            args: ["jsonpath", "$.args"]
        asserts:
            - ["status", "eq", 200]
            - ["jsonpath", "$.args.user_id", "eq", "${api_test_data.user_id}"]
    '''

[打印],内容:'请求参数: ${args}'

teardown do
    [打印],内容:'YAML变量和模板测试完成!'
end 