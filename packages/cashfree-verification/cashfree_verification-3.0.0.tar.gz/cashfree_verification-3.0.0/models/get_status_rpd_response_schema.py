# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class GetStatusRpdResponseSchema(BaseModel):
    """
    Reverse penny drop verification successful
    """
    bank_account: Optional[StrictStr] = Field(None, description="It displays the bank account number of the individual.")
    ifsc: Optional[StrictStr] = Field(None, description="It displays the IFSC information of the individual's bank account.")
    upi: Optional[StrictStr] = Field(None, description="It displays the UPI VPA information of the individual.")
    name_at_bank: Optional[StrictStr] = Field(None, description="It displays the name of the individual registered in the bank records.")
    verification_id: Optional[StrictStr] = Field(None, description="It displays the unique ID created by you to identify the verifiation request.")
    ref_id: Optional[StrictStr] = Field(None, description="It displays the unique ID created by Cashfree Payments for reference purposes.")
    utr: Optional[StrictStr] = Field(None, description="It displays the unique transaction reference (UTR) number created by the bank to identify the transaction.")
    status: Optional[StrictStr] = Field(None, description="It displays the status of the API request.")
    name_match_score: Optional[StrictStr] = Field(None, description="It displays the score of the name match verification.")
    name_match_result: Optional[StrictStr] = Field(None, description="It displays the result of the name match verification.")
    added_on: Optional[StrictStr] = Field(None, description="It displays the date and time of when the request was added.")
    processed_on: Optional[StrictStr] = Field(None, description="It displays the date and time of when the request was processed.")
    penny_collected_on: Optional[StrictStr] = Field(None, description="It displays the date and time of when the 1 rupee was collected.")
    reversal_status: Optional[StrictStr] = Field(None, description="It displays the status of the rupee reversal.")
    account_type: Optional[StrictStr] = Field(None, description="It displays the type of account.")
    __properties = ["bank_account", "ifsc", "upi", "name_at_bank", "verification_id", "ref_id", "utr", "status", "name_match_score", "name_match_result", "added_on", "processed_on", "penny_collected_on", "reversal_status", "account_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetStatusRpdResponseSchema:
        """Create an instance of GetStatusRpdResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> GetStatusRpdResponseSchema:
        """Create an instance of GetStatusRpdResponseSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "bank_account, ifsc, upi, name_at_bank, verification_id, ref_id, utr, status, name_match_score, name_match_result, added_on, processed_on, penny_collected_on, reversal_status, account_type" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetStatusRpdResponseSchema:
        """Create an instance of GetStatusRpdResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetStatusRpdResponseSchema.parse_obj(obj)

        _obj = GetStatusRpdResponseSchema.parse_obj({
            "bank_account": obj.get("bank_account"),
            "ifsc": obj.get("ifsc"),
            "upi": obj.get("upi"),
            "name_at_bank": obj.get("name_at_bank"),
            "verification_id": obj.get("verification_id"),
            "ref_id": obj.get("ref_id"),
            "utr": obj.get("utr"),
            "status": obj.get("status"),
            "name_match_score": obj.get("name_match_score"),
            "name_match_result": obj.get("name_match_result"),
            "added_on": obj.get("added_on"),
            "processed_on": obj.get("processed_on"),
            "penny_collected_on": obj.get("penny_collected_on"),
            "reversal_status": obj.get("reversal_status"),
            "account_type": obj.get("account_type")
        })
        return _obj


