# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from cashfree_verification.models.pan_advance_response_schema_address import PanAdvanceResponseSchemaAddress

class PanAdvanceResponseSchema(BaseModel):
    """
    Success response for PAN Advance
    """
    reference_id: Optional[StrictInt] = Field(None, description="It displays the unique ID created by Cashfree Payments for reference purposes.")
    verification_id: Optional[StrictStr] = Field(None, description="It displays the unique ID you created to identify the verification request.")
    status: Optional[StrictStr] = Field(None, description="It displays the status of the PAN information.")
    message: Optional[StrictStr] = Field(None, description="It displays details about the success or failure of the API request.")
    pan: Optional[StrictStr] = Field(None, description="It displays the PAN information entered in the API request.")
    name_provided: Optional[StrictStr] = Field(None, description="It displays the name entered in the API request.")
    registered_name: Optional[StrictStr] = Field(None, description="It displays the registererd name as present in the PAN information.")
    name_pan_card: Optional[StrictStr] = Field(None, description="It displays the name as present in the PAN information.")
    type: Optional[StrictStr] = Field(None, description="It displays the type of the PAN issued.")
    gender: Optional[StrictStr] = Field(None, description="It displays the gender of the individual as present in the PAN information.")
    date_of_birth: Optional[StrictStr] = Field(None, description="It displays the date of birth of the individual.")
    masked_aadhaar_number: Optional[StrictStr] = Field(None, description="It displays the masked aadhaar number of the individual.")
    email: Optional[StrictStr] = Field(None, description="It displays the email ID of the individual.")
    mobile_number: Optional[StrictStr] = Field(None, description="It displays the mobile number of the individual.")
    aadhaar_linked: Optional[StrictBool] = Field(None, description="It displays the aadhaar and PAN link status.")
    address: Optional[PanAdvanceResponseSchemaAddress] = None
    __properties = ["reference_id", "verification_id", "status", "message", "pan", "name_provided", "registered_name", "name_pan_card", "type", "gender", "date_of_birth", "masked_aadhaar_number", "email", "mobile_number", "aadhaar_linked", "address"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PanAdvanceResponseSchema:
        """Create an instance of PanAdvanceResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> PanAdvanceResponseSchema:
        """Create an instance of PanAdvanceResponseSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "reference_id, verification_id, status, message, pan, name_provided, registered_name, name_pan_card, type, gender, date_of_birth, masked_aadhaar_number, email, mobile_number, aadhaar_linked, address" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PanAdvanceResponseSchema:
        """Create an instance of PanAdvanceResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PanAdvanceResponseSchema.parse_obj(obj)

        _obj = PanAdvanceResponseSchema.parse_obj({
            "reference_id": obj.get("reference_id"),
            "verification_id": obj.get("verification_id"),
            "status": obj.get("status"),
            "message": obj.get("message"),
            "pan": obj.get("pan"),
            "name_provided": obj.get("name_provided"),
            "registered_name": obj.get("registered_name"),
            "name_pan_card": obj.get("name_pan_card"),
            "type": obj.get("type"),
            "gender": obj.get("gender"),
            "date_of_birth": obj.get("date_of_birth"),
            "masked_aadhaar_number": obj.get("masked_aadhaar_number"),
            "email": obj.get("email"),
            "mobile_number": obj.get("mobile_number"),
            "aadhaar_linked": obj.get("aadhaar_linked"),
            "address": PanAdvanceResponseSchemaAddress.from_dict(obj.get("address")) if obj.get("address") is not None else None
        })
        return _obj


