# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class AdvanceEmploymentResponseInput(BaseModel):
    """
    It contains the information entered in the API request.
    """
    phone: Optional[StrictStr] = Field(None, description="It displays the phone number of the employee.")
    pan: Optional[StrictStr] = Field(None, description="It displays the PAN information of the employee.")
    uan: Optional[StrictStr] = Field(None, description="It displays the UAN information of the employee.")
    dob: Optional[StrictStr] = Field(None, description="It displays the date of birth of the employee.")
    employee_name: Optional[StrictStr] = Field(None, description="It displays the name of the employee.")
    employer_name: Optional[StrictStr] = Field(None, description="It displays the name of the employer.")
    __properties = ["phone", "pan", "uan", "dob", "employee_name", "employer_name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvanceEmploymentResponseInput:
        """Create an instance of AdvanceEmploymentResponseInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> AdvanceEmploymentResponseInput:
        """Create an instance of AdvanceEmploymentResponseInput from a JSON string"""
        temp_dict = json.loads(json_str)
        if "phone, pan, uan, dob, employee_name, employer_name" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvanceEmploymentResponseInput:
        """Create an instance of AdvanceEmploymentResponseInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvanceEmploymentResponseInput.parse_obj(obj)

        _obj = AdvanceEmploymentResponseInput.parse_obj({
            "phone": obj.get("phone"),
            "pan": obj.get("pan"),
            "uan": obj.get("uan"),
            "dob": obj.get("dob"),
            "employee_name": obj.get("employee_name"),
            "employer_name": obj.get("employer_name")
        })
        return _obj


