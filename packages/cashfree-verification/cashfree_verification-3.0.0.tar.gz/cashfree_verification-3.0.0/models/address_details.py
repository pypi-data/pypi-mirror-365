# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from cashfree_verification.models.address_details_split_address import AddressDetailsSplitAddress

class AddressDetails(BaseModel):
    """
    It contains the address information of the individual.
    """
    complete_address: Optional[StrictStr] = Field(None, description="It displays the complete address information of the individual.")
    type: Optional[StrictStr] = Field(None, description="It displays the type of the address information.")
    split_address: Optional[AddressDetailsSplitAddress] = None
    __properties = ["complete_address", "type", "split_address"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AddressDetails:
        """Create an instance of AddressDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> AddressDetails:
        """Create an instance of AddressDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "complete_address, type, split_address" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of split_address
        if self.split_address:
            _dict['split_address'] = self.split_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AddressDetails:
        """Create an instance of AddressDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AddressDetails.parse_obj(obj)

        _obj = AddressDetails.parse_obj({
            "complete_address": obj.get("complete_address"),
            "type": obj.get("type"),
            "split_address": AddressDetailsSplitAddress.from_dict(obj.get("split_address")) if obj.get("split_address") is not None else None
        })
        return _obj


