# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails(BaseModel):
    """
    It contains the employement details of the individual.
    """
    member_id: Optional[StrictStr] = Field(None, description="It displays the unique ID assigned to an individual.")
    establishment_id: Optional[StrictStr] = Field(None, description="It displays the unique ID assigned to a specific establishment or business entity.")
    exit_date: Optional[StrictStr] = Field(None, description="It displays the last working day of the employee in the organisation.")
    joining_date: Optional[StrictStr] = Field(None, description="It displays the first working day of the employee in the organisation.")
    leave_reason: Optional[StrictStr] = Field(None, description="It displays the reason for leaving the previous job.")
    establishment_name: Optional[StrictStr] = Field(None, description="It displays the name of the organisation.")
    employer_confidence_score: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="It displays the")
    __properties = ["member_id", "establishment_id", "exit_date", "joining_date", "leave_reason", "establishment_name", "employer_confidence_score"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails:
        """Create an instance of AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails:
        """Create an instance of AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "member_id, establishment_id, exit_date, joining_date, leave_reason, establishment_name, employer_confidence_score" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails:
        """Create an instance of AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails.parse_obj(obj)

        _obj = AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails.parse_obj({
            "member_id": obj.get("member_id"),
            "establishment_id": obj.get("establishment_id"),
            "exit_date": obj.get("exit_date"),
            "joining_date": obj.get("joining_date"),
            "leave_reason": obj.get("leave_reason"),
            "establishment_name": obj.get("establishment_name"),
            "employer_confidence_score": obj.get("employer_confidence_score")
        })
        return _obj


