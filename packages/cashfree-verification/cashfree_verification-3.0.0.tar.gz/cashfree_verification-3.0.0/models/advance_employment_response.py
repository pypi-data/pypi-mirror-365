# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from cashfree_verification.models.advance_employment_response_input import AdvanceEmploymentResponseInput
from cashfree_verification.models.advance_employment_response_recent_employment_details import AdvanceEmploymentResponseRecentEmploymentDetails
from cashfree_verification.models.advance_employment_response_uan_details_inner import AdvanceEmploymentResponseUanDetailsInner

class AdvanceEmploymentResponse(BaseModel):
    """
    Success response for Get Employment Details
    """
    verification_id: Optional[StrictStr] = Field(None, description="It displays the unique ID you created to identify the verification request.")
    reference_id: Optional[StrictInt] = Field(None, description="It displays the unique ID created by Cashfree Payments for reference purposes.")
    status: Optional[StrictStr] = Field(None, description="It displays the status of the API request.")
    input: Optional[AdvanceEmploymentResponseInput] = None
    uan_details: Optional[conlist(AdvanceEmploymentResponseUanDetailsInner)] = Field(None, description="It contains the UAN information.")
    recent_employment_details: Optional[AdvanceEmploymentResponseRecentEmploymentDetails] = None
    __properties = ["verification_id", "reference_id", "status", "input", "uan_details", "recent_employment_details"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvanceEmploymentResponse:
        """Create an instance of AdvanceEmploymentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> AdvanceEmploymentResponse:
        """Create an instance of AdvanceEmploymentResponse from a JSON string"""
        temp_dict = json.loads(json_str)
        if "verification_id, reference_id, status, input, uan_details, recent_employment_details" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in uan_details (list)
        _items = []
        if self.uan_details:
            for _item in self.uan_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['uan_details'] = _items
        # override the default output from pydantic by calling `to_dict()` of recent_employment_details
        if self.recent_employment_details:
            _dict['recent_employment_details'] = self.recent_employment_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvanceEmploymentResponse:
        """Create an instance of AdvanceEmploymentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvanceEmploymentResponse.parse_obj(obj)

        _obj = AdvanceEmploymentResponse.parse_obj({
            "verification_id": obj.get("verification_id"),
            "reference_id": obj.get("reference_id"),
            "status": obj.get("status"),
            "input": AdvanceEmploymentResponseInput.from_dict(obj.get("input")) if obj.get("input") is not None else None,
            "uan_details": [AdvanceEmploymentResponseUanDetailsInner.from_dict(_item) for _item in obj.get("uan_details")] if obj.get("uan_details") is not None else None,
            "recent_employment_details": AdvanceEmploymentResponseRecentEmploymentDetails.from_dict(obj.get("recent_employment_details")) if obj.get("recent_employment_details") is not None else None
        })
        return _obj


