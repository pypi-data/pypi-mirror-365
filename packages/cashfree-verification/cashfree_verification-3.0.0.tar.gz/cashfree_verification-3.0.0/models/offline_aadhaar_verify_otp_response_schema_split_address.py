# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class OfflineAadhaarVerifyOtpResponseSchemaSplitAddress(BaseModel):
    """
    It contains the address information in individual components.
    """
    country: Optional[StrictStr] = Field(None, description="It displays the name of the country as present in the aadhaar card.")
    dist: Optional[StrictStr] = Field(None, description="It displays the name of the district as present in the aadhaar card.")
    house: Optional[StrictStr] = Field(None, description="It displays the house name/number as present in the aadhaar card.")
    landmark: Optional[StrictStr] = Field(None, description="It displays the name of the landmark as present in the aadhaar card.")
    pincode: Optional[StrictStr] = Field(None, description="It displays the PIN code information as present in the aadhaar card.")
    po: Optional[StrictStr] = Field(None, description="It displays the post office nearest to the address present.")
    state: Optional[StrictStr] = Field(None, description="It displays the name of the state as present in the aadhaar card.")
    street: Optional[StrictStr] = Field(None, description="It displays the name of the street as present in the aadhaar card.")
    subdist: Optional[StrictStr] = Field(None, description="It displays the name of the sub district as present in the aadhaar card.")
    vtc: Optional[StrictStr] = Field(None, description="It displays the village, town, city information as present in the aadhaar card.")
    __properties = ["country", "dist", "house", "landmark", "pincode", "po", "state", "street", "subdist", "vtc"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OfflineAadhaarVerifyOtpResponseSchemaSplitAddress:
        """Create an instance of OfflineAadhaarVerifyOtpResponseSchemaSplitAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> OfflineAadhaarVerifyOtpResponseSchemaSplitAddress:
        """Create an instance of OfflineAadhaarVerifyOtpResponseSchemaSplitAddress from a JSON string"""
        temp_dict = json.loads(json_str)
        if "country, dist, house, landmark, pincode, po, state, street, subdist, vtc" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OfflineAadhaarVerifyOtpResponseSchemaSplitAddress:
        """Create an instance of OfflineAadhaarVerifyOtpResponseSchemaSplitAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OfflineAadhaarVerifyOtpResponseSchemaSplitAddress.parse_obj(obj)

        _obj = OfflineAadhaarVerifyOtpResponseSchemaSplitAddress.parse_obj({
            "country": obj.get("country"),
            "dist": obj.get("dist"),
            "house": obj.get("house"),
            "landmark": obj.get("landmark"),
            "pincode": obj.get("pincode"),
            "po": obj.get("po"),
            "state": obj.get("state"),
            "street": obj.get("street"),
            "subdist": obj.get("subdist"),
            "vtc": obj.get("vtc")
        })
        return _obj


