# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class BadgeDetails(BaseModel):
    """
    It contains information regarding any badges or emblems affixed to the vehicle. These badges could indicate various things such as the vehicle's model, trim level, special editions, or manufacturer-specific badges.
    """
    badge_issue_date: Optional[StrictStr] = Field(None, description="It displays the date of the badge issued.")
    badge_no: Optional[StrictStr] = Field(None, description="It displays the number of the badge issued.")
    class_of_vehicle: Optional[conlist(StrictStr)] = Field(None, description="It displays the class of the vehicle.")
    __properties = ["badge_issue_date", "badge_no", "class_of_vehicle"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BadgeDetails:
        """Create an instance of BadgeDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> BadgeDetails:
        """Create an instance of BadgeDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "badge_issue_date, badge_no, class_of_vehicle" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BadgeDetails:
        """Create an instance of BadgeDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BadgeDetails.parse_obj(obj)

        _obj = BadgeDetails.parse_obj({
            "badge_issue_date": obj.get("badge_issue_date"),
            "badge_no": obj.get("badge_no"),
            "class_of_vehicle": obj.get("class_of_vehicle")
        })
        return _obj


