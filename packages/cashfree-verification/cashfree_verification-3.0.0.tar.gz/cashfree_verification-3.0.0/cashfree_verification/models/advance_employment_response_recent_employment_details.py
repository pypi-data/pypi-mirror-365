# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from cashfree_verification.models.advance_employment_response_recent_employment_details_employee_details import AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails
from cashfree_verification.models.advance_employment_response_recent_employment_details_employer_details import AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails

class AdvanceEmploymentResponseRecentEmploymentDetails(BaseModel):
    """
    It contains the employment details of the individual.
    """
    employee_details: Optional[AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails] = None
    employer_details: Optional[AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails] = None
    __properties = ["employee_details", "employer_details"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvanceEmploymentResponseRecentEmploymentDetails:
        """Create an instance of AdvanceEmploymentResponseRecentEmploymentDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> AdvanceEmploymentResponseRecentEmploymentDetails:
        """Create an instance of AdvanceEmploymentResponseRecentEmploymentDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "employee_details, employer_details" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of employee_details
        if self.employee_details:
            _dict['employee_details'] = self.employee_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employer_details
        if self.employer_details:
            _dict['employer_details'] = self.employer_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvanceEmploymentResponseRecentEmploymentDetails:
        """Create an instance of AdvanceEmploymentResponseRecentEmploymentDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvanceEmploymentResponseRecentEmploymentDetails.parse_obj(obj)

        _obj = AdvanceEmploymentResponseRecentEmploymentDetails.parse_obj({
            "employee_details": AdvanceEmploymentResponseRecentEmploymentDetailsEmployeeDetails.from_dict(obj.get("employee_details")) if obj.get("employee_details") is not None else None,
            "employer_details": AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails.from_dict(obj.get("employer_details")) if obj.get("employer_details") is not None else None
        })
        return _obj


