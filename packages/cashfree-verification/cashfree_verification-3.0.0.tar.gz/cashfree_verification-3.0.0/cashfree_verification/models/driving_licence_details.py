# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictStr, conlist
from cashfree_verification.models.address_details import AddressDetails
from cashfree_verification.models.driving_licence_details_split_address import DrivingLicenceDetailsSplitAddress

class DrivingLicenceDetails(BaseModel):
    """
    It contains the details of the driving licence.
    """
    date_of_issue: Optional[date] = None
    date_of_last_transaction: Optional[date] = None
    status: Optional[StrictStr] = None
    last_transacted_at: Optional[date] = None
    name: Optional[StrictStr] = None
    father_or_husband_name: Optional[StrictStr] = None
    address_list: Optional[conlist(AddressDetails)] = None
    address: Optional[StrictStr] = None
    split_address: Optional[DrivingLicenceDetailsSplitAddress] = None
    cov_details: Optional[conlist(Dict[str, Any])] = None
    __properties = ["date_of_issue", "date_of_last_transaction", "status", "last_transacted_at", "name", "father_or_husband_name", "address_list", "address", "split_address", "cov_details"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DrivingLicenceDetails:
        """Create an instance of DrivingLicenceDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> DrivingLicenceDetails:
        """Create an instance of DrivingLicenceDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "date_of_issue, date_of_last_transaction, status, last_transacted_at, name, father_or_husband_name, address_list, address, split_address, cov_details" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in address_list (list)
        _items = []
        if self.address_list:
            for _item in self.address_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['address_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of split_address
        if self.split_address:
            _dict['split_address'] = self.split_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DrivingLicenceDetails:
        """Create an instance of DrivingLicenceDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DrivingLicenceDetails.parse_obj(obj)

        _obj = DrivingLicenceDetails.parse_obj({
            "date_of_issue": obj.get("date_of_issue"),
            "date_of_last_transaction": obj.get("date_of_last_transaction"),
            "status": obj.get("status"),
            "last_transacted_at": obj.get("last_transacted_at"),
            "name": obj.get("name"),
            "father_or_husband_name": obj.get("father_or_husband_name"),
            "address_list": [AddressDetails.from_dict(_item) for _item in obj.get("address_list")] if obj.get("address_list") is not None else None,
            "address": obj.get("address"),
            "split_address": DrivingLicenceDetailsSplitAddress.from_dict(obj.get("split_address")) if obj.get("split_address") is not None else None,
            "cov_details": obj.get("cov_details")
        })
        return _obj


