# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from cashfree_verification.models.face_liveness200_response_schema_age_range import FaceLiveness200ResponseSchemaAgeRange
from cashfree_verification.models.face_liveness200_response_schema_eye_wear import FaceLiveness200ResponseSchemaEyeWear
from cashfree_verification.models.face_liveness200_response_schema_eyes_open import FaceLiveness200ResponseSchemaEyesOpen
from cashfree_verification.models.face_liveness200_response_schema_face_occluded import FaceLiveness200ResponseSchemaFaceOccluded
from cashfree_verification.models.face_liveness200_response_schema_gender import FaceLiveness200ResponseSchemaGender
from cashfree_verification.models.face_liveness200_response_schema_pose import FaceLiveness200ResponseSchemaPose
from cashfree_verification.models.face_liveness200_response_schema_quality import FaceLiveness200ResponseSchemaQuality

class FaceLiveness200ResponseSchema(BaseModel):
    """
    FaceLiveness200ResponseSchema
    """
    reference_id: Optional[StrictInt] = Field(None, description="Unique reference ID generated by Cashfree.")
    verification_id: Optional[StrictStr] = Field(None, description="It displays the unique ID you created to identify this API request.")
    status: Optional[StrictStr] = Field(None, description="The status of the face liveness verification request.  Possible values: - SUCCESS: Face verification completed successfully - REAL_FACE_NOT_DETECTED: The submitted image does not contain a real face - MULTIPLE_FACES_DETECTED: More than one face detected in the image - FACE_NOT_DETECTED: No face detected in the submitted image ")
    liveness: Optional[StrictBool] = Field(None, description="Indicates whether the detected face exhibits signs of being from a live person.")
    liveness_score: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="A confidence score between 0 and 1 indicating the probability that the face is from a live person.")
    gender: Optional[FaceLiveness200ResponseSchemaGender] = None
    age_range: Optional[FaceLiveness200ResponseSchemaAgeRange] = None
    eye_wear: Optional[FaceLiveness200ResponseSchemaEyeWear] = None
    face_occluded: Optional[FaceLiveness200ResponseSchemaFaceOccluded] = None
    quality: Optional[FaceLiveness200ResponseSchemaQuality] = None
    pose: Optional[FaceLiveness200ResponseSchemaPose] = None
    eyes_open: Optional[FaceLiveness200ResponseSchemaEyesOpen] = None
    __properties = ["reference_id", "verification_id", "status", "liveness", "liveness_score", "gender", "age_range", "eye_wear", "face_occluded", "quality", "pose", "eyes_open"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FaceLiveness200ResponseSchema:
        """Create an instance of FaceLiveness200ResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> FaceLiveness200ResponseSchema:
        """Create an instance of FaceLiveness200ResponseSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "reference_id, verification_id, status, liveness, liveness_score, gender, age_range, eye_wear, face_occluded, quality, pose, eyes_open" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gender
        if self.gender:
            _dict['gender'] = self.gender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of age_range
        if self.age_range:
            _dict['age_range'] = self.age_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eye_wear
        if self.eye_wear:
            _dict['eye_wear'] = self.eye_wear.to_dict()
        # override the default output from pydantic by calling `to_dict()` of face_occluded
        if self.face_occluded:
            _dict['face_occluded'] = self.face_occluded.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quality
        if self.quality:
            _dict['quality'] = self.quality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pose
        if self.pose:
            _dict['pose'] = self.pose.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eyes_open
        if self.eyes_open:
            _dict['eyes_open'] = self.eyes_open.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FaceLiveness200ResponseSchema:
        """Create an instance of FaceLiveness200ResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FaceLiveness200ResponseSchema.parse_obj(obj)

        _obj = FaceLiveness200ResponseSchema.parse_obj({
            "reference_id": obj.get("reference_id"),
            "verification_id": obj.get("verification_id"),
            "status": obj.get("status"),
            "liveness": obj.get("liveness"),
            "liveness_score": obj.get("liveness_score"),
            "gender": FaceLiveness200ResponseSchemaGender.from_dict(obj.get("gender")) if obj.get("gender") is not None else None,
            "age_range": FaceLiveness200ResponseSchemaAgeRange.from_dict(obj.get("age_range")) if obj.get("age_range") is not None else None,
            "eye_wear": FaceLiveness200ResponseSchemaEyeWear.from_dict(obj.get("eye_wear")) if obj.get("eye_wear") is not None else None,
            "face_occluded": FaceLiveness200ResponseSchemaFaceOccluded.from_dict(obj.get("face_occluded")) if obj.get("face_occluded") is not None else None,
            "quality": FaceLiveness200ResponseSchemaQuality.from_dict(obj.get("quality")) if obj.get("quality") is not None else None,
            "pose": FaceLiveness200ResponseSchemaPose.from_dict(obj.get("pose")) if obj.get("pose") is not None else None,
            "eyes_open": FaceLiveness200ResponseSchemaEyesOpen.from_dict(obj.get("eyes_open")) if obj.get("eyes_open") is not None else None
        })
        return _obj


