# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class PanOcrResponseSchema(BaseModel):
    """
    PAN Verification via OCR success response
    """
    name: Optional[StrictStr] = Field(None, description="It displays the name of the PAN holder.")
    organization_name: Optional[StrictStr] = Field(None, description="It displays the name of the organisation the individual runs.")
    pan_type: Optional[StrictStr] = Field(None, description="It displays the type of PAN issued to the individual.")
    date_of_incorporation: Optional[StrictStr] = Field(None, description="It displays the incorporation date of the individual's organisation.")
    dob: Optional[StrictStr] = Field(None, description="It displays the date of birth of the individual.")
    father: Optional[StrictStr] = Field(None, description="It displays the father's name of the individual.")
    pan: Optional[StrictStr] = Field(None, description="It displays the entered PAN information in the request.")
    valid: Optional[StrictBool] = Field(None, description="It displays whethere the entered PAN information is valid.")
    age: Optional[StrictStr] = Field(None, description="It displays the age of the individual.")
    status: Optional[StrictStr] = Field(None, description="It displays the status of the PAN information.")
    reference_id: Optional[StrictStr] = Field(None, description="It displays the unique ID created by Cashfree Payments for reference purposes.")
    verification_id: Optional[StrictStr] = Field(None, description="It displays the unique ID you created to identify the request.")
    confidence_score: Optional[StrictStr] = Field(None, description="It displays the level of confidence or reliability associated with the PAN verification.")
    message: Optional[StrictStr] = Field(None, description="It displays details about the success or failure of the API request.")
    __properties = ["name", "organization_name", "pan_type", "date_of_incorporation", "dob", "father", "pan", "valid", "age", "status", "reference_id", "verification_id", "confidence_score", "message"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PanOcrResponseSchema:
        """Create an instance of PanOcrResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> PanOcrResponseSchema:
        """Create an instance of PanOcrResponseSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "name, organization_name, pan_type, date_of_incorporation, dob, father, pan, valid, age, status, reference_id, verification_id, confidence_score, message" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PanOcrResponseSchema:
        """Create an instance of PanOcrResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PanOcrResponseSchema.parse_obj(obj)

        _obj = PanOcrResponseSchema.parse_obj({
            "name": obj.get("name"),
            "organization_name": obj.get("organization_name"),
            "pan_type": obj.get("pan_type"),
            "date_of_incorporation": obj.get("date_of_incorporation"),
            "dob": obj.get("dob"),
            "father": obj.get("father"),
            "pan": obj.get("pan"),
            "valid": obj.get("valid"),
            "age": obj.get("age"),
            "status": obj.get("status"),
            "reference_id": obj.get("reference_id"),
            "verification_id": obj.get("verification_id"),
            "confidence_score": obj.get("confidence_score"),
            "message": obj.get("message")
        })
        return _obj


