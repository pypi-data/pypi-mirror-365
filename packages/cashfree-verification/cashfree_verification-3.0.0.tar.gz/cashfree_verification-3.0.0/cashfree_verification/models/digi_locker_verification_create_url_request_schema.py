# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator

class DigiLockerVerificationCreateUrlRequestSchema(BaseModel):
    """
    Find the request parameters to create a DigiLocker URL for document verification
    """
    verification_id: StrictStr = Field(..., description="It is the unique ID you create to identify the API request. The maximum character limit is 50. Alphanumeric, period (.), hyphen (-). and underscore ( _ ) are allowed.")
    document_requested: conlist(StrictStr) = Field(..., description="It is the list of customer documents required for verification.")
    redirect_url: Optional[StrictStr] = Field('https://www.cashfree.com', description="It is the URL that you need to provide that takes the user to after completing the DigiLocker journey. It will contain the verification_id that can be used to get the status of the verification.")
    __properties = ["verification_id", "document_requested", "redirect_url"]

    @validator('document_requested')
    def document_requested_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('AADHAAR'):
                raise ValueError("each list item must be one of ('AADHAAR')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DigiLockerVerificationCreateUrlRequestSchema:
        """Create an instance of DigiLockerVerificationCreateUrlRequestSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> DigiLockerVerificationCreateUrlRequestSchema:
        """Create an instance of DigiLockerVerificationCreateUrlRequestSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "verification_id, document_requested, redirect_url" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DigiLockerVerificationCreateUrlRequestSchema:
        """Create an instance of DigiLockerVerificationCreateUrlRequestSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DigiLockerVerificationCreateUrlRequestSchema.parse_obj(obj)

        _obj = DigiLockerVerificationCreateUrlRequestSchema.parse_obj({
            "verification_id": obj.get("verification_id") if obj.get("verification_id") is not None else 'ABC00123',
            "document_requested": obj.get("document_requested"),
            "redirect_url": obj.get("redirect_url") if obj.get("redirect_url") is not None else 'https://www.cashfree.com'
        })
        return _obj


