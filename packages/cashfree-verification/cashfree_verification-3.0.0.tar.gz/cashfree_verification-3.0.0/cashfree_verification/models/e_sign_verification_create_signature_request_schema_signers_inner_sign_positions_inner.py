# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt

class ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner(BaseModel):
    """
    ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner
    """
    page: StrictInt = Field(..., description="It is the page number where the signer places the signature.")
    top_left_x_coordinate: StrictInt = Field(..., description="It is the top left X coordinate of the signature area (rectangular).")
    bottom_right_x_coordinate: StrictInt = Field(..., description="It is the bottom right X coordinate of the signature area (rectangular).")
    top_left_y_coordinate: StrictInt = Field(..., description="It is the top left Y coordinate of the signature area (rectangular).")
    bottom_right_y_coordinate: StrictInt = Field(..., description="It is the bottom right Y coordinate of the signature area (rectangular).")
    __properties = ["page", "top_left_x_coordinate", "bottom_right_x_coordinate", "top_left_y_coordinate", "bottom_right_y_coordinate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner:
        """Create an instance of ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner:
        """Create an instance of ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner from a JSON string"""
        temp_dict = json.loads(json_str)
        if "page, top_left_x_coordinate, bottom_right_x_coordinate, top_left_y_coordinate, bottom_right_y_coordinate" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner:
        """Create an instance of ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.parse_obj(obj)

        _obj = ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.parse_obj({
            "page": obj.get("page") if obj.get("page") is not None else 1,
            "top_left_x_coordinate": obj.get("top_left_x_coordinate") if obj.get("top_left_x_coordinate") is not None else 100,
            "bottom_right_x_coordinate": obj.get("bottom_right_x_coordinate") if obj.get("bottom_right_x_coordinate") is not None else 200,
            "top_left_y_coordinate": obj.get("top_left_y_coordinate") if obj.get("top_left_y_coordinate") is not None else 180,
            "bottom_right_y_coordinate": obj.get("bottom_right_y_coordinate") if obj.get("bottom_right_y_coordinate") is not None else 120
        })
        return _obj


