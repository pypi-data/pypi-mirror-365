# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class AdvanceEmploymentResponseUanDetailsInnerBasicDetails(BaseModel):
    """
    It displays the basic information of the employee.
    """
    gender: Optional[StrictStr] = Field(None, description="It displays the gender of the employee.")
    dob: Optional[StrictStr] = Field(None, description="It displays the date of birth of the employee.")
    employee_confidence_score: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="It displays the confidence score for the employee.")
    employee_name: Optional[StrictStr] = Field(None, description="It displays the name of the employee.")
    phone: Optional[StrictStr] = Field(None, description="It displays the phone number of the employee.")
    aadhaar_verified: Optional[StrictBool] = Field(None, description="It displays where the aadhaar information of the employee is verified.")
    __properties = ["gender", "dob", "employee_confidence_score", "employee_name", "phone", "aadhaar_verified"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvanceEmploymentResponseUanDetailsInnerBasicDetails:
        """Create an instance of AdvanceEmploymentResponseUanDetailsInnerBasicDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> AdvanceEmploymentResponseUanDetailsInnerBasicDetails:
        """Create an instance of AdvanceEmploymentResponseUanDetailsInnerBasicDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "gender, dob, employee_confidence_score, employee_name, phone, aadhaar_verified" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvanceEmploymentResponseUanDetailsInnerBasicDetails:
        """Create an instance of AdvanceEmploymentResponseUanDetailsInnerBasicDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvanceEmploymentResponseUanDetailsInnerBasicDetails.parse_obj(obj)

        _obj = AdvanceEmploymentResponseUanDetailsInnerBasicDetails.parse_obj({
            "gender": obj.get("gender"),
            "dob": obj.get("dob"),
            "employee_confidence_score": obj.get("employee_confidence_score"),
            "employee_name": obj.get("employee_name"),
            "phone": obj.get("phone"),
            "aadhaar_verified": obj.get("aadhaar_verified")
        })
        return _obj


