# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from cashfree_verification.models.advance_employment_response_uan_details_inner_additional_details import AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails
from cashfree_verification.models.advance_employment_response_uan_details_inner_basic_details import AdvanceEmploymentResponseUanDetailsInnerBasicDetails
from cashfree_verification.models.advance_employment_response_uan_details_inner_employment_details import AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails

class AdvanceEmploymentResponseUanDetailsInner(BaseModel):
    """
    It contains the information in individual components.
    """
    uan: Optional[StrictStr] = Field(None, description="It displays the Universal Account Number (UAN) information of the employee.")
    source: Optional[StrictStr] = Field(None, description="It displays the")
    source_score: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="It displays the")
    basic_details: Optional[AdvanceEmploymentResponseUanDetailsInnerBasicDetails] = None
    employment_details: Optional[AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails] = None
    additional_details: Optional[AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails] = None
    __properties = ["uan", "source", "source_score", "basic_details", "employment_details", "additional_details"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvanceEmploymentResponseUanDetailsInner:
        """Create an instance of AdvanceEmploymentResponseUanDetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> AdvanceEmploymentResponseUanDetailsInner:
        """Create an instance of AdvanceEmploymentResponseUanDetailsInner from a JSON string"""
        temp_dict = json.loads(json_str)
        if "uan, source, source_score, basic_details, employment_details, additional_details" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of basic_details
        if self.basic_details:
            _dict['basic_details'] = self.basic_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employment_details
        if self.employment_details:
            _dict['employment_details'] = self.employment_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_details
        if self.additional_details:
            _dict['additional_details'] = self.additional_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvanceEmploymentResponseUanDetailsInner:
        """Create an instance of AdvanceEmploymentResponseUanDetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvanceEmploymentResponseUanDetailsInner.parse_obj(obj)

        _obj = AdvanceEmploymentResponseUanDetailsInner.parse_obj({
            "uan": obj.get("uan"),
            "source": obj.get("source"),
            "source_score": obj.get("source_score"),
            "basic_details": AdvanceEmploymentResponseUanDetailsInnerBasicDetails.from_dict(obj.get("basic_details")) if obj.get("basic_details") is not None else None,
            "employment_details": AdvanceEmploymentResponseUanDetailsInnerEmploymentDetails.from_dict(obj.get("employment_details")) if obj.get("employment_details") is not None else None,
            "additional_details": AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails.from_dict(obj.get("additional_details")) if obj.get("additional_details") is not None else None
        })
        return _obj


