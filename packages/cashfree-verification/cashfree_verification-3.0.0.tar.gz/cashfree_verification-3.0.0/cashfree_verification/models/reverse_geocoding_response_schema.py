# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class ReverseGeocodingResponseSchema(BaseModel):
    """
    Reverse Geocoding success response
    """
    reference_id: Optional[StrictInt] = Field(None, description="It displays the unique ID created by Cashfree Payments for reference purposes.")
    verification_id: Optional[StrictStr] = Field(None, description="It displays the unique ID you created to identify the verification request.")
    latitude: Optional[StrictStr] = Field(None, description="It displays the entered angular distance expressed in degrees of arc north or south of the equator to specify the location.")
    longitude: Optional[StrictStr] = Field(None, description="It displays the entered angular distance expressed in degrees of arc east or west of the equator to specify the location.")
    address: Optional[StrictStr] = Field(None, description="It displays the physical address of the entered coordinates.")
    city: Optional[StrictStr] = Field(None, description="It displays the name of the city of the entered coordinates.")
    state: Optional[StrictStr] = Field(None, description="It displays the name of the state of the entered coordinates.")
    statecode: Optional[StrictStr] = Field(None, description="It displays the state's code of the entered coordinates.")
    countrycode: Optional[StrictStr] = Field(None, description="It displays the country's code of the entered coordinates.")
    pincode: Optional[StrictStr] = Field(None, description="It displays the PIN code information of the entered coordinates.")
    score: Optional[Union[StrictFloat, StrictInt]] = None
    status: Optional[StrictStr] = Field(None, description="It displays the status of the entered coordinates.")
    __properties = ["reference_id", "verification_id", "latitude", "longitude", "address", "city", "state", "statecode", "countrycode", "pincode", "score", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReverseGeocodingResponseSchema:
        """Create an instance of ReverseGeocodingResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> ReverseGeocodingResponseSchema:
        """Create an instance of ReverseGeocodingResponseSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "reference_id, verification_id, latitude, longitude, address, city, state, statecode, countrycode, pincode, score, status" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReverseGeocodingResponseSchema:
        """Create an instance of ReverseGeocodingResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReverseGeocodingResponseSchema.parse_obj(obj)

        _obj = ReverseGeocodingResponseSchema.parse_obj({
            "reference_id": obj.get("reference_id"),
            "verification_id": obj.get("verification_id"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "address": obj.get("address"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "statecode": obj.get("statecode"),
            "countrycode": obj.get("countrycode"),
            "pincode": obj.get("pincode"),
            "score": obj.get("score"),
            "status": obj.get("status")
        })
        return _obj


