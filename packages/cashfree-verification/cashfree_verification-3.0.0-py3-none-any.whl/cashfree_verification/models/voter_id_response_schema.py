# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from cashfree_verification.models.split_address_schema import SplitAddressSchema

class VoterIdResponseSchema(BaseModel):
    """
    Verify Voter ID success response
    """
    reference_id: Optional[StrictInt] = Field(None, description="It displays the unique ID created by Cashfree Payments for reference purposes.")
    verification_id: Optional[StrictStr] = Field(None, description="It displays the unique ID you created to identify the verification request.")
    status: Optional[StrictStr] = Field(None, description="It displays the status of the API request.")
    name: Optional[StrictStr] = Field(None, description="It displays the name of the individual as present in the voter ID card.")
    name_in_regional_lang: Optional[StrictStr] = Field(None, description="It displays the name of the individual in the individual’s regional language as present in the voter ID card.")
    age: Optional[StrictStr] = Field(None, description="It displays the age of the voter ID holder as present in the voter ID card")
    relation_type: Optional[StrictStr] = Field(None, description="It displays the type of the relationship with the parent/guardian as present in the voter ID card.")
    relation_name: Optional[StrictStr] = Field(None, description="It displays the name of the parent/guardian as present in the voter ID card.")
    relation_name_in_regional_lang: Optional[StrictStr] = Field(None, description="It displays the name of the parent/guardian in the individual’s regional language as present in the voter ID card.")
    father_name: Optional[StrictStr] = Field(None, description="It displays the father’s name of the individual as present in the voter ID card.")
    dob: Optional[StrictStr] = Field(None, description="It displays the date of birth of the individual as present in the voter ID card.")
    gender: Optional[StrictStr] = Field(None, description="It displays the gender of the individual as present in the voter ID card.")
    address: Optional[StrictStr] = Field(None, description="It displays the address information of the individual as present in the voter ID card.")
    split_address: Optional[SplitAddressSchema] = None
    epic_number: Optional[StrictStr] = Field(None, description="It displays the EPIC number of the individual as present in the voter ID card.")
    state: Optional[StrictStr] = Field(None, description="It displays the name of the state as present in the voter ID card.")
    assembly_constituency_number: Optional[StrictStr] = Field(None, description="It displays the number associated with the assembly constituency as present in the voter ID card.")
    assembly_constituency: Optional[StrictStr] = Field(None, description="It displays the name of the assembly constituency as present in the voter ID card.")
    parliamentary_constituency_number: Optional[StrictStr] = Field(None, description="It displays the number associated with the parliamentary constituency as present in the voter ID card.")
    parliamentary_constituency: Optional[StrictStr] = Field(None, description="It displays the name of the parliamentary constituency as present in the voter ID card.")
    part_number: Optional[StrictStr] = Field(None, description="It displays the part number in the electoral roll.")
    part_name: Optional[StrictStr] = Field(None, description="It displays the part name in the electoral roll.")
    serial_number: Optional[StrictStr] = Field(None, description="It displays the serial number as present in the voter ID card.")
    polling_station: Optional[StrictStr] = Field(None, description="It displays the place where the individual cast votes during elections.")
    __properties = ["reference_id", "verification_id", "status", "name", "name_in_regional_lang", "age", "relation_type", "relation_name", "relation_name_in_regional_lang", "father_name", "dob", "gender", "address", "split_address", "epic_number", "state", "assembly_constituency_number", "assembly_constituency", "parliamentary_constituency_number", "parliamentary_constituency", "part_number", "part_name", "serial_number", "polling_station"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VoterIdResponseSchema:
        """Create an instance of VoterIdResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> VoterIdResponseSchema:
        """Create an instance of VoterIdResponseSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "reference_id, verification_id, status, name, name_in_regional_lang, age, relation_type, relation_name, relation_name_in_regional_lang, father_name, dob, gender, address, split_address, epic_number, state, assembly_constituency_number, assembly_constituency, parliamentary_constituency_number, parliamentary_constituency, part_number, part_name, serial_number, polling_station" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of split_address
        if self.split_address:
            _dict['split_address'] = self.split_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VoterIdResponseSchema:
        """Create an instance of VoterIdResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VoterIdResponseSchema.parse_obj(obj)

        _obj = VoterIdResponseSchema.parse_obj({
            "reference_id": obj.get("reference_id"),
            "verification_id": obj.get("verification_id"),
            "status": obj.get("status"),
            "name": obj.get("name"),
            "name_in_regional_lang": obj.get("name_in_regional_lang"),
            "age": obj.get("age"),
            "relation_type": obj.get("relation_type"),
            "relation_name": obj.get("relation_name"),
            "relation_name_in_regional_lang": obj.get("relation_name_in_regional_lang"),
            "father_name": obj.get("father_name"),
            "dob": obj.get("dob"),
            "gender": obj.get("gender"),
            "address": obj.get("address"),
            "split_address": SplitAddressSchema.from_dict(obj.get("split_address")) if obj.get("split_address") is not None else None,
            "epic_number": obj.get("epic_number"),
            "state": obj.get("state"),
            "assembly_constituency_number": obj.get("assembly_constituency_number"),
            "assembly_constituency": obj.get("assembly_constituency"),
            "parliamentary_constituency_number": obj.get("parliamentary_constituency_number"),
            "parliamentary_constituency": obj.get("parliamentary_constituency"),
            "part_number": obj.get("part_number"),
            "part_name": obj.get("part_name"),
            "serial_number": obj.get("serial_number"),
            "polling_station": obj.get("polling_station")
        })
        return _obj


