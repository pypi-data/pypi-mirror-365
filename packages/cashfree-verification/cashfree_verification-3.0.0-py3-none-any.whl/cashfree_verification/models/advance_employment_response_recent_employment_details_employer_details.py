# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from cashfree_verification.models.advance_employment_response_recent_employment_details_employer_details_pf_filing_details_inner import AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetailsPfFilingDetailsInner

class AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails(BaseModel):
    """
    AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails
    """
    establishment_id: Optional[StrictStr] = None
    establishment_name: Optional[StrictStr] = None
    setup_date: Optional[StrictStr] = None
    ownership_type: Optional[StrictStr] = None
    employer_confidence_score: Optional[Union[StrictFloat, StrictInt]] = None
    employer_name_match: Optional[StrictBool] = None
    pf_filing_details: Optional[conlist(AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetailsPfFilingDetailsInner)] = None
    __properties = ["establishment_id", "establishment_name", "setup_date", "ownership_type", "employer_confidence_score", "employer_name_match", "pf_filing_details"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails:
        """Create an instance of AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails:
        """Create an instance of AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "establishment_id, establishment_name, setup_date, ownership_type, employer_confidence_score, employer_name_match, pf_filing_details" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in pf_filing_details (list)
        _items = []
        if self.pf_filing_details:
            for _item in self.pf_filing_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pf_filing_details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails:
        """Create an instance of AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails.parse_obj(obj)

        _obj = AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetails.parse_obj({
            "establishment_id": obj.get("establishment_id"),
            "establishment_name": obj.get("establishment_name"),
            "setup_date": obj.get("setup_date"),
            "ownership_type": obj.get("ownership_type"),
            "employer_confidence_score": obj.get("employer_confidence_score"),
            "employer_name_match": obj.get("employer_name_match"),
            "pf_filing_details": [AdvanceEmploymentResponseRecentEmploymentDetailsEmployerDetailsPfFilingDetailsInner.from_dict(_item) for _item in obj.get("pf_filing_details")] if obj.get("pf_filing_details") is not None else None
        })
        return _obj


