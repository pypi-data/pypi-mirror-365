# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from cashfree_verification.models.digi_locker_verification_get_status_response_schema_user_details import DigiLockerVerificationGetStatusResponseSchemaUserDetails

class DigiLockerVerificationGetStatusResponseSchema(BaseModel):
    """
    Success response of Get DigiLocker Verification Status
    """
    user_details: Optional[DigiLockerVerificationGetStatusResponseSchemaUserDetails] = None
    status: Optional[StrictStr] = Field(None, description="It displays the status of the API request.")
    document_requested: Optional[conlist(StrictStr)] = Field(None, description="It contains the information of the requested document(s) for verification.")
    document_consent: Optional[conlist(StrictStr)] = Field(None, description="It displays the consent of the individual(user) for document verification.")
    verification_id: Optional[StrictStr] = Field(None, description="It displays the unique ID you created to identify the verification request.")
    reference_id: Optional[StrictInt] = Field(None, description="It displays the unique ID created by Cashfree Payments for reference purposes.")
    __properties = ["user_details", "status", "document_requested", "document_consent", "verification_id", "reference_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DigiLockerVerificationGetStatusResponseSchema:
        """Create an instance of DigiLockerVerificationGetStatusResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> DigiLockerVerificationGetStatusResponseSchema:
        """Create an instance of DigiLockerVerificationGetStatusResponseSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "user_details, status, document_requested, document_consent, verification_id, reference_id" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user_details
        if self.user_details:
            _dict['user_details'] = self.user_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DigiLockerVerificationGetStatusResponseSchema:
        """Create an instance of DigiLockerVerificationGetStatusResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DigiLockerVerificationGetStatusResponseSchema.parse_obj(obj)

        _obj = DigiLockerVerificationGetStatusResponseSchema.parse_obj({
            "user_details": DigiLockerVerificationGetStatusResponseSchemaUserDetails.from_dict(obj.get("user_details")) if obj.get("user_details") is not None else None,
            "status": obj.get("status"),
            "document_requested": obj.get("document_requested"),
            "document_consent": obj.get("document_consent"),
            "verification_id": obj.get("verification_id"),
            "reference_id": obj.get("reference_id")
        })
        return _obj


