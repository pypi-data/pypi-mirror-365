# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from cashfree_verification.models.e_sign_verification_create_signature_request_schema_signers_inner import ESignVerificationCreateSignatureRequestSchemaSignersInner

class ESignVerificationCreateSignatureRequestSchema(BaseModel):
    """
    Find the request parameters to add the details of the document and signer(s)
    """
    verification_id: StrictStr = Field(..., description="It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.")
    document_id: StrictInt = Field(..., description="It is the unique ID received in the Upload Document for E-Sign API response.")
    notification_modes: conlist(StrictStr) = Field(..., description="It is how you want to notify the signee about the e-sign details.")
    auth_type: StrictStr = Field(..., description="It is the type of authentication to be used for signature.")
    expiry_in_days: StrictStr = Field(..., description="It is the expiry of the signing link for each signer in days. The maximum allowed time is 15 days.")
    signers: conlist(ESignVerificationCreateSignatureRequestSchemaSignersInner) = Field(..., description="It should contain the details of the signer(s).")
    redirect_url: Optional[StrictStr] = Field('REDIRECT_PAGE_URL', description="It is the URL that you need to provide that takes the user to after completing the e-sign journey. It will contain the verification_id that can be used to get the status of the verification.")
    __properties = ["verification_id", "document_id", "notification_modes", "auth_type", "expiry_in_days", "signers", "redirect_url"]

    @validator('notification_modes')
    def notification_modes_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('email'):
                raise ValueError("each list item must be one of ('email')")
        return value

    @validator('auth_type')
    def auth_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('AADHAAR'):
            raise ValueError("must be one of enum values ('AADHAAR')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ESignVerificationCreateSignatureRequestSchema:
        """Create an instance of ESignVerificationCreateSignatureRequestSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> ESignVerificationCreateSignatureRequestSchema:
        """Create an instance of ESignVerificationCreateSignatureRequestSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "verification_id, document_id, notification_modes, auth_type, expiry_in_days, signers, redirect_url" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in signers (list)
        _items = []
        if self.signers:
            for _item in self.signers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['signers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ESignVerificationCreateSignatureRequestSchema:
        """Create an instance of ESignVerificationCreateSignatureRequestSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ESignVerificationCreateSignatureRequestSchema.parse_obj(obj)

        _obj = ESignVerificationCreateSignatureRequestSchema.parse_obj({
            "verification_id": obj.get("verification_id") if obj.get("verification_id") is not None else 'ABC00123',
            "document_id": obj.get("document_id") if obj.get("document_id") is not None else 36,
            "notification_modes": obj.get("notification_modes"),
            "auth_type": obj.get("auth_type"),
            "expiry_in_days": obj.get("expiry_in_days") if obj.get("expiry_in_days") is not None else '2',
            "signers": [ESignVerificationCreateSignatureRequestSchemaSignersInner.from_dict(_item) for _item in obj.get("signers")] if obj.get("signers") is not None else None,
            "redirect_url": obj.get("redirect_url") if obj.get("redirect_url") is not None else 'REDIRECT_PAGE_URL'
        })
        return _obj


