# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from cashfree_verification.models.gstin_response_schema_additional_address_array_inner import GstinResponseSchemaAdditionalAddressArrayInner

class GstinResponseSchema(BaseModel):
    """
    Success response for Verify GSTIN
    """
    gstin: Optional[StrictStr] = Field(None, alias="GSTIN", description="It displays the unique identification number assigned to business registered under the Goods and Services Tax (GST) system in India.\"")
    additional_address_array: Optional[conlist(GstinResponseSchemaAdditionalAddressArrayInner, min_items=1)] = None
    cancellation_date: Optional[StrictStr] = None
    center_jurisdiction: Optional[StrictStr] = None
    constitution_of_business: Optional[StrictStr] = None
    date_of_registration: Optional[StrictStr] = None
    gst_in_status: Optional[StrictStr] = None
    last_update_date: Optional[StrictStr] = None
    legal_name_of_business: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    nature_of_business_activities: Optional[conlist(StrictStr)] = None
    principal_place_address: Optional[StrictStr] = None
    reference_id: Optional[StrictInt] = None
    state_jurisdiction: Optional[StrictStr] = None
    status_code: Optional[StrictStr] = None
    taxpayer_type: Optional[StrictStr] = None
    valid: Optional[StrictBool] = None
    __properties = ["GSTIN", "additional_address_array", "cancellation_date", "center_jurisdiction", "constitution_of_business", "date_of_registration", "gst_in_status", "last_update_date", "legal_name_of_business", "message", "nature_of_business_activities", "principal_place_address", "reference_id", "state_jurisdiction", "status_code", "taxpayer_type", "valid"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GstinResponseSchema:
        """Create an instance of GstinResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> GstinResponseSchema:
        """Create an instance of GstinResponseSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "GSTIN, additional_address_array, cancellation_date, center_jurisdiction, constitution_of_business, date_of_registration, gst_in_status, last_update_date, legal_name_of_business, message, nature_of_business_activities, principal_place_address, reference_id, state_jurisdiction, status_code, taxpayer_type, valid" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in additional_address_array (list)
        _items = []
        if self.additional_address_array:
            for _item in self.additional_address_array:
                if _item:
                    _items.append(_item.to_dict())
            _dict['additional_address_array'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GstinResponseSchema:
        """Create an instance of GstinResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GstinResponseSchema.parse_obj(obj)

        _obj = GstinResponseSchema.parse_obj({
            "gstin": obj.get("GSTIN"),
            "additional_address_array": [GstinResponseSchemaAdditionalAddressArrayInner.from_dict(_item) for _item in obj.get("additional_address_array")] if obj.get("additional_address_array") is not None else None,
            "cancellation_date": obj.get("cancellation_date"),
            "center_jurisdiction": obj.get("center_jurisdiction"),
            "constitution_of_business": obj.get("constitution_of_business"),
            "date_of_registration": obj.get("date_of_registration"),
            "gst_in_status": obj.get("gst_in_status"),
            "last_update_date": obj.get("last_update_date"),
            "legal_name_of_business": obj.get("legal_name_of_business"),
            "message": obj.get("message"),
            "nature_of_business_activities": obj.get("nature_of_business_activities"),
            "principal_place_address": obj.get("principal_place_address"),
            "reference_id": obj.get("reference_id"),
            "state_jurisdiction": obj.get("state_jurisdiction"),
            "status_code": obj.get("status_code"),
            "taxpayer_type": obj.get("taxpayer_type"),
            "valid": obj.get("valid")
        })
        return _obj


