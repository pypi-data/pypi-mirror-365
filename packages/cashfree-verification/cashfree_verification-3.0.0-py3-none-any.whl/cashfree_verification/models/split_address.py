# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist

class SplitAddress(BaseModel):
    """
    It containts the address information in individual components.
    """
    district: Optional[conlist(StrictStr)] = None
    state: Optional[conlist(conlist(StrictStr))] = None
    city: Optional[conlist(StrictStr)] = None
    pincode: Optional[StrictStr] = None
    country: Optional[conlist(StrictStr)] = None
    address_line: Optional[StrictStr] = None
    __properties = ["district", "state", "city", "pincode", "country", "address_line"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SplitAddress:
        """Create an instance of SplitAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> SplitAddress:
        """Create an instance of SplitAddress from a JSON string"""
        temp_dict = json.loads(json_str)
        if "district, state, city, pincode, country, address_line" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SplitAddress:
        """Create an instance of SplitAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SplitAddress.parse_obj(obj)

        _obj = SplitAddress.parse_obj({
            "district": obj.get("district"),
            "state": obj.get("state"),
            "city": obj.get("city"),
            "pincode": obj.get("pincode"),
            "country": obj.get("country"),
            "address_line": obj.get("address_line")
        })
        return _obj


