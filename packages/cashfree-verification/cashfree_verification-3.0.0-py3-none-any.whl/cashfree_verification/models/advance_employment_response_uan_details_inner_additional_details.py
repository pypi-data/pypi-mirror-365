# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails(BaseModel):
    """
    It contains additional information of the individual.
    """
    aadhaar: Optional[StrictStr] = Field(None, description="It displays the aadhaar information of the individual.")
    email: Optional[StrictStr] = Field(None, description="It displays the email address of the individual.")
    pan: Optional[StrictStr] = Field(None, description="It displays the PAN information of the individual.")
    ifsc: Optional[StrictStr] = Field(None, description="It displays the IFSC information of the individual's bank account.")
    bank_account: Optional[StrictStr] = Field(None, description="It displays the bank account number of the individual.")
    bank_address: Optional[StrictStr] = Field(None, description="It displays the address of the bank.")
    relation: Optional[StrictStr] = Field(None, description="It displays the realtionship of the individual with the relative.")
    relative_name: Optional[StrictStr] = Field(None, description="It displays the name of the relative.")
    __properties = ["aadhaar", "email", "pan", "ifsc", "bank_account", "bank_address", "relation", "relative_name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails:
        """Create an instance of AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails:
        """Create an instance of AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails from a JSON string"""
        temp_dict = json.loads(json_str)
        if "aadhaar, email, pan, ifsc, bank_account, bank_address, relation, relative_name" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails:
        """Create an instance of AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails.parse_obj(obj)

        _obj = AdvanceEmploymentResponseUanDetailsInnerAdditionalDetails.parse_obj({
            "aadhaar": obj.get("aadhaar"),
            "email": obj.get("email"),
            "pan": obj.get("pan"),
            "ifsc": obj.get("ifsc"),
            "bank_account": obj.get("bank_account"),
            "bank_address": obj.get("bank_address"),
            "relation": obj.get("relation"),
            "relative_name": obj.get("relative_name")
        })
        return _obj


