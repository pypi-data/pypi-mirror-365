# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from cashfree_verification.models.e_sign_verification_get_status_response_schema_signers_inner import ESignVerificationGetStatusResponseSchemaSignersInner

class ESignVerificationGetStatusResponseSchema(BaseModel):
    """
    Success response for Get E-Sign Status
    """
    status: Optional[StrictStr] = Field(None, description="It displays the status of the e-signature.")
    reference_id: Optional[StrictInt] = Field(None, description="It displays the unique ID created by Cashfree Payments for reference purposes.")
    verification_id: Optional[StrictStr] = Field(None, description="It displays the unique ID created by you to identify the API request.")
    document_id: Optional[StrictInt] = Field(None, description="It displays the unique ID created by Cashfree Payments to identify the uploaded document.")
    signers: Optional[conlist(ESignVerificationGetStatusResponseSchemaSignersInner)] = Field(None, description="It contains the details of the signer(s).")
    signed_doc_url: Optional[StrictStr] = Field(None, description="It displays the link of the signed document.")
    __properties = ["status", "reference_id", "verification_id", "document_id", "signers", "signed_doc_url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ESignVerificationGetStatusResponseSchema:
        """Create an instance of ESignVerificationGetStatusResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> ESignVerificationGetStatusResponseSchema:
        """Create an instance of ESignVerificationGetStatusResponseSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "status, reference_id, verification_id, document_id, signers, signed_doc_url" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in signers (list)
        _items = []
        if self.signers:
            for _item in self.signers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['signers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ESignVerificationGetStatusResponseSchema:
        """Create an instance of ESignVerificationGetStatusResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ESignVerificationGetStatusResponseSchema.parse_obj(obj)

        _obj = ESignVerificationGetStatusResponseSchema.parse_obj({
            "status": obj.get("status"),
            "reference_id": obj.get("reference_id"),
            "verification_id": obj.get("verification_id"),
            "document_id": obj.get("document_id"),
            "signers": [ESignVerificationGetStatusResponseSchemaSignersInner.from_dict(_item) for _item in obj.get("signers")] if obj.get("signers") is not None else None,
            "signed_doc_url": obj.get("signed_doc_url")
        })
        return _obj


