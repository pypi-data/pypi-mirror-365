# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from cashfree_verification.models.e_sign_verification_create_signature_request_schema_signers_inner_sign_positions_inner import ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner

class ESignVerificationCreateSignatureRequestSchemaSignersInner(BaseModel):
    """
    ESignVerificationCreateSignatureRequestSchemaSignersInner
    """
    name: StrictStr = Field(..., description="It is the name of the signer.")
    email: StrictStr = Field(..., description="It is the email ID of the signer.")
    phone: Optional[StrictStr] = Field('9999999999', description="It is the phone number of the signer.")
    sequence: StrictInt = Field(..., description="It displays the sequence of the signer to sign the document. The value can be between 1 to n where n is number of signers.")
    sign_positions: conlist(ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner) = Field(..., description="It displays the page wise coordinates of the rectangular space for signature placement.")
    __properties = ["name", "email", "phone", "sequence", "sign_positions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ESignVerificationCreateSignatureRequestSchemaSignersInner:
        """Create an instance of ESignVerificationCreateSignatureRequestSchemaSignersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> ESignVerificationCreateSignatureRequestSchemaSignersInner:
        """Create an instance of ESignVerificationCreateSignatureRequestSchemaSignersInner from a JSON string"""
        temp_dict = json.loads(json_str)
        if "name, email, phone, sequence, sign_positions" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in sign_positions (list)
        _items = []
        if self.sign_positions:
            for _item in self.sign_positions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sign_positions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ESignVerificationCreateSignatureRequestSchemaSignersInner:
        """Create an instance of ESignVerificationCreateSignatureRequestSchemaSignersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ESignVerificationCreateSignatureRequestSchemaSignersInner.parse_obj(obj)

        _obj = ESignVerificationCreateSignatureRequestSchemaSignersInner.parse_obj({
            "name": obj.get("name") if obj.get("name") is not None else 'John Doe',
            "email": obj.get("email") if obj.get("email") is not None else 'abc.def@klm.com',
            "phone": obj.get("phone") if obj.get("phone") is not None else '9999999999',
            "sequence": obj.get("sequence") if obj.get("sequence") is not None else 1,
            "sign_positions": [ESignVerificationCreateSignatureRequestSchemaSignersInnerSignPositionsInner.from_dict(_item) for _item in obj.get("sign_positions")] if obj.get("sign_positions") is not None else None
        })
        return _obj


