# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from cashfree_verification.models.badge_details import BadgeDetails
from cashfree_verification.models.driving_licence_details import DrivingLicenceDetails
from cashfree_verification.models.driving_license_response_schema_dl_validity import DrivingLicenseResponseSchemaDlValidity

class DrivingLicenseResponseSchema(BaseModel):
    """
    Success response for retrieving driving licence information
    """
    verification_id: Optional[StrictStr] = Field(None, description="It displays the unique ID you created to identify this API request.")
    reference_id: Optional[StrictInt] = Field(None, description="It displays the unique ID created by Cashfree Payments for reference purposes.")
    dl_number: Optional[StrictStr] = Field(None, description="It displays the unique number assigned to the driving licence.")
    dob: Optional[StrictStr] = Field(None, description="It displays the date of birth of the individual as present in the driving licence.")
    status: Optional[StrictStr] = Field(None, description="It displays whether the driving licence is valid.")
    badge_details: Optional[conlist(BadgeDetails)] = Field(None, description="It contains the...")
    dl_validity: Optional[DrivingLicenseResponseSchemaDlValidity] = None
    details_of_driving_licence: Optional[DrivingLicenceDetails] = None
    __properties = ["verification_id", "reference_id", "dl_number", "dob", "status", "badge_details", "dl_validity", "details_of_driving_licence"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DrivingLicenseResponseSchema:
        """Create an instance of DrivingLicenseResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> DrivingLicenseResponseSchema:
        """Create an instance of DrivingLicenseResponseSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "verification_id, reference_id, dl_number, dob, status, badge_details, dl_validity, details_of_driving_licence" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in badge_details (list)
        _items = []
        if self.badge_details:
            for _item in self.badge_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['badge_details'] = _items
        # override the default output from pydantic by calling `to_dict()` of dl_validity
        if self.dl_validity:
            _dict['dl_validity'] = self.dl_validity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of details_of_driving_licence
        if self.details_of_driving_licence:
            _dict['details_of_driving_licence'] = self.details_of_driving_licence.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DrivingLicenseResponseSchema:
        """Create an instance of DrivingLicenseResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DrivingLicenseResponseSchema.parse_obj(obj)

        _obj = DrivingLicenseResponseSchema.parse_obj({
            "verification_id": obj.get("verification_id"),
            "reference_id": obj.get("reference_id"),
            "dl_number": obj.get("dl_number"),
            "dob": obj.get("dob"),
            "status": obj.get("status"),
            "badge_details": [BadgeDetails.from_dict(_item) for _item in obj.get("badge_details")] if obj.get("badge_details") is not None else None,
            "dl_validity": DrivingLicenseResponseSchemaDlValidity.from_dict(obj.get("dl_validity")) if obj.get("dl_validity") is not None else None,
            "details_of_driving_licence": DrivingLicenceDetails.from_dict(obj.get("details_of_driving_licence")) if obj.get("details_of_driving_licence") is not None else None
        })
        return _obj


