# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class AdvanceEmploymentRequestSchema(BaseModel):
    """
    Find the request parameters to retrieve employment infomration
    """
    verification_id: StrictStr = Field(..., description="It is the unique ID you create to identify the API request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.")
    phone: Optional[StrictStr] = Field(None, description="It is the phone number of the employee. (conditonal mandatory)")
    pan: Optional[StrictStr] = Field(None, description="It is the PAN information of the employee. (conditonal mandatory)")
    uan: Optional[StrictStr] = Field(None, description="It is the unique number assigned to every employee contributing to the Employees' Provident Fund (EPF).(conditonal mandatory)")
    dob: Optional[date] = Field(None, description="It is the date of birth information of the employee. The format is YYYY-MM-DD.Employee date of birth (conditonal mandatory)")
    employee_name: Optional[StrictStr] = Field(None, description="It is the name of the employee. (conditonal mandatory)")
    employer_name: Optional[StrictStr] = Field(None, description="It is the name of the employer. (conditonal mandatory)")
    __properties = ["verification_id", "phone", "pan", "uan", "dob", "employee_name", "employer_name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AdvanceEmploymentRequestSchema:
        """Create an instance of AdvanceEmploymentRequestSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> AdvanceEmploymentRequestSchema:
        """Create an instance of AdvanceEmploymentRequestSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "verification_id, phone, pan, uan, dob, employee_name, employer_name" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AdvanceEmploymentRequestSchema:
        """Create an instance of AdvanceEmploymentRequestSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdvanceEmploymentRequestSchema.parse_obj(obj)

        _obj = AdvanceEmploymentRequestSchema.parse_obj({
            "verification_id": obj.get("verification_id"),
            "phone": obj.get("phone"),
            "pan": obj.get("pan"),
            "uan": obj.get("uan"),
            "dob": obj.get("dob"),
            "employee_name": obj.get("employee_name"),
            "employer_name": obj.get("employer_name")
        })
        return _obj


