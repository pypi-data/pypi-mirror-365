# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class PassportVerificationRequestSchema(BaseModel):
    """
    Find the request parameters to verify passport information
    """
    verification_id: StrictStr = Field(..., description="It is the unique ID you create to identify the verification request. The maximum character limit is 50. Only alphanumeric, period (.), hyphen (-), and underscore ( _ ) are allowed.")
    name: Optional[StrictStr] = Field(None, description="It is the name of the passport holder.")
    file_number: StrictStr = Field(..., description="It is the unique alphanumeric code that identifies an individual's passport application.")
    dob: StrictStr = Field(..., description="It is the date of birth of the passport holder. The format is YYYY-MM-DD.")
    __properties = ["verification_id", "name", "file_number", "dob"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PassportVerificationRequestSchema:
        """Create an instance of PassportVerificationRequestSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> PassportVerificationRequestSchema:
        """Create an instance of PassportVerificationRequestSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "verification_id, name, file_number, dob" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PassportVerificationRequestSchema:
        """Create an instance of PassportVerificationRequestSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PassportVerificationRequestSchema.parse_obj(obj)

        _obj = PassportVerificationRequestSchema.parse_obj({
            "verification_id": obj.get("verification_id") if obj.get("verification_id") is not None else 'ABC00123',
            "name": obj.get("name"),
            "file_number": obj.get("file_number") if obj.get("file_number") is not None else 'PA1079341954215',
            "dob": obj.get("dob") if obj.get("dob") is not None else '2007-03-01'
        })
        return _obj


