# coding: utf-8

"""
    Cashfree Verification API's.

    Cashfree's Verification APIs provide different types of verification to our merchants.

    The version of the OpenAPI document: 2023-12-18
    Contact: developers@cashfree.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from cashfree_verification.models.offline_aadhaar_verify_otp_response_schema_split_address import OfflineAadhaarVerifyOtpResponseSchemaSplitAddress

class OfflineAadhaarVerifyOtpResponseSchema(BaseModel):
    """
    Success response for Submit OTP for Aadhaar Verification
    """
    ref_id: Optional[StrictStr] = Field(None, description="It displays the unique ID created by Cashfree Payments for reference purposes.")
    status: Optional[StrictStr] = Field(None, description="It displays the status of the aadhaar information.")
    message: Optional[StrictStr] = Field(None, description="It displays details about the success or failure of the API request.")
    care_of: Optional[StrictStr] = Field(None, description="It displays the parent/guardian of the aadhaar card holder.")
    address: Optional[StrictStr] = Field(None, description="It displays the address information as present in the aadhaar card.")
    dob: Optional[StrictStr] = Field(None, description="It displays the date of birth of the aadhaar card holder.")
    email: Optional[StrictStr] = Field(None, description="It displays the email address of the aadhaar card holder.")
    gender: Optional[StrictStr] = Field(None, description="It displays the gender of the aadhaar card holder.")
    name: Optional[StrictStr] = Field(None, description="It displays the name of the aadhaar card holder.")
    year_of_birth: Optional[StrictStr] = Field(None, description="It displays the year of birth of the aadhaar card holder.")
    mobile_hash: Optional[StrictStr] = Field(None, description="It displays the unique information about the device's hardware, software, and other characteristics.")
    photo_link: Optional[StrictStr] = Field(None, description="It displays the URL to the image present in the aadhaar card.")
    split_address: Optional[OfflineAadhaarVerifyOtpResponseSchemaSplitAddress] = None
    __properties = ["ref_id", "status", "message", "care_of", "address", "dob", "email", "gender", "name", "year_of_birth", "mobile_hash", "photo_link", "split_address"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OfflineAadhaarVerifyOtpResponseSchema:
        """Create an instance of OfflineAadhaarVerifyOtpResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))
    
    @classmethod
    def from_json_for_one_of(cls, json_str: str) -> OfflineAadhaarVerifyOtpResponseSchema:
        """Create an instance of OfflineAadhaarVerifyOtpResponseSchema from a JSON string"""
        temp_dict = json.loads(json_str)
        if "ref_id, status, message, care_of, address, dob, email, gender, name, year_of_birth, mobile_hash, photo_link, split_address" in temp_dict.keys():
            return cls.from_dict(json.loads(json_str))
        return None

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of split_address
        if self.split_address:
            _dict['split_address'] = self.split_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OfflineAadhaarVerifyOtpResponseSchema:
        """Create an instance of OfflineAadhaarVerifyOtpResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OfflineAadhaarVerifyOtpResponseSchema.parse_obj(obj)

        _obj = OfflineAadhaarVerifyOtpResponseSchema.parse_obj({
            "ref_id": obj.get("ref_id"),
            "status": obj.get("status"),
            "message": obj.get("message"),
            "care_of": obj.get("care_of"),
            "address": obj.get("address"),
            "dob": obj.get("dob"),
            "email": obj.get("email"),
            "gender": obj.get("gender"),
            "name": obj.get("name"),
            "year_of_birth": obj.get("year_of_birth"),
            "mobile_hash": obj.get("mobile_hash"),
            "photo_link": obj.get("photo_link"),
            "split_address": OfflineAadhaarVerifyOtpResponseSchemaSplitAddress.from_dict(obj.get("split_address")) if obj.get("split_address") is not None else None
        })
        return _obj


