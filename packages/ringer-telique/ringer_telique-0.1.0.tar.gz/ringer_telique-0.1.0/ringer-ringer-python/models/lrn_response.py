# coding: utf-8

"""
    Telique API

    The Ringer Telique API provides access to telecommunications data,  including caller name (CNAM) data, line type information, and more.  The API also includes services for checking phone numbers against  Do Not Originate (DNO) and Do Not Call (DNC) databases, as well as  STIR/SHAKEN call authentication validation.  ## Authentication This API uses IP whitelist authentication. Your server's IP address must be registered with Ringer before making API calls. Contact support@ringer.tel to register your IP address. 

    The version of the OpenAPI document: 1.0.18
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LrnResponse(BaseModel):
    """
    LrnResponse
    """ # noqa: E501
    phone_number: StrictStr = Field(description="The queried telephone number", alias="phoneNumber")
    lrn: StrictStr = Field(description="Local Routing Number for the queried number")
    spid: Optional[StrictStr] = Field(default=None, description="Service Provider ID for the carrier serving this number")
    ported: StrictBool = Field(description="Indicates whether the number has been ported (true) or not (false)")
    __properties: ClassVar[List[str]] = ["phoneNumber", "lrn", "spid", "ported"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LrnResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if spid (nullable) is None
        # and model_fields_set contains the field
        if self.spid is None and "spid" in self.model_fields_set:
            _dict['spid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LrnResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "phoneNumber": obj.get("phoneNumber"),
            "lrn": obj.get("lrn"),
            "spid": obj.get("spid"),
            "ported": obj.get("ported")
        })
        return _obj


