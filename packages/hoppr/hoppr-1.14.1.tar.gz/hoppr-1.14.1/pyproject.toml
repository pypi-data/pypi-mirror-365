[tool.poetry]
name = "hoppr"
version = "1.14.1"
description = "A tool for defining, verifying, and transferring software dependencies between environments."
authors = ["LMCO Open Source <open.source@lmco.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://hoppr.dev"
repository = "https://gitlab.com/hoppr/hoppr"

keywords = [
  "packaging",
  "reports",
  "build dependencies",
  "software bill of materials"
]

classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Information Technology",
  "Topic :: Communications :: File Sharing",
  "Topic :: Software Development :: Version Control",
  "Topic :: System :: Software Distribution"
]

[[tool.poetry.packages]]
include = "hoppr"

[tool.poetry.scripts]
hopctl = "hoppr.cli:app"

[tool.poetry.dependencies]
python = "^3.10"
hoppr-cyclonedx-models = "0.6.0"
in-toto = "^3.0.0"
jc = "^1.25.2"
Jinja2 = "^3.1.3"
jmespath = "^1.0.1"
packageurl-python = ">=0.15.0, <1"
packaging = "^24.1"
psutil = "^5.9.8"
PyYAML = "^6.0.1"
rapidfuzz = "^3.7.0"
requests = "^2.31.0"
ruamel-yaml = ">=0.18.6, <1"
securesystemslib = "^1.0.0"
typing-extensions = "^4.10.0"

[tool.poetry.dependencies.oras]
extras = ["ecr"]
version = "^0.2.34"

[tool.poetry.dependencies.pydantic]
extras = ["email"]
version = "^1.10.15"

[tool.poetry.dependencies.typer-slim]
extras = ["standard"]
version = ">=0.12.0, <1"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.0"
ruff = ">=0.5.7, <1"
shfmt-py = "^3.7.0.1"
sourcery = "^1.16.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.1.1"
pytest-cov = "^6.0.0"
pytest-pretty = "^1.2.0"

[tool.poetry.group.typing.dependencies]
types-colorama = ">=0.4.15.12, <1"
types-docutils = ">=0.20.0.3, <1"
types-jmespath = "^1.0.2.20240106"
types-jsonschema = "^4.21.0.20240331"
types-psutil = "^5.9.5.20240316"
types-pygments = "^2.17.0.20240310"
types-PyYAML = "^6.0.12.20240311"
types-requests = "^2.31.0.20240403"
types-setuptools = "^69.2.0.20240317"
types-xmltodict = ">=0.13.0.3, <1"

[tool.poetry.group.typing.dependencies.mypy]
extras = ["reports"]
version = "^1.6.1"

[tool.poetry.plugins."hoppr.plugin"]
maven = "hoppr.plugins.collect.maven:CollectMavenPlugin"
rpm = "hoppr.plugins.collect.rpm:CollectRpmPlugin"

# Legacy Hoppr plugin entry points
bundle_tar = "hoppr.core_plugins.bundle_tar:TarBundlePlugin"
collect_apt_plugin = "hoppr.core_plugins.collect_apt_plugin:CollectAptPlugin"
collect_cargo_plugin = "hoppr.core_plugins.collect_cargo_plugin:CollectCargoPlugin"
collect_dnf_plugin = "hoppr.core_plugins.collect_dnf_plugin:CollectDnfPlugin"
collect_docker_plugin = "hoppr.core_plugins.collect_docker_plugin:CollectDockerPlugin"
collect_gem_plugin = "hoppr.core_plugins.collect_gem_plugin:CollectGemPlugin"
collect_git_plugin = "hoppr.core_plugins.collect_git_plugin:CollectGitPlugin"
collect_golang_plugin = "hoppr.core_plugins.collect_golang_plugin:CollectGolangPlugin"
collect_helm_plugin = "hoppr.core_plugins.collect_helm_plugin:CollectHelmPlugin"
collect_maven_plugin = "hoppr.core_plugins.collect_maven_plugin:CollectMavenPlugin"
collect_nexus_search = "hoppr.core_plugins.collect_nexus_search:CollectNexusSearch"
collect_npm_plugin = "hoppr.core_plugins.collect_npm_plugin:CollectNpmPlugin"
collect_nuget_plugin = "hoppr.core_plugins.collect_nuget_plugin:CollectNugetPlugin"
collect_pypi_plugin = "hoppr.core_plugins.collect_pypi_plugin:CollectPypiPlugin"
collect_raw_plugin = "hoppr.core_plugins.collect_raw_plugin:CollectRawPlugin"
collect_yum_plugin = "hoppr.core_plugins.collect_yum_plugin:CollectYumPlugin"
composite_collector = "hoppr.core_plugins.composite_collector:CompositeCollector"
delta_sbom = "hoppr.core_plugins.delta_sbom:DeltaSbom"
oras_bundle = "hoppr.core_plugins.oras_bundle:OrasBundlePlugin"
report_generator = "hoppr.core_plugins.report_generator:ReportGenerator"

[tool.coverage.report]
exclude_also = [
  "@overload",
  "^(from [\\w\\.]+ )?import [\\w]+$",
  "if __name__ == .__main__.:",
  "if not TYPE_CHECKING:",
  "if self.debug:",
  "if settings.DEBUG:",
  "if TYPE_CHECKING:",
  "pragma: no cover",
  "raise NotImplementedError",
]
precision = 2
show_missing = true
skip_covered = true
skip_empty = true

[tool.mypy]
cobertura_xml_report = "."
enable_error_code = ["ignore-without-code"]
explicit_package_bases = true
follow_imports = "silent"
incremental = false
junit_xml = "mypy.xml"
mypy_path = "stubs"
namespace_packages = true
no_implicit_reexport = true
packages = ["hoppr", "test.unit"]
plugins = ["pydantic.mypy"]
pretty = true
python_version = "3.10"
show_error_codes = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
  "in_toto.*",
  "jmespath",
  "oras.*",
  "packageurl",
  "rapidfuzz",
  "securesystemslib.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
ignore_missing_imports = true
implicit_reexport = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pyright]
include = ["hoppr", "test/unit"]
pythonPlatform = "All"
pythonVersion = "3.10"
reportArgumentType = false
reportAttributeAccessIssue = false
reportCallIssue = false
reportGeneralTypeIssues = false
reportIncompatibleMethodOverride = false
reportIncompatibleVariableOverride = false
stubPath = "stubs"

[tool.pytest.ini_options]
addopts = [
  "--strict-markers",
  "--cov=hoppr",
  "--cov-report=term-missing",
  "--cov-report=xml:coverage.xml",
  "--cov-report=lcov:lcov.info",
  "--cov-fail-under=100",
  "--import-mode=importlib",
  "--junit-xml=test.xml"
]
console_output_style = "progress"
junit_family = "xunit2"
pythonpath = ["."]
testpaths = ["test/unit"]

[tool.ruff]
line-length = 120
output-format = "gitlab"
target-version = "py310"

[tool.ruff.format]
exclude = ["**/*.pyi"]
preview = true

[tool.ruff.lint]
extend-select = [
  "ANN",  # All flake8-annotations rules
  "B",    # All flake8-bugbear rules
  "C4",   # All flake8-comprehension rules
  "D",    # All pydocstyle rules
  "ERA",  # All flake8-eradicate/eradicate rules
  "FA",   # All flake8-future-annotations rules
  "I",    # All isort rules
  "ISC",  # All flake8-implicit-str-concat rules
  "N",    # All pep8-naming rules
  "PIE",  # All flake8-pie rules
  "PGH",  # All pygrep-hooks rules
  "PT",   # All flake8-pytest-style rules
  "PTH",  # All flake8-use-pathlib rules
  "PYI",  # All flake8-pyi rules
  "Q",    # All flake8-quotes rules
  "RUF",  # All ruff checks
  "SIM",  # All flake8-simplify rules
  "T",    # All flake8-debugger and flake8-print rules
  "TCH",  # All flake8-type-checking rules
  "TID",  # All flake8-tidy-imports rules
  "UP",   # All pyupgrade rules
]
ignore = [
  "ANN002", # Missing type annotation for `*args`
  "ANN003", # Missing type annotation for `*kwargs`
  "D105",   # Missing docstring in magic method
  "D106",   # Missing docstring in public nested class
  "D107",   # Missing docstring in `__init__`
  "ISC001", # Implicitly concatenated string literals on one line
  "N815",   # Variable in class scope should not be mixedCase
]
unfixable = [
  "ERA", # do not autoremove commented out code
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["pathlib.Path.cwd", "typer.Argument", "typer.Option"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "list"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["threading", "typing", "typing_extensions", "hoppr.models"]
runtime-evaluated-base-classes = [
  "pydantic.BaseModel",
  "hoppr.models.base.CycloneDXBaseModel",
  "hoppr.models.validation.base.BaseCheckConfig",
  "hoppr.models.validation.base.BaseExcludeConfig",
  "hoppr.models.validation.base.BaseValidator",
]

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
force-wrap-aliases = true
known-third-party = ["in_toto"]
lines-between-types = 1
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
  "D104", # Missing docstring in public package
]
"hoppr/cli/**/*.py" = [
  "UP007", # Use `X | Y` for type annotations
]
"hoppr/models/*.py" = [
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]
"test/**/*.py" = [
  "ANN201", # Missing return type annotation for public function
  "ANN202", # Missing return type annotation for private function
  "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
  "D100",   # Missing docstring in public module
  "D102",   # Missing docstring in public method
  "D103",   # Missing docstring in public function
  "D104",   # Missing docstring in public package
  "D107",   # Missing docstring in `__init__`
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "TCH001", # Move application import into a type-checking block,
  "TCH002", # Move third-party import into a type-checking block
  "TCH003", # Move standard library import into a type-checking block
]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload", "typing.override", "typing_extensions.override"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
