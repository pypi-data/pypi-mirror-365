# coding: utf-8

"""
    Fabric Orchestrator API

    This is Fabric Orchestrator API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: kthare10@unc.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Status200OkPaginated(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'int',
        'offset': 'int',
        'size': 'int',
        'status': 'int',
        'total': 'int',
        'type': 'str'
    }

    attribute_map = {
        'limit': 'limit',
        'offset': 'offset',
        'size': 'size',
        'status': 'status',
        'total': 'total',
        'type': 'type'
    }

    def __init__(self, limit=None, offset=None, size=None, status=200, total=None, type=None):  # noqa: E501
        """Status200OkPaginated - a model defined in Swagger"""  # noqa: E501
        self._limit = None
        self._offset = None
        self._size = None
        self._status = None
        self._total = None
        self._type = None
        self.discriminator = None
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if size is not None:
            self.size = size
        if status is not None:
            self.status = status
        if total is not None:
            self.total = total
        if type is not None:
            self.type = type

    @property
    def limit(self):
        """Gets the limit of this Status200OkPaginated.  # noqa: E501


        :return: The limit of this Status200OkPaginated.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Status200OkPaginated.


        :param limit: The limit of this Status200OkPaginated.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this Status200OkPaginated.  # noqa: E501


        :return: The offset of this Status200OkPaginated.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Status200OkPaginated.


        :param offset: The offset of this Status200OkPaginated.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def size(self):
        """Gets the size of this Status200OkPaginated.  # noqa: E501


        :return: The size of this Status200OkPaginated.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Status200OkPaginated.


        :param size: The size of this Status200OkPaginated.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this Status200OkPaginated.  # noqa: E501


        :return: The status of this Status200OkPaginated.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Status200OkPaginated.


        :param status: The status of this Status200OkPaginated.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def total(self):
        """Gets the total of this Status200OkPaginated.  # noqa: E501


        :return: The total of this Status200OkPaginated.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Status200OkPaginated.


        :param total: The total of this Status200OkPaginated.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def type(self):
        """Gets the type of this Status200OkPaginated.  # noqa: E501


        :return: The type of this Status200OkPaginated.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Status200OkPaginated.


        :param type: The type of this Status200OkPaginated.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Status200OkPaginated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status200OkPaginated):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
