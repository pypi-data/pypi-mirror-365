# coding: utf-8

"""
    Fastify Template API

    API documentation using Swagger

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from keplar_panel_integration_api.models.api_invite_code_code_start_get302_response import ApiInviteCodeCodeStartGet302Response

class TestApiInviteCodeCodeStartGet302Response(unittest.TestCase):
    """ApiInviteCodeCodeStartGet302Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiInviteCodeCodeStartGet302Response:
        """Test ApiInviteCodeCodeStartGet302Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiInviteCodeCodeStartGet302Response`
        """
        model = ApiInviteCodeCodeStartGet302Response()
        if include_optional:
            return ApiInviteCodeCodeStartGet302Response(
                id = '',
                code = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                name = '',
                description = '',
                status = 'ACTIVE',
                expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                config = keplar_panel_integration_api.models.invite_config.InviteConfig(
                    max_responses = 1.337, 
                    max_responses_per_participant = 1.337, 
                    allowed_origins = [
                        ''
                        ], 
                    allow_anonymous_responses = True, 
                    collect_email = True, 
                    privacy_notice = '', 
                    show_call_metadata = True, 
                    rep_data = keplar_panel_integration_api.models.rep_data_config_legacy.RepDataConfigLegacy(
                        enabled = True, 
                        config = keplar_panel_integration_api.models.config.config(), 
                        study = keplar_panel_integration_api.models.rep_data_study_legacy.RepDataStudyLegacy(
                            name = '', 
                            compensation = 1.337, 
                            length_of_interview = 1.337, 
                            incidence_rate = 1.337, 
                            country_code = '', 
                            language_code = '', 
                            device_compatibility = [
                                ''
                                ], 
                            min_age = 1.337, 
                            max_age = 1.337, 
                            genders = [
                                ''
                                ], 
                            qualifications = [
                                keplar_panel_integration_api.models.rep_data_study_legacy_qualifications_inner.RepDataStudyLegacy_qualifications_inner(
                                    qualification_id = 1.337, 
                                    qualification_options = [
                                        1.337
                                        ], )
                                ], ), 
                        survey = keplar_panel_integration_api.models.rep_data_survey_legacy.RepDataSurveyLegacy(
                            id = '', 
                            status = 'LIVE', 
                            project = keplar_panel_integration_api.models.rep_data_survey_legacy_project.RepDataSurveyLegacy_project(
                                id = '', ), ), 
                        project = keplar_panel_integration_api.models.rep_data_project_legacy.RepDataProjectLegacy(
                            id = '', ), ), 
                    rep_data_survey = keplar_panel_integration_api.models.repdata_survey.RepdataSurvey(
                        id = '', 
                        project_id = '', 
                        name = '', 
                        status = '', 
                        survey_attributes = keplar_panel_integration_api.models.repdata_survey_attributes.RepdataSurveyAttributes(
                            respondents = 1.337, 
                            country_code = '', 
                            language_code = '', 
                            length_of_interview = 1.337, 
                            incidence_rate = 1.337, 
                            minimum_price_per_complete = 1.337, 
                            offered_price_per_complete = 1.337, 
                            device_compatibilities = [
                                ''
                                ], 
                            collects_pii = True, 
                            hashing_enabled = True, 
                            calculation_type = '', 
                            traffic_control_limit_type = '', 
                            out_of_field_date = '', 
                            out_of_field_timezone = '', 
                            entry_link = '', 
                            redirects = keplar_panel_integration_api.models.repdata_survey_redirects.RepdataSurveyRedirects(
                                complete = '', 
                                standard_termination = '', 
                                quality_termination = '', 
                                security_termination = '', 
                                overquota_termination_term = '', ), ), 
                        respondent_attributes = [
                            keplar_panel_integration_api.models.repdata_respondent_attribute.RepdataRespondentAttribute(
                                quota_id = '', 
                                quota_name = '', 
                                quota = 1.337, 
                                survey_starts = 1.337, 
                                survey_completes = 1.337, 
                                qualifications = [
                                    keplar_panel_integration_api.models.repdata_qualification.RepdataQualification(
                                        question_id = 1.337, 
                                        allowed_option_ids = [
                                            null
                                            ], )
                                    ], )
                            ], ), 
                    test_participant_invite_code = '', ),
                created_by_id = '',
                project_id = '',
                files = [
                    keplar_panel_integration_api.models.project_file_public.ProjectFilePublic(
                        file = keplar_panel_integration_api.models.project_file_public_file.ProjectFilePublic_file(
                            description = '', 
                            mime_type = 'image/jpeg', 
                            public_url = '', 
                            public_url_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        description = '', 
                        metadata = keplar_panel_integration_api.models.project_file_metadata.ProjectFileMetadata(
                            seq = 1.337, 
                            prompt = '', 
                            image_description = '', ), )
                    ],
                project_config = keplar_panel_integration_api.models._api_invite_code__code__start_get_302_response_project_config._api_inviteCode__code__start_get_302_response_projectConfig(
                    max_duration_seconds = 1.337, 
                    collect_email = True, 
                    screener_questions = [
                        keplar_panel_integration_api.models.project_screener_question_choose_one_public.ProjectScreenerQuestionChooseOnePublic(
                            type = 'chooseOne', 
                            question = '', 
                            options = [
                                ''
                                ], )
                        ], )
            )
        else:
            return ApiInviteCodeCodeStartGet302Response(
                id = '',
                code = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                name = '',
                status = 'ACTIVE',
                config = keplar_panel_integration_api.models.invite_config.InviteConfig(
                    max_responses = 1.337, 
                    max_responses_per_participant = 1.337, 
                    allowed_origins = [
                        ''
                        ], 
                    allow_anonymous_responses = True, 
                    collect_email = True, 
                    privacy_notice = '', 
                    show_call_metadata = True, 
                    rep_data = keplar_panel_integration_api.models.rep_data_config_legacy.RepDataConfigLegacy(
                        enabled = True, 
                        config = keplar_panel_integration_api.models.config.config(), 
                        study = keplar_panel_integration_api.models.rep_data_study_legacy.RepDataStudyLegacy(
                            name = '', 
                            compensation = 1.337, 
                            length_of_interview = 1.337, 
                            incidence_rate = 1.337, 
                            country_code = '', 
                            language_code = '', 
                            device_compatibility = [
                                ''
                                ], 
                            min_age = 1.337, 
                            max_age = 1.337, 
                            genders = [
                                ''
                                ], 
                            qualifications = [
                                keplar_panel_integration_api.models.rep_data_study_legacy_qualifications_inner.RepDataStudyLegacy_qualifications_inner(
                                    qualification_id = 1.337, 
                                    qualification_options = [
                                        1.337
                                        ], )
                                ], ), 
                        survey = keplar_panel_integration_api.models.rep_data_survey_legacy.RepDataSurveyLegacy(
                            id = '', 
                            status = 'LIVE', 
                            project = keplar_panel_integration_api.models.rep_data_survey_legacy_project.RepDataSurveyLegacy_project(
                                id = '', ), ), 
                        project = keplar_panel_integration_api.models.rep_data_project_legacy.RepDataProjectLegacy(
                            id = '', ), ), 
                    rep_data_survey = keplar_panel_integration_api.models.repdata_survey.RepdataSurvey(
                        id = '', 
                        project_id = '', 
                        name = '', 
                        status = '', 
                        survey_attributes = keplar_panel_integration_api.models.repdata_survey_attributes.RepdataSurveyAttributes(
                            respondents = 1.337, 
                            country_code = '', 
                            language_code = '', 
                            length_of_interview = 1.337, 
                            incidence_rate = 1.337, 
                            minimum_price_per_complete = 1.337, 
                            offered_price_per_complete = 1.337, 
                            device_compatibilities = [
                                ''
                                ], 
                            collects_pii = True, 
                            hashing_enabled = True, 
                            calculation_type = '', 
                            traffic_control_limit_type = '', 
                            out_of_field_date = '', 
                            out_of_field_timezone = '', 
                            entry_link = '', 
                            redirects = keplar_panel_integration_api.models.repdata_survey_redirects.RepdataSurveyRedirects(
                                complete = '', 
                                standard_termination = '', 
                                quality_termination = '', 
                                security_termination = '', 
                                overquota_termination_term = '', ), ), 
                        respondent_attributes = [
                            keplar_panel_integration_api.models.repdata_respondent_attribute.RepdataRespondentAttribute(
                                quota_id = '', 
                                quota_name = '', 
                                quota = 1.337, 
                                survey_starts = 1.337, 
                                survey_completes = 1.337, 
                                qualifications = [
                                    keplar_panel_integration_api.models.repdata_qualification.RepdataQualification(
                                        question_id = 1.337, 
                                        allowed_option_ids = [
                                            null
                                            ], )
                                    ], )
                            ], ), 
                    test_participant_invite_code = '', ),
                created_by_id = '',
                project_id = '',
                project_config = keplar_panel_integration_api.models._api_invite_code__code__start_get_302_response_project_config._api_inviteCode__code__start_get_302_response_projectConfig(
                    max_duration_seconds = 1.337, 
                    collect_email = True, 
                    screener_questions = [
                        keplar_panel_integration_api.models.project_screener_question_choose_one_public.ProjectScreenerQuestionChooseOnePublic(
                            type = 'chooseOne', 
                            question = '', 
                            options = [
                                ''
                                ], )
                        ], ),
        )
        """

    def testApiInviteCodeCodeStartGet302Response(self):
        """Test ApiInviteCodeCodeStartGet302Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
