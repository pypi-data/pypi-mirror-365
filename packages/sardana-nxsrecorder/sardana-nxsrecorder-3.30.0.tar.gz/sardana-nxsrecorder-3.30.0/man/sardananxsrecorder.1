.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "SARDANANXSRECORDER" "1" "Jul 29, 2025" "3.30" "Sardana NeXus Recorder"
.SH NAME
sardananxsrecorder \- sardananxsrecorder Documentation
.sp
\fI\%\fP
\fI\%\fP
\fI\%\fP
\fI\%\fP
.sp
NeXus scan recorder for Sardana which stores experimenal data in NeXus/HDF5 file with use of
NeXDatas Tango Server or packages, i.e. NXSDataWriter, NXSConfigServer, NXSRecSelector.
.nf
Source code: \fI\%https://github.com/nexdatas/sardana\-nxs\-filerecorder\fP
Web page: \fI\%https://nexdatas.github.io/sardana\-nxs\-filerecorder\fP
NexDaTaS Web page: \fI\%https://nexdatas.github.io\fP
.fi
.sp
.SH INSTALLATION
.sp
Install the dependencies:
.nf
sardana, sphinx, NXSDataWriter, NXSConfigServer, NXSRecSelector
.fi
.sp
.SS From sources
.sp
Download the latest NeXuS Scan Recorder version from
.nf
\fI\%https://github.com/nexdatas/sardana\-nxs\-filerecorder\fP
.fi
.sp
.sp
Extract sources and run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python3 setup.py install
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and add an \fIRecorderPath\fP property of \fIMacroServer\fP with its value
defining the package location, e.g.
.nf
/usr/lib/python2.7/dist\-packages/sardananxsrecorder
.fi
.sp
.SS Debian packages
.sp
Debian Bookworm, Bullseye, Buster and Ubuntu Oracular, Noble Jammy packages can be found in the HDRI repository.
.sp
To install the debian packages, add the PGP repository key
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo su
$ wget \-q \-O \- http://repos.pni\-hdri.de/debian_repo.pub.gpg | apt\-key add \-
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and then download the corresponding source list
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ cd /etc/apt/sources.list.d
$ wget http://repos.pni\-hdri.de/bookworm\-pni\-hdri.list
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Finally, for python2.7
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ apt\-get update
$ apt\-get install python3\-sardana\-nxsrecorder
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and set the RecoderPath property of MacroServer with
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ apt\-get install sardana\-nxsrecorder
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To instal other NexDaTaS packages
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ apt\-get install python3\-nxswriter nxsconfigserver\-db python3\-nxsconfigserver nxsconfigtool3 python3\-nxstools nxswriter3 nxsconfigserver3
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ apt\-get install python3\-nxsrecselector nxsrecselector3 nxselector3
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
for Component Selector for Sardana related packages.
.SH SETTING ENVIRONMENT
.SS Setting Saradna
.sp
If sardana is not yet set up run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ Pool
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
enter a new instance name
.IP \(bu 2
create the new instance
.UNINDENT
.sp
Then wait a while until Pool is started and in a new terminal run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ MacroServer
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
enter a new instance name
.IP \(bu 2
create the new instance
.IP \(bu 2
connect pool
.UNINDENT
.sp
Next, run Astor and change start\-up levels: for Pool to 2,
for MacroServer to 3 and restart servers.
.sp
Alternatively, terminate Pool and MacroServer in the terminals and run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup start Pool \-l2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
wait until Pool is started and run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup start MacroServer \-l3
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Additionally, one can create dummy devices by running \fIsar_demo\fP in
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ spock
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Setting NeXus Servers
.sp
To set up  NeXus Servers run
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup set
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
or
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup set NXSDataWriter
$ nxsetup set NXSConfigServer
$ nxsetup set NXSRecSelector
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
for specific servers.
.sp
If the \fIRecoderPath\fP property of MacroServer is not set one can do it by
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ nxsetup add\-recorder\-path /usr/lib/python2.7/dist\-packages/sardananxsrecorder
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
where the path should point the \fIsardananxsrecorder\fP package.
.SH SARDANA VARIABLES
.sp
The NeXus file recorder uses the following sardana environment variables
.INDENT 0.0
.IP \(bu 2
\fBActiveMntGrp\fP \fI(str)\fP \- active measurement group
.IP \(bu 2
\fBScanID\fP \fI(int)\fP \- the last scan identifier number, default: \fB\-1\fP
.IP \(bu 2
\fBScanDir\fP \fI(str)\fP \- the scan directory
.IP \(bu 2
\fBScanFile\fP \fI(list)\fP \- a list of scan files
.IP \(bu 2
\fBNeXusSelectorDevice\fP \fI(str)\fP \- NXSRecSelector tango device if more installed, otherwise first one found
.IP \(bu 2
\fBNXSAppendSciCatDataset\fP \fI(bool)\fP \- append scan name to scicat dataset list file, default: \fBFalse\fP
.IP \(bu 2
\fBBeamtimeFilePath\fP \fI(str)\fP \- beamtime file path to search beamtime metadata file, default: \fB\(dq/gpfs/current\(dq\fP
.IP \(bu 2
\fBBeamtimeFilePrefix\fP \fI(str)\fP \- beamtime metadata file prefix, default: \fB\(dqbeamtime\-metadata\-\(dq\fP
.IP \(bu 2
\fBBeamtimeFileExt\fP \fI(str)\fP \- beamtime metadata file extension, default: \fB\(dq.json\(dq\fP
.IP \(bu 2
\fBSciCatDatasetListFilePrefix\fP \fI(str)\fP \- scicat dataset list file prefix, default: \fB\(dqscicat\-datasets\-\(dq\fP
.IP \(bu 2
\fBSciCatDatasetListFileExt\fP \fI(str)\fP \- scicat dataset list file extension, default: \fB\(dq.lst\(dq\fP
.IP \(bu 2
\fBSciCatDatasetListFileLocal\fP \fI(bool)\fP \- add the hostname to the scicat dataset list file extension, default: \fBFalse\fP
.IP \(bu 2
\fBSciCatAutoGrouping\fP \fI(bool)\fP \- group all scans with the measurement name set to the base scan filename, default: \fBFalse\fP
.IP \(bu 2
\fBMetadataScript\fP \fI(str)\fP \- a python module file name containing \fBmain()\fP  which provides a dictionary with user metadata stored in the INIT mode, default: \fB\(dq\(dq\fP
.IP \(bu 2
\fBScicatMeasurements\fP \fI(dict)\fP \- a dictionary of  measurement names indexed by \fBScanDir\fP and  used by \fBscingestor\fP, default: \fB{}\fP
.IP \(bu 2
\fBCreateMeasurementFile\fP \fI(bool)\fP \- create a measurement file with its filename releated to \fBScicatMeasurements\fP or \fBScanFile\fP, default: \fBFalse\fP
.IP \(bu 2
\fBNeXusWriterProperties\fP \fI(dict)\fP \- a dictionary of TangoDataWriter (NXSDataWriter) properties (starting with a small letter)
.IP \(bu 2
\fBNeXusMeshScanID\fP \fI(int)\fP \- ScanID used for composed scans e.g. mesh scan combined from many linear scans
.IP \(bu 2
\fBNeXusWriterModes\fP \fI(list)\fP \- a list of strategy modes e.g. \fBNOINIT\fP, \fBNOSTEP\fP, \fBNOFINAL\fP, \fBMESH\fP, \fBVDS\fP  separated by commas
.IP \(bu 2
\fBScanNames\fP \fI(bool)\fP \- special mode of using ScanName directories i.e.
.INDENT 2.0
.IP \(bu 2
\fBTrue\fP: the master file in the ScanName directory,
.IP \(bu 2
\fBFalse\fP: the master file in the grouping ScanName directory (e.g. without ScanID),
.IP \(bu 2
\fBNone\fP (or undefined):  standard mode where the master files are outside the ScanName directory
.UNINDENT
.IP \(bu 2
\fBScanNamesNoGrouping\fP \fI(bool)\fP \- do not perform grouping when \fBScanNames\fP is \fBFalse\fP
.IP \(bu 2
\fBScanNamesNoMetadata\fP \fI(bool)\fP \- do not perform master file metadata ingestion when \fBScanNames\fP is \fBFalse\fP
.UNINDENT
.sp
Contents:
.SS sardananxsrecorder package
.SS Submodules
.SS sardananxsrecorder.nxsrecorder module
.sp
This is the macro server scan data NeXus recorder module
.INDENT 0.0
.TP
.B class  sardananxsrecorder.nxsrecorder.NXS_FileRecorder(filename=None, macro=None, **pars)
Bases: \fI\%BaseFileRecorder\fP
.sp
This recorder saves data to a NeXus file making use of NexDaTaS Writer
.sp
constructor
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfilename\fP (\fI\%str\fP) \-\- ScanFile name
.IP \(bu 2
\fBmacro\fP (\fI\%sardana.macroserver.macro.Macro\fP) \-\- macro object
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _addCustomData(value, name, group=\(aqdata\(aq, remove=False, **kwargs)
adds custom data to configuration variables, i.e. from macros
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBvalue\fP (\fIany\fP) \-\- variable value
.IP \(bu 2
\fBname\fP (\fI\%str\fP) \-\- variable name
.IP \(bu 2
\fBgroup\fP (\fI\%str\fP) \-\- variable group inside variable dictionary
.IP \(bu 2
\fBremove\fP (\fI\%bool\fP) \-\- if True variable will be removed
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _endRecordList(recordlist)
.INDENT 7.0
.TP
.B ends record process: records in FINAL mode
and closes the nexus file
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBrecordlist\fP (\fBsardana.macroserver.scan.scandata.RecordList\fP) \-\- sardana record list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _startRecordList(recordlist)
.INDENT 7.0
.TP
.B starts record process: creates configuration
and records in INIT mode
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBrecordlist\fP (\fBsardana.macroserver.scan.scandata.RecordList\fP) \-\- sardana record list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B _writeRecord(record)
.INDENT 7.0
.TP
.B performs record process step: creates configuration
and records in INIT mode
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBrecord\fP (\fBsardana.macroserver.scan.scandata.Record\fP) \-\- sardana record list
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B formats  =  {\(aqh5\(aq: \(aq.h5\(aq, \(aqndf\(aq: \(aq.ndf\(aq, \(aqnx\(aq: \(aq.nx\(aq, \(aqnxs\(aq: \(aq.nxs\(aq}
(\fI\%dict\fP <\fI\%str\fP, \fI\%str\fP > ) recoder format
.UNINDENT
.INDENT 7.0
.TP
.B getFormat()
provides the output file format
.INDENT 7.0
.TP
.B Returns
the output file format
.TP
.B Return type
\fI\%str\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B class  numpyEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)
Bases: \fBJSONEncoder\fP
.sp
numpy json encoder with list
.sp
Constructor for JSONEncoder, with sensible defaults.
.sp
If skipkeys is false, then it is a TypeError to attempt
encoding of keys that are not str, int, float or None.  If
skipkeys is True, such items are simply skipped.
.sp
If ensure_ascii is true, the output is guaranteed to be str
objects with all incoming non\-ASCII characters escaped.  If
ensure_ascii is false, the output can contain non\-ASCII characters.
.sp
If check_circular is true, then lists, dicts, and custom encoded
objects will be checked for circular references during encoding to
prevent an infinite recursion (which would cause an RecursionError).
Otherwise, no such check takes place.
.sp
If allow_nan is true, then NaN, Infinity, and \-Infinity will be
encoded as such.  This behavior is not JSON specification compliant,
but is consistent with most JavaScript based encoders and decoders.
Otherwise, it will be a ValueError to encode such floats.
.sp
If sort_keys is true, then the output of dictionaries will be
sorted by key; this is useful for regression tests to ensure
that JSON serializations can be compared on a day\-to\-day basis.
.sp
If indent is a non\-negative integer, then JSON array
elements and object members will be pretty\-printed with that
indent level.  An indent level of 0 will only insert newlines.
None is the most compact representation.
.sp
If specified, separators should be an (item_separator, key_separator)
tuple.  The default is (\(aq, \(aq, \(aq: \(aq) if \fIindent\fP is \fBNone\fP and
(\(aq,\(aq, \(aq: \(aq) otherwise.  To get the most compact JSON representation,
you should specify (\(aq,\(aq, \(aq:\(aq) to eliminate whitespace.
.sp
If specified, default is a function that gets called for objects
that can\(aqt otherwise be serialized.  It should return a JSON encodable
version of the object or raise a \fBTypeError\fP\&.
.INDENT 7.0
.TP
.B default(obj)
default encoder
.INDENT 7.0
.TP
.B Parameters
\fBobj\fP (\fI\%object\fP or \fIany\fP) \-\- numpy array object
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Module contents
.sp
Sardana Scan Recorders
.INDENT 0.0
.IP \(bu 2
\fI\%Index\fP
.IP \(bu 2
\fI\%Module Index\fP
.IP \(bu 2
\fI\%Search Page\fP
.UNINDENT
.SH AUTHOR
Author
.SH COPYRIGHT
2012-2018 DESY, Jan Kotanski <jkotan@mail.desy.de>

GNU GENERAL PUBLIC LICENSE, version 3
.\" Generated by docutils manpage writer.
.
