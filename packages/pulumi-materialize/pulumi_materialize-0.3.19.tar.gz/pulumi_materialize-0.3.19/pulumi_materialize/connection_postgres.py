# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConnectionPostgresArgs', 'ConnectionPostgres']

@pulumi.input_type
class ConnectionPostgresArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[builtins.str],
                 host: pulumi.Input[builtins.str],
                 user: pulumi.Input['ConnectionPostgresUserArgs'],
                 aws_privatelink: Optional[pulumi.Input['ConnectionPostgresAwsPrivatelinkArgs']] = None,
                 comment: Optional[pulumi.Input[builtins.str]] = None,
                 database_name: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 ownership_role: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input['ConnectionPostgresPasswordArgs']] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[builtins.str]] = None,
                 ssh_tunnel: Optional[pulumi.Input['ConnectionPostgresSshTunnelArgs']] = None,
                 ssl_certificate: Optional[pulumi.Input['ConnectionPostgresSslCertificateArgs']] = None,
                 ssl_certificate_authority: Optional[pulumi.Input['ConnectionPostgresSslCertificateAuthorityArgs']] = None,
                 ssl_key: Optional[pulumi.Input['ConnectionPostgresSslKeyArgs']] = None,
                 ssl_mode: Optional[pulumi.Input[builtins.str]] = None,
                 validate: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a ConnectionPostgres resource.
        :param pulumi.Input[builtins.str] database: The target Postgres database.
        :param pulumi.Input[builtins.str] host: The Postgres database hostname.
        :param pulumi.Input['ConnectionPostgresUserArgs'] user: The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        :param pulumi.Input['ConnectionPostgresAwsPrivatelinkArgs'] aws_privatelink: The AWS PrivateLink configuration for the Postgres database.
        :param pulumi.Input[builtins.str] comment: Comment on an object in the database.
        :param pulumi.Input[builtins.str] database_name: The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
        :param pulumi.Input[builtins.str] name: The identifier for the connection.
        :param pulumi.Input[builtins.str] ownership_role: The owernship role of the object.
        :param pulumi.Input['ConnectionPostgresPasswordArgs'] password: The Postgres database password.
        :param pulumi.Input[builtins.int] port: The Postgres database port.
        :param pulumi.Input[builtins.str] region: The region to use for the resource connection. If not set, the default region is used.
        :param pulumi.Input[builtins.str] schema_name: The identifier for the connection schema in Materialize. Defaults to `public`.
        :param pulumi.Input['ConnectionPostgresSshTunnelArgs'] ssh_tunnel: The SSH tunnel configuration for the Postgres database.
        :param pulumi.Input['ConnectionPostgresSslCertificateArgs'] ssl_certificate: The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        :param pulumi.Input['ConnectionPostgresSslCertificateAuthorityArgs'] ssl_certificate_authority: The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        :param pulumi.Input['ConnectionPostgresSslKeyArgs'] ssl_key: The client key for the Postgres database.
        :param pulumi.Input[builtins.str] ssl_mode: The SSL mode for the Postgres database.
        :param pulumi.Input[builtins.bool] validate: If the connection should wait for validation.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "user", user)
        if aws_privatelink is not None:
            pulumi.set(__self__, "aws_privatelink", aws_privatelink)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ownership_role is not None:
            pulumi.set(__self__, "ownership_role", ownership_role)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if ssh_tunnel is not None:
            pulumi.set(__self__, "ssh_tunnel", ssh_tunnel)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if ssl_certificate_authority is not None:
            pulumi.set(__self__, "ssl_certificate_authority", ssl_certificate_authority)
        if ssl_key is not None:
            pulumi.set(__self__, "ssl_key", ssl_key)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[builtins.str]:
        """
        The target Postgres database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[builtins.str]:
        """
        The Postgres database hostname.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input['ConnectionPostgresUserArgs']:
        """
        The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input['ConnectionPostgresUserArgs']):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="awsPrivatelink")
    def aws_privatelink(self) -> Optional[pulumi.Input['ConnectionPostgresAwsPrivatelinkArgs']]:
        """
        The AWS PrivateLink configuration for the Postgres database.
        """
        return pulumi.get(self, "aws_privatelink")

    @aws_privatelink.setter
    def aws_privatelink(self, value: Optional[pulumi.Input['ConnectionPostgresAwsPrivatelinkArgs']]):
        pulumi.set(self, "aws_privatelink", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Comment on an object in the database.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownershipRole")
    def ownership_role(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The owernship role of the object.
        """
        return pulumi.get(self, "ownership_role")

    @ownership_role.setter
    def ownership_role(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ownership_role", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input['ConnectionPostgresPasswordArgs']]:
        """
        The Postgres database password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input['ConnectionPostgresPasswordArgs']]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The Postgres database port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The region to use for the resource connection. If not set, the default region is used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The identifier for the connection schema in Materialize. Defaults to `public`.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sshTunnel")
    def ssh_tunnel(self) -> Optional[pulumi.Input['ConnectionPostgresSshTunnelArgs']]:
        """
        The SSH tunnel configuration for the Postgres database.
        """
        return pulumi.get(self, "ssh_tunnel")

    @ssh_tunnel.setter
    def ssh_tunnel(self, value: Optional[pulumi.Input['ConnectionPostgresSshTunnelArgs']]):
        pulumi.set(self, "ssh_tunnel", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input['ConnectionPostgresSslCertificateArgs']]:
        """
        The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input['ConnectionPostgresSslCertificateArgs']]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="sslCertificateAuthority")
    def ssl_certificate_authority(self) -> Optional[pulumi.Input['ConnectionPostgresSslCertificateAuthorityArgs']]:
        """
        The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        """
        return pulumi.get(self, "ssl_certificate_authority")

    @ssl_certificate_authority.setter
    def ssl_certificate_authority(self, value: Optional[pulumi.Input['ConnectionPostgresSslCertificateAuthorityArgs']]):
        pulumi.set(self, "ssl_certificate_authority", value)

    @property
    @pulumi.getter(name="sslKey")
    def ssl_key(self) -> Optional[pulumi.Input['ConnectionPostgresSslKeyArgs']]:
        """
        The client key for the Postgres database.
        """
        return pulumi.get(self, "ssl_key")

    @ssl_key.setter
    def ssl_key(self, value: Optional[pulumi.Input['ConnectionPostgresSslKeyArgs']]):
        pulumi.set(self, "ssl_key", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The SSL mode for the Postgres database.
        """
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If the connection should wait for validation.
        """
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "validate", value)


@pulumi.input_type
class _ConnectionPostgresState:
    def __init__(__self__, *,
                 aws_privatelink: Optional[pulumi.Input['ConnectionPostgresAwsPrivatelinkArgs']] = None,
                 comment: Optional[pulumi.Input[builtins.str]] = None,
                 database: Optional[pulumi.Input[builtins.str]] = None,
                 database_name: Optional[pulumi.Input[builtins.str]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 ownership_role: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input['ConnectionPostgresPasswordArgs']] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 qualified_sql_name: Optional[pulumi.Input[builtins.str]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[builtins.str]] = None,
                 ssh_tunnel: Optional[pulumi.Input['ConnectionPostgresSshTunnelArgs']] = None,
                 ssl_certificate: Optional[pulumi.Input['ConnectionPostgresSslCertificateArgs']] = None,
                 ssl_certificate_authority: Optional[pulumi.Input['ConnectionPostgresSslCertificateAuthorityArgs']] = None,
                 ssl_key: Optional[pulumi.Input['ConnectionPostgresSslKeyArgs']] = None,
                 ssl_mode: Optional[pulumi.Input[builtins.str]] = None,
                 user: Optional[pulumi.Input['ConnectionPostgresUserArgs']] = None,
                 validate: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering ConnectionPostgres resources.
        :param pulumi.Input['ConnectionPostgresAwsPrivatelinkArgs'] aws_privatelink: The AWS PrivateLink configuration for the Postgres database.
        :param pulumi.Input[builtins.str] comment: Comment on an object in the database.
        :param pulumi.Input[builtins.str] database: The target Postgres database.
        :param pulumi.Input[builtins.str] database_name: The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
        :param pulumi.Input[builtins.str] host: The Postgres database hostname.
        :param pulumi.Input[builtins.str] name: The identifier for the connection.
        :param pulumi.Input[builtins.str] ownership_role: The owernship role of the object.
        :param pulumi.Input['ConnectionPostgresPasswordArgs'] password: The Postgres database password.
        :param pulumi.Input[builtins.int] port: The Postgres database port.
        :param pulumi.Input[builtins.str] qualified_sql_name: The fully qualified name of the connection.
        :param pulumi.Input[builtins.str] region: The region to use for the resource connection. If not set, the default region is used.
        :param pulumi.Input[builtins.str] schema_name: The identifier for the connection schema in Materialize. Defaults to `public`.
        :param pulumi.Input['ConnectionPostgresSshTunnelArgs'] ssh_tunnel: The SSH tunnel configuration for the Postgres database.
        :param pulumi.Input['ConnectionPostgresSslCertificateArgs'] ssl_certificate: The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        :param pulumi.Input['ConnectionPostgresSslCertificateAuthorityArgs'] ssl_certificate_authority: The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        :param pulumi.Input['ConnectionPostgresSslKeyArgs'] ssl_key: The client key for the Postgres database.
        :param pulumi.Input[builtins.str] ssl_mode: The SSL mode for the Postgres database.
        :param pulumi.Input['ConnectionPostgresUserArgs'] user: The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        :param pulumi.Input[builtins.bool] validate: If the connection should wait for validation.
        """
        if aws_privatelink is not None:
            pulumi.set(__self__, "aws_privatelink", aws_privatelink)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ownership_role is not None:
            pulumi.set(__self__, "ownership_role", ownership_role)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if qualified_sql_name is not None:
            pulumi.set(__self__, "qualified_sql_name", qualified_sql_name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if ssh_tunnel is not None:
            pulumi.set(__self__, "ssh_tunnel", ssh_tunnel)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if ssl_certificate_authority is not None:
            pulumi.set(__self__, "ssl_certificate_authority", ssl_certificate_authority)
        if ssl_key is not None:
            pulumi.set(__self__, "ssl_key", ssl_key)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)

    @property
    @pulumi.getter(name="awsPrivatelink")
    def aws_privatelink(self) -> Optional[pulumi.Input['ConnectionPostgresAwsPrivatelinkArgs']]:
        """
        The AWS PrivateLink configuration for the Postgres database.
        """
        return pulumi.get(self, "aws_privatelink")

    @aws_privatelink.setter
    def aws_privatelink(self, value: Optional[pulumi.Input['ConnectionPostgresAwsPrivatelinkArgs']]):
        pulumi.set(self, "aws_privatelink", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Comment on an object in the database.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The target Postgres database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Postgres database hostname.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownershipRole")
    def ownership_role(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The owernship role of the object.
        """
        return pulumi.get(self, "ownership_role")

    @ownership_role.setter
    def ownership_role(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ownership_role", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input['ConnectionPostgresPasswordArgs']]:
        """
        The Postgres database password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input['ConnectionPostgresPasswordArgs']]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The Postgres database port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="qualifiedSqlName")
    def qualified_sql_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The fully qualified name of the connection.
        """
        return pulumi.get(self, "qualified_sql_name")

    @qualified_sql_name.setter
    def qualified_sql_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "qualified_sql_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The region to use for the resource connection. If not set, the default region is used.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The identifier for the connection schema in Materialize. Defaults to `public`.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="sshTunnel")
    def ssh_tunnel(self) -> Optional[pulumi.Input['ConnectionPostgresSshTunnelArgs']]:
        """
        The SSH tunnel configuration for the Postgres database.
        """
        return pulumi.get(self, "ssh_tunnel")

    @ssh_tunnel.setter
    def ssh_tunnel(self, value: Optional[pulumi.Input['ConnectionPostgresSshTunnelArgs']]):
        pulumi.set(self, "ssh_tunnel", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input['ConnectionPostgresSslCertificateArgs']]:
        """
        The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input['ConnectionPostgresSslCertificateArgs']]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="sslCertificateAuthority")
    def ssl_certificate_authority(self) -> Optional[pulumi.Input['ConnectionPostgresSslCertificateAuthorityArgs']]:
        """
        The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        """
        return pulumi.get(self, "ssl_certificate_authority")

    @ssl_certificate_authority.setter
    def ssl_certificate_authority(self, value: Optional[pulumi.Input['ConnectionPostgresSslCertificateAuthorityArgs']]):
        pulumi.set(self, "ssl_certificate_authority", value)

    @property
    @pulumi.getter(name="sslKey")
    def ssl_key(self) -> Optional[pulumi.Input['ConnectionPostgresSslKeyArgs']]:
        """
        The client key for the Postgres database.
        """
        return pulumi.get(self, "ssl_key")

    @ssl_key.setter
    def ssl_key(self, value: Optional[pulumi.Input['ConnectionPostgresSslKeyArgs']]):
        pulumi.set(self, "ssl_key", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The SSL mode for the Postgres database.
        """
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input['ConnectionPostgresUserArgs']]:
        """
        The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input['ConnectionPostgresUserArgs']]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If the connection should wait for validation.
        """
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "validate", value)


@pulumi.type_token("materialize:index/connectionPostgres:ConnectionPostgres")
class ConnectionPostgres(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_privatelink: Optional[pulumi.Input[Union['ConnectionPostgresAwsPrivatelinkArgs', 'ConnectionPostgresAwsPrivatelinkArgsDict']]] = None,
                 comment: Optional[pulumi.Input[builtins.str]] = None,
                 database: Optional[pulumi.Input[builtins.str]] = None,
                 database_name: Optional[pulumi.Input[builtins.str]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 ownership_role: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[Union['ConnectionPostgresPasswordArgs', 'ConnectionPostgresPasswordArgsDict']]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[builtins.str]] = None,
                 ssh_tunnel: Optional[pulumi.Input[Union['ConnectionPostgresSshTunnelArgs', 'ConnectionPostgresSshTunnelArgsDict']]] = None,
                 ssl_certificate: Optional[pulumi.Input[Union['ConnectionPostgresSslCertificateArgs', 'ConnectionPostgresSslCertificateArgsDict']]] = None,
                 ssl_certificate_authority: Optional[pulumi.Input[Union['ConnectionPostgresSslCertificateAuthorityArgs', 'ConnectionPostgresSslCertificateAuthorityArgsDict']]] = None,
                 ssl_key: Optional[pulumi.Input[Union['ConnectionPostgresSslKeyArgs', 'ConnectionPostgresSslKeyArgsDict']]] = None,
                 ssl_mode: Optional[pulumi.Input[builtins.str]] = None,
                 user: Optional[pulumi.Input[Union['ConnectionPostgresUserArgs', 'ConnectionPostgresUserArgsDict']]] = None,
                 validate: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        A Postgres connection establishes a link to a single database of a PostgreSQL server.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_materialize as materialize

        # Create a Postgres Connection with SSH tunnel & plain text user
        example_postgres_connection = materialize.ConnectionPostgres("examplePostgresConnection",
            database="example",
            host="instance.foo000.us-west-1.rds.amazonaws.com",
            password={
                "database_name": "database",
                "name": "example",
                "schema_name": "schema",
            },
            port=5432,
            ssh_tunnel={
                "name": "example",
            },
            user={
                "text": "my_user",
            })
        ```

        ## Import

        The `pulumi import` command can be used, for example:

        Connections can be imported using the connection id:

        ```sh
        $ pulumi import materialize:index/connectionPostgres:ConnectionPostgres example <region>:<connection_id>
        ```

        Connection id and information be found in the `mz_catalog.mz_connections` table

        The region is the region where the database is located (e.g. aws/us-east-1)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ConnectionPostgresAwsPrivatelinkArgs', 'ConnectionPostgresAwsPrivatelinkArgsDict']] aws_privatelink: The AWS PrivateLink configuration for the Postgres database.
        :param pulumi.Input[builtins.str] comment: Comment on an object in the database.
        :param pulumi.Input[builtins.str] database: The target Postgres database.
        :param pulumi.Input[builtins.str] database_name: The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
        :param pulumi.Input[builtins.str] host: The Postgres database hostname.
        :param pulumi.Input[builtins.str] name: The identifier for the connection.
        :param pulumi.Input[builtins.str] ownership_role: The owernship role of the object.
        :param pulumi.Input[Union['ConnectionPostgresPasswordArgs', 'ConnectionPostgresPasswordArgsDict']] password: The Postgres database password.
        :param pulumi.Input[builtins.int] port: The Postgres database port.
        :param pulumi.Input[builtins.str] region: The region to use for the resource connection. If not set, the default region is used.
        :param pulumi.Input[builtins.str] schema_name: The identifier for the connection schema in Materialize. Defaults to `public`.
        :param pulumi.Input[Union['ConnectionPostgresSshTunnelArgs', 'ConnectionPostgresSshTunnelArgsDict']] ssh_tunnel: The SSH tunnel configuration for the Postgres database.
        :param pulumi.Input[Union['ConnectionPostgresSslCertificateArgs', 'ConnectionPostgresSslCertificateArgsDict']] ssl_certificate: The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        :param pulumi.Input[Union['ConnectionPostgresSslCertificateAuthorityArgs', 'ConnectionPostgresSslCertificateAuthorityArgsDict']] ssl_certificate_authority: The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        :param pulumi.Input[Union['ConnectionPostgresSslKeyArgs', 'ConnectionPostgresSslKeyArgsDict']] ssl_key: The client key for the Postgres database.
        :param pulumi.Input[builtins.str] ssl_mode: The SSL mode for the Postgres database.
        :param pulumi.Input[Union['ConnectionPostgresUserArgs', 'ConnectionPostgresUserArgsDict']] user: The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        :param pulumi.Input[builtins.bool] validate: If the connection should wait for validation.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectionPostgresArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Postgres connection establishes a link to a single database of a PostgreSQL server.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_materialize as materialize

        # Create a Postgres Connection with SSH tunnel & plain text user
        example_postgres_connection = materialize.ConnectionPostgres("examplePostgresConnection",
            database="example",
            host="instance.foo000.us-west-1.rds.amazonaws.com",
            password={
                "database_name": "database",
                "name": "example",
                "schema_name": "schema",
            },
            port=5432,
            ssh_tunnel={
                "name": "example",
            },
            user={
                "text": "my_user",
            })
        ```

        ## Import

        The `pulumi import` command can be used, for example:

        Connections can be imported using the connection id:

        ```sh
        $ pulumi import materialize:index/connectionPostgres:ConnectionPostgres example <region>:<connection_id>
        ```

        Connection id and information be found in the `mz_catalog.mz_connections` table

        The region is the region where the database is located (e.g. aws/us-east-1)

        :param str resource_name: The name of the resource.
        :param ConnectionPostgresArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectionPostgresArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_privatelink: Optional[pulumi.Input[Union['ConnectionPostgresAwsPrivatelinkArgs', 'ConnectionPostgresAwsPrivatelinkArgsDict']]] = None,
                 comment: Optional[pulumi.Input[builtins.str]] = None,
                 database: Optional[pulumi.Input[builtins.str]] = None,
                 database_name: Optional[pulumi.Input[builtins.str]] = None,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 ownership_role: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[Union['ConnectionPostgresPasswordArgs', 'ConnectionPostgresPasswordArgsDict']]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 region: Optional[pulumi.Input[builtins.str]] = None,
                 schema_name: Optional[pulumi.Input[builtins.str]] = None,
                 ssh_tunnel: Optional[pulumi.Input[Union['ConnectionPostgresSshTunnelArgs', 'ConnectionPostgresSshTunnelArgsDict']]] = None,
                 ssl_certificate: Optional[pulumi.Input[Union['ConnectionPostgresSslCertificateArgs', 'ConnectionPostgresSslCertificateArgsDict']]] = None,
                 ssl_certificate_authority: Optional[pulumi.Input[Union['ConnectionPostgresSslCertificateAuthorityArgs', 'ConnectionPostgresSslCertificateAuthorityArgsDict']]] = None,
                 ssl_key: Optional[pulumi.Input[Union['ConnectionPostgresSslKeyArgs', 'ConnectionPostgresSslKeyArgsDict']]] = None,
                 ssl_mode: Optional[pulumi.Input[builtins.str]] = None,
                 user: Optional[pulumi.Input[Union['ConnectionPostgresUserArgs', 'ConnectionPostgresUserArgsDict']]] = None,
                 validate: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectionPostgresArgs.__new__(ConnectionPostgresArgs)

            __props__.__dict__["aws_privatelink"] = aws_privatelink
            __props__.__dict__["comment"] = comment
            if database is None and not opts.urn:
                raise TypeError("Missing required property 'database'")
            __props__.__dict__["database"] = database
            __props__.__dict__["database_name"] = database_name
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["name"] = name
            __props__.__dict__["ownership_role"] = ownership_role
            __props__.__dict__["password"] = password
            __props__.__dict__["port"] = port
            __props__.__dict__["region"] = region
            __props__.__dict__["schema_name"] = schema_name
            __props__.__dict__["ssh_tunnel"] = ssh_tunnel
            __props__.__dict__["ssl_certificate"] = ssl_certificate
            __props__.__dict__["ssl_certificate_authority"] = ssl_certificate_authority
            __props__.__dict__["ssl_key"] = ssl_key
            __props__.__dict__["ssl_mode"] = ssl_mode
            if user is None and not opts.urn:
                raise TypeError("Missing required property 'user'")
            __props__.__dict__["user"] = user
            __props__.__dict__["validate"] = validate
            __props__.__dict__["qualified_sql_name"] = None
        super(ConnectionPostgres, __self__).__init__(
            'materialize:index/connectionPostgres:ConnectionPostgres',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aws_privatelink: Optional[pulumi.Input[Union['ConnectionPostgresAwsPrivatelinkArgs', 'ConnectionPostgresAwsPrivatelinkArgsDict']]] = None,
            comment: Optional[pulumi.Input[builtins.str]] = None,
            database: Optional[pulumi.Input[builtins.str]] = None,
            database_name: Optional[pulumi.Input[builtins.str]] = None,
            host: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            ownership_role: Optional[pulumi.Input[builtins.str]] = None,
            password: Optional[pulumi.Input[Union['ConnectionPostgresPasswordArgs', 'ConnectionPostgresPasswordArgsDict']]] = None,
            port: Optional[pulumi.Input[builtins.int]] = None,
            qualified_sql_name: Optional[pulumi.Input[builtins.str]] = None,
            region: Optional[pulumi.Input[builtins.str]] = None,
            schema_name: Optional[pulumi.Input[builtins.str]] = None,
            ssh_tunnel: Optional[pulumi.Input[Union['ConnectionPostgresSshTunnelArgs', 'ConnectionPostgresSshTunnelArgsDict']]] = None,
            ssl_certificate: Optional[pulumi.Input[Union['ConnectionPostgresSslCertificateArgs', 'ConnectionPostgresSslCertificateArgsDict']]] = None,
            ssl_certificate_authority: Optional[pulumi.Input[Union['ConnectionPostgresSslCertificateAuthorityArgs', 'ConnectionPostgresSslCertificateAuthorityArgsDict']]] = None,
            ssl_key: Optional[pulumi.Input[Union['ConnectionPostgresSslKeyArgs', 'ConnectionPostgresSslKeyArgsDict']]] = None,
            ssl_mode: Optional[pulumi.Input[builtins.str]] = None,
            user: Optional[pulumi.Input[Union['ConnectionPostgresUserArgs', 'ConnectionPostgresUserArgsDict']]] = None,
            validate: Optional[pulumi.Input[builtins.bool]] = None) -> 'ConnectionPostgres':
        """
        Get an existing ConnectionPostgres resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ConnectionPostgresAwsPrivatelinkArgs', 'ConnectionPostgresAwsPrivatelinkArgsDict']] aws_privatelink: The AWS PrivateLink configuration for the Postgres database.
        :param pulumi.Input[builtins.str] comment: Comment on an object in the database.
        :param pulumi.Input[builtins.str] database: The target Postgres database.
        :param pulumi.Input[builtins.str] database_name: The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
        :param pulumi.Input[builtins.str] host: The Postgres database hostname.
        :param pulumi.Input[builtins.str] name: The identifier for the connection.
        :param pulumi.Input[builtins.str] ownership_role: The owernship role of the object.
        :param pulumi.Input[Union['ConnectionPostgresPasswordArgs', 'ConnectionPostgresPasswordArgsDict']] password: The Postgres database password.
        :param pulumi.Input[builtins.int] port: The Postgres database port.
        :param pulumi.Input[builtins.str] qualified_sql_name: The fully qualified name of the connection.
        :param pulumi.Input[builtins.str] region: The region to use for the resource connection. If not set, the default region is used.
        :param pulumi.Input[builtins.str] schema_name: The identifier for the connection schema in Materialize. Defaults to `public`.
        :param pulumi.Input[Union['ConnectionPostgresSshTunnelArgs', 'ConnectionPostgresSshTunnelArgsDict']] ssh_tunnel: The SSH tunnel configuration for the Postgres database.
        :param pulumi.Input[Union['ConnectionPostgresSslCertificateArgs', 'ConnectionPostgresSslCertificateArgsDict']] ssl_certificate: The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        :param pulumi.Input[Union['ConnectionPostgresSslCertificateAuthorityArgs', 'ConnectionPostgresSslCertificateAuthorityArgsDict']] ssl_certificate_authority: The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        :param pulumi.Input[Union['ConnectionPostgresSslKeyArgs', 'ConnectionPostgresSslKeyArgsDict']] ssl_key: The client key for the Postgres database.
        :param pulumi.Input[builtins.str] ssl_mode: The SSL mode for the Postgres database.
        :param pulumi.Input[Union['ConnectionPostgresUserArgs', 'ConnectionPostgresUserArgsDict']] user: The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        :param pulumi.Input[builtins.bool] validate: If the connection should wait for validation.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectionPostgresState.__new__(_ConnectionPostgresState)

        __props__.__dict__["aws_privatelink"] = aws_privatelink
        __props__.__dict__["comment"] = comment
        __props__.__dict__["database"] = database
        __props__.__dict__["database_name"] = database_name
        __props__.__dict__["host"] = host
        __props__.__dict__["name"] = name
        __props__.__dict__["ownership_role"] = ownership_role
        __props__.__dict__["password"] = password
        __props__.__dict__["port"] = port
        __props__.__dict__["qualified_sql_name"] = qualified_sql_name
        __props__.__dict__["region"] = region
        __props__.__dict__["schema_name"] = schema_name
        __props__.__dict__["ssh_tunnel"] = ssh_tunnel
        __props__.__dict__["ssl_certificate"] = ssl_certificate
        __props__.__dict__["ssl_certificate_authority"] = ssl_certificate_authority
        __props__.__dict__["ssl_key"] = ssl_key
        __props__.__dict__["ssl_mode"] = ssl_mode
        __props__.__dict__["user"] = user
        __props__.__dict__["validate"] = validate
        return ConnectionPostgres(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="awsPrivatelink")
    def aws_privatelink(self) -> pulumi.Output[Optional['outputs.ConnectionPostgresAwsPrivatelink']]:
        """
        The AWS PrivateLink configuration for the Postgres database.
        """
        return pulumi.get(self, "aws_privatelink")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Comment on an object in the database.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def database(self) -> pulumi.Output[builtins.str]:
        """
        The target Postgres database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The identifier for the connection database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[builtins.str]:
        """
        The Postgres database hostname.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The identifier for the connection.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownershipRole")
    def ownership_role(self) -> pulumi.Output[builtins.str]:
        """
        The owernship role of the object.
        """
        return pulumi.get(self, "ownership_role")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional['outputs.ConnectionPostgresPassword']]:
        """
        The Postgres database password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The Postgres database port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="qualifiedSqlName")
    def qualified_sql_name(self) -> pulumi.Output[builtins.str]:
        """
        The fully qualified name of the connection.
        """
        return pulumi.get(self, "qualified_sql_name")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[builtins.str]:
        """
        The region to use for the resource connection. If not set, the default region is used.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The identifier for the connection schema in Materialize. Defaults to `public`.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sshTunnel")
    def ssh_tunnel(self) -> pulumi.Output[Optional['outputs.ConnectionPostgresSshTunnel']]:
        """
        The SSH tunnel configuration for the Postgres database.
        """
        return pulumi.get(self, "ssh_tunnel")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> pulumi.Output[Optional['outputs.ConnectionPostgresSslCertificate']]:
        """
        The client certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        """
        return pulumi.get(self, "ssl_certificate")

    @property
    @pulumi.getter(name="sslCertificateAuthority")
    def ssl_certificate_authority(self) -> pulumi.Output[Optional['outputs.ConnectionPostgresSslCertificateAuthority']]:
        """
        The CA certificate for the Postgres database.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        """
        return pulumi.get(self, "ssl_certificate_authority")

    @property
    @pulumi.getter(name="sslKey")
    def ssl_key(self) -> pulumi.Output[Optional['outputs.ConnectionPostgresSslKey']]:
        """
        The client key for the Postgres database.
        """
        return pulumi.get(self, "ssl_key")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The SSL mode for the Postgres database.
        """
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output['outputs.ConnectionPostgresUser']:
        """
        The Postgres database username.. Can be supplied as either free text using `text` or reference to a secret object using `secret`.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def validate(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        If the connection should wait for validation.
        """
        return pulumi.get(self, "validate")

