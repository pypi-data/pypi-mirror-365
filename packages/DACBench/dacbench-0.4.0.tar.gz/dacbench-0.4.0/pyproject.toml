[build-system]
requires = ["setuptools>=75.1.0", "wheel", "setuptools_scm>3"]
build-backend = "setuptools.build_meta"

[project]
name = "DACBench"
version = "0.4.0"
description = "Dynamic Algorithm Configuration Benchmark"
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["DAC", "Dynamic Algorithm Configuration", "HPO"]
authors = [
    { name = "Theresa Eimer", email = "t.eimer@ai.uni-hannover.de" }
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Natural Language :: English",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development"
]
requires-python = ">=3.10"
dependencies = [
  "gymnasium<=0.29.1",
  "imageio~=2.35.1",
  "numpy==1.26.4",
  "pandas==2.2.3",
  "matplotlib==3.9.2",
  "seaborn==0.13.2",
  "configspace~=1.2.1",
  "scikit-learn==1.5.2",
  "scipy==1.14.1", 
  "jupyter==1.0.0",
  "Pyro4==4.82",
  "ioh==0.3.17"]

[project.urls]
Homepage = "https://github.com/automl/DACBench"
Documentation = "https://automl.github.io/DACBench/main/"
Repository = "https://github.com/automl/DACBench"
Issues = "https://github.com/automl/DACBench/issues"
Changelog = "https://github.com/automl/DACBench/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest==8.3.3",
    "coverage[toml]==7.6.1",
    "pre-commit==3.8.0",
    "ruff==0.6.7"
]
example = [
    "tabulate==0.9.0",
    "rich"
]
docs = [
    "automl-sphinx-theme==0.2.0"
]
all = [
  "ioh==0.3.17", 
  "modcma==1.0.8",
  "torchvision==0.19.1",
  "torch==2.4.1",
  "uuid"
]

[tool.extras]
cma = ["ioh==0.3.17", 
  "modcma==1.0.8"]
sgd = [
    "torchvision==0.19.1",
    "torch==2.4.1",
]
theory = ["uuid"]

[tool.ruff]
target-version = "py310"
line-length = 88
output-format = "concise"
src = ["src"]   # , "examples"
lint.extend-safe-fixes = ["ALL"]

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

lint.select = [
  "A",
  # "ANN", # Handled by mypy
  "ARG",
  "B",
  "BLE",
  "COM",
  "C4",
  "D",
  # "DTZ",  # One day I should know how to utilize timezones and dates...
  "E",
  # "EXE", Meh
  "ERA",
  "F",
  "FBT",
  "I",
  # "ISC",  # Favours implicit string concatenation
  "INP",
  # "INT", # I don't understand this one
  "N",
  "NPY",
  "PD",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "PIE",
  "PT",
  "PTH",
  # "PYI", # Specific to .pyi files for type stubs
  "Q",
  "PGH004",
  "RET",
  "RUF",
  "C90",
  "S",
  # "SLF",    # Private member accessed (sure, it's python)
  "SIM",
  # "TRY", # Good in principle, would take a lot of work to statisfy
  "T10",
  "T20",
  "TID",
  "TCH",
  "UP",
  "N",
  "W",
  "YTT",
]

lint.ignore = [
  "D104",    # Missing docstring in public package
  "D105",    # Missing docstring in magic mthod
  "D203",    # 1 blank line required before class docstring
  "D205",    # 1 blank line between summary and description
  "D401",    # First line of docstring should be in imperative mood
  "N806",    # Variable X in function should be lowercase
  "E731",    # Do not assign a lambda expression, use a def
  "A003",    # Shadowing a builtin
  "S101",    # Use of assert detected.
  "W292",    # No newline at end of file
  "PLC1901", # "" can be simplified to be falsey
  "TCH003",  # Move stdlib import into TYPE_CHECKING
  "B010",    # Do not use `setattr`
  "COM812",
  # These tend to be lighweight and confuse pyright
  "PTH123",
  "PTH109",
  "T201",
  "ERA001",
  "N812",
  "FBT001",
  "FBT002",
  "FBT003",
  "S301",
  "SIM115",
  "C901",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  "PLR2004",
  "ARG001",
  "ARG002",
  "ARG005",
  "INP001",
  "PLR0911",
  "PLW2901",
  "S603",
  "S607"
]

exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "docs",
  "*envs/downward/*",
  "tests",
  "dacbench/challenge_benchmarks",
  "*.ipynb"
]

# Exclude a variety of commonly ignored directories.
[tool.ruff.lint.per-file-ignores]
"*test/*.py" = [
  "S101",
  "D103",
  "ANN001",
  "ANN201",
  "FBT001",
  "D100",
  "PLR2004",
  "PD901",   #  X is a bad variable name. (pandas)
  "TCH",
  "N803",
  "D100",
  "D101",
  "D102",
  "D107",
  "INP001",
  "ARG002"
]

"__init__.py" = ["I002"]
"examples/*" = ["INP001", "I002", "E741", "D101", "D103", "T20", "D415", "ERA001", "E402", "E501"]
"docs/*" = ["INP001"]


[tool.ruff.lint.isort]
known-first-party = ["amltk"]
known-third-party = ["sklearn"]
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
force-wrap-aliases = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10 # Changed from default of 5

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::FutureWarning"
]
testpaths = ["tests"]

[tool.coverage.run]
omit = ["dacbench/envs/fast-downward/*", "algorithms"]
include = ['dacbench/*']

[tool.coverage.html]
directory = "coverage_report"

[tool.black]
line-length = 88
target_version = ['py36']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | dacbench/envs/fast-downward
    | algorithms
  )/
)
'''
