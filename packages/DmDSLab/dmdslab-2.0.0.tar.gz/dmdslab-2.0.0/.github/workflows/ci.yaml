name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,uci]

    - name: Run linting with Ruff
      run: |
        ruff check dmdslab/ tests/
        ruff format --check dmdslab/ tests/
      continue-on-error: true

    - name: Run tests with pytest
      run: |
        pytest tests/ -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build and validate package
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Get package version
      id: get-version
      run: |
        VERSION=$(grep "__version__" dmdslab/__init__.py | head -1 | sed 's/.*=.*[\"'\'']\([^\"'\'']*\)[\"'\''].*/\1/')
        echo "ðŸ“¦ Package version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build package
      run: python -m build

    - name: Check package with twine
      run: twine check dist/*

    - name: List distribution files
      run: |
        echo "ðŸ“¦ Built distributions:"
        ls -la dist/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ steps.get-version.outputs.version }}
        path: dist/

    - name: Create build summary
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        echo "## ðŸ“Š Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Package:** DmDSLab" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Build Artifacts" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        ls -la dist/ >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸš€ Manual Publishing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "To publish this version manually:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# For TestPyPI:" >> $GITHUB_STEP_SUMMARY
        echo "./publish_to_pypi.ps1 -TestRepo" >> $GITHUB_STEP_SUMMARY
        echo "# or" >> $GITHUB_STEP_SUMMARY
        echo "./bash_publish_script.sh --test-repo" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# For PyPI:" >> $GITHUB_STEP_SUMMARY
        echo "./publish_to_pypi.ps1" >> $GITHUB_STEP_SUMMARY
        echo "# or" >> $GITHUB_STEP_SUMMARY
        echo "./bash_publish_script.sh" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  docs:
    name: Build documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install sphinx sphinx-rtd-theme

    - name: Build docs
      run: |
        mkdir -p docs/
        echo "# DmDSLab Documentation" > docs/index.md
        echo "Documentation will be available soon!" >> docs/index.md

    - name: Upload docs
      uses: actions/upload-artifact@v4
      with:
        name: docs
        path: docs/