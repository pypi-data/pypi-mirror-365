# coding: utf-8

"""
    candidates-api-activities

    The Note APIs allows you to Add, Get, Update and Delete Notes.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phenom.commons.api_client import ApiClient


class CandidateActivitiesApi(object):
    base_path = "/candidates-api/activities"  # your base path

    def __init__(self, token, gateway_url, apikey, api_client=None):
        if api_client is None:
            api_client = ApiClient(gateway_url + self.base_path, apikey, token)
        self.api_client = api_client

    def get_note_activities(self, candidate_id, x_ph_userid, **kwargs):  # noqa: E501
        """Get Note Activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_activities(candidate_id, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: (required)
        :param str x_ph_userid: (required)
        :param int _from: The number of activities to skip before starting to collect the result.
        :param int size: Number of Activities to be included in the result.
        :return: GetNoteActivities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_note_activities_with_http_info(candidate_id, x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_note_activities_with_http_info(candidate_id, x_ph_userid, **kwargs)  # noqa: E501
            return data

    def get_note_activities_with_http_info(self, candidate_id, x_ph_userid, **kwargs):  # noqa: E501
        """Get Note Activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_activities_with_http_info(candidate_id, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: (required)
        :param str x_ph_userid: (required)
        :param int _from: The number of activities to skip before starting to collect the result.
        :param int size: Number of Activities to be included in the result.
        :return: GetNoteActivities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_userid', '_from', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_activities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_note_activities`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `get_note_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/note-activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNoteActivities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_profile_action_activities(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Get Profile Action Activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_action_activities(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: Id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: ProfileActionActivities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_profile_action_activities_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_profile_action_activities_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_profile_action_activities_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Get Profile Action Activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_action_activities_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: Id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: ProfileActionActivities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profile_action_activities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_profile_action_activities`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_profile_action_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/profile-action-activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileActionActivities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_profile_update_activities(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Get Profile Update Activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_update_activities(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: Id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: ProfileUpdateActivities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_profile_update_activities_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_profile_update_activities_with_http_info(candidate_id, x_ph_user_id, **kwargs)  # noqa: E501
            return data

    def get_profile_update_activities_with_http_info(self, candidate_id, x_ph_user_id, **kwargs):  # noqa: E501
        """Get Profile Update Activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_profile_update_activities_with_http_info(candidate_id, x_ph_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: Id of the candidate (required)
        :param str x_ph_user_id: (required)
        :return: ProfileUpdateActivities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profile_update_activities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_profile_update_activities`")  # noqa: E501
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_profile_update_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/profile-update-activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileUpdateActivities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
