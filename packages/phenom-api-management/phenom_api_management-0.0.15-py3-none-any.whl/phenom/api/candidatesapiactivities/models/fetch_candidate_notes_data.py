# coding: utf-8

"""
    candidates-api-activities

    The Note APIs allows you to Add, Get, Update and Delete Notes.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class FetchCandidateNotesData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'decision_status': 'str',
        'job_id': 'str',
        'note_type': 'str',
        'recruiter_email': 'str',
        'recruiter_name': 'str',
        'from_name': 'str',
        'updated_date': 'str',
        'created_date': 'str',
        'notes': 'str'
    }

    attribute_map = {
        'decision_status': 'decision_status',
        'job_id': 'jobId',
        'note_type': 'noteType',
        'recruiter_email': 'recruiterEmail',
        'recruiter_name': 'recruiterName',
        'from_name': 'fromName',
        'updated_date': 'updatedDate',
        'created_date': 'createdDate',
        'notes': 'notes'
    }

    def __init__(self, decision_status=None, job_id=None, note_type=None, recruiter_email=None, recruiter_name=None, from_name=None, updated_date=None, created_date=None, notes=None):  # noqa: E501
        """FetchCandidateNotesData - a model defined in Swagger"""  # noqa: E501
        self._decision_status = None
        self._job_id = None
        self._note_type = None
        self._recruiter_email = None
        self._recruiter_name = None
        self._from_name = None
        self._updated_date = None
        self._created_date = None
        self._notes = None
        self.discriminator = None
        self.decision_status = decision_status
        self.job_id = job_id
        self.note_type = note_type
        self.recruiter_email = recruiter_email
        self.recruiter_name = recruiter_name
        self.from_name = from_name
        self.updated_date = updated_date
        self.created_date = created_date
        self.notes = notes

    @property
    def decision_status(self):
        """Gets the decision_status of this FetchCandidateNotesData.  # noqa: E501

        The decision status.  # noqa: E501

        :return: The decision_status of this FetchCandidateNotesData.  # noqa: E501
        :rtype: str
        """
        return self._decision_status

    @decision_status.setter
    def decision_status(self, decision_status):
        """Sets the decision_status of this FetchCandidateNotesData.

        The decision status.  # noqa: E501

        :param decision_status: The decision_status of this FetchCandidateNotesData.  # noqa: E501
        :type: str
        """
        if decision_status is None:
            raise ValueError("Invalid value for `decision_status`, must not be `None`")  # noqa: E501

        self._decision_status = decision_status

    @property
    def job_id(self):
        """Gets the job_id of this FetchCandidateNotesData.  # noqa: E501

        The unique identifier for job.  # noqa: E501

        :return: The job_id of this FetchCandidateNotesData.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this FetchCandidateNotesData.

        The unique identifier for job.  # noqa: E501

        :param job_id: The job_id of this FetchCandidateNotesData.  # noqa: E501
        :type: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def note_type(self):
        """Gets the note_type of this FetchCandidateNotesData.  # noqa: E501

        The type of note.  # noqa: E501

        :return: The note_type of this FetchCandidateNotesData.  # noqa: E501
        :rtype: str
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type):
        """Sets the note_type of this FetchCandidateNotesData.

        The type of note.  # noqa: E501

        :param note_type: The note_type of this FetchCandidateNotesData.  # noqa: E501
        :type: str
        """
        if note_type is None:
            raise ValueError("Invalid value for `note_type`, must not be `None`")  # noqa: E501

        self._note_type = note_type

    @property
    def recruiter_email(self):
        """Gets the recruiter_email of this FetchCandidateNotesData.  # noqa: E501

        The email of the recruiter.  # noqa: E501

        :return: The recruiter_email of this FetchCandidateNotesData.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_email

    @recruiter_email.setter
    def recruiter_email(self, recruiter_email):
        """Sets the recruiter_email of this FetchCandidateNotesData.

        The email of the recruiter.  # noqa: E501

        :param recruiter_email: The recruiter_email of this FetchCandidateNotesData.  # noqa: E501
        :type: str
        """
        if recruiter_email is None:
            raise ValueError("Invalid value for `recruiter_email`, must not be `None`")  # noqa: E501

        self._recruiter_email = recruiter_email

    @property
    def recruiter_name(self):
        """Gets the recruiter_name of this FetchCandidateNotesData.  # noqa: E501

        The name of the recruiter.  # noqa: E501

        :return: The recruiter_name of this FetchCandidateNotesData.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_name

    @recruiter_name.setter
    def recruiter_name(self, recruiter_name):
        """Sets the recruiter_name of this FetchCandidateNotesData.

        The name of the recruiter.  # noqa: E501

        :param recruiter_name: The recruiter_name of this FetchCandidateNotesData.  # noqa: E501
        :type: str
        """
        if recruiter_name is None:
            raise ValueError("Invalid value for `recruiter_name`, must not be `None`")  # noqa: E501

        self._recruiter_name = recruiter_name

    @property
    def from_name(self):
        """Gets the from_name of this FetchCandidateNotesData.  # noqa: E501

        From Name.  # noqa: E501

        :return: The from_name of this FetchCandidateNotesData.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this FetchCandidateNotesData.

        From Name.  # noqa: E501

        :param from_name: The from_name of this FetchCandidateNotesData.  # noqa: E501
        :type: str
        """
        if from_name is None:
            raise ValueError("Invalid value for `from_name`, must not be `None`")  # noqa: E501

        self._from_name = from_name

    @property
    def updated_date(self):
        """Gets the updated_date of this FetchCandidateNotesData.  # noqa: E501

        The date on which the note has been updated.  # noqa: E501

        :return: The updated_date of this FetchCandidateNotesData.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this FetchCandidateNotesData.

        The date on which the note has been updated.  # noqa: E501

        :param updated_date: The updated_date of this FetchCandidateNotesData.  # noqa: E501
        :type: str
        """
        if updated_date is None:
            raise ValueError("Invalid value for `updated_date`, must not be `None`")  # noqa: E501

        self._updated_date = updated_date

    @property
    def created_date(self):
        """Gets the created_date of this FetchCandidateNotesData.  # noqa: E501

        The date on which note has been created.  # noqa: E501

        :return: The created_date of this FetchCandidateNotesData.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this FetchCandidateNotesData.

        The date on which note has been created.  # noqa: E501

        :param created_date: The created_date of this FetchCandidateNotesData.  # noqa: E501
        :type: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def notes(self):
        """Gets the notes of this FetchCandidateNotesData.  # noqa: E501

        The Notes.  # noqa: E501

        :return: The notes of this FetchCandidateNotesData.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this FetchCandidateNotesData.

        The Notes.  # noqa: E501

        :param notes: The notes of this FetchCandidateNotesData.  # noqa: E501
        :type: str
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")  # noqa: E501

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FetchCandidateNotesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FetchCandidateNotesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
