# coding: utf-8

"""
    candidates-api-activities

    The Note APIs allows you to Add, Get, Update and Delete Notes.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class UpdateCandidateNote(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'note_type': 'str',
        'note_text': 'str',
        'as_private': 'bool',
        'recruiter_name': 'str'
    }

    attribute_map = {
        'note_type': 'noteType',
        'note_text': 'noteText',
        'as_private': 'asPrivate',
        'recruiter_name': 'recruiterName'
    }

    def __init__(self, note_type=None, note_text=None, as_private=None, recruiter_name=None):  # noqa: E501
        """UpdateCandidateNote - a model defined in Swagger"""  # noqa: E501
        self._note_type = None
        self._note_text = None
        self._as_private = None
        self._recruiter_name = None
        self.discriminator = None
        if note_type is not None:
            self.note_type = note_type
        if note_text is not None:
            self.note_text = note_text
        if as_private is not None:
            self.as_private = as_private
        if recruiter_name is not None:
            self.recruiter_name = recruiter_name

    @property
    def note_type(self):
        """Gets the note_type of this UpdateCandidateNote.  # noqa: E501

        The type of the candidate note. Specifies the category of the note associated with the candidate.  # noqa: E501

        :return: The note_type of this UpdateCandidateNote.  # noqa: E501
        :rtype: str
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type):
        """Sets the note_type of this UpdateCandidateNote.

        The type of the candidate note. Specifies the category of the note associated with the candidate.  # noqa: E501

        :param note_type: The note_type of this UpdateCandidateNote.  # noqa: E501
        :type: str
        """

        self._note_type = note_type

    @property
    def note_text(self):
        """Gets the note_text of this UpdateCandidateNote.  # noqa: E501

        The text content of the candidate note.  # noqa: E501

        :return: The note_text of this UpdateCandidateNote.  # noqa: E501
        :rtype: str
        """
        return self._note_text

    @note_text.setter
    def note_text(self, note_text):
        """Sets the note_text of this UpdateCandidateNote.

        The text content of the candidate note.  # noqa: E501

        :param note_text: The note_text of this UpdateCandidateNote.  # noqa: E501
        :type: str
        """

        self._note_text = note_text

    @property
    def as_private(self):
        """Gets the as_private of this UpdateCandidateNote.  # noqa: E501

        A boolean flag indicating whether the candidate note is private. If true, the note is intended to be visible only to individuals who created it.  # noqa: E501

        :return: The as_private of this UpdateCandidateNote.  # noqa: E501
        :rtype: bool
        """
        return self._as_private

    @as_private.setter
    def as_private(self, as_private):
        """Sets the as_private of this UpdateCandidateNote.

        A boolean flag indicating whether the candidate note is private. If true, the note is intended to be visible only to individuals who created it.  # noqa: E501

        :param as_private: The as_private of this UpdateCandidateNote.  # noqa: E501
        :type: bool
        """

        self._as_private = as_private

    @property
    def recruiter_name(self):
        """Gets the recruiter_name of this UpdateCandidateNote.  # noqa: E501

        The name of the recruiter updating the candidate note. This field identifies the recruiter associated with the modification.  # noqa: E501

        :return: The recruiter_name of this UpdateCandidateNote.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_name

    @recruiter_name.setter
    def recruiter_name(self, recruiter_name):
        """Sets the recruiter_name of this UpdateCandidateNote.

        The name of the recruiter updating the candidate note. This field identifies the recruiter associated with the modification.  # noqa: E501

        :param recruiter_name: The recruiter_name of this UpdateCandidateNote.  # noqa: E501
        :type: str
        """

        self._recruiter_name = recruiter_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateCandidateNote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCandidateNote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
