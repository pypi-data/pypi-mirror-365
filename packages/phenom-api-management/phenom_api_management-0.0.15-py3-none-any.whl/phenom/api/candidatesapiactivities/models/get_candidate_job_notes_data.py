# coding: utf-8

"""
    candidates-api-activities

    The Note APIs allows you to Add, Get, Update and Delete Notes.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetCandidateJobNotesData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recruiters_user_id': 'str',
        'company_name': 'str',
        'new_note_display_text': 'str',
        'updated_date': 'str',
        'user_id': 'str',
        'job_id': 'str',
        'note_type': 'str',
        'created_date': 'str',
        'recruiter_name': 'str',
        'new_note_text': 'str',
        'id': 'str',
        'parent': 'str',
        'tagged_recruiters': 'list[str]',
        'as_private': 'bool'
    }

    attribute_map = {
        'recruiters_user_id': 'recruitersUserId',
        'company_name': 'companyName',
        'new_note_display_text': 'newNoteDisplayText',
        'updated_date': 'updatedDate',
        'user_id': 'userId',
        'job_id': 'jobId',
        'note_type': 'noteType',
        'created_date': 'createdDate',
        'recruiter_name': 'recruiterName',
        'new_note_text': 'newNoteText',
        'id': '_id',
        'parent': 'parent',
        'tagged_recruiters': 'taggedRecruiters',
        'as_private': 'asPrivate'
    }

    def __init__(self, recruiters_user_id=None, company_name=None, new_note_display_text=None, updated_date=None, user_id=None, job_id=None, note_type=None, created_date=None, recruiter_name=None, new_note_text=None, id=None, parent=None, tagged_recruiters=None, as_private=False):  # noqa: E501
        """GetCandidateJobNotesData - a model defined in Swagger"""  # noqa: E501
        self._recruiters_user_id = None
        self._company_name = None
        self._new_note_display_text = None
        self._updated_date = None
        self._user_id = None
        self._job_id = None
        self._note_type = None
        self._created_date = None
        self._recruiter_name = None
        self._new_note_text = None
        self._id = None
        self._parent = None
        self._tagged_recruiters = None
        self._as_private = None
        self.discriminator = None
        if recruiters_user_id is not None:
            self.recruiters_user_id = recruiters_user_id
        if company_name is not None:
            self.company_name = company_name
        if new_note_display_text is not None:
            self.new_note_display_text = new_note_display_text
        if updated_date is not None:
            self.updated_date = updated_date
        if user_id is not None:
            self.user_id = user_id
        if job_id is not None:
            self.job_id = job_id
        if note_type is not None:
            self.note_type = note_type
        if created_date is not None:
            self.created_date = created_date
        if recruiter_name is not None:
            self.recruiter_name = recruiter_name
        if new_note_text is not None:
            self.new_note_text = new_note_text
        if id is not None:
            self.id = id
        if parent is not None:
            self.parent = parent
        if tagged_recruiters is not None:
            self.tagged_recruiters = tagged_recruiters
        if as_private is not None:
            self.as_private = as_private

    @property
    def recruiters_user_id(self):
        """Gets the recruiters_user_id of this GetCandidateJobNotesData.  # noqa: E501

        The user id of the recruiter.  # noqa: E501

        :return: The recruiters_user_id of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: str
        """
        return self._recruiters_user_id

    @recruiters_user_id.setter
    def recruiters_user_id(self, recruiters_user_id):
        """Sets the recruiters_user_id of this GetCandidateJobNotesData.

        The user id of the recruiter.  # noqa: E501

        :param recruiters_user_id: The recruiters_user_id of this GetCandidateJobNotesData.  # noqa: E501
        :type: str
        """

        self._recruiters_user_id = recruiters_user_id

    @property
    def company_name(self):
        """Gets the company_name of this GetCandidateJobNotesData.  # noqa: E501

        The Name of the Company.  # noqa: E501

        :return: The company_name of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this GetCandidateJobNotesData.

        The Name of the Company.  # noqa: E501

        :param company_name: The company_name of this GetCandidateJobNotesData.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def new_note_display_text(self):
        """Gets the new_note_display_text of this GetCandidateJobNotesData.  # noqa: E501

        The text on the note.  # noqa: E501

        :return: The new_note_display_text of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: str
        """
        return self._new_note_display_text

    @new_note_display_text.setter
    def new_note_display_text(self, new_note_display_text):
        """Sets the new_note_display_text of this GetCandidateJobNotesData.

        The text on the note.  # noqa: E501

        :param new_note_display_text: The new_note_display_text of this GetCandidateJobNotesData.  # noqa: E501
        :type: str
        """

        self._new_note_display_text = new_note_display_text

    @property
    def updated_date(self):
        """Gets the updated_date of this GetCandidateJobNotesData.  # noqa: E501

        The date on which the note has been updated.  # noqa: E501

        :return: The updated_date of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this GetCandidateJobNotesData.

        The date on which the note has been updated.  # noqa: E501

        :param updated_date: The updated_date of this GetCandidateJobNotesData.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    @property
    def user_id(self):
        """Gets the user_id of this GetCandidateJobNotesData.  # noqa: E501

        The Id of the candidate.  # noqa: E501

        :return: The user_id of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetCandidateJobNotesData.

        The Id of the candidate.  # noqa: E501

        :param user_id: The user_id of this GetCandidateJobNotesData.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def job_id(self):
        """Gets the job_id of this GetCandidateJobNotesData.  # noqa: E501

        The Id of the Job.  # noqa: E501

        :return: The job_id of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this GetCandidateJobNotesData.

        The Id of the Job.  # noqa: E501

        :param job_id: The job_id of this GetCandidateJobNotesData.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def note_type(self):
        """Gets the note_type of this GetCandidateJobNotesData.  # noqa: E501

        The Type of the current Note.  # noqa: E501

        :return: The note_type of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: str
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type):
        """Sets the note_type of this GetCandidateJobNotesData.

        The Type of the current Note.  # noqa: E501

        :param note_type: The note_type of this GetCandidateJobNotesData.  # noqa: E501
        :type: str
        """

        self._note_type = note_type

    @property
    def created_date(self):
        """Gets the created_date of this GetCandidateJobNotesData.  # noqa: E501

        The Date on which the note has been created.  # noqa: E501

        :return: The created_date of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GetCandidateJobNotesData.

        The Date on which the note has been created.  # noqa: E501

        :param created_date: The created_date of this GetCandidateJobNotesData.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def recruiter_name(self):
        """Gets the recruiter_name of this GetCandidateJobNotesData.  # noqa: E501

        The Name of the recruiter who created the note.  # noqa: E501

        :return: The recruiter_name of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_name

    @recruiter_name.setter
    def recruiter_name(self, recruiter_name):
        """Sets the recruiter_name of this GetCandidateJobNotesData.

        The Name of the recruiter who created the note.  # noqa: E501

        :param recruiter_name: The recruiter_name of this GetCandidateJobNotesData.  # noqa: E501
        :type: str
        """

        self._recruiter_name = recruiter_name

    @property
    def new_note_text(self):
        """Gets the new_note_text of this GetCandidateJobNotesData.  # noqa: E501

        The Text on the note.  # noqa: E501

        :return: The new_note_text of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: str
        """
        return self._new_note_text

    @new_note_text.setter
    def new_note_text(self, new_note_text):
        """Sets the new_note_text of this GetCandidateJobNotesData.

        The Text on the note.  # noqa: E501

        :param new_note_text: The new_note_text of this GetCandidateJobNotesData.  # noqa: E501
        :type: str
        """

        self._new_note_text = new_note_text

    @property
    def id(self):
        """Gets the id of this GetCandidateJobNotesData.  # noqa: E501

        The unique identifier for the Note.  # noqa: E501

        :return: The id of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetCandidateJobNotesData.

        The unique identifier for the Note.  # noqa: E501

        :param id: The id of this GetCandidateJobNotesData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def parent(self):
        """Gets the parent of this GetCandidateJobNotesData.  # noqa: E501

        The unique identifier for candidate.  # noqa: E501

        :return: The parent of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this GetCandidateJobNotesData.

        The unique identifier for candidate.  # noqa: E501

        :param parent: The parent of this GetCandidateJobNotesData.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def tagged_recruiters(self):
        """Gets the tagged_recruiters of this GetCandidateJobNotesData.  # noqa: E501

        The id of the user who are tagged in the note.  # noqa: E501

        :return: The tagged_recruiters of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._tagged_recruiters

    @tagged_recruiters.setter
    def tagged_recruiters(self, tagged_recruiters):
        """Sets the tagged_recruiters of this GetCandidateJobNotesData.

        The id of the user who are tagged in the note.  # noqa: E501

        :param tagged_recruiters: The tagged_recruiters of this GetCandidateJobNotesData.  # noqa: E501
        :type: list[str]
        """

        self._tagged_recruiters = tagged_recruiters

    @property
    def as_private(self):
        """Gets the as_private of this GetCandidateJobNotesData.  # noqa: E501

        The Boolean value to represent the visibility of note.  # noqa: E501

        :return: The as_private of this GetCandidateJobNotesData.  # noqa: E501
        :rtype: bool
        """
        return self._as_private

    @as_private.setter
    def as_private(self, as_private):
        """Sets the as_private of this GetCandidateJobNotesData.

        The Boolean value to represent the visibility of note.  # noqa: E501

        :param as_private: The as_private of this GetCandidateJobNotesData.  # noqa: E501
        :type: bool
        """

        self._as_private = as_private

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCandidateJobNotesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCandidateJobNotesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
