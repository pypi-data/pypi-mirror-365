# coding: utf-8

"""
    candidates-api-activities

    The Note APIs allows you to Add, Get, Update and Delete Notes.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class AddNotes(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'note_type': 'str',
        'note_text': 'str',
        'as_private': 'bool',
        'job_id': 'str',
        'tagged_recruiters': 'object'
    }

    attribute_map = {
        'note_type': 'noteType',
        'note_text': 'noteText',
        'as_private': 'asPrivate',
        'job_id': 'jobId',
        'tagged_recruiters': 'taggedRecruiters'
    }

    def __init__(self, note_type=None, note_text=None, as_private=None, job_id=None, tagged_recruiters=None):  # noqa: E501
        """AddNotes - a model defined in Swagger"""  # noqa: E501
        self._note_type = None
        self._note_text = None
        self._as_private = None
        self._job_id = None
        self._tagged_recruiters = None
        self.discriminator = None
        if note_type is not None:
            self.note_type = note_type
        if note_text is not None:
            self.note_text = note_text
        if as_private is not None:
            self.as_private = as_private
        if job_id is not None:
            self.job_id = job_id
        if tagged_recruiters is not None:
            self.tagged_recruiters = tagged_recruiters

    @property
    def note_type(self):
        """Gets the note_type of this AddNotes.  # noqa: E501

        The type of the note that is being created. This field specifies the category of the note.  # noqa: E501

        :return: The note_type of this AddNotes.  # noqa: E501
        :rtype: str
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type):
        """Sets the note_type of this AddNotes.

        The type of the note that is being created. This field specifies the category of the note.  # noqa: E501

        :param note_type: The note_type of this AddNotes.  # noqa: E501
        :type: str
        """

        self._note_type = note_type

    @property
    def note_text(self):
        """Gets the note_text of this AddNotes.  # noqa: E501

        The text content of the note. This field holds the actual content or information of the note.  # noqa: E501

        :return: The note_text of this AddNotes.  # noqa: E501
        :rtype: str
        """
        return self._note_text

    @note_text.setter
    def note_text(self, note_text):
        """Sets the note_text of this AddNotes.

        The text content of the note. This field holds the actual content or information of the note.  # noqa: E501

        :param note_text: The note_text of this AddNotes.  # noqa: E501
        :type: str
        """

        self._note_text = note_text

    @property
    def as_private(self):
        """Gets the as_private of this AddNotes.  # noqa: E501

        A boolean flag indicating whether the note is private or not. If true, the note is intended to be visible only to individuals who created it.  # noqa: E501

        :return: The as_private of this AddNotes.  # noqa: E501
        :rtype: bool
        """
        return self._as_private

    @as_private.setter
    def as_private(self, as_private):
        """Sets the as_private of this AddNotes.

        A boolean flag indicating whether the note is private or not. If true, the note is intended to be visible only to individuals who created it.  # noqa: E501

        :param as_private: The as_private of this AddNotes.  # noqa: E501
        :type: bool
        """

        self._as_private = as_private

    @property
    def job_id(self):
        """Gets the job_id of this AddNotes.  # noqa: E501

        The unique identifier (ID) associated with the job related to the note. This field links the note to a specific job or task.  # noqa: E501

        :return: The job_id of this AddNotes.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this AddNotes.

        The unique identifier (ID) associated with the job related to the note. This field links the note to a specific job or task.  # noqa: E501

        :param job_id: The job_id of this AddNotes.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def tagged_recruiters(self):
        """Gets the tagged_recruiters of this AddNotes.  # noqa: E501

        An object containing ids about recruiters tagged in the note.  # noqa: E501

        :return: The tagged_recruiters of this AddNotes.  # noqa: E501
        :rtype: object
        """
        return self._tagged_recruiters

    @tagged_recruiters.setter
    def tagged_recruiters(self, tagged_recruiters):
        """Sets the tagged_recruiters of this AddNotes.

        An object containing ids about recruiters tagged in the note.  # noqa: E501

        :param tagged_recruiters: The tagged_recruiters of this AddNotes.  # noqa: E501
        :type: object
        """

        self._tagged_recruiters = tagged_recruiters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddNotes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddNotes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
