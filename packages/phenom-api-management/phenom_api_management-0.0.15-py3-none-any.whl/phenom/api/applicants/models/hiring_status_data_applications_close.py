# coding: utf-8

"""
    applicants-api

    This API collection enables seamless operations by facilitating the retrieval of essential applicant details, updating and managing hiring statuses for candidates, assigning multiple candidates as leads for specific job roles, and obtaining detailed activity logs associated with applicants.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class HiringStatusDataApplicationsClose(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hiring_status': 'HiringStatusDataApplicationsHiringStatus',
        'job_category': 'str',
        'job_id': 'str',
        'job_title': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'hiring_status': 'hiringStatus',
        'job_category': 'jobCategory',
        'job_id': 'jobId',
        'job_title': 'jobTitle',
        'user_id': 'userId'
    }

    def __init__(self, hiring_status=None, job_category=None, job_id=None, job_title=None, user_id=None):  # noqa: E501
        """HiringStatusDataApplicationsClose - a model defined in Swagger"""  # noqa: E501
        self._hiring_status = None
        self._job_category = None
        self._job_id = None
        self._job_title = None
        self._user_id = None
        self.discriminator = None
        if hiring_status is not None:
            self.hiring_status = hiring_status
        if job_category is not None:
            self.job_category = job_category
        if job_id is not None:
            self.job_id = job_id
        if job_title is not None:
            self.job_title = job_title
        if user_id is not None:
            self.user_id = user_id

    @property
    def hiring_status(self):
        """Gets the hiring_status of this HiringStatusDataApplicationsClose.  # noqa: E501


        :return: The hiring_status of this HiringStatusDataApplicationsClose.  # noqa: E501
        :rtype: HiringStatusDataApplicationsHiringStatus
        """
        return self._hiring_status

    @hiring_status.setter
    def hiring_status(self, hiring_status):
        """Sets the hiring_status of this HiringStatusDataApplicationsClose.


        :param hiring_status: The hiring_status of this HiringStatusDataApplicationsClose.  # noqa: E501
        :type: HiringStatusDataApplicationsHiringStatus
        """

        self._hiring_status = hiring_status

    @property
    def job_category(self):
        """Gets the job_category of this HiringStatusDataApplicationsClose.  # noqa: E501

        Category of the job associated with the application.  # noqa: E501

        :return: The job_category of this HiringStatusDataApplicationsClose.  # noqa: E501
        :rtype: str
        """
        return self._job_category

    @job_category.setter
    def job_category(self, job_category):
        """Sets the job_category of this HiringStatusDataApplicationsClose.

        Category of the job associated with the application.  # noqa: E501

        :param job_category: The job_category of this HiringStatusDataApplicationsClose.  # noqa: E501
        :type: str
        """

        self._job_category = job_category

    @property
    def job_id(self):
        """Gets the job_id of this HiringStatusDataApplicationsClose.  # noqa: E501

        ID of the job associated with the application.  # noqa: E501

        :return: The job_id of this HiringStatusDataApplicationsClose.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this HiringStatusDataApplicationsClose.

        ID of the job associated with the application.  # noqa: E501

        :param job_id: The job_id of this HiringStatusDataApplicationsClose.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_title(self):
        """Gets the job_title of this HiringStatusDataApplicationsClose.  # noqa: E501

        Title of the job associated with the application.  # noqa: E501

        :return: The job_title of this HiringStatusDataApplicationsClose.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this HiringStatusDataApplicationsClose.

        Title of the job associated with the application.  # noqa: E501

        :param job_title: The job_title of this HiringStatusDataApplicationsClose.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def user_id(self):
        """Gets the user_id of this HiringStatusDataApplicationsClose.  # noqa: E501

        ID of the user associated with the application.  # noqa: E501

        :return: The user_id of this HiringStatusDataApplicationsClose.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this HiringStatusDataApplicationsClose.

        ID of the user associated with the application.  # noqa: E501

        :param user_id: The user_id of this HiringStatusDataApplicationsClose.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HiringStatusDataApplicationsClose, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HiringStatusDataApplicationsClose):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
