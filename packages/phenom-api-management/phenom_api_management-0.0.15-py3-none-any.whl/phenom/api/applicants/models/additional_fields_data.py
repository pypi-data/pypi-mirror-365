# coding: utf-8

"""
    applicants-api

    This API collection enables seamless operations by facilitating the retrieval of essential applicant details, updating and managing hiring statuses for candidates, assigning multiple candidates as leads for specific job roles, and obtaining detailed activity logs associated with applicants.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class AdditionalFieldsData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_specific_additional_fields': 'object'
    }

    attribute_map = {
        'job_specific_additional_fields': 'jobSpecificAdditionalFields'
    }

    def __init__(self, job_specific_additional_fields=None):  # noqa: E501
        """AdditionalFieldsData - a model defined in Swagger"""  # noqa: E501
        self._job_specific_additional_fields = None
        self.discriminator = None
        if job_specific_additional_fields is not None:
            self.job_specific_additional_fields = job_specific_additional_fields

    @property
    def job_specific_additional_fields(self):
        """Gets the job_specific_additional_fields of this AdditionalFieldsData.  # noqa: E501

        Additional fields specific to a job.  # noqa: E501

        :return: The job_specific_additional_fields of this AdditionalFieldsData.  # noqa: E501
        :rtype: object
        """
        return self._job_specific_additional_fields

    @job_specific_additional_fields.setter
    def job_specific_additional_fields(self, job_specific_additional_fields):
        """Sets the job_specific_additional_fields of this AdditionalFieldsData.

        Additional fields specific to a job.  # noqa: E501

        :param job_specific_additional_fields: The job_specific_additional_fields of this AdditionalFieldsData.  # noqa: E501
        :type: object
        """

        self._job_specific_additional_fields = job_specific_additional_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdditionalFieldsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalFieldsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
