# coding: utf-8

"""
    applicants-api

    This API collection enables seamless operations by facilitating the retrieval of essential applicant details, updating and managing hiring statuses for candidates, assigning multiple candidates as leads for specific job roles, and obtaining detailed activity logs associated with applicants.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ApplicantsDataContacts(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_number': 'str',
        'phone_number': 'str',
        'phone_number_without_country_code': 'str',
        'country_code': 'str'
    }

    attribute_map = {
        'original_number': 'originalNumber',
        'phone_number': 'phoneNumber',
        'phone_number_without_country_code': 'phoneNumberWithoutCountryCode',
        'country_code': 'countryCode'
    }

    def __init__(self, original_number=None, phone_number=None, phone_number_without_country_code=None, country_code=None):  # noqa: E501
        """ApplicantsDataContacts - a model defined in Swagger"""  # noqa: E501
        self._original_number = None
        self._phone_number = None
        self._phone_number_without_country_code = None
        self._country_code = None
        self.discriminator = None
        if original_number is not None:
            self.original_number = original_number
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_number_without_country_code is not None:
            self.phone_number_without_country_code = phone_number_without_country_code
        if country_code is not None:
            self.country_code = country_code

    @property
    def original_number(self):
        """Gets the original_number of this ApplicantsDataContacts.  # noqa: E501

        The phone number of the contact.  # noqa: E501

        :return: The original_number of this ApplicantsDataContacts.  # noqa: E501
        :rtype: str
        """
        return self._original_number

    @original_number.setter
    def original_number(self, original_number):
        """Sets the original_number of this ApplicantsDataContacts.

        The phone number of the contact.  # noqa: E501

        :param original_number: The original_number of this ApplicantsDataContacts.  # noqa: E501
        :type: str
        """

        self._original_number = original_number

    @property
    def phone_number(self):
        """Gets the phone_number of this ApplicantsDataContacts.  # noqa: E501

        The phone number of the contact.  # noqa: E501

        :return: The phone_number of this ApplicantsDataContacts.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ApplicantsDataContacts.

        The phone number of the contact.  # noqa: E501

        :param phone_number: The phone_number of this ApplicantsDataContacts.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_without_country_code(self):
        """Gets the phone_number_without_country_code of this ApplicantsDataContacts.  # noqa: E501

        The phone number without country code  # noqa: E501

        :return: The phone_number_without_country_code of this ApplicantsDataContacts.  # noqa: E501
        :rtype: str
        """
        return self._phone_number_without_country_code

    @phone_number_without_country_code.setter
    def phone_number_without_country_code(self, phone_number_without_country_code):
        """Sets the phone_number_without_country_code of this ApplicantsDataContacts.

        The phone number without country code  # noqa: E501

        :param phone_number_without_country_code: The phone_number_without_country_code of this ApplicantsDataContacts.  # noqa: E501
        :type: str
        """

        self._phone_number_without_country_code = phone_number_without_country_code

    @property
    def country_code(self):
        """Gets the country_code of this ApplicantsDataContacts.  # noqa: E501

        The country code associated with the contact.  # noqa: E501

        :return: The country_code of this ApplicantsDataContacts.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ApplicantsDataContacts.

        The country code associated with the contact.  # noqa: E501

        :param country_code: The country_code of this ApplicantsDataContacts.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicantsDataContacts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicantsDataContacts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
