# coding: utf-8

"""
    applicants-api

    This API collection enables seamless operations by facilitating the retrieval of essential applicant details, updating and managing hiring statuses for candidates, assigning multiple candidates as leads for specific job roles, and obtaining detailed activity logs associated with applicants.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ApplicantsDataCandidates(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'emails': 'list[str]',
        'last_name': 'str',
        'first_name': 'str',
        'date_created': 'str',
        'hiring_status': 'str',
        'updated_date': 'str',
        'user_id': 'str',
        'contacts': 'list[ApplicantsDataContacts]'
    }

    attribute_map = {
        'emails': 'emails',
        'last_name': 'lastName',
        'first_name': 'firstName',
        'date_created': 'dateCreated',
        'hiring_status': 'hiringStatus',
        'updated_date': 'updatedDate',
        'user_id': 'userId',
        'contacts': 'contacts'
    }

    def __init__(self, emails=None, last_name=None, first_name=None, date_created=None, hiring_status=None, updated_date=None, user_id=None, contacts=None):  # noqa: E501
        """ApplicantsDataCandidates - a model defined in Swagger"""  # noqa: E501
        self._emails = None
        self._last_name = None
        self._first_name = None
        self._date_created = None
        self._hiring_status = None
        self._updated_date = None
        self._user_id = None
        self._contacts = None
        self.discriminator = None
        if emails is not None:
            self.emails = emails
        if last_name is not None:
            self.last_name = last_name
        if first_name is not None:
            self.first_name = first_name
        if date_created is not None:
            self.date_created = date_created
        if hiring_status is not None:
            self.hiring_status = hiring_status
        if updated_date is not None:
            self.updated_date = updated_date
        if user_id is not None:
            self.user_id = user_id
        if contacts is not None:
            self.contacts = contacts

    @property
    def emails(self):
        """Gets the emails of this ApplicantsDataCandidates.  # noqa: E501

        Array of email addresses associated with the candidate.  # noqa: E501

        :return: The emails of this ApplicantsDataCandidates.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ApplicantsDataCandidates.

        Array of email addresses associated with the candidate.  # noqa: E501

        :param emails: The emails of this ApplicantsDataCandidates.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def last_name(self):
        """Gets the last_name of this ApplicantsDataCandidates.  # noqa: E501

        Last name of the candidate.  # noqa: E501

        :return: The last_name of this ApplicantsDataCandidates.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ApplicantsDataCandidates.

        Last name of the candidate.  # noqa: E501

        :param last_name: The last_name of this ApplicantsDataCandidates.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def first_name(self):
        """Gets the first_name of this ApplicantsDataCandidates.  # noqa: E501

        First name of the candidate.  # noqa: E501

        :return: The first_name of this ApplicantsDataCandidates.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ApplicantsDataCandidates.

        First name of the candidate.  # noqa: E501

        :param first_name: The first_name of this ApplicantsDataCandidates.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def date_created(self):
        """Gets the date_created of this ApplicantsDataCandidates.  # noqa: E501

        Date when the candidate record was created.  # noqa: E501

        :return: The date_created of this ApplicantsDataCandidates.  # noqa: E501
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ApplicantsDataCandidates.

        Date when the candidate record was created.  # noqa: E501

        :param date_created: The date_created of this ApplicantsDataCandidates.  # noqa: E501
        :type: str
        """

        self._date_created = date_created

    @property
    def hiring_status(self):
        """Gets the hiring_status of this ApplicantsDataCandidates.  # noqa: E501

        Current hiring status of the candidate.  # noqa: E501

        :return: The hiring_status of this ApplicantsDataCandidates.  # noqa: E501
        :rtype: str
        """
        return self._hiring_status

    @hiring_status.setter
    def hiring_status(self, hiring_status):
        """Sets the hiring_status of this ApplicantsDataCandidates.

        Current hiring status of the candidate.  # noqa: E501

        :param hiring_status: The hiring_status of this ApplicantsDataCandidates.  # noqa: E501
        :type: str
        """

        self._hiring_status = hiring_status

    @property
    def updated_date(self):
        """Gets the updated_date of this ApplicantsDataCandidates.  # noqa: E501

        Date when the candidate record was last updated.  # noqa: E501

        :return: The updated_date of this ApplicantsDataCandidates.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this ApplicantsDataCandidates.

        Date when the candidate record was last updated.  # noqa: E501

        :param updated_date: The updated_date of this ApplicantsDataCandidates.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    @property
    def user_id(self):
        """Gets the user_id of this ApplicantsDataCandidates.  # noqa: E501

        Unique identifier for the candidate user.  # noqa: E501

        :return: The user_id of this ApplicantsDataCandidates.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ApplicantsDataCandidates.

        Unique identifier for the candidate user.  # noqa: E501

        :param user_id: The user_id of this ApplicantsDataCandidates.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def contacts(self):
        """Gets the contacts of this ApplicantsDataCandidates.  # noqa: E501

        Array of contact details associated with the candidate.  # noqa: E501

        :return: The contacts of this ApplicantsDataCandidates.  # noqa: E501
        :rtype: list[ApplicantsDataContacts]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this ApplicantsDataCandidates.

        Array of contact details associated with the candidate.  # noqa: E501

        :param contacts: The contacts of this ApplicantsDataCandidates.  # noqa: E501
        :type: list[ApplicantsDataContacts]
        """

        self._contacts = contacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicantsDataCandidates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicantsDataCandidates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
