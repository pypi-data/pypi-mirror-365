# coding: utf-8

"""
    applicants-api

    This API collection enables seamless operations by facilitating the retrieval of essential applicant details, updating and managing hiring statuses for candidates, assigning multiple candidates as leads for specific job roles, and obtaining detailed activity logs associated with applicants.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class NextHiringStatusDataTransitionStatuses(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'status_code': 'str',
        'is_rejected': 'bool',
        'is_default': 'bool',
        'step': 'str'
    }

    attribute_map = {
        'name': 'name',
        'status_code': 'statusCode',
        'is_rejected': 'isRejected',
        'is_default': 'isDefault',
        'step': 'step'
    }

    def __init__(self, name=None, status_code=None, is_rejected=None, is_default=None, step=None):  # noqa: E501
        """NextHiringStatusDataTransitionStatuses - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._status_code = None
        self._is_rejected = None
        self._is_default = None
        self._step = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if status_code is not None:
            self.status_code = status_code
        if is_rejected is not None:
            self.is_rejected = is_rejected
        if is_default is not None:
            self.is_default = is_default
        if step is not None:
            self.step = step

    @property
    def name(self):
        """Gets the name of this NextHiringStatusDataTransitionStatuses.  # noqa: E501

        Name of the transition status.  # noqa: E501

        :return: The name of this NextHiringStatusDataTransitionStatuses.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NextHiringStatusDataTransitionStatuses.

        Name of the transition status.  # noqa: E501

        :param name: The name of this NextHiringStatusDataTransitionStatuses.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status_code(self):
        """Gets the status_code of this NextHiringStatusDataTransitionStatuses.  # noqa: E501

        Status code of the transition status.  # noqa: E501

        :return: The status_code of this NextHiringStatusDataTransitionStatuses.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this NextHiringStatusDataTransitionStatuses.

        Status code of the transition status.  # noqa: E501

        :param status_code: The status_code of this NextHiringStatusDataTransitionStatuses.  # noqa: E501
        :type: str
        """

        self._status_code = status_code

    @property
    def is_rejected(self):
        """Gets the is_rejected of this NextHiringStatusDataTransitionStatuses.  # noqa: E501

        Flag indicating whether the transition status is rejected.  # noqa: E501

        :return: The is_rejected of this NextHiringStatusDataTransitionStatuses.  # noqa: E501
        :rtype: bool
        """
        return self._is_rejected

    @is_rejected.setter
    def is_rejected(self, is_rejected):
        """Sets the is_rejected of this NextHiringStatusDataTransitionStatuses.

        Flag indicating whether the transition status is rejected.  # noqa: E501

        :param is_rejected: The is_rejected of this NextHiringStatusDataTransitionStatuses.  # noqa: E501
        :type: bool
        """

        self._is_rejected = is_rejected

    @property
    def is_default(self):
        """Gets the is_default of this NextHiringStatusDataTransitionStatuses.  # noqa: E501

        Flag indicating whether the transition status is the default.  # noqa: E501

        :return: The is_default of this NextHiringStatusDataTransitionStatuses.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this NextHiringStatusDataTransitionStatuses.

        Flag indicating whether the transition status is the default.  # noqa: E501

        :param is_default: The is_default of this NextHiringStatusDataTransitionStatuses.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def step(self):
        """Gets the step of this NextHiringStatusDataTransitionStatuses.  # noqa: E501

        Current step in the workflow for the transition status.  # noqa: E501

        :return: The step of this NextHiringStatusDataTransitionStatuses.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this NextHiringStatusDataTransitionStatuses.

        Current step in the workflow for the transition status.  # noqa: E501

        :param step: The step of this NextHiringStatusDataTransitionStatuses.  # noqa: E501
        :type: str
        """

        self._step = step

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NextHiringStatusDataTransitionStatuses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NextHiringStatusDataTransitionStatuses):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
