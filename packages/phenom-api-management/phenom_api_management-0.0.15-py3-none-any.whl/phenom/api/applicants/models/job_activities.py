# coding: utf-8

"""
    applicants-api

    This API collection enables seamless operations by facilitating the retrieval of essential applicant details, updating and managing hiring statuses for candidates, assigning multiple candidates as leads for specific job roles, and obtaining detailed activity logs associated with applicants.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class JobActivities(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'message': 'str',
        'timestamp': 'str',
        'pagination': 'JobActivitiesPagination',
        'data': 'list[JobActivitiesData]'
    }

    attribute_map = {
        'status': 'status',
        'message': 'message',
        'timestamp': 'timestamp',
        'pagination': 'pagination',
        'data': 'data'
    }

    def __init__(self, status=None, message=None, timestamp=None, pagination=None, data=None):  # noqa: E501
        """JobActivities - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._message = None
        self._timestamp = None
        self._pagination = None
        self._data = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if message is not None:
            self.message = message
        if timestamp is not None:
            self.timestamp = timestamp
        if pagination is not None:
            self.pagination = pagination
        if data is not None:
            self.data = data

    @property
    def status(self):
        """Gets the status of this JobActivities.  # noqa: E501

        The overall status of the job activities response.  # noqa: E501

        :return: The status of this JobActivities.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobActivities.

        The overall status of the job activities response.  # noqa: E501

        :param status: The status of this JobActivities.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def message(self):
        """Gets the message of this JobActivities.  # noqa: E501

        A message related to the job activities.  # noqa: E501

        :return: The message of this JobActivities.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this JobActivities.

        A message related to the job activities.  # noqa: E501

        :param message: The message of this JobActivities.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def timestamp(self):
        """Gets the timestamp of this JobActivities.  # noqa: E501

        Timestamp indicating when the response was generated.  # noqa: E501

        :return: The timestamp of this JobActivities.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this JobActivities.

        Timestamp indicating when the response was generated.  # noqa: E501

        :param timestamp: The timestamp of this JobActivities.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def pagination(self):
        """Gets the pagination of this JobActivities.  # noqa: E501


        :return: The pagination of this JobActivities.  # noqa: E501
        :rtype: JobActivitiesPagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this JobActivities.


        :param pagination: The pagination of this JobActivities.  # noqa: E501
        :type: JobActivitiesPagination
        """

        self._pagination = pagination

    @property
    def data(self):
        """Gets the data of this JobActivities.  # noqa: E501

        Array of job activity data.  # noqa: E501

        :return: The data of this JobActivities.  # noqa: E501
        :rtype: list[JobActivitiesData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this JobActivities.

        Array of job activity data.  # noqa: E501

        :param data: The data of this JobActivities.  # noqa: E501
        :type: list[JobActivitiesData]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobActivities, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobActivities):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
