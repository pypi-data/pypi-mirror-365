# coding: utf-8

"""
    applicants-api

    This API collection enables seamless operations by facilitating the retrieval of essential applicant details, updating and managing hiring statuses for candidates, assigning multiple candidates as leads for specific job roles, and obtaining detailed activity logs associated with applicants.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class HiringStatusDataApplicationsHiringStatus(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'updated_date': 'float',
        'value': 'str',
        'hs_priority': 'float',
        'previous_rejection_reason_id': 'str',
        'rejection_reason_id': 'str',
        'rejection_reason': 'str',
        'previous_rejection_reason': 'str',
        'previous_value': 'str',
        'is_rejected': 'bool',
        'step': 'str',
        'work_flow_step_id': 'str',
        'previous_work_flow_step_id': 'str'
    }

    attribute_map = {
        'updated_date': 'updatedDate',
        'value': 'value',
        'hs_priority': 'hsPriority',
        'previous_rejection_reason_id': 'previousRejectionReasonId',
        'rejection_reason_id': 'rejectionReasonId',
        'rejection_reason': 'rejectionReason',
        'previous_rejection_reason': 'previousRejectionReason',
        'previous_value': 'previousValue',
        'is_rejected': 'isRejected',
        'step': 'step',
        'work_flow_step_id': 'workFlowStepId',
        'previous_work_flow_step_id': 'previousWorkFlowStepId'
    }

    def __init__(self, updated_date=None, value=None, hs_priority=None, previous_rejection_reason_id=None, rejection_reason_id=None, rejection_reason=None, previous_rejection_reason=None, previous_value=None, is_rejected=None, step=None, work_flow_step_id=None, previous_work_flow_step_id=None):  # noqa: E501
        """HiringStatusDataApplicationsHiringStatus - a model defined in Swagger"""  # noqa: E501
        self._updated_date = None
        self._value = None
        self._hs_priority = None
        self._previous_rejection_reason_id = None
        self._rejection_reason_id = None
        self._rejection_reason = None
        self._previous_rejection_reason = None
        self._previous_value = None
        self._is_rejected = None
        self._step = None
        self._work_flow_step_id = None
        self._previous_work_flow_step_id = None
        self.discriminator = None
        if updated_date is not None:
            self.updated_date = updated_date
        if value is not None:
            self.value = value
        if hs_priority is not None:
            self.hs_priority = hs_priority
        if previous_rejection_reason_id is not None:
            self.previous_rejection_reason_id = previous_rejection_reason_id
        if rejection_reason_id is not None:
            self.rejection_reason_id = rejection_reason_id
        if rejection_reason is not None:
            self.rejection_reason = rejection_reason
        if previous_rejection_reason is not None:
            self.previous_rejection_reason = previous_rejection_reason
        if previous_value is not None:
            self.previous_value = previous_value
        if is_rejected is not None:
            self.is_rejected = is_rejected
        if step is not None:
            self.step = step
        if work_flow_step_id is not None:
            self.work_flow_step_id = work_flow_step_id
        if previous_work_flow_step_id is not None:
            self.previous_work_flow_step_id = previous_work_flow_step_id

    @property
    def updated_date(self):
        """Gets the updated_date of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501

        Date when the hiring status was last updated.  # noqa: E501

        :return: The updated_date of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :rtype: float
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this HiringStatusDataApplicationsHiringStatus.

        Date when the hiring status was last updated.  # noqa: E501

        :param updated_date: The updated_date of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :type: float
        """

        self._updated_date = updated_date

    @property
    def value(self):
        """Gets the value of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501

        Current value of the hiring status.  # noqa: E501

        :return: The value of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this HiringStatusDataApplicationsHiringStatus.

        Current value of the hiring status.  # noqa: E501

        :param value: The value of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def hs_priority(self):
        """Gets the hs_priority of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501

        Priority associated with the hiring status.  # noqa: E501

        :return: The hs_priority of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :rtype: float
        """
        return self._hs_priority

    @hs_priority.setter
    def hs_priority(self, hs_priority):
        """Sets the hs_priority of this HiringStatusDataApplicationsHiringStatus.

        Priority associated with the hiring status.  # noqa: E501

        :param hs_priority: The hs_priority of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :type: float
        """

        self._hs_priority = hs_priority

    @property
    def previous_rejection_reason_id(self):
        """Gets the previous_rejection_reason_id of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501

        ID of the previous rejection reason.  # noqa: E501

        :return: The previous_rejection_reason_id of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :rtype: str
        """
        return self._previous_rejection_reason_id

    @previous_rejection_reason_id.setter
    def previous_rejection_reason_id(self, previous_rejection_reason_id):
        """Sets the previous_rejection_reason_id of this HiringStatusDataApplicationsHiringStatus.

        ID of the previous rejection reason.  # noqa: E501

        :param previous_rejection_reason_id: The previous_rejection_reason_id of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :type: str
        """

        self._previous_rejection_reason_id = previous_rejection_reason_id

    @property
    def rejection_reason_id(self):
        """Gets the rejection_reason_id of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501

        ID of the current rejection reason.  # noqa: E501

        :return: The rejection_reason_id of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :rtype: str
        """
        return self._rejection_reason_id

    @rejection_reason_id.setter
    def rejection_reason_id(self, rejection_reason_id):
        """Sets the rejection_reason_id of this HiringStatusDataApplicationsHiringStatus.

        ID of the current rejection reason.  # noqa: E501

        :param rejection_reason_id: The rejection_reason_id of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :type: str
        """

        self._rejection_reason_id = rejection_reason_id

    @property
    def rejection_reason(self):
        """Gets the rejection_reason of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501

        Current rejection reason.  # noqa: E501

        :return: The rejection_reason of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :rtype: str
        """
        return self._rejection_reason

    @rejection_reason.setter
    def rejection_reason(self, rejection_reason):
        """Sets the rejection_reason of this HiringStatusDataApplicationsHiringStatus.

        Current rejection reason.  # noqa: E501

        :param rejection_reason: The rejection_reason of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :type: str
        """

        self._rejection_reason = rejection_reason

    @property
    def previous_rejection_reason(self):
        """Gets the previous_rejection_reason of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501

        Previous rejection reason.  # noqa: E501

        :return: The previous_rejection_reason of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :rtype: str
        """
        return self._previous_rejection_reason

    @previous_rejection_reason.setter
    def previous_rejection_reason(self, previous_rejection_reason):
        """Sets the previous_rejection_reason of this HiringStatusDataApplicationsHiringStatus.

        Previous rejection reason.  # noqa: E501

        :param previous_rejection_reason: The previous_rejection_reason of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :type: str
        """

        self._previous_rejection_reason = previous_rejection_reason

    @property
    def previous_value(self):
        """Gets the previous_value of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501

        Previous value of the hiring status.  # noqa: E501

        :return: The previous_value of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :rtype: str
        """
        return self._previous_value

    @previous_value.setter
    def previous_value(self, previous_value):
        """Sets the previous_value of this HiringStatusDataApplicationsHiringStatus.

        Previous value of the hiring status.  # noqa: E501

        :param previous_value: The previous_value of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :type: str
        """

        self._previous_value = previous_value

    @property
    def is_rejected(self):
        """Gets the is_rejected of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501

        Indicates whether the application is rejected.  # noqa: E501

        :return: The is_rejected of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_rejected

    @is_rejected.setter
    def is_rejected(self, is_rejected):
        """Sets the is_rejected of this HiringStatusDataApplicationsHiringStatus.

        Indicates whether the application is rejected.  # noqa: E501

        :param is_rejected: The is_rejected of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :type: bool
        """

        self._is_rejected = is_rejected

    @property
    def step(self):
        """Gets the step of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501

        Current step in the workflow.  # noqa: E501

        :return: The step of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this HiringStatusDataApplicationsHiringStatus.

        Current step in the workflow.  # noqa: E501

        :param step: The step of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :type: str
        """

        self._step = step

    @property
    def work_flow_step_id(self):
        """Gets the work_flow_step_id of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501

        ID of the current workflow step.  # noqa: E501

        :return: The work_flow_step_id of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :rtype: str
        """
        return self._work_flow_step_id

    @work_flow_step_id.setter
    def work_flow_step_id(self, work_flow_step_id):
        """Sets the work_flow_step_id of this HiringStatusDataApplicationsHiringStatus.

        ID of the current workflow step.  # noqa: E501

        :param work_flow_step_id: The work_flow_step_id of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :type: str
        """

        self._work_flow_step_id = work_flow_step_id

    @property
    def previous_work_flow_step_id(self):
        """Gets the previous_work_flow_step_id of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501

        ID of the previous workflow step.  # noqa: E501

        :return: The previous_work_flow_step_id of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :rtype: str
        """
        return self._previous_work_flow_step_id

    @previous_work_flow_step_id.setter
    def previous_work_flow_step_id(self, previous_work_flow_step_id):
        """Sets the previous_work_flow_step_id of this HiringStatusDataApplicationsHiringStatus.

        ID of the previous workflow step.  # noqa: E501

        :param previous_work_flow_step_id: The previous_work_flow_step_id of this HiringStatusDataApplicationsHiringStatus.  # noqa: E501
        :type: str
        """

        self._previous_work_flow_step_id = previous_work_flow_step_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HiringStatusDataApplicationsHiringStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HiringStatusDataApplicationsHiringStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
