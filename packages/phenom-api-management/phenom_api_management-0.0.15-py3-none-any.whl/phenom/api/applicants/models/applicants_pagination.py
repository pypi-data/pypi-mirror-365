# coding: utf-8

"""
    applicants-api

    This API collection enables seamless operations by facilitating the retrieval of essential applicant details, updating and managing hiring statuses for candidates, assigning multiple candidates as leads for specific job roles, and obtaining detailed activity logs associated with applicants.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ApplicantsPagination(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'float',
        'size': 'float',
        '_from': 'float'
    }

    attribute_map = {
        'total': 'total',
        'size': 'size',
        '_from': 'from'
    }

    def __init__(self, total=None, size=None, _from=None):  # noqa: E501
        """ApplicantsPagination - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._size = None
        self.__from = None
        self.discriminator = None
        if total is not None:
            self.total = total
        if size is not None:
            self.size = size
        if _from is not None:
            self._from = _from

    @property
    def total(self):
        """Gets the total of this ApplicantsPagination.  # noqa: E501

        Total number of candidates in the dataset.  # noqa: E501

        :return: The total of this ApplicantsPagination.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ApplicantsPagination.

        Total number of candidates in the dataset.  # noqa: E501

        :param total: The total of this ApplicantsPagination.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def size(self):
        """Gets the size of this ApplicantsPagination.  # noqa: E501

        Number of candidates returned in the current response.  # noqa: E501

        :return: The size of this ApplicantsPagination.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ApplicantsPagination.

        Number of candidates returned in the current response.  # noqa: E501

        :param size: The size of this ApplicantsPagination.  # noqa: E501
        :type: float
        """

        self._size = size

    @property
    def _from(self):
        """Gets the _from of this ApplicantsPagination.  # noqa: E501

        Index of the first candidate in the current result set.  # noqa: E501

        :return: The _from of this ApplicantsPagination.  # noqa: E501
        :rtype: float
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ApplicantsPagination.

        Index of the first candidate in the current result set.  # noqa: E501

        :param _from: The _from of this ApplicantsPagination.  # noqa: E501
        :type: float
        """

        self.__from = _from

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicantsPagination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicantsPagination):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
