# coding: utf-8

"""
    recommendations-api

    These APIs provide job suggestions based on your profile, akin job listings, and nearby job opportunities tailored to your qualifications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phenom.commons.api_client import ApiClient


class RecommendationsApi(object):
    base_path = "/jobs-api/v1/jobs/recommendation"  # your base path

    def __init__(self, token, gateway_url, apikey, api_client=None):
        if api_client is None:
            api_client = ApiClient(gateway_url + self.base_path, apikey, token)
        self.api_client = api_client

    def near_by_jobs(self, latitude, longitude, **kwargs):  # noqa: E501
        """Nearby Jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.near_by_jobs(latitude, longitude, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float latitude: Latitude value of the user's location. (required)
        :param float longitude: Longitude value of the user's location. (required)
        :param float radius: Radius in miles within which the job recommendations should be provided.
        :return: NearByJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.near_by_jobs_with_http_info(latitude, longitude, **kwargs)  # noqa: E501
        else:
            (data) = self.near_by_jobs_with_http_info(latitude, longitude, **kwargs)  # noqa: E501
            return data

    def near_by_jobs_with_http_info(self, latitude, longitude, **kwargs):  # noqa: E501
        """Nearby Jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.near_by_jobs_with_http_info(latitude, longitude, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float latitude: Latitude value of the user's location. (required)
        :param float longitude: Longitude value of the user's location. (required)
        :param float radius: Radius in miles within which the job recommendations should be provided.
        :return: NearByJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['latitude', 'longitude', 'radius']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method near_by_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'latitude' is set
        if ('latitude' not in params or
                params['latitude'] is None):
            raise ValueError("Missing the required parameter `latitude` when calling `near_by_jobs`")  # noqa: E501
        # verify the required parameter 'longitude' is set
        if ('longitude' not in params or
                params['longitude'] is None):
            raise ValueError("Missing the required parameter `longitude` when calling `near_by_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'latitude' in params:
            query_params.append(('latitude', params['latitude']))  # noqa: E501
        if 'longitude' in params:
            query_params.append(('longitude', params['longitude']))  # noqa: E501
        if 'radius' in params:
            query_params.append(('radius', params['radius']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/nearby', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NearByJobsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profile_recommendations(self, body, **kwargs):  # noqa: E501
        """Profile Recommendations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profile_recommendations(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobRecommendation body: (required)
        :return: ProfileMatchingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profile_recommendations_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.profile_recommendations_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def profile_recommendations_with_http_info(self, body, **kwargs):  # noqa: E501
        """Profile Recommendations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profile_recommendations_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobRecommendation body: (required)
        :return: ProfileMatchingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profile_recommendations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `profile_recommendations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/profilematched', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileMatchingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def similar_jobs(self, body, job_id, **kwargs):  # noqa: E501
        """Similar Jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.similar_jobs(body, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimilarJobsRequest body: (required)
        :param str job_id: Job ID - unique field to identify the job. (required)
        :return: SimilarJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.similar_jobs_with_http_info(body, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.similar_jobs_with_http_info(body, job_id, **kwargs)  # noqa: E501
            return data

    def similar_jobs_with_http_info(self, body, job_id, **kwargs):  # noqa: E501
        """Similar Jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.similar_jobs_with_http_info(body, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimilarJobsRequest body: (required)
        :param str job_id: Job ID - unique field to identify the job. (required)
        :return: SimilarJobsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method similar_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `similar_jobs`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `similar_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'job_id' in params:
            query_params.append(('jobId', params['job_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/similarjobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimilarJobsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
