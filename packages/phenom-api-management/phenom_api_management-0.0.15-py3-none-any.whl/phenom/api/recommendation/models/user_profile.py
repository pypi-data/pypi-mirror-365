# coding: utf-8

"""
    recommendations-api

    These APIs provide job suggestions based on your profile, akin job listings, and nearby job opportunities tailored to your qualifications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class UserProfile(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'categories': 'list[str]',
        'skills': 'list[str]',
        'title': 'str',
        'years_of_experience': 'str',
        'preferred_locations': 'list[PreferredLocations]'
    }

    attribute_map = {
        'categories': 'categories',
        'skills': 'skills',
        'title': 'title',
        'years_of_experience': 'yearsOfExperience',
        'preferred_locations': 'preferredLocations'
    }

    def __init__(self, categories=None, skills=None, title=None, years_of_experience=None, preferred_locations=None):  # noqa: E501
        """UserProfile - a model defined in Swagger"""  # noqa: E501
        self._categories = None
        self._skills = None
        self._title = None
        self._years_of_experience = None
        self._preferred_locations = None
        self.discriminator = None
        if categories is not None:
            self.categories = categories
        if skills is not None:
            self.skills = skills
        if title is not None:
            self.title = title
        if years_of_experience is not None:
            self.years_of_experience = years_of_experience
        if preferred_locations is not None:
            self.preferred_locations = preferred_locations

    @property
    def categories(self):
        """Gets the categories of this UserProfile.  # noqa: E501


        :return: The categories of this UserProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this UserProfile.


        :param categories: The categories of this UserProfile.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def skills(self):
        """Gets the skills of this UserProfile.  # noqa: E501


        :return: The skills of this UserProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this UserProfile.


        :param skills: The skills of this UserProfile.  # noqa: E501
        :type: list[str]
        """

        self._skills = skills

    @property
    def title(self):
        """Gets the title of this UserProfile.  # noqa: E501

        Recent designation of the user.  # noqa: E501

        :return: The title of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserProfile.

        Recent designation of the user.  # noqa: E501

        :param title: The title of this UserProfile.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def years_of_experience(self):
        """Gets the years_of_experience of this UserProfile.  # noqa: E501

        Total number of years of experience of the user.  # noqa: E501

        :return: The years_of_experience of this UserProfile.  # noqa: E501
        :rtype: str
        """
        return self._years_of_experience

    @years_of_experience.setter
    def years_of_experience(self, years_of_experience):
        """Sets the years_of_experience of this UserProfile.

        Total number of years of experience of the user.  # noqa: E501

        :param years_of_experience: The years_of_experience of this UserProfile.  # noqa: E501
        :type: str
        """

        self._years_of_experience = years_of_experience

    @property
    def preferred_locations(self):
        """Gets the preferred_locations of this UserProfile.  # noqa: E501


        :return: The preferred_locations of this UserProfile.  # noqa: E501
        :rtype: list[PreferredLocations]
        """
        return self._preferred_locations

    @preferred_locations.setter
    def preferred_locations(self, preferred_locations):
        """Sets the preferred_locations of this UserProfile.


        :param preferred_locations: The preferred_locations of this UserProfile.  # noqa: E501
        :type: list[PreferredLocations]
        """

        self._preferred_locations = preferred_locations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
