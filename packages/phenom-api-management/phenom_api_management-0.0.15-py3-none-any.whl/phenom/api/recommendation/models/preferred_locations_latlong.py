# coding: utf-8

"""
    recommendations-api

    These APIs provide job suggestions based on your profile, akin job listings, and nearby job opportunities tailored to your qualifications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class PreferredLocationsLatlong(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lon': 'float',
        'lan': 'float'
    }

    attribute_map = {
        'lon': 'lon',
        'lan': 'lan'
    }

    def __init__(self, lon=None, lan=None):  # noqa: E501
        """PreferredLocationsLatlong - a model defined in Swagger"""  # noqa: E501
        self._lon = None
        self._lan = None
        self.discriminator = None
        if lon is not None:
            self.lon = lon
        if lan is not None:
            self.lan = lan

    @property
    def lon(self):
        """Gets the lon of this PreferredLocationsLatlong.  # noqa: E501

        Longitude of the preferred location provided by user.  # noqa: E501

        :return: The lon of this PreferredLocationsLatlong.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this PreferredLocationsLatlong.

        Longitude of the preferred location provided by user.  # noqa: E501

        :param lon: The lon of this PreferredLocationsLatlong.  # noqa: E501
        :type: float
        """

        self._lon = lon

    @property
    def lan(self):
        """Gets the lan of this PreferredLocationsLatlong.  # noqa: E501

        Latitude of the preferred location provided by user.  # noqa: E501

        :return: The lan of this PreferredLocationsLatlong.  # noqa: E501
        :rtype: float
        """
        return self._lan

    @lan.setter
    def lan(self, lan):
        """Sets the lan of this PreferredLocationsLatlong.

        Latitude of the preferred location provided by user.  # noqa: E501

        :param lan: The lan of this PreferredLocationsLatlong.  # noqa: E501
        :type: float
        """

        self._lan = lan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreferredLocationsLatlong, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreferredLocationsLatlong):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
