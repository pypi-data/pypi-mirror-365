# coding: utf-8

"""
    recommendations-api

    These APIs provide job suggestions based on your profile, akin job listings, and nearby job opportunities tailored to your qualifications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ProfileMatchingResponseJobs(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description_teaser': 'str',
        'title': 'str',
        'category': 'str',
        'job_id': 'str',
        'posted_date': 'str',
        'location_data': 'ProfileMatchingResponseLocationData',
        'fitlevel': 'str',
        'skill_gap': 'ProfileMatchingResponseSkillGap'
    }

    attribute_map = {
        'description_teaser': 'descriptionTeaser',
        'title': 'title',
        'category': 'category',
        'job_id': 'jobId',
        'posted_date': 'postedDate',
        'location_data': 'locationData',
        'fitlevel': 'fitlevel',
        'skill_gap': 'skillGap'
    }

    def __init__(self, description_teaser=None, title=None, category=None, job_id=None, posted_date=None, location_data=None, fitlevel=None, skill_gap=None):  # noqa: E501
        """ProfileMatchingResponseJobs - a model defined in Swagger"""  # noqa: E501
        self._description_teaser = None
        self._title = None
        self._category = None
        self._job_id = None
        self._posted_date = None
        self._location_data = None
        self._fitlevel = None
        self._skill_gap = None
        self.discriminator = None
        if description_teaser is not None:
            self.description_teaser = description_teaser
        if title is not None:
            self.title = title
        if category is not None:
            self.category = category
        if job_id is not None:
            self.job_id = job_id
        if posted_date is not None:
            self.posted_date = posted_date
        if location_data is not None:
            self.location_data = location_data
        if fitlevel is not None:
            self.fitlevel = fitlevel
        if skill_gap is not None:
            self.skill_gap = skill_gap

    @property
    def description_teaser(self):
        """Gets the description_teaser of this ProfileMatchingResponseJobs.  # noqa: E501

        AI generated teaser for description of the recommended job.  # noqa: E501

        :return: The description_teaser of this ProfileMatchingResponseJobs.  # noqa: E501
        :rtype: str
        """
        return self._description_teaser

    @description_teaser.setter
    def description_teaser(self, description_teaser):
        """Sets the description_teaser of this ProfileMatchingResponseJobs.

        AI generated teaser for description of the recommended job.  # noqa: E501

        :param description_teaser: The description_teaser of this ProfileMatchingResponseJobs.  # noqa: E501
        :type: str
        """

        self._description_teaser = description_teaser

    @property
    def title(self):
        """Gets the title of this ProfileMatchingResponseJobs.  # noqa: E501

        Title of the recommended job.  # noqa: E501

        :return: The title of this ProfileMatchingResponseJobs.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProfileMatchingResponseJobs.

        Title of the recommended job.  # noqa: E501

        :param title: The title of this ProfileMatchingResponseJobs.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def category(self):
        """Gets the category of this ProfileMatchingResponseJobs.  # noqa: E501

        Category to which the recommended job belongs to.  # noqa: E501

        :return: The category of this ProfileMatchingResponseJobs.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ProfileMatchingResponseJobs.

        Category to which the recommended job belongs to.  # noqa: E501

        :param category: The category of this ProfileMatchingResponseJobs.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def job_id(self):
        """Gets the job_id of this ProfileMatchingResponseJobs.  # noqa: E501

        Unique identifier for a job.  # noqa: E501

        :return: The job_id of this ProfileMatchingResponseJobs.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ProfileMatchingResponseJobs.

        Unique identifier for a job.  # noqa: E501

        :param job_id: The job_id of this ProfileMatchingResponseJobs.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def posted_date(self):
        """Gets the posted_date of this ProfileMatchingResponseJobs.  # noqa: E501

        Date on which the job was posted on careersite.  # noqa: E501

        :return: The posted_date of this ProfileMatchingResponseJobs.  # noqa: E501
        :rtype: str
        """
        return self._posted_date

    @posted_date.setter
    def posted_date(self, posted_date):
        """Sets the posted_date of this ProfileMatchingResponseJobs.

        Date on which the job was posted on careersite.  # noqa: E501

        :param posted_date: The posted_date of this ProfileMatchingResponseJobs.  # noqa: E501
        :type: str
        """

        self._posted_date = posted_date

    @property
    def location_data(self):
        """Gets the location_data of this ProfileMatchingResponseJobs.  # noqa: E501


        :return: The location_data of this ProfileMatchingResponseJobs.  # noqa: E501
        :rtype: ProfileMatchingResponseLocationData
        """
        return self._location_data

    @location_data.setter
    def location_data(self, location_data):
        """Sets the location_data of this ProfileMatchingResponseJobs.


        :param location_data: The location_data of this ProfileMatchingResponseJobs.  # noqa: E501
        :type: ProfileMatchingResponseLocationData
        """

        self._location_data = location_data

    @property
    def fitlevel(self):
        """Gets the fitlevel of this ProfileMatchingResponseJobs.  # noqa: E501

        How well the job matches the user. Example: A, B and C.  # noqa: E501

        :return: The fitlevel of this ProfileMatchingResponseJobs.  # noqa: E501
        :rtype: str
        """
        return self._fitlevel

    @fitlevel.setter
    def fitlevel(self, fitlevel):
        """Sets the fitlevel of this ProfileMatchingResponseJobs.

        How well the job matches the user. Example: A, B and C.  # noqa: E501

        :param fitlevel: The fitlevel of this ProfileMatchingResponseJobs.  # noqa: E501
        :type: str
        """

        self._fitlevel = fitlevel

    @property
    def skill_gap(self):
        """Gets the skill_gap of this ProfileMatchingResponseJobs.  # noqa: E501


        :return: The skill_gap of this ProfileMatchingResponseJobs.  # noqa: E501
        :rtype: ProfileMatchingResponseSkillGap
        """
        return self._skill_gap

    @skill_gap.setter
    def skill_gap(self, skill_gap):
        """Sets the skill_gap of this ProfileMatchingResponseJobs.


        :param skill_gap: The skill_gap of this ProfileMatchingResponseJobs.  # noqa: E501
        :type: ProfileMatchingResponseSkillGap
        """

        self._skill_gap = skill_gap

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileMatchingResponseJobs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileMatchingResponseJobs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
