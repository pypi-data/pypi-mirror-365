# coding: utf-8

"""
    apply-api

    The Apply API allows for seamless integration of the Phenom systems, enabling partners to push applications directly. This API also enables partners to integrate the Phenom Quick application process into their own job boards, while still maintaining control over the candidate experience. As a result, candidates can submit their applications without needing to visit the customer career site.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class Job(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'str',
        'applicant_source': 'str'
    }

    attribute_map = {
        'job_id': 'jobId',
        'applicant_source': 'applicantSource'
    }

    def __init__(self, job_id=None, applicant_source=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        self._job_id = None
        self._applicant_source = None
        self.discriminator = None
        self.job_id = job_id
        self.applicant_source = applicant_source

    @property
    def job_id(self):
        """Gets the job_id of this Job.  # noqa: E501

        Job Id of the job for which the applicant is applying.  # noqa: E501

        :return: The job_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this Job.

        Job Id of the job for which the applicant is applying.  # noqa: E501

        :param job_id: The job_id of this Job.  # noqa: E501
        :type: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def applicant_source(self):
        """Gets the applicant_source of this Job.  # noqa: E501

        Source of the Application. Eg: LinkedIn, Indeed, Naukri, Resume Upload etc.  # noqa: E501

        :return: The applicant_source of this Job.  # noqa: E501
        :rtype: str
        """
        return self._applicant_source

    @applicant_source.setter
    def applicant_source(self, applicant_source):
        """Sets the applicant_source of this Job.

        Source of the Application. Eg: LinkedIn, Indeed, Naukri, Resume Upload etc.  # noqa: E501

        :param applicant_source: The applicant_source of this Job.  # noqa: E501
        :type: str
        """
        if applicant_source is None:
            raise ValueError("Invalid value for `applicant_source`, must not be `None`")  # noqa: E501

        self._applicant_source = applicant_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
