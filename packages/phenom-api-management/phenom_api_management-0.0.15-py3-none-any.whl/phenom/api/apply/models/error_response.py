# coding: utf-8

"""
    apply-api

    The Apply API allows for seamless integration of the Phenom systems, enabling partners to push applications directly. This API also enables partners to integrate the Phenom Quick application process into their own job boards, while still maintaining control over the candidate experience. As a result, candidates can submit their applications without needing to visit the customer career site.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ErrorResponse(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'title': 'str',
        'type': 'str',
        'error': 'str',
        'details': 'str',
        'instance': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        'status': 'status',
        'title': 'title',
        'type': 'type',
        'error': 'error',
        'details': 'details',
        'instance': 'instance',
        'timestamp': 'timestamp'
    }

    def __init__(self, status=None, title=None, type=None, error=None, details=None, instance=None, timestamp=None):  # noqa: E501
        """ErrorResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._title = None
        self._type = None
        self._error = None
        self._details = None
        self._instance = None
        self._timestamp = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if error is not None:
            self.error = error
        if details is not None:
            self.details = details
        if instance is not None:
            self.instance = instance
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def status(self):
        """Gets the status of this ErrorResponse.  # noqa: E501

        Status of the response. It will contain HTTP status code in case of failures.  # noqa: E501

        :return: The status of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ErrorResponse.

        Status of the response. It will contain HTTP status code in case of failures.  # noqa: E501

        :param status: The status of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this ErrorResponse.  # noqa: E501

        Error message of the response. It gives a short brief on the error.  # noqa: E501

        :return: The title of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ErrorResponse.

        Error message of the response. It gives a short brief on the error.  # noqa: E501

        :param title: The title of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this ErrorResponse.  # noqa: E501

        Type of the error. It gives a brief on the type of error.  # noqa: E501

        :return: The type of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ErrorResponse.

        Type of the error. It gives a brief on the type of error.  # noqa: E501

        :param type: The type of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def error(self):
        """Gets the error of this ErrorResponse.  # noqa: E501

        This describes Error/Status Code in case of errors.  # noqa: E501

        :return: The error of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ErrorResponse.

        This describes Error/Status Code in case of errors.  # noqa: E501

        :param error: The error of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def details(self):
        """Gets the details of this ErrorResponse.  # noqa: E501

        Error message of the response. This describes the details of the error.  # noqa: E501

        :return: The details of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ErrorResponse.

        Error message of the response. This describes the details of the error.  # noqa: E501

        :param details: The details of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def instance(self):
        """Gets the instance of this ErrorResponse.  # noqa: E501

        URI of the instance.  # noqa: E501

        :return: The instance of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this ErrorResponse.

        URI of the instance.  # noqa: E501

        :param instance: The instance of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._instance = instance

    @property
    def timestamp(self):
        """Gets the timestamp of this ErrorResponse.  # noqa: E501

        Timestamp of the response.  # noqa: E501

        :return: The timestamp of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ErrorResponse.

        Timestamp of the response.  # noqa: E501

        :param timestamp: The timestamp of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
