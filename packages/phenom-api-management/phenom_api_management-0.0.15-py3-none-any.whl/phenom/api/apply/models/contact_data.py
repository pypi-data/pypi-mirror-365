# coding: utf-8

"""
    apply-api

    The Apply API allows for seamless integration of the Phenom systems, enabling partners to push applications directly. This API also enables partners to integrate the Phenom Quick application process into their own job boards, while still maintaining control over the candidate experience. As a result, candidates can submit their applications without needing to visit the customer career site.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ContactData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_phone_code': 'str',
        'phone_number': 'str',
        'device_type': 'str',
        'phone_extension': 'str',
        'email': 'str'
    }

    attribute_map = {
        'country_phone_code': 'countryPhoneCode',
        'phone_number': 'phoneNumber',
        'device_type': 'deviceType',
        'phone_extension': 'phoneExtension',
        'email': 'email'
    }

    def __init__(self, country_phone_code=None, phone_number=None, device_type=None, phone_extension=None, email=None):  # noqa: E501
        """ContactData - a model defined in Swagger"""  # noqa: E501
        self._country_phone_code = None
        self._phone_number = None
        self._device_type = None
        self._phone_extension = None
        self._email = None
        self.discriminator = None
        if country_phone_code is not None:
            self.country_phone_code = country_phone_code
        if phone_number is not None:
            self.phone_number = phone_number
        if device_type is not None:
            self.device_type = device_type
        if phone_extension is not None:
            self.phone_extension = phone_extension
        self.email = email

    @property
    def country_phone_code(self):
        """Gets the country_phone_code of this ContactData.  # noqa: E501

        Country Phone Code.  # noqa: E501

        :return: The country_phone_code of this ContactData.  # noqa: E501
        :rtype: str
        """
        return self._country_phone_code

    @country_phone_code.setter
    def country_phone_code(self, country_phone_code):
        """Sets the country_phone_code of this ContactData.

        Country Phone Code.  # noqa: E501

        :param country_phone_code: The country_phone_code of this ContactData.  # noqa: E501
        :type: str
        """

        self._country_phone_code = country_phone_code

    @property
    def phone_number(self):
        """Gets the phone_number of this ContactData.  # noqa: E501

        Phone Number.  # noqa: E501

        :return: The phone_number of this ContactData.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ContactData.

        Phone Number.  # noqa: E501

        :param phone_number: The phone_number of this ContactData.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def device_type(self):
        """Gets the device_type of this ContactData.  # noqa: E501

        Device Type. Eg: Mobile, Landline, etc.  # noqa: E501

        :return: The device_type of this ContactData.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this ContactData.

        Device Type. Eg: Mobile, Landline, etc.  # noqa: E501

        :param device_type: The device_type of this ContactData.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def phone_extension(self):
        """Gets the phone_extension of this ContactData.  # noqa: E501

        Phone Extension. Eg: 1234, etc.  # noqa: E501

        :return: The phone_extension of this ContactData.  # noqa: E501
        :rtype: str
        """
        return self._phone_extension

    @phone_extension.setter
    def phone_extension(self, phone_extension):
        """Sets the phone_extension of this ContactData.

        Phone Extension. Eg: 1234, etc.  # noqa: E501

        :param phone_extension: The phone_extension of this ContactData.  # noqa: E501
        :type: str
        """

        self._phone_extension = phone_extension

    @property
    def email(self):
        """Gets the email of this ContactData.  # noqa: E501

        Email Address.  # noqa: E501

        :return: The email of this ContactData.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactData.

        Email Address.  # noqa: E501

        :param email: The email of this ContactData.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
