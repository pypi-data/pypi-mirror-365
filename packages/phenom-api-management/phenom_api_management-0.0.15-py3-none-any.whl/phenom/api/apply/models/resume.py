# coding: utf-8

"""
    apply-api

    The Apply API allows for seamless integration of the Phenom systems, enabling partners to push applications directly. This API also enables partners to integrate the Phenom Quick application process into their own job boards, while still maintaining control over the candidate experience. As a result, candidates can submit their applications without needing to visit the customer career site.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class Resume(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_content': 'str',
        'file_name': 'str',
        'content_type_id': 'str'
    }

    attribute_map = {
        'file_content': 'fileContent',
        'file_name': 'fileName',
        'content_type_id': 'contentTypeId'
    }

    def __init__(self, file_content=None, file_name=None, content_type_id=None):  # noqa: E501
        """Resume - a model defined in Swagger"""  # noqa: E501
        self._file_content = None
        self._file_name = None
        self._content_type_id = None
        self.discriminator = None
        self.file_content = file_content
        self.file_name = file_name
        if content_type_id is not None:
            self.content_type_id = content_type_id

    @property
    def file_content(self):
        """Gets the file_content of this Resume.  # noqa: E501

        File Content in base64 format.  # noqa: E501

        :return: The file_content of this Resume.  # noqa: E501
        :rtype: str
        """
        return self._file_content

    @file_content.setter
    def file_content(self, file_content):
        """Sets the file_content of this Resume.

        File Content in base64 format.  # noqa: E501

        :param file_content: The file_content of this Resume.  # noqa: E501
        :type: str
        """
        if file_content is None:
            raise ValueError("Invalid value for `file_content`, must not be `None`")  # noqa: E501

        self._file_content = file_content

    @property
    def file_name(self):
        """Gets the file_name of this Resume.  # noqa: E501

        Name of the file.  # noqa: E501

        :return: The file_name of this Resume.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Resume.

        Name of the file.  # noqa: E501

        :param file_name: The file_name of this Resume.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def content_type_id(self):
        """Gets the content_type_id of this Resume.  # noqa: E501

        (Optional) Any id to identify the content type of the file.  # noqa: E501

        :return: The content_type_id of this Resume.  # noqa: E501
        :rtype: str
        """
        return self._content_type_id

    @content_type_id.setter
    def content_type_id(self, content_type_id):
        """Sets the content_type_id of this Resume.

        (Optional) Any id to identify the content type of the file.  # noqa: E501

        :param content_type_id: The content_type_id of this Resume.  # noqa: E501
        :type: str
        """

        self._content_type_id = content_type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Resume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
