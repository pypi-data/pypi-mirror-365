# coding: utf-8

"""
    apply-api

    The Apply API allows for seamless integration of the Phenom systems, enabling partners to push applications directly. This API also enables partners to integrate the Phenom Quick application process into their own job boards, while still maintaining control over the candidate experience. As a result, candidates can submit their applications without needing to visit the customer career site.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ExperienceData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_name': 'str',
        'title': 'str',
        'location': 'str',
        'description': 'str',
        'from_to': 'FromTo'
    }

    attribute_map = {
        'company_name': 'companyName',
        'title': 'title',
        'location': 'location',
        'description': 'description',
        'from_to': 'fromTo'
    }

    def __init__(self, company_name=None, title=None, location=None, description=None, from_to=None):  # noqa: E501
        """ExperienceData - a model defined in Swagger"""  # noqa: E501
        self._company_name = None
        self._title = None
        self._location = None
        self._description = None
        self._from_to = None
        self.discriminator = None
        self.company_name = company_name
        self.title = title
        if location is not None:
            self.location = location
        if description is not None:
            self.description = description
        if from_to is not None:
            self.from_to = from_to

    @property
    def company_name(self):
        """Gets the company_name of this ExperienceData.  # noqa: E501

        Name of the Company.  # noqa: E501

        :return: The company_name of this ExperienceData.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ExperienceData.

        Name of the Company.  # noqa: E501

        :param company_name: The company_name of this ExperienceData.  # noqa: E501
        :type: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def title(self):
        """Gets the title of this ExperienceData.  # noqa: E501

        Title of the experience.  # noqa: E501

        :return: The title of this ExperienceData.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ExperienceData.

        Title of the experience.  # noqa: E501

        :param title: The title of this ExperienceData.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def location(self):
        """Gets the location of this ExperienceData.  # noqa: E501

        Location of the experience.  # noqa: E501

        :return: The location of this ExperienceData.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ExperienceData.

        Location of the experience.  # noqa: E501

        :param location: The location of this ExperienceData.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def description(self):
        """Gets the description of this ExperienceData.  # noqa: E501

        Description of the experience.  # noqa: E501

        :return: The description of this ExperienceData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExperienceData.

        Description of the experience.  # noqa: E501

        :param description: The description of this ExperienceData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def from_to(self):
        """Gets the from_to of this ExperienceData.  # noqa: E501


        :return: The from_to of this ExperienceData.  # noqa: E501
        :rtype: FromTo
        """
        return self._from_to

    @from_to.setter
    def from_to(self, from_to):
        """Sets the from_to of this ExperienceData.


        :param from_to: The from_to of this ExperienceData.  # noqa: E501
        :type: FromTo
        """

        self._from_to = from_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExperienceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExperienceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
