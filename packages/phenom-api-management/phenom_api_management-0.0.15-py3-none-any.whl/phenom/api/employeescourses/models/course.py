# coding: utf-8

"""
    employees-api-courses

    The Employee course APIs are related to the courses that an employee can use them for upskilling in an organisation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class Course(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'image_url': 'str',
        'url': 'str',
        'category': 'str',
        'provider': 'str',
        'asset_type': 'str',
        'skills_acquired': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'image_url': 'imageUrl',
        'url': 'url',
        'category': 'category',
        'provider': 'provider',
        'asset_type': 'assetType',
        'skills_acquired': 'skillsAcquired'
    }

    def __init__(self, id=None, title=None, image_url=None, url=None, category=None, provider=None, asset_type=None, skills_acquired=None):  # noqa: E501
        """Course - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._image_url = None
        self._url = None
        self._category = None
        self._provider = None
        self._asset_type = None
        self._skills_acquired = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if image_url is not None:
            self.image_url = image_url
        if url is not None:
            self.url = url
        if category is not None:
            self.category = category
        if provider is not None:
            self.provider = provider
        if asset_type is not None:
            self.asset_type = asset_type
        if skills_acquired is not None:
            self.skills_acquired = skills_acquired

    @property
    def id(self):
        """Gets the id of this Course.  # noqa: E501

        Id - unique field to identify the Course.  # noqa: E501

        :return: The id of this Course.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Course.

        Id - unique field to identify the Course.  # noqa: E501

        :param id: The id of this Course.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Course.  # noqa: E501

        Title of the Course.  # noqa: E501

        :return: The title of this Course.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Course.

        Title of the Course.  # noqa: E501

        :param title: The title of this Course.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def image_url(self):
        """Gets the image_url of this Course.  # noqa: E501

        Image URL of the Course.  # noqa: E501

        :return: The image_url of this Course.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Course.

        Image URL of the Course.  # noqa: E501

        :param image_url: The image_url of this Course.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def url(self):
        """Gets the url of this Course.  # noqa: E501

        URL of the Course to access.  # noqa: E501

        :return: The url of this Course.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Course.

        URL of the Course to access.  # noqa: E501

        :param url: The url of this Course.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def category(self):
        """Gets the category of this Course.  # noqa: E501

        Category the Course belongs to.  # noqa: E501

        :return: The category of this Course.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Course.

        Category the Course belongs to.  # noqa: E501

        :param category: The category of this Course.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def provider(self):
        """Gets the provider of this Course.  # noqa: E501

        Provider the Course. Ex: Coursera.  # noqa: E501

        :return: The provider of this Course.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Course.

        Provider the Course. Ex: Coursera.  # noqa: E501

        :param provider: The provider of this Course.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def asset_type(self):
        """Gets the asset_type of this Course.  # noqa: E501

        AssetType of the Course.  # noqa: E501

        :return: The asset_type of this Course.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this Course.

        AssetType of the Course.  # noqa: E501

        :param asset_type: The asset_type of this Course.  # noqa: E501
        :type: str
        """

        self._asset_type = asset_type

    @property
    def skills_acquired(self):
        """Gets the skills_acquired of this Course.  # noqa: E501


        :return: The skills_acquired of this Course.  # noqa: E501
        :rtype: list[str]
        """
        return self._skills_acquired

    @skills_acquired.setter
    def skills_acquired(self, skills_acquired):
        """Sets the skills_acquired of this Course.


        :param skills_acquired: The skills_acquired of this Course.  # noqa: E501
        :type: list[str]
        """

        self._skills_acquired = skills_acquired

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Course, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Course):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
