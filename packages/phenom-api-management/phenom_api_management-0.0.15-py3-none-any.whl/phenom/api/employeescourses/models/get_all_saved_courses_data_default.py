# coding: utf-8

"""
    employees-api-courses

    The Employee course APIs are related to the courses that an employee can use them for upskilling in an organisation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetAllSavedCoursesDataDefault(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'course_uids': 'list[str]'
    }

    attribute_map = {
        'display_name': 'displayName',
        'course_uids': 'courseUids'
    }

    def __init__(self, display_name='success', course_uids=None):  # noqa: E501
        """GetAllSavedCoursesDataDefault - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._course_uids = None
        self.discriminator = None
        if display_name is not None:
            self.display_name = display_name
        if course_uids is not None:
            self.course_uids = course_uids

    @property
    def display_name(self):
        """Gets the display_name of this GetAllSavedCoursesDataDefault.  # noqa: E501

        Display Name of the Saved courses collection.  # noqa: E501

        :return: The display_name of this GetAllSavedCoursesDataDefault.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GetAllSavedCoursesDataDefault.

        Display Name of the Saved courses collection.  # noqa: E501

        :param display_name: The display_name of this GetAllSavedCoursesDataDefault.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def course_uids(self):
        """Gets the course_uids of this GetAllSavedCoursesDataDefault.  # noqa: E501


        :return: The course_uids of this GetAllSavedCoursesDataDefault.  # noqa: E501
        :rtype: list[str]
        """
        return self._course_uids

    @course_uids.setter
    def course_uids(self, course_uids):
        """Sets the course_uids of this GetAllSavedCoursesDataDefault.


        :param course_uids: The course_uids of this GetAllSavedCoursesDataDefault.  # noqa: E501
        :type: list[str]
        """

        self._course_uids = course_uids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAllSavedCoursesDataDefault, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAllSavedCoursesDataDefault):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
