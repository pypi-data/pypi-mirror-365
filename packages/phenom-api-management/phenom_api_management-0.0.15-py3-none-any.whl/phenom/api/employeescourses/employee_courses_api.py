# coding: utf-8

"""
    employees-api-courses

    The Employee course APIs are related to the courses that an employee can use them for upskilling in an organisation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phenom.commons.api_client import ApiClient


class EmployeeCoursesApi(object):
    base_path = "/employees-api/courses"  # your base path

    def __init__(self, token, gateway_url, apikey, api_client=None):
        if api_client is None:
            api_client = ApiClient(gateway_url + self.base_path, apikey, token)
        self.api_client = api_client

    def create_course(self, body, **kwargs):  # noqa: E501
        """Creates Course  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_course(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCourse body: (required)
        :return: CoursesSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_course_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_course_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_course_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates Course  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_course_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCourse body: (required)
        :return: CoursesSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoursesSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_courses_details(self, course_id, **kwargs):  # noqa: E501
        """Deletes Course  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_courses_details(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Course Id - unique field to identify the course. (required)
        :return: CoursesSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_courses_details_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_courses_details_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def delete_courses_details_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Deletes Course  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_courses_details_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Course Id - unique field to identify the course. (required)
        :return: CoursesSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_courses_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `delete_courses_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{courseId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoursesSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_completed_courses(self, employee_id, **kwargs):  # noqa: E501
        """Get Completed Courses  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_completed_courses(employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str employee_id: Employee Id - unique field to identify the employee. (required)
        :return: GetCompletedCoursesData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_completed_courses_with_http_info(employee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_completed_courses_with_http_info(employee_id, **kwargs)  # noqa: E501
            return data

    def get_completed_courses_with_http_info(self, employee_id, **kwargs):  # noqa: E501
        """Get Completed Courses  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_completed_courses_with_http_info(employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str employee_id: Employee Id - unique field to identify the employee. (required)
        :return: GetCompletedCoursesData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['employee_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_completed_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `get_completed_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'employee_id' in params:
            path_params['employeeId'] = params['employee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/employees/{employeeId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCompletedCoursesData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_course_details(self, course_id, **kwargs):  # noqa: E501
        """Get Course  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_course_details(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Course Id - unique field to identify the course. (required)
        :return: CoursesSuccessResponseWithData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_course_details_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_course_details_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_course_details_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get Course  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_course_details_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Course Id - unique field to identify the course. (required)
        :return: CoursesSuccessResponseWithData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_course_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `get_course_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{courseId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoursesSuccessResponseWithData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_saved_courses(self, employee_id, **kwargs):  # noqa: E501
        """Get courses For Employee  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_saved_courses(employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str employee_id: Employee Id - unique field to identify the employee. (required)
        :return: GetAllSavedCourses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_saved_courses_with_http_info(employee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_saved_courses_with_http_info(employee_id, **kwargs)  # noqa: E501
            return data

    def get_saved_courses_with_http_info(self, employee_id, **kwargs):  # noqa: E501
        """Get courses For Employee  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_saved_courses_with_http_info(employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str employee_id: Employee Id - unique field to identify the employee. (required)
        :return: GetAllSavedCourses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['employee_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_saved_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `get_saved_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'employee_id' in params:
            path_params['employeeId'] = params['employee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/employees/{employeeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllSavedCourses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_course(self, body, course_id, employee_id, **kwargs):  # noqa: E501
        """Assign Course  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_course(body, course_id, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveCourse body: (required)
        :param str course_id: Course Id - unique field to identify the course. (required)
        :param str employee_id: Employee Id - unique field to identify the employee. (required)
        :return: CoursesSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_course_with_http_info(body, course_id, employee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.save_course_with_http_info(body, course_id, employee_id, **kwargs)  # noqa: E501
            return data

    def save_course_with_http_info(self, body, course_id, employee_id, **kwargs):  # noqa: E501
        """Assign Course  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_course_with_http_info(body, course_id, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveCourse body: (required)
        :param str course_id: Course Id - unique field to identify the course. (required)
        :param str employee_id: Employee Id - unique field to identify the employee. (required)
        :return: CoursesSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'course_id', 'employee_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_course`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `save_course`")  # noqa: E501
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `save_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'employee_id' in params:
            path_params['employeeId'] = params['employee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/employees/{employeeId}/courses/{courseId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoursesSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def un_save_course(self, course_id, employee_id, **kwargs):  # noqa: E501
        """Remove Course  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.un_save_course(course_id, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Course Id - unique field to identify the course. (required)
        :param str employee_id: Employee Id - unique field to identify the employee. (required)
        :return: CoursesSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.un_save_course_with_http_info(course_id, employee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.un_save_course_with_http_info(course_id, employee_id, **kwargs)  # noqa: E501
            return data

    def un_save_course_with_http_info(self, course_id, employee_id, **kwargs):  # noqa: E501
        """Remove Course  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.un_save_course_with_http_info(course_id, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: Course Id - unique field to identify the course. (required)
        :param str employee_id: Employee Id - unique field to identify the employee. (required)
        :return: CoursesSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'employee_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method un_save_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `un_save_course`")  # noqa: E501
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `un_save_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'employee_id' in params:
            path_params['employeeId'] = params['employee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/employees/{employeeId}/courses/{courseId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoursesSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_course_details(self, body, course_id, **kwargs):  # noqa: E501
        """Update Course  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_course_details(body, course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCourse body: (required)
        :param str course_id: Course Id - unique field to identify the course. (required)
        :return: CoursesSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_course_details_with_http_info(body, course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_course_details_with_http_info(body, course_id, **kwargs)  # noqa: E501
            return data

    def update_course_details_with_http_info(self, body, course_id, **kwargs):  # noqa: E501
        """Update Course  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_course_details_with_http_info(body, course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCourse body: (required)
        :param str course_id: Course Id - unique field to identify the course. (required)
        :return: CoursesSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_course_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_course_details`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `update_course_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{courseId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoursesSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_course_status(self, body, course_id, employee_id, **kwargs):  # noqa: E501
        """Update Course Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_course_status(body, course_id, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCourseStatus body: (required)
        :param str course_id: Course Id - unique field to identify the course. (required)
        :param str employee_id: Employee Id - unique field to identify the employee. (required)
        :return: CoursesSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_course_status_with_http_info(body, course_id, employee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_course_status_with_http_info(body, course_id, employee_id, **kwargs)  # noqa: E501
            return data

    def update_course_status_with_http_info(self, body, course_id, employee_id, **kwargs):  # noqa: E501
        """Update Course Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_course_status_with_http_info(body, course_id, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCourseStatus body: (required)
        :param str course_id: Course Id - unique field to identify the course. (required)
        :param str employee_id: Employee Id - unique field to identify the employee. (required)
        :return: CoursesSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'course_id', 'employee_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_course_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_course_status`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if ('course_id' not in params or
                params['course_id'] is None):
            raise ValueError("Missing the required parameter `course_id` when calling `update_course_status`")  # noqa: E501
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `update_course_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['courseId'] = params['course_id']  # noqa: E501
        if 'employee_id' in params:
            path_params['employeeId'] = params['employee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/employees/{employeeId}/courses/{courseId}/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoursesSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
