# coding: utf-8

"""
    hrm-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetCandidatesResponseDataHiringStatus(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hs_priority': 'float',
        'updated_date': 'str',
        'value': 'str'
    }

    attribute_map = {
        'hs_priority': 'hsPriority',
        'updated_date': 'updatedDate',
        'value': 'value'
    }

    def __init__(self, hs_priority=None, updated_date=None, value=None):  # noqa: E501
        """GetCandidatesResponseDataHiringStatus - a model defined in Swagger"""  # noqa: E501
        self._hs_priority = None
        self._updated_date = None
        self._value = None
        self.discriminator = None
        if hs_priority is not None:
            self.hs_priority = hs_priority
        if updated_date is not None:
            self.updated_date = updated_date
        if value is not None:
            self.value = value

    @property
    def hs_priority(self):
        """Gets the hs_priority of this GetCandidatesResponseDataHiringStatus.  # noqa: E501

        Hiring status priority score.  # noqa: E501

        :return: The hs_priority of this GetCandidatesResponseDataHiringStatus.  # noqa: E501
        :rtype: float
        """
        return self._hs_priority

    @hs_priority.setter
    def hs_priority(self, hs_priority):
        """Sets the hs_priority of this GetCandidatesResponseDataHiringStatus.

        Hiring status priority score.  # noqa: E501

        :param hs_priority: The hs_priority of this GetCandidatesResponseDataHiringStatus.  # noqa: E501
        :type: float
        """

        self._hs_priority = hs_priority

    @property
    def updated_date(self):
        """Gets the updated_date of this GetCandidatesResponseDataHiringStatus.  # noqa: E501

        Hiring status updated date.  # noqa: E501

        :return: The updated_date of this GetCandidatesResponseDataHiringStatus.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this GetCandidatesResponseDataHiringStatus.

        Hiring status updated date.  # noqa: E501

        :param updated_date: The updated_date of this GetCandidatesResponseDataHiringStatus.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    @property
    def value(self):
        """Gets the value of this GetCandidatesResponseDataHiringStatus.  # noqa: E501

        Hiring status value.  # noqa: E501

        :return: The value of this GetCandidatesResponseDataHiringStatus.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GetCandidatesResponseDataHiringStatus.

        Hiring status value.  # noqa: E501

        :param value: The value of this GetCandidatesResponseDataHiringStatus.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCandidatesResponseDataHiringStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCandidatesResponseDataHiringStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
