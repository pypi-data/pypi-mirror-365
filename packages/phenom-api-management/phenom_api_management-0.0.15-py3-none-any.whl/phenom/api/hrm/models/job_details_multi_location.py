# coding: utf-8

"""
    hrm-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class JobDetailsMultiLocation(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'location': 'str',
        'state': 'str',
        'country': 'str',
        'latitude': 'str',
        'longitude': 'str',
        'postal_code': 'str',
        'location_id': 'str',
        'address': 'str',
        'city_country': 'str',
        'external_location': 'str',
        'city_state': 'str',
        'map_query_location': 'str',
        'state_country': 'str',
        'city_state_country': 'str',
        'lat_long': 'JobDetailsLatLong'
    }

    attribute_map = {
        'city': 'city',
        'location': 'location',
        'state': 'state',
        'country': 'country',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'postal_code': 'postalCode',
        'location_id': 'locationId',
        'address': 'address',
        'city_country': 'cityCountry',
        'external_location': 'externalLocation',
        'city_state': 'cityState',
        'map_query_location': 'mapQueryLocation',
        'state_country': 'stateCountry',
        'city_state_country': 'cityStateCountry',
        'lat_long': 'latLong'
    }

    def __init__(self, city=None, location=None, state=None, country=None, latitude=None, longitude=None, postal_code=None, location_id=None, address=None, city_country=None, external_location=None, city_state=None, map_query_location=None, state_country=None, city_state_country=None, lat_long=None):  # noqa: E501
        """JobDetailsMultiLocation - a model defined in Swagger"""  # noqa: E501
        self._city = None
        self._location = None
        self._state = None
        self._country = None
        self._latitude = None
        self._longitude = None
        self._postal_code = None
        self._location_id = None
        self._address = None
        self._city_country = None
        self._external_location = None
        self._city_state = None
        self._map_query_location = None
        self._state_country = None
        self._city_state_country = None
        self._lat_long = None
        self.discriminator = None
        if city is not None:
            self.city = city
        if location is not None:
            self.location = location
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if postal_code is not None:
            self.postal_code = postal_code
        if location_id is not None:
            self.location_id = location_id
        if address is not None:
            self.address = address
        if city_country is not None:
            self.city_country = city_country
        if external_location is not None:
            self.external_location = external_location
        if city_state is not None:
            self.city_state = city_state
        if map_query_location is not None:
            self.map_query_location = map_query_location
        if state_country is not None:
            self.state_country = state_country
        if city_state_country is not None:
            self.city_state_country = city_state_country
        if lat_long is not None:
            self.lat_long = lat_long

    @property
    def city(self):
        """Gets the city of this JobDetailsMultiLocation.  # noqa: E501

        Name of the city where the job is available.  # noqa: E501

        :return: The city of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this JobDetailsMultiLocation.

        Name of the city where the job is available.  # noqa: E501

        :param city: The city of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def location(self):
        """Gets the location of this JobDetailsMultiLocation.  # noqa: E501

        Location of the job.  # noqa: E501

        :return: The location of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this JobDetailsMultiLocation.

        Location of the job.  # noqa: E501

        :param location: The location of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def state(self):
        """Gets the state of this JobDetailsMultiLocation.  # noqa: E501

        Name of the state where the job is available.  # noqa: E501

        :return: The state of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobDetailsMultiLocation.

        Name of the state where the job is available.  # noqa: E501

        :param state: The state of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this JobDetailsMultiLocation.  # noqa: E501

        Name of the country where the job is available.  # noqa: E501

        :return: The country of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this JobDetailsMultiLocation.

        Name of the country where the job is available.  # noqa: E501

        :param country: The country of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def latitude(self):
        """Gets the latitude of this JobDetailsMultiLocation.  # noqa: E501

        Latitude of the place where the job is available.  # noqa: E501

        :return: The latitude of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this JobDetailsMultiLocation.

        Latitude of the place where the job is available.  # noqa: E501

        :param latitude: The latitude of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this JobDetailsMultiLocation.  # noqa: E501

        Longitude of the place where the job is available.  # noqa: E501

        :return: The longitude of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this JobDetailsMultiLocation.

        Longitude of the place where the job is available.  # noqa: E501

        :param longitude: The longitude of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    @property
    def postal_code(self):
        """Gets the postal_code of this JobDetailsMultiLocation.  # noqa: E501

        Postal code of the place where the job is available.  # noqa: E501

        :return: The postal_code of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this JobDetailsMultiLocation.

        Postal code of the place where the job is available.  # noqa: E501

        :param postal_code: The postal_code of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def location_id(self):
        """Gets the location_id of this JobDetailsMultiLocation.  # noqa: E501

        Location ID of the place where the job is available.  # noqa: E501

        :return: The location_id of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this JobDetailsMultiLocation.

        Location ID of the place where the job is available.  # noqa: E501

        :param location_id: The location_id of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def address(self):
        """Gets the address of this JobDetailsMultiLocation.  # noqa: E501

        Address of the place where the job is available.  # noqa: E501

        :return: The address of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this JobDetailsMultiLocation.

        Address of the place where the job is available.  # noqa: E501

        :param address: The address of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def city_country(self):
        """Gets the city_country of this JobDetailsMultiLocation.  # noqa: E501

        City Country of the place where the job is available.  # noqa: E501

        :return: The city_country of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._city_country

    @city_country.setter
    def city_country(self, city_country):
        """Sets the city_country of this JobDetailsMultiLocation.

        City Country of the place where the job is available.  # noqa: E501

        :param city_country: The city_country of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._city_country = city_country

    @property
    def external_location(self):
        """Gets the external_location of this JobDetailsMultiLocation.  # noqa: E501

        External location.  # noqa: E501

        :return: The external_location of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._external_location

    @external_location.setter
    def external_location(self, external_location):
        """Sets the external_location of this JobDetailsMultiLocation.

        External location.  # noqa: E501

        :param external_location: The external_location of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._external_location = external_location

    @property
    def city_state(self):
        """Gets the city_state of this JobDetailsMultiLocation.  # noqa: E501

        City state name.  # noqa: E501

        :return: The city_state of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._city_state

    @city_state.setter
    def city_state(self, city_state):
        """Sets the city_state of this JobDetailsMultiLocation.

        City state name.  # noqa: E501

        :param city_state: The city_state of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._city_state = city_state

    @property
    def map_query_location(self):
        """Gets the map_query_location of this JobDetailsMultiLocation.  # noqa: E501

        The map query location.  # noqa: E501

        :return: The map_query_location of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._map_query_location

    @map_query_location.setter
    def map_query_location(self, map_query_location):
        """Sets the map_query_location of this JobDetailsMultiLocation.

        The map query location.  # noqa: E501

        :param map_query_location: The map_query_location of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._map_query_location = map_query_location

    @property
    def state_country(self):
        """Gets the state_country of this JobDetailsMultiLocation.  # noqa: E501

        The state country name.  # noqa: E501

        :return: The state_country of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._state_country

    @state_country.setter
    def state_country(self, state_country):
        """Sets the state_country of this JobDetailsMultiLocation.

        The state country name.  # noqa: E501

        :param state_country: The state_country of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._state_country = state_country

    @property
    def city_state_country(self):
        """Gets the city_state_country of this JobDetailsMultiLocation.  # noqa: E501

        The city state country name.  # noqa: E501

        :return: The city_state_country of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: str
        """
        return self._city_state_country

    @city_state_country.setter
    def city_state_country(self, city_state_country):
        """Sets the city_state_country of this JobDetailsMultiLocation.

        The city state country name.  # noqa: E501

        :param city_state_country: The city_state_country of this JobDetailsMultiLocation.  # noqa: E501
        :type: str
        """

        self._city_state_country = city_state_country

    @property
    def lat_long(self):
        """Gets the lat_long of this JobDetailsMultiLocation.  # noqa: E501


        :return: The lat_long of this JobDetailsMultiLocation.  # noqa: E501
        :rtype: JobDetailsLatLong
        """
        return self._lat_long

    @lat_long.setter
    def lat_long(self, lat_long):
        """Sets the lat_long of this JobDetailsMultiLocation.


        :param lat_long: The lat_long of this JobDetailsMultiLocation.  # noqa: E501
        :type: JobDetailsLatLong
        """

        self._lat_long = lat_long

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobDetailsMultiLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobDetailsMultiLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
