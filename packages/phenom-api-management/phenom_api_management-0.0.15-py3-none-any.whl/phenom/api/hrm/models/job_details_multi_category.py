# coding: utf-8

"""
    hrm-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class JobDetailsMultiCategory(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_category_id': 'str',
        'category': 'str',
        'category_raw': 'str',
        'primary_locale_category': 'str'
    }

    attribute_map = {
        'internal_category_id': 'internalCategoryId',
        'category': 'category',
        'category_raw': 'category_raw',
        'primary_locale_category': 'primaryLocaleCategory'
    }

    def __init__(self, internal_category_id=None, category=None, category_raw=None, primary_locale_category=None):  # noqa: E501
        """JobDetailsMultiCategory - a model defined in Swagger"""  # noqa: E501
        self._internal_category_id = None
        self._category = None
        self._category_raw = None
        self._primary_locale_category = None
        self.discriminator = None
        if internal_category_id is not None:
            self.internal_category_id = internal_category_id
        if category is not None:
            self.category = category
        if category_raw is not None:
            self.category_raw = category_raw
        if primary_locale_category is not None:
            self.primary_locale_category = primary_locale_category

    @property
    def internal_category_id(self):
        """Gets the internal_category_id of this JobDetailsMultiCategory.  # noqa: E501

        Internal category identifier.  # noqa: E501

        :return: The internal_category_id of this JobDetailsMultiCategory.  # noqa: E501
        :rtype: str
        """
        return self._internal_category_id

    @internal_category_id.setter
    def internal_category_id(self, internal_category_id):
        """Sets the internal_category_id of this JobDetailsMultiCategory.

        Internal category identifier.  # noqa: E501

        :param internal_category_id: The internal_category_id of this JobDetailsMultiCategory.  # noqa: E501
        :type: str
        """

        self._internal_category_id = internal_category_id

    @property
    def category(self):
        """Gets the category of this JobDetailsMultiCategory.  # noqa: E501

        Category name.  # noqa: E501

        :return: The category of this JobDetailsMultiCategory.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this JobDetailsMultiCategory.

        Category name.  # noqa: E501

        :param category: The category of this JobDetailsMultiCategory.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def category_raw(self):
        """Gets the category_raw of this JobDetailsMultiCategory.  # noqa: E501

        Category raw name.  # noqa: E501

        :return: The category_raw of this JobDetailsMultiCategory.  # noqa: E501
        :rtype: str
        """
        return self._category_raw

    @category_raw.setter
    def category_raw(self, category_raw):
        """Sets the category_raw of this JobDetailsMultiCategory.

        Category raw name.  # noqa: E501

        :param category_raw: The category_raw of this JobDetailsMultiCategory.  # noqa: E501
        :type: str
        """

        self._category_raw = category_raw

    @property
    def primary_locale_category(self):
        """Gets the primary_locale_category of this JobDetailsMultiCategory.  # noqa: E501

        Primary locale category.  # noqa: E501

        :return: The primary_locale_category of this JobDetailsMultiCategory.  # noqa: E501
        :rtype: str
        """
        return self._primary_locale_category

    @primary_locale_category.setter
    def primary_locale_category(self, primary_locale_category):
        """Sets the primary_locale_category of this JobDetailsMultiCategory.

        Primary locale category.  # noqa: E501

        :param primary_locale_category: The primary_locale_category of this JobDetailsMultiCategory.  # noqa: E501
        :type: str
        """

        self._primary_locale_category = primary_locale_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobDetailsMultiCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobDetailsMultiCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
