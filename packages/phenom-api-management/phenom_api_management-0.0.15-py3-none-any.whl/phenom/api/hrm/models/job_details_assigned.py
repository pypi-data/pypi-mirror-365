# coding: utf-8

"""
    hrm-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class JobDetailsAssigned(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigned_to_name': 'str',
        'source': 'str',
        'assigned_by': 'float',
        'assigned_to_email': 'str',
        'user_type': 'str',
        'assigned_to': 'str'
    }

    attribute_map = {
        'assigned_to_name': 'assignedToName',
        'source': 'source',
        'assigned_by': 'assignedBy',
        'assigned_to_email': 'assignedToEmail',
        'user_type': 'userType',
        'assigned_to': 'assignedTo'
    }

    def __init__(self, assigned_to_name=None, source=None, assigned_by=None, assigned_to_email=None, user_type=None, assigned_to=None):  # noqa: E501
        """JobDetailsAssigned - a model defined in Swagger"""  # noqa: E501
        self._assigned_to_name = None
        self._source = None
        self._assigned_by = None
        self._assigned_to_email = None
        self._user_type = None
        self._assigned_to = None
        self.discriminator = None
        if assigned_to_name is not None:
            self.assigned_to_name = assigned_to_name
        if source is not None:
            self.source = source
        if assigned_by is not None:
            self.assigned_by = assigned_by
        if assigned_to_email is not None:
            self.assigned_to_email = assigned_to_email
        if user_type is not None:
            self.user_type = user_type
        if assigned_to is not None:
            self.assigned_to = assigned_to

    @property
    def assigned_to_name(self):
        """Gets the assigned_to_name of this JobDetailsAssigned.  # noqa: E501

        Name of the user to whom the job is assigned.  # noqa: E501

        :return: The assigned_to_name of this JobDetailsAssigned.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to_name

    @assigned_to_name.setter
    def assigned_to_name(self, assigned_to_name):
        """Sets the assigned_to_name of this JobDetailsAssigned.

        Name of the user to whom the job is assigned.  # noqa: E501

        :param assigned_to_name: The assigned_to_name of this JobDetailsAssigned.  # noqa: E501
        :type: str
        """

        self._assigned_to_name = assigned_to_name

    @property
    def source(self):
        """Gets the source of this JobDetailsAssigned.  # noqa: E501

        The source which which got assigned to the job.  # noqa: E501

        :return: The source of this JobDetailsAssigned.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this JobDetailsAssigned.

        The source which which got assigned to the job.  # noqa: E501

        :param source: The source of this JobDetailsAssigned.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def assigned_by(self):
        """Gets the assigned_by of this JobDetailsAssigned.  # noqa: E501

        Assigned by user number.  # noqa: E501

        :return: The assigned_by of this JobDetailsAssigned.  # noqa: E501
        :rtype: float
        """
        return self._assigned_by

    @assigned_by.setter
    def assigned_by(self, assigned_by):
        """Sets the assigned_by of this JobDetailsAssigned.

        Assigned by user number.  # noqa: E501

        :param assigned_by: The assigned_by of this JobDetailsAssigned.  # noqa: E501
        :type: float
        """

        self._assigned_by = assigned_by

    @property
    def assigned_to_email(self):
        """Gets the assigned_to_email of this JobDetailsAssigned.  # noqa: E501

        Assignee email address.  # noqa: E501

        :return: The assigned_to_email of this JobDetailsAssigned.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to_email

    @assigned_to_email.setter
    def assigned_to_email(self, assigned_to_email):
        """Sets the assigned_to_email of this JobDetailsAssigned.

        Assignee email address.  # noqa: E501

        :param assigned_to_email: The assigned_to_email of this JobDetailsAssigned.  # noqa: E501
        :type: str
        """

        self._assigned_to_email = assigned_to_email

    @property
    def user_type(self):
        """Gets the user_type of this JobDetailsAssigned.  # noqa: E501

        Type of user.  # noqa: E501

        :return: The user_type of this JobDetailsAssigned.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this JobDetailsAssigned.

        Type of user.  # noqa: E501

        :param user_type: The user_type of this JobDetailsAssigned.  # noqa: E501
        :type: str
        """

        self._user_type = user_type

    @property
    def assigned_to(self):
        """Gets the assigned_to of this JobDetailsAssigned.  # noqa: E501

        Assignee user name.  # noqa: E501

        :return: The assigned_to of this JobDetailsAssigned.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this JobDetailsAssigned.

        Assignee user name.  # noqa: E501

        :param assigned_to: The assigned_to of this JobDetailsAssigned.  # noqa: E501
        :type: str
        """

        self._assigned_to = assigned_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobDetailsAssigned, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobDetailsAssigned):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
