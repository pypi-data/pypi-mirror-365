# coding: utf-8

"""
    hrm-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class JobsListRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'keyword': 'str',
        '_from': 'float',
        'size': 'float',
        'sort_by': 'JobsListRequestSortBy'
    }

    attribute_map = {
        'status': 'status',
        'keyword': 'keyword',
        '_from': 'from',
        'size': 'size',
        'sort_by': 'sortBy'
    }

    def __init__(self, status=None, keyword=None, _from=None, size=None, sort_by=None):  # noqa: E501
        """JobsListRequest - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._keyword = None
        self.__from = None
        self._size = None
        self._sort_by = None
        self.discriminator = None
        self.status = status
        if keyword is not None:
            self.keyword = keyword
        if _from is not None:
            self._from = _from
        if size is not None:
            self.size = size
        if sort_by is not None:
            self.sort_by = sort_by

    @property
    def status(self):
        """Gets the status of this JobsListRequest.  # noqa: E501

        A job's status.  # noqa: E501

        :return: The status of this JobsListRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobsListRequest.

        A job's status.  # noqa: E501

        :param status: The status of this JobsListRequest.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["OPEN", "PAST"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def keyword(self):
        """Gets the keyword of this JobsListRequest.  # noqa: E501

        Keyword to search for jobs.  # noqa: E501

        :return: The keyword of this JobsListRequest.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this JobsListRequest.

        Keyword to search for jobs.  # noqa: E501

        :param keyword: The keyword of this JobsListRequest.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def _from(self):
        """Gets the _from of this JobsListRequest.  # noqa: E501

        Number to fetch data from.  # noqa: E501

        :return: The _from of this JobsListRequest.  # noqa: E501
        :rtype: float
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this JobsListRequest.

        Number to fetch data from.  # noqa: E501

        :param _from: The _from of this JobsListRequest.  # noqa: E501
        :type: float
        """

        self.__from = _from

    @property
    def size(self):
        """Gets the size of this JobsListRequest.  # noqa: E501

        Number of records to return.  # noqa: E501

        :return: The size of this JobsListRequest.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this JobsListRequest.

        Number of records to return.  # noqa: E501

        :param size: The size of this JobsListRequest.  # noqa: E501
        :type: float
        """

        self._size = size

    @property
    def sort_by(self):
        """Gets the sort_by of this JobsListRequest.  # noqa: E501


        :return: The sort_by of this JobsListRequest.  # noqa: E501
        :rtype: JobsListRequestSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this JobsListRequest.


        :param sort_by: The sort_by of this JobsListRequest.  # noqa: E501
        :type: JobsListRequestSortBy
        """

        self._sort_by = sort_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobsListRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsListRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
