# coding: utf-8

"""
    hrm-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class JobDetailsVariations(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'str',
        'posting_status': 'str',
        'language_code': 'str',
        'locale': 'str',
        'job_category': 'str',
        'job_title': 'str',
        'branding': 'str',
        'country_code': 'str',
        'site_type': 'list[str]'
    }

    attribute_map = {
        'company': 'company',
        'posting_status': 'postingStatus',
        'language_code': 'languageCode',
        'locale': 'locale',
        'job_category': 'jobCategory',
        'job_title': 'jobTitle',
        'branding': 'branding',
        'country_code': 'countryCode',
        'site_type': 'siteType'
    }

    def __init__(self, company=None, posting_status=None, language_code=None, locale=None, job_category=None, job_title=None, branding=None, country_code=None, site_type=None):  # noqa: E501
        """JobDetailsVariations - a model defined in Swagger"""  # noqa: E501
        self._company = None
        self._posting_status = None
        self._language_code = None
        self._locale = None
        self._job_category = None
        self._job_title = None
        self._branding = None
        self._country_code = None
        self._site_type = None
        self.discriminator = None
        if company is not None:
            self.company = company
        if posting_status is not None:
            self.posting_status = posting_status
        if language_code is not None:
            self.language_code = language_code
        if locale is not None:
            self.locale = locale
        if job_category is not None:
            self.job_category = job_category
        if job_title is not None:
            self.job_title = job_title
        if branding is not None:
            self.branding = branding
        if country_code is not None:
            self.country_code = country_code
        if site_type is not None:
            self.site_type = site_type

    @property
    def company(self):
        """Gets the company of this JobDetailsVariations.  # noqa: E501

        The company name.  # noqa: E501

        :return: The company of this JobDetailsVariations.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this JobDetailsVariations.

        The company name.  # noqa: E501

        :param company: The company of this JobDetailsVariations.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def posting_status(self):
        """Gets the posting_status of this JobDetailsVariations.  # noqa: E501

        The posting status.  # noqa: E501

        :return: The posting_status of this JobDetailsVariations.  # noqa: E501
        :rtype: str
        """
        return self._posting_status

    @posting_status.setter
    def posting_status(self, posting_status):
        """Sets the posting_status of this JobDetailsVariations.

        The posting status.  # noqa: E501

        :param posting_status: The posting_status of this JobDetailsVariations.  # noqa: E501
        :type: str
        """

        self._posting_status = posting_status

    @property
    def language_code(self):
        """Gets the language_code of this JobDetailsVariations.  # noqa: E501

        The language code.  # noqa: E501

        :return: The language_code of this JobDetailsVariations.  # noqa: E501
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this JobDetailsVariations.

        The language code.  # noqa: E501

        :param language_code: The language_code of this JobDetailsVariations.  # noqa: E501
        :type: str
        """

        self._language_code = language_code

    @property
    def locale(self):
        """Gets the locale of this JobDetailsVariations.  # noqa: E501

        The locale.  # noqa: E501

        :return: The locale of this JobDetailsVariations.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this JobDetailsVariations.

        The locale.  # noqa: E501

        :param locale: The locale of this JobDetailsVariations.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def job_category(self):
        """Gets the job_category of this JobDetailsVariations.  # noqa: E501

        The job's category.  # noqa: E501

        :return: The job_category of this JobDetailsVariations.  # noqa: E501
        :rtype: str
        """
        return self._job_category

    @job_category.setter
    def job_category(self, job_category):
        """Sets the job_category of this JobDetailsVariations.

        The job's category.  # noqa: E501

        :param job_category: The job_category of this JobDetailsVariations.  # noqa: E501
        :type: str
        """

        self._job_category = job_category

    @property
    def job_title(self):
        """Gets the job_title of this JobDetailsVariations.  # noqa: E501

        The job's title.  # noqa: E501

        :return: The job_title of this JobDetailsVariations.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this JobDetailsVariations.

        The job's title.  # noqa: E501

        :param job_title: The job_title of this JobDetailsVariations.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def branding(self):
        """Gets the branding of this JobDetailsVariations.  # noqa: E501

        The branding.  # noqa: E501

        :return: The branding of this JobDetailsVariations.  # noqa: E501
        :rtype: str
        """
        return self._branding

    @branding.setter
    def branding(self, branding):
        """Sets the branding of this JobDetailsVariations.

        The branding.  # noqa: E501

        :param branding: The branding of this JobDetailsVariations.  # noqa: E501
        :type: str
        """

        self._branding = branding

    @property
    def country_code(self):
        """Gets the country_code of this JobDetailsVariations.  # noqa: E501

        The country code.  # noqa: E501

        :return: The country_code of this JobDetailsVariations.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this JobDetailsVariations.

        The country code.  # noqa: E501

        :param country_code: The country_code of this JobDetailsVariations.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def site_type(self):
        """Gets the site_type of this JobDetailsVariations.  # noqa: E501

        The site type  # noqa: E501

        :return: The site_type of this JobDetailsVariations.  # noqa: E501
        :rtype: list[str]
        """
        return self._site_type

    @site_type.setter
    def site_type(self, site_type):
        """Sets the site_type of this JobDetailsVariations.

        The site type  # noqa: E501

        :param site_type: The site_type of this JobDetailsVariations.  # noqa: E501
        :type: list[str]
        """

        self._site_type = site_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobDetailsVariations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobDetailsVariations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
