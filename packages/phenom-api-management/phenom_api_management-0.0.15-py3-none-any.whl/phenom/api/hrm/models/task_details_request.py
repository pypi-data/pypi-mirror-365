# coding: utf-8

"""
    hrm-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class TaskDetailsRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'float',
        'size': 'float',
        'task': 'str',
        'accessrole': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'size': 'size',
        'task': 'task',
        'accessrole': 'accessrole'
    }

    def __init__(self, _from=None, size=None, task=None, accessrole=None):  # noqa: E501
        """TaskDetailsRequest - a model defined in Swagger"""  # noqa: E501
        self.__from = None
        self._size = None
        self._task = None
        self._accessrole = None
        self.discriminator = None
        if _from is not None:
            self._from = _from
        if size is not None:
            self.size = size
        if task is not None:
            self.task = task
        if accessrole is not None:
            self.accessrole = accessrole

    @property
    def _from(self):
        """Gets the _from of this TaskDetailsRequest.  # noqa: E501

        Number to fetch data from.  # noqa: E501

        :return: The _from of this TaskDetailsRequest.  # noqa: E501
        :rtype: float
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this TaskDetailsRequest.

        Number to fetch data from.  # noqa: E501

        :param _from: The _from of this TaskDetailsRequest.  # noqa: E501
        :type: float
        """

        self.__from = _from

    @property
    def size(self):
        """Gets the size of this TaskDetailsRequest.  # noqa: E501

        Number of jobs to fetch.  # noqa: E501

        :return: The size of this TaskDetailsRequest.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this TaskDetailsRequest.

        Number of jobs to fetch.  # noqa: E501

        :param size: The size of this TaskDetailsRequest.  # noqa: E501
        :type: float
        """

        self._size = size

    @property
    def task(self):
        """Gets the task of this TaskDetailsRequest.  # noqa: E501

        Pending task name.  # noqa: E501

        :return: The task of this TaskDetailsRequest.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this TaskDetailsRequest.

        Pending task name.  # noqa: E501

        :param task: The task of this TaskDetailsRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["REVIEW_PENDING", "EVALUATION_PENDING", "OFFER_PENDING", "OFFER_PROCEED"]  # noqa: E501
        if task not in allowed_values:
            raise ValueError(
                "Invalid value for `task` ({0}), must be one of {1}"  # noqa: E501
                .format(task, allowed_values)
            )

        self._task = task

    @property
    def accessrole(self):
        """Gets the accessrole of this TaskDetailsRequest.  # noqa: E501

        This field is used to get only jobs of a certain role.  # noqa: E501

        :return: The accessrole of this TaskDetailsRequest.  # noqa: E501
        :rtype: str
        """
        return self._accessrole

    @accessrole.setter
    def accessrole(self, accessrole):
        """Sets the accessrole of this TaskDetailsRequest.

        This field is used to get only jobs of a certain role.  # noqa: E501

        :param accessrole: The accessrole of this TaskDetailsRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIRING_MANAGER", "INTERVIEWER"]  # noqa: E501
        if accessrole not in allowed_values:
            raise ValueError(
                "Invalid value for `accessrole` ({0}), must be one of {1}"  # noqa: E501
                .format(accessrole, allowed_values)
            )

        self._accessrole = accessrole

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskDetailsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskDetailsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
