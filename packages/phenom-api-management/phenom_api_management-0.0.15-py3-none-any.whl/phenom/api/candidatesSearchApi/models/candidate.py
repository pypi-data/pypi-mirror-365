# coding: utf-8

"""
    candidates-search-api

    These APIs helps to search and suggest based on keyword and filter among available candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class Candidate(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currentjob_title': 'str',
        'middle_name': 'str',
        'user_id': 'str',
        'first_name': 'str',
        'date_created': 'float',
        'updated_date': 'float',
        'email_list': 'list[CandidateEmailList]',
        'contacts': 'list[CandidateContacts]',
        'last_name': 'str',
        'location': 'str',
        'internal': 'bool'
    }

    attribute_map = {
        'currentjob_title': 'currentjobTitle',
        'middle_name': 'middleName',
        'user_id': 'userId',
        'first_name': 'firstName',
        'date_created': 'dateCreated',
        'updated_date': 'updatedDate',
        'email_list': 'emailList',
        'contacts': 'contacts',
        'last_name': 'lastName',
        'location': 'location',
        'internal': 'internal'
    }

    def __init__(self, currentjob_title=None, middle_name=None, user_id=None, first_name=None, date_created=None, updated_date=None, email_list=None, contacts=None, last_name=None, location=None, internal=None):  # noqa: E501
        """Candidate - a model defined in Swagger"""  # noqa: E501
        self._currentjob_title = None
        self._middle_name = None
        self._user_id = None
        self._first_name = None
        self._date_created = None
        self._updated_date = None
        self._email_list = None
        self._contacts = None
        self._last_name = None
        self._location = None
        self._internal = None
        self.discriminator = None
        if currentjob_title is not None:
            self.currentjob_title = currentjob_title
        if middle_name is not None:
            self.middle_name = middle_name
        if user_id is not None:
            self.user_id = user_id
        if first_name is not None:
            self.first_name = first_name
        if date_created is not None:
            self.date_created = date_created
        if updated_date is not None:
            self.updated_date = updated_date
        if email_list is not None:
            self.email_list = email_list
        if contacts is not None:
            self.contacts = contacts
        if last_name is not None:
            self.last_name = last_name
        if location is not None:
            self.location = location
        if internal is not None:
            self.internal = internal

    @property
    def currentjob_title(self):
        """Gets the currentjob_title of this Candidate.  # noqa: E501

        A string representing job title of the current company for a given individual.  # noqa: E501

        :return: The currentjob_title of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._currentjob_title

    @currentjob_title.setter
    def currentjob_title(self, currentjob_title):
        """Sets the currentjob_title of this Candidate.

        A string representing job title of the current company for a given individual.  # noqa: E501

        :param currentjob_title: The currentjob_title of this Candidate.  # noqa: E501
        :type: str
        """

        self._currentjob_title = currentjob_title

    @property
    def middle_name(self):
        """Gets the middle_name of this Candidate.  # noqa: E501

        The middle name of the candidate.  # noqa: E501

        :return: The middle_name of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Candidate.

        The middle name of the candidate.  # noqa: E501

        :param middle_name: The middle_name of this Candidate.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def user_id(self):
        """Gets the user_id of this Candidate.  # noqa: E501

        Unique identifier for the user or candidate.  # noqa: E501

        :return: The user_id of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Candidate.

        Unique identifier for the user or candidate.  # noqa: E501

        :param user_id: The user_id of this Candidate.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def first_name(self):
        """Gets the first_name of this Candidate.  # noqa: E501

        First name of the candidate.  # noqa: E501

        :return: The first_name of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Candidate.

        First name of the candidate.  # noqa: E501

        :param first_name: The first_name of this Candidate.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def date_created(self):
        """Gets the date_created of this Candidate.  # noqa: E501

        A timestamp indicating the date and time when the candidate profile was created.  # noqa: E501

        :return: The date_created of this Candidate.  # noqa: E501
        :rtype: float
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Candidate.

        A timestamp indicating the date and time when the candidate profile was created.  # noqa: E501

        :param date_created: The date_created of this Candidate.  # noqa: E501
        :type: float
        """

        self._date_created = date_created

    @property
    def updated_date(self):
        """Gets the updated_date of this Candidate.  # noqa: E501

        The date when the information was last updated.  # noqa: E501

        :return: The updated_date of this Candidate.  # noqa: E501
        :rtype: float
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Candidate.

        The date when the information was last updated.  # noqa: E501

        :param updated_date: The updated_date of this Candidate.  # noqa: E501
        :type: float
        """

        self._updated_date = updated_date

    @property
    def email_list(self):
        """Gets the email_list of this Candidate.  # noqa: E501

        An array representing an email list.  # noqa: E501

        :return: The email_list of this Candidate.  # noqa: E501
        :rtype: list[CandidateEmailList]
        """
        return self._email_list

    @email_list.setter
    def email_list(self, email_list):
        """Sets the email_list of this Candidate.

        An array representing an email list.  # noqa: E501

        :param email_list: The email_list of this Candidate.  # noqa: E501
        :type: list[CandidateEmailList]
        """

        self._email_list = email_list

    @property
    def contacts(self):
        """Gets the contacts of this Candidate.  # noqa: E501

        An array representing contact information for the individual.  # noqa: E501

        :return: The contacts of this Candidate.  # noqa: E501
        :rtype: list[CandidateContacts]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Candidate.

        An array representing contact information for the individual.  # noqa: E501

        :param contacts: The contacts of this Candidate.  # noqa: E501
        :type: list[CandidateContacts]
        """

        self._contacts = contacts

    @property
    def last_name(self):
        """Gets the last_name of this Candidate.  # noqa: E501

        A string representing the last name of the individual.  # noqa: E501

        :return: The last_name of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Candidate.

        A string representing the last name of the individual.  # noqa: E501

        :param last_name: The last_name of this Candidate.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def location(self):
        """Gets the location of this Candidate.  # noqa: E501

        A string representing the location detail of the individual.  # noqa: E501

        :return: The location of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Candidate.

        A string representing the location detail of the individual.  # noqa: E501

        :param location: The location of this Candidate.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def internal(self):
        """Gets the internal of this Candidate.  # noqa: E501

        A boolean indicating whether the individual is internal to the organization.  # noqa: E501

        :return: The internal of this Candidate.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this Candidate.

        A boolean indicating whether the individual is internal to the organization.  # noqa: E501

        :param internal: The internal of this Candidate.  # noqa: E501
        :type: bool
        """

        self._internal = internal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Candidate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Candidate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
