# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetWorkflowResponseFurtherTransitionStages(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'status_code': 'str'
    }

    attribute_map = {
        'name': 'name',
        'status_code': 'statusCode'
    }

    def __init__(self, name=None, status_code=None):  # noqa: E501
        """GetWorkflowResponseFurtherTransitionStages - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._status_code = None
        self.discriminator = None
        self.name = name
        self.status_code = status_code

    @property
    def name(self):
        """Gets the name of this GetWorkflowResponseFurtherTransitionStages.  # noqa: E501

        Name of the further transition stage.  # noqa: E501

        :return: The name of this GetWorkflowResponseFurtherTransitionStages.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetWorkflowResponseFurtherTransitionStages.

        Name of the further transition stage.  # noqa: E501

        :param name: The name of this GetWorkflowResponseFurtherTransitionStages.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status_code(self):
        """Gets the status_code of this GetWorkflowResponseFurtherTransitionStages.  # noqa: E501

        Status code of the further transition stage.  # noqa: E501

        :return: The status_code of this GetWorkflowResponseFurtherTransitionStages.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this GetWorkflowResponseFurtherTransitionStages.

        Status code of the further transition stage.  # noqa: E501

        :param status_code: The status_code of this GetWorkflowResponseFurtherTransitionStages.  # noqa: E501
        :type: str
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")  # noqa: E501

        self._status_code = status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetWorkflowResponseFurtherTransitionStages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetWorkflowResponseFurtherTransitionStages):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
