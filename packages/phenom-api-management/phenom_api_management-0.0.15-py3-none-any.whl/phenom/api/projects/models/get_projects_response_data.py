# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetProjectsResponseData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_name': 'str',
        'project_description': 'str',
        'project_id': 'str',
        'created_date': 'str',
        'updated_date': 'str',
        'end_date': 'str',
        'status': 'str',
        'is_confidential': 'str',
        'created_recruiter_info': 'GetProjectsResponseCreatedRecruiterInfo',
        'updated_recruiter_info': 'GetProjectsResponseUpdatedRecruiterInfo',
        'workflow_id': 'str',
        'workflow_name': 'str',
        'brand': 'str',
        'source': 'str',
        'hiring_team_list': 'list[GetProjectsResponseHiringTeamList]',
        'category_list': 'list[object]',
        'project_attachment_list': 'list[object]',
        'matching_criteria': 'GetProjectsResponseMatchingCriteria',
        'category_names': 'list[object]',
        'confidential': 'str',
        'candidate_infos': 'list[GetProjectsResponseCandidateInfos]'
    }

    attribute_map = {
        'project_name': 'projectName',
        'project_description': 'projectDescription',
        'project_id': 'projectId',
        'created_date': 'createdDate',
        'updated_date': 'updatedDate',
        'end_date': 'endDate',
        'status': 'status',
        'is_confidential': 'isConfidential',
        'created_recruiter_info': 'createdRecruiterInfo',
        'updated_recruiter_info': 'updatedRecruiterInfo',
        'workflow_id': 'workflowId',
        'workflow_name': 'workflowName',
        'brand': 'brand',
        'source': 'source',
        'hiring_team_list': 'hiringTeamList',
        'category_list': 'categoryList',
        'project_attachment_list': 'projectAttachmentList',
        'matching_criteria': 'matchingCriteria',
        'category_names': 'categoryNames',
        'confidential': 'confidential',
        'candidate_infos': 'candidateInfos'
    }

    def __init__(self, project_name=None, project_description=None, project_id=None, created_date=None, updated_date=None, end_date=None, status=None, is_confidential=None, created_recruiter_info=None, updated_recruiter_info=None, workflow_id=None, workflow_name=None, brand=None, source=None, hiring_team_list=None, category_list=None, project_attachment_list=None, matching_criteria=None, category_names=None, confidential=None, candidate_infos=None):  # noqa: E501
        """GetProjectsResponseData - a model defined in Swagger"""  # noqa: E501
        self._project_name = None
        self._project_description = None
        self._project_id = None
        self._created_date = None
        self._updated_date = None
        self._end_date = None
        self._status = None
        self._is_confidential = None
        self._created_recruiter_info = None
        self._updated_recruiter_info = None
        self._workflow_id = None
        self._workflow_name = None
        self._brand = None
        self._source = None
        self._hiring_team_list = None
        self._category_list = None
        self._project_attachment_list = None
        self._matching_criteria = None
        self._category_names = None
        self._confidential = None
        self._candidate_infos = None
        self.discriminator = None
        self.project_name = project_name
        self.project_description = project_description
        self.project_id = project_id
        self.created_date = created_date
        self.updated_date = updated_date
        self.end_date = end_date
        self.status = status
        self.is_confidential = is_confidential
        self.created_recruiter_info = created_recruiter_info
        self.updated_recruiter_info = updated_recruiter_info
        self.workflow_id = workflow_id
        self.workflow_name = workflow_name
        self.brand = brand
        self.source = source
        self.hiring_team_list = hiring_team_list
        self.category_list = category_list
        self.project_attachment_list = project_attachment_list
        self.matching_criteria = matching_criteria
        self.category_names = category_names
        self.confidential = confidential
        self.candidate_infos = candidate_infos

    @property
    def project_name(self):
        """Gets the project_name of this GetProjectsResponseData.  # noqa: E501

        The name of the project.  # noqa: E501

        :return: The project_name of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this GetProjectsResponseData.

        The name of the project.  # noqa: E501

        :param project_name: The project_name of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def project_description(self):
        """Gets the project_description of this GetProjectsResponseData.  # noqa: E501

        The description of the project.  # noqa: E501

        :return: The project_description of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._project_description

    @project_description.setter
    def project_description(self, project_description):
        """Sets the project_description of this GetProjectsResponseData.

        The description of the project.  # noqa: E501

        :param project_description: The project_description of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if project_description is None:
            raise ValueError("Invalid value for `project_description`, must not be `None`")  # noqa: E501

        self._project_description = project_description

    @property
    def project_id(self):
        """Gets the project_id of this GetProjectsResponseData.  # noqa: E501

        The unique identifier for the project.  # noqa: E501

        :return: The project_id of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GetProjectsResponseData.

        The unique identifier for the project.  # noqa: E501

        :param project_id: The project_id of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def created_date(self):
        """Gets the created_date of this GetProjectsResponseData.  # noqa: E501

        The date when the project was created.  # noqa: E501

        :return: The created_date of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GetProjectsResponseData.

        The date when the project was created.  # noqa: E501

        :param created_date: The created_date of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def updated_date(self):
        """Gets the updated_date of this GetProjectsResponseData.  # noqa: E501

        The date when the project was last updated.  # noqa: E501

        :return: The updated_date of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this GetProjectsResponseData.

        The date when the project was last updated.  # noqa: E501

        :param updated_date: The updated_date of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if updated_date is None:
            raise ValueError("Invalid value for `updated_date`, must not be `None`")  # noqa: E501

        self._updated_date = updated_date

    @property
    def end_date(self):
        """Gets the end_date of this GetProjectsResponseData.  # noqa: E501

        The end date of the project.  # noqa: E501

        :return: The end_date of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this GetProjectsResponseData.

        The end date of the project.  # noqa: E501

        :param end_date: The end_date of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def status(self):
        """Gets the status of this GetProjectsResponseData.  # noqa: E501

        The status of the project.  # noqa: E501

        :return: The status of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetProjectsResponseData.

        The status of the project.  # noqa: E501

        :param status: The status of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def is_confidential(self):
        """Gets the is_confidential of this GetProjectsResponseData.  # noqa: E501

        Indicates whether the project is confidential.  # noqa: E501

        :return: The is_confidential of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._is_confidential

    @is_confidential.setter
    def is_confidential(self, is_confidential):
        """Sets the is_confidential of this GetProjectsResponseData.

        Indicates whether the project is confidential.  # noqa: E501

        :param is_confidential: The is_confidential of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if is_confidential is None:
            raise ValueError("Invalid value for `is_confidential`, must not be `None`")  # noqa: E501

        self._is_confidential = is_confidential

    @property
    def created_recruiter_info(self):
        """Gets the created_recruiter_info of this GetProjectsResponseData.  # noqa: E501


        :return: The created_recruiter_info of this GetProjectsResponseData.  # noqa: E501
        :rtype: GetProjectsResponseCreatedRecruiterInfo
        """
        return self._created_recruiter_info

    @created_recruiter_info.setter
    def created_recruiter_info(self, created_recruiter_info):
        """Sets the created_recruiter_info of this GetProjectsResponseData.


        :param created_recruiter_info: The created_recruiter_info of this GetProjectsResponseData.  # noqa: E501
        :type: GetProjectsResponseCreatedRecruiterInfo
        """
        if created_recruiter_info is None:
            raise ValueError("Invalid value for `created_recruiter_info`, must not be `None`")  # noqa: E501

        self._created_recruiter_info = created_recruiter_info

    @property
    def updated_recruiter_info(self):
        """Gets the updated_recruiter_info of this GetProjectsResponseData.  # noqa: E501


        :return: The updated_recruiter_info of this GetProjectsResponseData.  # noqa: E501
        :rtype: GetProjectsResponseUpdatedRecruiterInfo
        """
        return self._updated_recruiter_info

    @updated_recruiter_info.setter
    def updated_recruiter_info(self, updated_recruiter_info):
        """Sets the updated_recruiter_info of this GetProjectsResponseData.


        :param updated_recruiter_info: The updated_recruiter_info of this GetProjectsResponseData.  # noqa: E501
        :type: GetProjectsResponseUpdatedRecruiterInfo
        """
        if updated_recruiter_info is None:
            raise ValueError("Invalid value for `updated_recruiter_info`, must not be `None`")  # noqa: E501

        self._updated_recruiter_info = updated_recruiter_info

    @property
    def workflow_id(self):
        """Gets the workflow_id of this GetProjectsResponseData.  # noqa: E501

        The unique identifier for the workflow associated with the project.  # noqa: E501

        :return: The workflow_id of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this GetProjectsResponseData.

        The unique identifier for the workflow associated with the project.  # noqa: E501

        :param workflow_id: The workflow_id of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")  # noqa: E501

        self._workflow_id = workflow_id

    @property
    def workflow_name(self):
        """Gets the workflow_name of this GetProjectsResponseData.  # noqa: E501

        The name of the workflow associated with the project.  # noqa: E501

        :return: The workflow_name of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._workflow_name

    @workflow_name.setter
    def workflow_name(self, workflow_name):
        """Sets the workflow_name of this GetProjectsResponseData.

        The name of the workflow associated with the project.  # noqa: E501

        :param workflow_name: The workflow_name of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if workflow_name is None:
            raise ValueError("Invalid value for `workflow_name`, must not be `None`")  # noqa: E501

        self._workflow_name = workflow_name

    @property
    def brand(self):
        """Gets the brand of this GetProjectsResponseData.  # noqa: E501

        The brand associated with the project.  # noqa: E501

        :return: The brand of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this GetProjectsResponseData.

        The brand associated with the project.  # noqa: E501

        :param brand: The brand of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")  # noqa: E501

        self._brand = brand

    @property
    def source(self):
        """Gets the source of this GetProjectsResponseData.  # noqa: E501

        The source of the project.  # noqa: E501

        :return: The source of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this GetProjectsResponseData.

        The source of the project.  # noqa: E501

        :param source: The source of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def hiring_team_list(self):
        """Gets the hiring_team_list of this GetProjectsResponseData.  # noqa: E501

        An array containing details of the hiring team for the project.  # noqa: E501

        :return: The hiring_team_list of this GetProjectsResponseData.  # noqa: E501
        :rtype: list[GetProjectsResponseHiringTeamList]
        """
        return self._hiring_team_list

    @hiring_team_list.setter
    def hiring_team_list(self, hiring_team_list):
        """Sets the hiring_team_list of this GetProjectsResponseData.

        An array containing details of the hiring team for the project.  # noqa: E501

        :param hiring_team_list: The hiring_team_list of this GetProjectsResponseData.  # noqa: E501
        :type: list[GetProjectsResponseHiringTeamList]
        """
        if hiring_team_list is None:
            raise ValueError("Invalid value for `hiring_team_list`, must not be `None`")  # noqa: E501

        self._hiring_team_list = hiring_team_list

    @property
    def category_list(self):
        """Gets the category_list of this GetProjectsResponseData.  # noqa: E501

        An array containing details of categories associated with the project.  # noqa: E501

        :return: The category_list of this GetProjectsResponseData.  # noqa: E501
        :rtype: list[object]
        """
        return self._category_list

    @category_list.setter
    def category_list(self, category_list):
        """Sets the category_list of this GetProjectsResponseData.

        An array containing details of categories associated with the project.  # noqa: E501

        :param category_list: The category_list of this GetProjectsResponseData.  # noqa: E501
        :type: list[object]
        """
        if category_list is None:
            raise ValueError("Invalid value for `category_list`, must not be `None`")  # noqa: E501

        self._category_list = category_list

    @property
    def project_attachment_list(self):
        """Gets the project_attachment_list of this GetProjectsResponseData.  # noqa: E501

        An array containing details of attachments associated with the project.  # noqa: E501

        :return: The project_attachment_list of this GetProjectsResponseData.  # noqa: E501
        :rtype: list[object]
        """
        return self._project_attachment_list

    @project_attachment_list.setter
    def project_attachment_list(self, project_attachment_list):
        """Sets the project_attachment_list of this GetProjectsResponseData.

        An array containing details of attachments associated with the project.  # noqa: E501

        :param project_attachment_list: The project_attachment_list of this GetProjectsResponseData.  # noqa: E501
        :type: list[object]
        """
        if project_attachment_list is None:
            raise ValueError("Invalid value for `project_attachment_list`, must not be `None`")  # noqa: E501

        self._project_attachment_list = project_attachment_list

    @property
    def matching_criteria(self):
        """Gets the matching_criteria of this GetProjectsResponseData.  # noqa: E501


        :return: The matching_criteria of this GetProjectsResponseData.  # noqa: E501
        :rtype: GetProjectsResponseMatchingCriteria
        """
        return self._matching_criteria

    @matching_criteria.setter
    def matching_criteria(self, matching_criteria):
        """Sets the matching_criteria of this GetProjectsResponseData.


        :param matching_criteria: The matching_criteria of this GetProjectsResponseData.  # noqa: E501
        :type: GetProjectsResponseMatchingCriteria
        """
        if matching_criteria is None:
            raise ValueError("Invalid value for `matching_criteria`, must not be `None`")  # noqa: E501

        self._matching_criteria = matching_criteria

    @property
    def category_names(self):
        """Gets the category_names of this GetProjectsResponseData.  # noqa: E501

        An array containing names of categories associated with the project.  # noqa: E501

        :return: The category_names of this GetProjectsResponseData.  # noqa: E501
        :rtype: list[object]
        """
        return self._category_names

    @category_names.setter
    def category_names(self, category_names):
        """Sets the category_names of this GetProjectsResponseData.

        An array containing names of categories associated with the project.  # noqa: E501

        :param category_names: The category_names of this GetProjectsResponseData.  # noqa: E501
        :type: list[object]
        """
        if category_names is None:
            raise ValueError("Invalid value for `category_names`, must not be `None`")  # noqa: E501

        self._category_names = category_names

    @property
    def confidential(self):
        """Gets the confidential of this GetProjectsResponseData.  # noqa: E501

        Indicates whether the project is confidential.  # noqa: E501

        :return: The confidential of this GetProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._confidential

    @confidential.setter
    def confidential(self, confidential):
        """Sets the confidential of this GetProjectsResponseData.

        Indicates whether the project is confidential.  # noqa: E501

        :param confidential: The confidential of this GetProjectsResponseData.  # noqa: E501
        :type: str
        """
        if confidential is None:
            raise ValueError("Invalid value for `confidential`, must not be `None`")  # noqa: E501

        self._confidential = confidential

    @property
    def candidate_infos(self):
        """Gets the candidate_infos of this GetProjectsResponseData.  # noqa: E501

        An array containing details of candidates associated with the project.  # noqa: E501

        :return: The candidate_infos of this GetProjectsResponseData.  # noqa: E501
        :rtype: list[GetProjectsResponseCandidateInfos]
        """
        return self._candidate_infos

    @candidate_infos.setter
    def candidate_infos(self, candidate_infos):
        """Sets the candidate_infos of this GetProjectsResponseData.

        An array containing details of candidates associated with the project.  # noqa: E501

        :param candidate_infos: The candidate_infos of this GetProjectsResponseData.  # noqa: E501
        :type: list[GetProjectsResponseCandidateInfos]
        """
        if candidate_infos is None:
            raise ValueError("Invalid value for `candidate_infos`, must not be `None`")  # noqa: E501

        self._candidate_infos = candidate_infos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProjectsResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProjectsResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
