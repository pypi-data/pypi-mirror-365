# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class UpdateProjectRequestCategoryList(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_category_id': 'str',
        'category': 'str'
    }

    attribute_map = {
        'internal_category_id': 'internalCategoryId',
        'category': 'category'
    }

    def __init__(self, internal_category_id=None, category=None):  # noqa: E501
        """UpdateProjectRequestCategoryList - a model defined in Swagger"""  # noqa: E501
        self._internal_category_id = None
        self._category = None
        self.discriminator = None
        self.internal_category_id = internal_category_id
        self.category = category

    @property
    def internal_category_id(self):
        """Gets the internal_category_id of this UpdateProjectRequestCategoryList.  # noqa: E501

        Internal category ID.  # noqa: E501

        :return: The internal_category_id of this UpdateProjectRequestCategoryList.  # noqa: E501
        :rtype: str
        """
        return self._internal_category_id

    @internal_category_id.setter
    def internal_category_id(self, internal_category_id):
        """Sets the internal_category_id of this UpdateProjectRequestCategoryList.

        Internal category ID.  # noqa: E501

        :param internal_category_id: The internal_category_id of this UpdateProjectRequestCategoryList.  # noqa: E501
        :type: str
        """
        if internal_category_id is None:
            raise ValueError("Invalid value for `internal_category_id`, must not be `None`")  # noqa: E501

        self._internal_category_id = internal_category_id

    @property
    def category(self):
        """Gets the category of this UpdateProjectRequestCategoryList.  # noqa: E501

        Updated category name.  # noqa: E501

        :return: The category of this UpdateProjectRequestCategoryList.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this UpdateProjectRequestCategoryList.

        Updated category name.  # noqa: E501

        :param category: The category of this UpdateProjectRequestCategoryList.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateProjectRequestCategoryList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateProjectRequestCategoryList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
