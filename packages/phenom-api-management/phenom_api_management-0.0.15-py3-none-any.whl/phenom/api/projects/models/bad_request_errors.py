# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class BadRequestErrors(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'str',
        'error_api': 'str',
        'message': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'error_api': 'errorAPI',
        'message': 'message'
    }

    def __init__(self, timestamp=None, error_api=None, message=None):  # noqa: E501
        """BadRequestErrors - a model defined in Swagger"""  # noqa: E501
        self._timestamp = None
        self._error_api = None
        self._message = None
        self.discriminator = None
        self.timestamp = timestamp
        self.error_api = error_api
        self.message = message

    @property
    def timestamp(self):
        """Gets the timestamp of this BadRequestErrors.  # noqa: E501

        The timestamp when the error occurred.  # noqa: E501

        :return: The timestamp of this BadRequestErrors.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BadRequestErrors.

        The timestamp when the error occurred.  # noqa: E501

        :param timestamp: The timestamp of this BadRequestErrors.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def error_api(self):
        """Gets the error_api of this BadRequestErrors.  # noqa: E501

        The specific API error code or identifier.  # noqa: E501

        :return: The error_api of this BadRequestErrors.  # noqa: E501
        :rtype: str
        """
        return self._error_api

    @error_api.setter
    def error_api(self, error_api):
        """Sets the error_api of this BadRequestErrors.

        The specific API error code or identifier.  # noqa: E501

        :param error_api: The error_api of this BadRequestErrors.  # noqa: E501
        :type: str
        """
        if error_api is None:
            raise ValueError("Invalid value for `error_api`, must not be `None`")  # noqa: E501

        self._error_api = error_api

    @property
    def message(self):
        """Gets the message of this BadRequestErrors.  # noqa: E501

        A human readable error message describing the issue.  # noqa: E501

        :return: The message of this BadRequestErrors.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BadRequestErrors.

        A human readable error message describing the issue.  # noqa: E501

        :param message: The message of this BadRequestErrors.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BadRequestErrors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BadRequestErrors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
