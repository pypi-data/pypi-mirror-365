# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetWorkflowStatusResponseAssociatedWorkflows(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workflow_name': 'str',
        'workflow_id': 'str'
    }

    attribute_map = {
        'workflow_name': 'workflowName',
        'workflow_id': 'workflowId'
    }

    def __init__(self, workflow_name=None, workflow_id=None):  # noqa: E501
        """GetWorkflowStatusResponseAssociatedWorkflows - a model defined in Swagger"""  # noqa: E501
        self._workflow_name = None
        self._workflow_id = None
        self.discriminator = None
        self.workflow_name = workflow_name
        self.workflow_id = workflow_id

    @property
    def workflow_name(self):
        """Gets the workflow_name of this GetWorkflowStatusResponseAssociatedWorkflows.  # noqa: E501

        Name of the associated workflow.  # noqa: E501

        :return: The workflow_name of this GetWorkflowStatusResponseAssociatedWorkflows.  # noqa: E501
        :rtype: str
        """
        return self._workflow_name

    @workflow_name.setter
    def workflow_name(self, workflow_name):
        """Sets the workflow_name of this GetWorkflowStatusResponseAssociatedWorkflows.

        Name of the associated workflow.  # noqa: E501

        :param workflow_name: The workflow_name of this GetWorkflowStatusResponseAssociatedWorkflows.  # noqa: E501
        :type: str
        """
        if workflow_name is None:
            raise ValueError("Invalid value for `workflow_name`, must not be `None`")  # noqa: E501

        self._workflow_name = workflow_name

    @property
    def workflow_id(self):
        """Gets the workflow_id of this GetWorkflowStatusResponseAssociatedWorkflows.  # noqa: E501

        ID of the associated workflow.  # noqa: E501

        :return: The workflow_id of this GetWorkflowStatusResponseAssociatedWorkflows.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this GetWorkflowStatusResponseAssociatedWorkflows.

        ID of the associated workflow.  # noqa: E501

        :param workflow_id: The workflow_id of this GetWorkflowStatusResponseAssociatedWorkflows.  # noqa: E501
        :type: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")  # noqa: E501

        self._workflow_id = workflow_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetWorkflowStatusResponseAssociatedWorkflows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetWorkflowStatusResponseAssociatedWorkflows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
