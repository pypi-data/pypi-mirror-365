# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetWorkflowResponseStages(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'status_code': 'str',
        'status_id': 'str',
        'further_transition_stages': 'list[GetWorkflowResponseFurtherTransitionStages]',
        'is_rejection_stage': 'bool',
        'is_final_stage': 'bool',
        'is_deleted_stage': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'status_code': 'statusCode',
        'status_id': 'statusId',
        'further_transition_stages': 'furtherTransitionStages',
        'is_rejection_stage': 'isRejectionStage',
        'is_final_stage': 'isFinalStage',
        'is_deleted_stage': 'isDeletedStage'
    }

    def __init__(self, name=None, status_code=None, status_id=None, further_transition_stages=None, is_rejection_stage=None, is_final_stage=None, is_deleted_stage=None):  # noqa: E501
        """GetWorkflowResponseStages - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._status_code = None
        self._status_id = None
        self._further_transition_stages = None
        self._is_rejection_stage = None
        self._is_final_stage = None
        self._is_deleted_stage = None
        self.discriminator = None
        self.name = name
        self.status_code = status_code
        self.status_id = status_id
        self.further_transition_stages = further_transition_stages
        self.is_rejection_stage = is_rejection_stage
        self.is_final_stage = is_final_stage
        self.is_deleted_stage = is_deleted_stage

    @property
    def name(self):
        """Gets the name of this GetWorkflowResponseStages.  # noqa: E501

        Name of the workflow stage.  # noqa: E501

        :return: The name of this GetWorkflowResponseStages.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetWorkflowResponseStages.

        Name of the workflow stage.  # noqa: E501

        :param name: The name of this GetWorkflowResponseStages.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status_code(self):
        """Gets the status_code of this GetWorkflowResponseStages.  # noqa: E501

        Status code of the workflow stage.  # noqa: E501

        :return: The status_code of this GetWorkflowResponseStages.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this GetWorkflowResponseStages.

        Status code of the workflow stage.  # noqa: E501

        :param status_code: The status_code of this GetWorkflowResponseStages.  # noqa: E501
        :type: str
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")  # noqa: E501

        self._status_code = status_code

    @property
    def status_id(self):
        """Gets the status_id of this GetWorkflowResponseStages.  # noqa: E501

        ID of the workflow stage.  # noqa: E501

        :return: The status_id of this GetWorkflowResponseStages.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this GetWorkflowResponseStages.

        ID of the workflow stage.  # noqa: E501

        :param status_id: The status_id of this GetWorkflowResponseStages.  # noqa: E501
        :type: str
        """
        if status_id is None:
            raise ValueError("Invalid value for `status_id`, must not be `None`")  # noqa: E501

        self._status_id = status_id

    @property
    def further_transition_stages(self):
        """Gets the further_transition_stages of this GetWorkflowResponseStages.  # noqa: E501


        :return: The further_transition_stages of this GetWorkflowResponseStages.  # noqa: E501
        :rtype: list[GetWorkflowResponseFurtherTransitionStages]
        """
        return self._further_transition_stages

    @further_transition_stages.setter
    def further_transition_stages(self, further_transition_stages):
        """Sets the further_transition_stages of this GetWorkflowResponseStages.


        :param further_transition_stages: The further_transition_stages of this GetWorkflowResponseStages.  # noqa: E501
        :type: list[GetWorkflowResponseFurtherTransitionStages]
        """
        if further_transition_stages is None:
            raise ValueError("Invalid value for `further_transition_stages`, must not be `None`")  # noqa: E501

        self._further_transition_stages = further_transition_stages

    @property
    def is_rejection_stage(self):
        """Gets the is_rejection_stage of this GetWorkflowResponseStages.  # noqa: E501

        Indicates if the stage is a rejection stage.  # noqa: E501

        :return: The is_rejection_stage of this GetWorkflowResponseStages.  # noqa: E501
        :rtype: bool
        """
        return self._is_rejection_stage

    @is_rejection_stage.setter
    def is_rejection_stage(self, is_rejection_stage):
        """Sets the is_rejection_stage of this GetWorkflowResponseStages.

        Indicates if the stage is a rejection stage.  # noqa: E501

        :param is_rejection_stage: The is_rejection_stage of this GetWorkflowResponseStages.  # noqa: E501
        :type: bool
        """
        if is_rejection_stage is None:
            raise ValueError("Invalid value for `is_rejection_stage`, must not be `None`")  # noqa: E501

        self._is_rejection_stage = is_rejection_stage

    @property
    def is_final_stage(self):
        """Gets the is_final_stage of this GetWorkflowResponseStages.  # noqa: E501

        Indicates if the stage is a final stage.  # noqa: E501

        :return: The is_final_stage of this GetWorkflowResponseStages.  # noqa: E501
        :rtype: bool
        """
        return self._is_final_stage

    @is_final_stage.setter
    def is_final_stage(self, is_final_stage):
        """Sets the is_final_stage of this GetWorkflowResponseStages.

        Indicates if the stage is a final stage.  # noqa: E501

        :param is_final_stage: The is_final_stage of this GetWorkflowResponseStages.  # noqa: E501
        :type: bool
        """
        if is_final_stage is None:
            raise ValueError("Invalid value for `is_final_stage`, must not be `None`")  # noqa: E501

        self._is_final_stage = is_final_stage

    @property
    def is_deleted_stage(self):
        """Gets the is_deleted_stage of this GetWorkflowResponseStages.  # noqa: E501

        Indicates if the stage is deleted.  # noqa: E501

        :return: The is_deleted_stage of this GetWorkflowResponseStages.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted_stage

    @is_deleted_stage.setter
    def is_deleted_stage(self, is_deleted_stage):
        """Sets the is_deleted_stage of this GetWorkflowResponseStages.

        Indicates if the stage is deleted.  # noqa: E501

        :param is_deleted_stage: The is_deleted_stage of this GetWorkflowResponseStages.  # noqa: E501
        :type: bool
        """
        if is_deleted_stage is None:
            raise ValueError("Invalid value for `is_deleted_stage`, must not be `None`")  # noqa: E501

        self._is_deleted_stage = is_deleted_stage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetWorkflowResponseStages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetWorkflowResponseStages):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
