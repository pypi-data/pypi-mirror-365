# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class UpdateProjectRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_name': 'str',
        'project_description': 'str',
        'is_confidential': 'bool',
        'category_list': 'list[UpdateProjectRequestCategoryList]',
        'end_date': 'str',
        'updated_recruiter_info': 'UpdateProjectRequestUpdatedRecruiterInfo',
        'candidate_infos': 'list[UpdateProjectRequestCandidateInfos]'
    }

    attribute_map = {
        'project_name': 'projectName',
        'project_description': 'projectDescription',
        'is_confidential': 'isConfidential',
        'category_list': 'categoryList',
        'end_date': 'endDate',
        'updated_recruiter_info': 'updatedRecruiterInfo',
        'candidate_infos': 'candidateInfos'
    }

    def __init__(self, project_name=None, project_description=None, is_confidential=None, category_list=None, end_date=None, updated_recruiter_info=None, candidate_infos=None):  # noqa: E501
        """UpdateProjectRequest - a model defined in Swagger"""  # noqa: E501
        self._project_name = None
        self._project_description = None
        self._is_confidential = None
        self._category_list = None
        self._end_date = None
        self._updated_recruiter_info = None
        self._candidate_infos = None
        self.discriminator = None
        if project_name is not None:
            self.project_name = project_name
        if project_description is not None:
            self.project_description = project_description
        if is_confidential is not None:
            self.is_confidential = is_confidential
        if category_list is not None:
            self.category_list = category_list
        if end_date is not None:
            self.end_date = end_date
        if updated_recruiter_info is not None:
            self.updated_recruiter_info = updated_recruiter_info
        if candidate_infos is not None:
            self.candidate_infos = candidate_infos

    @property
    def project_name(self):
        """Gets the project_name of this UpdateProjectRequest.  # noqa: E501

        Updated name of the project.  # noqa: E501

        :return: The project_name of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this UpdateProjectRequest.

        Updated name of the project.  # noqa: E501

        :param project_name: The project_name of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def project_description(self):
        """Gets the project_description of this UpdateProjectRequest.  # noqa: E501

        Updated description of the project.  # noqa: E501

        :return: The project_description of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_description

    @project_description.setter
    def project_description(self, project_description):
        """Sets the project_description of this UpdateProjectRequest.

        Updated description of the project.  # noqa: E501

        :param project_description: The project_description of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._project_description = project_description

    @property
    def is_confidential(self):
        """Gets the is_confidential of this UpdateProjectRequest.  # noqa: E501

        Flag indicating whether the project is confidential.  # noqa: E501

        :return: The is_confidential of this UpdateProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_confidential

    @is_confidential.setter
    def is_confidential(self, is_confidential):
        """Sets the is_confidential of this UpdateProjectRequest.

        Flag indicating whether the project is confidential.  # noqa: E501

        :param is_confidential: The is_confidential of this UpdateProjectRequest.  # noqa: E501
        :type: bool
        """

        self._is_confidential = is_confidential

    @property
    def category_list(self):
        """Gets the category_list of this UpdateProjectRequest.  # noqa: E501

        Updated list of project categories.  # noqa: E501

        :return: The category_list of this UpdateProjectRequest.  # noqa: E501
        :rtype: list[UpdateProjectRequestCategoryList]
        """
        return self._category_list

    @category_list.setter
    def category_list(self, category_list):
        """Sets the category_list of this UpdateProjectRequest.

        Updated list of project categories.  # noqa: E501

        :param category_list: The category_list of this UpdateProjectRequest.  # noqa: E501
        :type: list[UpdateProjectRequestCategoryList]
        """

        self._category_list = category_list

    @property
    def end_date(self):
        """Gets the end_date of this UpdateProjectRequest.  # noqa: E501

        Updated end date of the project.  # noqa: E501

        :return: The end_date of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this UpdateProjectRequest.

        Updated end date of the project.  # noqa: E501

        :param end_date: The end_date of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def updated_recruiter_info(self):
        """Gets the updated_recruiter_info of this UpdateProjectRequest.  # noqa: E501


        :return: The updated_recruiter_info of this UpdateProjectRequest.  # noqa: E501
        :rtype: UpdateProjectRequestUpdatedRecruiterInfo
        """
        return self._updated_recruiter_info

    @updated_recruiter_info.setter
    def updated_recruiter_info(self, updated_recruiter_info):
        """Sets the updated_recruiter_info of this UpdateProjectRequest.


        :param updated_recruiter_info: The updated_recruiter_info of this UpdateProjectRequest.  # noqa: E501
        :type: UpdateProjectRequestUpdatedRecruiterInfo
        """

        self._updated_recruiter_info = updated_recruiter_info

    @property
    def candidate_infos(self):
        """Gets the candidate_infos of this UpdateProjectRequest.  # noqa: E501

        List of candidate information to be added or updated in the project.  # noqa: E501

        :return: The candidate_infos of this UpdateProjectRequest.  # noqa: E501
        :rtype: list[UpdateProjectRequestCandidateInfos]
        """
        return self._candidate_infos

    @candidate_infos.setter
    def candidate_infos(self, candidate_infos):
        """Sets the candidate_infos of this UpdateProjectRequest.

        List of candidate information to be added or updated in the project.  # noqa: E501

        :param candidate_infos: The candidate_infos of this UpdateProjectRequest.  # noqa: E501
        :type: list[UpdateProjectRequestCandidateInfos]
        """

        self._candidate_infos = candidate_infos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateProjectRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateProjectRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
