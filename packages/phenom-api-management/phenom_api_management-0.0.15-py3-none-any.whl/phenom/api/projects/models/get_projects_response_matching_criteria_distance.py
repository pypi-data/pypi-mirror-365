# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetProjectsResponseMatchingCriteriaDistance(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min': 'float',
        'max': 'float',
        'unit': 'str'
    }

    attribute_map = {
        'min': 'min',
        'max': 'max',
        'unit': 'unit'
    }

    def __init__(self, min=None, max=None, unit=None):  # noqa: E501
        """GetProjectsResponseMatchingCriteriaDistance - a model defined in Swagger"""  # noqa: E501
        self._min = None
        self._max = None
        self._unit = None
        self.discriminator = None
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if unit is not None:
            self.unit = unit

    @property
    def min(self):
        """Gets the min of this GetProjectsResponseMatchingCriteriaDistance.  # noqa: E501

        The minimum distance for the project.  # noqa: E501

        :return: The min of this GetProjectsResponseMatchingCriteriaDistance.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this GetProjectsResponseMatchingCriteriaDistance.

        The minimum distance for the project.  # noqa: E501

        :param min: The min of this GetProjectsResponseMatchingCriteriaDistance.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this GetProjectsResponseMatchingCriteriaDistance.  # noqa: E501

        The maximum distance for the project.  # noqa: E501

        :return: The max of this GetProjectsResponseMatchingCriteriaDistance.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this GetProjectsResponseMatchingCriteriaDistance.

        The maximum distance for the project.  # noqa: E501

        :param max: The max of this GetProjectsResponseMatchingCriteriaDistance.  # noqa: E501
        :type: float
        """

        self._max = max

    @property
    def unit(self):
        """Gets the unit of this GetProjectsResponseMatchingCriteriaDistance.  # noqa: E501

        The unit of distance for the project (e.g., 'miles').  # noqa: E501

        :return: The unit of this GetProjectsResponseMatchingCriteriaDistance.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this GetProjectsResponseMatchingCriteriaDistance.

        The unit of distance for the project (e.g., 'miles').  # noqa: E501

        :param unit: The unit of this GetProjectsResponseMatchingCriteriaDistance.  # noqa: E501
        :type: str
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProjectsResponseMatchingCriteriaDistance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProjectsResponseMatchingCriteriaDistance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
