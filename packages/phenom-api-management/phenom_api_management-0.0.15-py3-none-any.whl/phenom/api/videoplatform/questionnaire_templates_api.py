# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phenom.commons.api_client import ApiClient


class QuestionnaireTemplatesApi(object):
    base_path = "/interview-screening"  # your base path

    def __init__(self, token, gateway_url, apikey, api_client=None):
        if api_client is None:
            api_client = ApiClient(gateway_url + self.base_path, apikey, token)
        self.api_client = api_client

    def create_questionnaire(self, body, **kwargs):  # noqa: E501
        """Create Questionnaire  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_questionnaire(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateQuestionnaireRequest body: (required)
        :return: CreateQuestionnaireResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_questionnaire_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_questionnaire_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_questionnaire_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Questionnaire  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_questionnaire_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateQuestionnaireRequest body: (required)
        :return: CreateQuestionnaireResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_questionnaire" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_questionnaire`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/questionnaire-templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateQuestionnaireResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def del_questionnaire(self, questionnaire_id, **kwargs):  # noqa: E501
        """Delete Questionnaire  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_questionnaire(questionnaire_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str questionnaire_id: (required)
        :return: DeleteQuestionnaireResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.del_questionnaire_with_http_info(questionnaire_id, **kwargs)  # noqa: E501
        else:
            (data) = self.del_questionnaire_with_http_info(questionnaire_id, **kwargs)  # noqa: E501
            return data

    def del_questionnaire_with_http_info(self, questionnaire_id, **kwargs):  # noqa: E501
        """Delete Questionnaire  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.del_questionnaire_with_http_info(questionnaire_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str questionnaire_id: (required)
        :return: DeleteQuestionnaireResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['questionnaire_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method del_questionnaire" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'questionnaire_id' is set
        if ('questionnaire_id' not in params or
                params['questionnaire_id'] is None):
            raise ValueError("Missing the required parameter `questionnaire_id` when calling `del_questionnaire`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'questionnaire_id' in params:
            path_params['questionnaireId'] = params['questionnaire_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/questionnaire-templates/{questionnaireId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteQuestionnaireResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_questionnaire(self, questionnaire_id, **kwargs):  # noqa: E501
        """Get Questionnaire Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_questionnaire(questionnaire_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str questionnaire_id: (required)
        :return: GetQuestionnaireDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_questionnaire_with_http_info(questionnaire_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_questionnaire_with_http_info(questionnaire_id, **kwargs)  # noqa: E501
            return data

    def get_questionnaire_with_http_info(self, questionnaire_id, **kwargs):  # noqa: E501
        """Get Questionnaire Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_questionnaire_with_http_info(questionnaire_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str questionnaire_id: (required)
        :return: GetQuestionnaireDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['questionnaire_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_questionnaire" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'questionnaire_id' is set
        if ('questionnaire_id' not in params or
                params['questionnaire_id'] is None):
            raise ValueError("Missing the required parameter `questionnaire_id` when calling `get_questionnaire`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'questionnaire_id' in params:
            path_params['questionnaireId'] = params['questionnaire_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/questionnaire-templates/{questionnaireId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetQuestionnaireDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_questionnaires(self, _from, **kwargs):  # noqa: E501
        """Get Questionnaires  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_questionnaires(_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float _from: (required)
        :param str search_keyword:
        :return: GetAllQuestionnairesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_questionnaires_with_http_info(_from, **kwargs)  # noqa: E501
        else:
            (data) = self.get_questionnaires_with_http_info(_from, **kwargs)  # noqa: E501
            return data

    def get_questionnaires_with_http_info(self, _from, **kwargs):  # noqa: E501
        """Get Questionnaires  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_questionnaires_with_http_info(_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float _from: (required)
        :param str search_keyword:
        :return: GetAllQuestionnairesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'search_keyword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_questionnaires" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_questionnaires`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'search_keyword' in params:
            query_params.append(('searchKeyword', params['search_keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/questionnaire-templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllQuestionnairesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_questionnaires(self, body, questionnaire_id, **kwargs):  # noqa: E501
        """Update Questionnaire  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_questionnaires(body, questionnaire_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateQuestionnaireRequest body: (required)
        :param str questionnaire_id: (required)
        :return: UpdateQuestionnaireResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_questionnaires_with_http_info(body, questionnaire_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_questionnaires_with_http_info(body, questionnaire_id, **kwargs)  # noqa: E501
            return data

    def update_questionnaires_with_http_info(self, body, questionnaire_id, **kwargs):  # noqa: E501
        """Update Questionnaire  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_questionnaires_with_http_info(body, questionnaire_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateQuestionnaireRequest body: (required)
        :param str questionnaire_id: (required)
        :return: UpdateQuestionnaireResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'questionnaire_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_questionnaires" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_questionnaires`")  # noqa: E501
        # verify the required parameter 'questionnaire_id' is set
        if ('questionnaire_id' not in params or
                params['questionnaire_id'] is None):
            raise ValueError("Missing the required parameter `questionnaire_id` when calling `update_questionnaires`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'questionnaire_id' in params:
            path_params['questionnaireId'] = params['questionnaire_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/questionnaire-templates/{questionnaireId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateQuestionnaireResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
