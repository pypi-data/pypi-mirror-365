# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class EnableOneWayInterviewResponseDataAutoReminderData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_reminder_enabled': 'bool',
        'value': 'float',
        'unit': 'str',
        'template_identifier': 'str'
    }

    attribute_map = {
        'auto_reminder_enabled': 'autoReminderEnabled',
        'value': 'value',
        'unit': 'unit',
        'template_identifier': 'templateIdentifier'
    }

    def __init__(self, auto_reminder_enabled=None, value=None, unit=None, template_identifier=None):  # noqa: E501
        """EnableOneWayInterviewResponseDataAutoReminderData - a model defined in Swagger"""  # noqa: E501
        self._auto_reminder_enabled = None
        self._value = None
        self._unit = None
        self._template_identifier = None
        self.discriminator = None
        self.auto_reminder_enabled = auto_reminder_enabled
        self.value = value
        self.unit = unit
        self.template_identifier = template_identifier

    @property
    def auto_reminder_enabled(self):
        """Gets the auto_reminder_enabled of this EnableOneWayInterviewResponseDataAutoReminderData.  # noqa: E501

        true if auto reminder is enabled else false.  # noqa: E501

        :return: The auto_reminder_enabled of this EnableOneWayInterviewResponseDataAutoReminderData.  # noqa: E501
        :rtype: bool
        """
        return self._auto_reminder_enabled

    @auto_reminder_enabled.setter
    def auto_reminder_enabled(self, auto_reminder_enabled):
        """Sets the auto_reminder_enabled of this EnableOneWayInterviewResponseDataAutoReminderData.

        true if auto reminder is enabled else false.  # noqa: E501

        :param auto_reminder_enabled: The auto_reminder_enabled of this EnableOneWayInterviewResponseDataAutoReminderData.  # noqa: E501
        :type: bool
        """
        if auto_reminder_enabled is None:
            raise ValueError("Invalid value for `auto_reminder_enabled`, must not be `None`")  # noqa: E501

        self._auto_reminder_enabled = auto_reminder_enabled

    @property
    def value(self):
        """Gets the value of this EnableOneWayInterviewResponseDataAutoReminderData.  # noqa: E501

        Number of days before expiry to send the reminder.  # noqa: E501

        :return: The value of this EnableOneWayInterviewResponseDataAutoReminderData.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EnableOneWayInterviewResponseDataAutoReminderData.

        Number of days before expiry to send the reminder.  # noqa: E501

        :param value: The value of this EnableOneWayInterviewResponseDataAutoReminderData.  # noqa: E501
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def unit(self):
        """Gets the unit of this EnableOneWayInterviewResponseDataAutoReminderData.  # noqa: E501

        Indicates the value is days.  # noqa: E501

        :return: The unit of this EnableOneWayInterviewResponseDataAutoReminderData.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this EnableOneWayInterviewResponseDataAutoReminderData.

        Indicates the value is days.  # noqa: E501

        :param unit: The unit of this EnableOneWayInterviewResponseDataAutoReminderData.  # noqa: E501
        :type: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def template_identifier(self):
        """Gets the template_identifier of this EnableOneWayInterviewResponseDataAutoReminderData.  # noqa: E501

        Email template identifier.  # noqa: E501

        :return: The template_identifier of this EnableOneWayInterviewResponseDataAutoReminderData.  # noqa: E501
        :rtype: str
        """
        return self._template_identifier

    @template_identifier.setter
    def template_identifier(self, template_identifier):
        """Sets the template_identifier of this EnableOneWayInterviewResponseDataAutoReminderData.

        Email template identifier.  # noqa: E501

        :param template_identifier: The template_identifier of this EnableOneWayInterviewResponseDataAutoReminderData.  # noqa: E501
        :type: str
        """
        if template_identifier is None:
            raise ValueError("Invalid value for `template_identifier`, must not be `None`")  # noqa: E501

        self._template_identifier = template_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnableOneWayInterviewResponseDataAutoReminderData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnableOneWayInterviewResponseDataAutoReminderData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
