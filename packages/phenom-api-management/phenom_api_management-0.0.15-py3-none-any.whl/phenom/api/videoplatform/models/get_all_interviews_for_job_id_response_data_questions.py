# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetAllInterviewsForJobIdResponseDataQuestions(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'video_screen_question_id': 'str',
        'question_text': 'str',
        'response_duration_limit_in_sec': 'float',
        'video_id': 'str',
        'think_time_in_sec': 'float',
        'answer_time_in_sec': 'float',
        'recording_started': 'bool',
        'answered': 'bool',
        'max_number_retakes': 'float',
        'timed': 'bool',
        'type': 'str',
        'video_uploaded': 'bool',
        'question_id': 'str',
        'settings': 'object',
        'selected_option_ids': 'list[str]',
        'answer_text': 'str'
    }

    attribute_map = {
        'video_screen_question_id': 'videoScreenQuestionId',
        'question_text': 'questionText',
        'response_duration_limit_in_sec': 'responseDurationLimitInSec',
        'video_id': 'videoId',
        'think_time_in_sec': 'thinkTimeInSec',
        'answer_time_in_sec': 'answerTimeInSec',
        'recording_started': 'recordingStarted',
        'answered': 'answered',
        'max_number_retakes': 'maxNumberRetakes',
        'timed': 'timed',
        'type': 'type',
        'video_uploaded': 'videoUploaded',
        'question_id': 'questionId',
        'settings': 'settings',
        'selected_option_ids': 'selectedOptionIds',
        'answer_text': 'answerText'
    }

    def __init__(self, video_screen_question_id=None, question_text=None, response_duration_limit_in_sec=None, video_id=None, think_time_in_sec=None, answer_time_in_sec=None, recording_started=None, answered=None, max_number_retakes=None, timed=None, type=None, video_uploaded=None, question_id=None, settings=None, selected_option_ids=None, answer_text=None):  # noqa: E501
        """GetAllInterviewsForJobIdResponseDataQuestions - a model defined in Swagger"""  # noqa: E501
        self._video_screen_question_id = None
        self._question_text = None
        self._response_duration_limit_in_sec = None
        self._video_id = None
        self._think_time_in_sec = None
        self._answer_time_in_sec = None
        self._recording_started = None
        self._answered = None
        self._max_number_retakes = None
        self._timed = None
        self._type = None
        self._video_uploaded = None
        self._question_id = None
        self._settings = None
        self._selected_option_ids = None
        self._answer_text = None
        self.discriminator = None
        self.video_screen_question_id = video_screen_question_id
        self.question_text = question_text
        if response_duration_limit_in_sec is not None:
            self.response_duration_limit_in_sec = response_duration_limit_in_sec
        if video_id is not None:
            self.video_id = video_id
        self.think_time_in_sec = think_time_in_sec
        self.answer_time_in_sec = answer_time_in_sec
        self.recording_started = recording_started
        self.answered = answered
        if max_number_retakes is not None:
            self.max_number_retakes = max_number_retakes
        self.timed = timed
        self.type = type
        if video_uploaded is not None:
            self.video_uploaded = video_uploaded
        self.question_id = question_id
        if settings is not None:
            self.settings = settings
        if selected_option_ids is not None:
            self.selected_option_ids = selected_option_ids
        if answer_text is not None:
            self.answer_text = answer_text

    @property
    def video_screen_question_id(self):
        """Gets the video_screen_question_id of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        This is the interview question id which differs from actual question id.  # noqa: E501

        :return: The video_screen_question_id of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: str
        """
        return self._video_screen_question_id

    @video_screen_question_id.setter
    def video_screen_question_id(self, video_screen_question_id):
        """Sets the video_screen_question_id of this GetAllInterviewsForJobIdResponseDataQuestions.

        This is the interview question id which differs from actual question id.  # noqa: E501

        :param video_screen_question_id: The video_screen_question_id of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: str
        """
        if video_screen_question_id is None:
            raise ValueError("Invalid value for `video_screen_question_id`, must not be `None`")  # noqa: E501

        self._video_screen_question_id = video_screen_question_id

    @property
    def question_text(self):
        """Gets the question_text of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        Question text of question.  # noqa: E501

        :return: The question_text of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: str
        """
        return self._question_text

    @question_text.setter
    def question_text(self, question_text):
        """Sets the question_text of this GetAllInterviewsForJobIdResponseDataQuestions.

        Question text of question.  # noqa: E501

        :param question_text: The question_text of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: str
        """
        if question_text is None:
            raise ValueError("Invalid value for `question_text`, must not be `None`")  # noqa: E501

        self._question_text = question_text

    @property
    def response_duration_limit_in_sec(self):
        """Gets the response_duration_limit_in_sec of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        Max time of question to be answered.  # noqa: E501

        :return: The response_duration_limit_in_sec of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._response_duration_limit_in_sec

    @response_duration_limit_in_sec.setter
    def response_duration_limit_in_sec(self, response_duration_limit_in_sec):
        """Sets the response_duration_limit_in_sec of this GetAllInterviewsForJobIdResponseDataQuestions.

        Max time of question to be answered.  # noqa: E501

        :param response_duration_limit_in_sec: The response_duration_limit_in_sec of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._response_duration_limit_in_sec = response_duration_limit_in_sec

    @property
    def video_id(self):
        """Gets the video_id of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        This field is applicable only for video question.  # noqa: E501

        :return: The video_id of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this GetAllInterviewsForJobIdResponseDataQuestions.

        This field is applicable only for video question.  # noqa: E501

        :param video_id: The video_id of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: str
        """

        self._video_id = video_id

    @property
    def think_time_in_sec(self):
        """Gets the think_time_in_sec of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        This is the preparation time to be presented to candidate while practicing.  # noqa: E501

        :return: The think_time_in_sec of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._think_time_in_sec

    @think_time_in_sec.setter
    def think_time_in_sec(self, think_time_in_sec):
        """Sets the think_time_in_sec of this GetAllInterviewsForJobIdResponseDataQuestions.

        This is the preparation time to be presented to candidate while practicing.  # noqa: E501

        :param think_time_in_sec: The think_time_in_sec of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: float
        """
        if think_time_in_sec is None:
            raise ValueError("Invalid value for `think_time_in_sec`, must not be `None`")  # noqa: E501

        self._think_time_in_sec = think_time_in_sec

    @property
    def answer_time_in_sec(self):
        """Gets the answer_time_in_sec of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        This is same as responseDurationLimitInSec.  # noqa: E501

        :return: The answer_time_in_sec of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._answer_time_in_sec

    @answer_time_in_sec.setter
    def answer_time_in_sec(self, answer_time_in_sec):
        """Sets the answer_time_in_sec of this GetAllInterviewsForJobIdResponseDataQuestions.

        This is same as responseDurationLimitInSec.  # noqa: E501

        :param answer_time_in_sec: The answer_time_in_sec of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: float
        """
        if answer_time_in_sec is None:
            raise ValueError("Invalid value for `answer_time_in_sec`, must not be `None`")  # noqa: E501

        self._answer_time_in_sec = answer_time_in_sec

    @property
    def recording_started(self):
        """Gets the recording_started of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        This indicates that candidate started the recording.  # noqa: E501

        :return: The recording_started of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._recording_started

    @recording_started.setter
    def recording_started(self, recording_started):
        """Sets the recording_started of this GetAllInterviewsForJobIdResponseDataQuestions.

        This indicates that candidate started the recording.  # noqa: E501

        :param recording_started: The recording_started of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: bool
        """
        if recording_started is None:
            raise ValueError("Invalid value for `recording_started`, must not be `None`")  # noqa: E501

        self._recording_started = recording_started

    @property
    def answered(self):
        """Gets the answered of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        This indicates that candidate answered the question.  # noqa: E501

        :return: The answered of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._answered

    @answered.setter
    def answered(self, answered):
        """Sets the answered of this GetAllInterviewsForJobIdResponseDataQuestions.

        This indicates that candidate answered the question.  # noqa: E501

        :param answered: The answered of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: bool
        """
        if answered is None:
            raise ValueError("Invalid value for `answered`, must not be `None`")  # noqa: E501

        self._answered = answered

    @property
    def max_number_retakes(self):
        """Gets the max_number_retakes of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        This indicates the max number of retakes allowed for a question.  # noqa: E501

        :return: The max_number_retakes of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._max_number_retakes

    @max_number_retakes.setter
    def max_number_retakes(self, max_number_retakes):
        """Sets the max_number_retakes of this GetAllInterviewsForJobIdResponseDataQuestions.

        This indicates the max number of retakes allowed for a question.  # noqa: E501

        :param max_number_retakes: The max_number_retakes of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._max_number_retakes = max_number_retakes

    @property
    def timed(self):
        """Gets the timed of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        This indicates whether this is timed question, applicable for non-media questions like text,choice.  # noqa: E501

        :return: The timed of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._timed

    @timed.setter
    def timed(self, timed):
        """Sets the timed of this GetAllInterviewsForJobIdResponseDataQuestions.

        This indicates whether this is timed question, applicable for non-media questions like text,choice.  # noqa: E501

        :param timed: The timed of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: bool
        """
        if timed is None:
            raise ValueError("Invalid value for `timed`, must not be `None`")  # noqa: E501

        self._timed = timed

    @property
    def type(self):
        """Gets the type of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        Type of the question, could be video, audio, videoOrAudio, multiple, scored, single, knockout, text.  # noqa: E501

        :return: The type of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetAllInterviewsForJobIdResponseDataQuestions.

        Type of the question, could be video, audio, videoOrAudio, multiple, scored, single, knockout, text.  # noqa: E501

        :param type: The type of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def video_uploaded(self):
        """Gets the video_uploaded of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        true if video or audio uploaded  # noqa: E501

        :return: The video_uploaded of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._video_uploaded

    @video_uploaded.setter
    def video_uploaded(self, video_uploaded):
        """Sets the video_uploaded of this GetAllInterviewsForJobIdResponseDataQuestions.

        true if video or audio uploaded  # noqa: E501

        :param video_uploaded: The video_uploaded of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: bool
        """

        self._video_uploaded = video_uploaded

    @property
    def question_id(self):
        """Gets the question_id of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        Actual question id of the question.  # noqa: E501

        :return: The question_id of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this GetAllInterviewsForJobIdResponseDataQuestions.

        Actual question id of the question.  # noqa: E501

        :param question_id: The question_id of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: str
        """
        if question_id is None:
            raise ValueError("Invalid value for `question_id`, must not be `None`")  # noqa: E501

        self._question_id = question_id

    @property
    def settings(self):
        """Gets the settings of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        Settings object is dynamic based on question.  # noqa: E501

        :return: The settings of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this GetAllInterviewsForJobIdResponseDataQuestions.

        Settings object is dynamic based on question.  # noqa: E501

        :param settings: The settings of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: object
        """

        self._settings = settings

    @property
    def selected_option_ids(self):
        """Gets the selected_option_ids of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501


        :return: The selected_option_ids of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_option_ids

    @selected_option_ids.setter
    def selected_option_ids(self, selected_option_ids):
        """Sets the selected_option_ids of this GetAllInterviewsForJobIdResponseDataQuestions.


        :param selected_option_ids: The selected_option_ids of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: list[str]
        """

        self._selected_option_ids = selected_option_ids

    @property
    def answer_text(self):
        """Gets the answer_text of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501

        This field is applicable for text question.  # noqa: E501

        :return: The answer_text of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :rtype: str
        """
        return self._answer_text

    @answer_text.setter
    def answer_text(self, answer_text):
        """Sets the answer_text of this GetAllInterviewsForJobIdResponseDataQuestions.

        This field is applicable for text question.  # noqa: E501

        :param answer_text: The answer_text of this GetAllInterviewsForJobIdResponseDataQuestions.  # noqa: E501
        :type: str
        """

        self._answer_text = answer_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAllInterviewsForJobIdResponseDataQuestions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAllInterviewsForJobIdResponseDataQuestions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
