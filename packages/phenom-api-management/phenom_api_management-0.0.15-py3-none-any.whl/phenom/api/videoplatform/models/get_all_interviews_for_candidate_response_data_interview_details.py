# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetAllInterviewsForCandidateResponseDataInterviewDetails(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'entity_value': 'str',
        'job_details': 'GetAllInterviewsForCandidateResponseDataInterviewDetailsJobDetails'
    }

    attribute_map = {
        'title': 'title',
        'entity_value': 'entityValue',
        'job_details': 'jobDetails'
    }

    def __init__(self, title=None, entity_value=None, job_details=None):  # noqa: E501
        """GetAllInterviewsForCandidateResponseDataInterviewDetails - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._entity_value = None
        self._job_details = None
        self.discriminator = None
        self.title = title
        self.entity_value = entity_value
        self.job_details = job_details

    @property
    def title(self):
        """Gets the title of this GetAllInterviewsForCandidateResponseDataInterviewDetails.  # noqa: E501

        Job title.  # noqa: E501

        :return: The title of this GetAllInterviewsForCandidateResponseDataInterviewDetails.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetAllInterviewsForCandidateResponseDataInterviewDetails.

        Job title.  # noqa: E501

        :param title: The title of this GetAllInterviewsForCandidateResponseDataInterviewDetails.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def entity_value(self):
        """Gets the entity_value of this GetAllInterviewsForCandidateResponseDataInterviewDetails.  # noqa: E501

        Job id of the job.  # noqa: E501

        :return: The entity_value of this GetAllInterviewsForCandidateResponseDataInterviewDetails.  # noqa: E501
        :rtype: str
        """
        return self._entity_value

    @entity_value.setter
    def entity_value(self, entity_value):
        """Sets the entity_value of this GetAllInterviewsForCandidateResponseDataInterviewDetails.

        Job id of the job.  # noqa: E501

        :param entity_value: The entity_value of this GetAllInterviewsForCandidateResponseDataInterviewDetails.  # noqa: E501
        :type: str
        """
        if entity_value is None:
            raise ValueError("Invalid value for `entity_value`, must not be `None`")  # noqa: E501

        self._entity_value = entity_value

    @property
    def job_details(self):
        """Gets the job_details of this GetAllInterviewsForCandidateResponseDataInterviewDetails.  # noqa: E501


        :return: The job_details of this GetAllInterviewsForCandidateResponseDataInterviewDetails.  # noqa: E501
        :rtype: GetAllInterviewsForCandidateResponseDataInterviewDetailsJobDetails
        """
        return self._job_details

    @job_details.setter
    def job_details(self, job_details):
        """Sets the job_details of this GetAllInterviewsForCandidateResponseDataInterviewDetails.


        :param job_details: The job_details of this GetAllInterviewsForCandidateResponseDataInterviewDetails.  # noqa: E501
        :type: GetAllInterviewsForCandidateResponseDataInterviewDetailsJobDetails
        """
        if job_details is None:
            raise ValueError("Invalid value for `job_details`, must not be `None`")  # noqa: E501

        self._job_details = job_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAllInterviewsForCandidateResponseDataInterviewDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAllInterviewsForCandidateResponseDataInterviewDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
