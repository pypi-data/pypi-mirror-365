# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class DisableInterviewResponseData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'error_message': 'object',
        'candidate_id': 'str',
        'video_screen_id': 'str'
    }

    attribute_map = {
        'status': 'status',
        'error_message': 'errorMessage',
        'candidate_id': 'candidateId',
        'video_screen_id': 'videoScreenId'
    }

    def __init__(self, status=None, error_message=None, candidate_id=None, video_screen_id=None):  # noqa: E501
        """DisableInterviewResponseData - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._error_message = None
        self._candidate_id = None
        self._video_screen_id = None
        self.discriminator = None
        self.status = status
        self.error_message = error_message
        self.candidate_id = candidate_id
        self.video_screen_id = video_screen_id

    @property
    def status(self):
        """Gets the status of this DisableInterviewResponseData.  # noqa: E501

        You will get Success or Failure.  # noqa: E501

        :return: The status of this DisableInterviewResponseData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DisableInterviewResponseData.

        You will get Success or Failure.  # noqa: E501

        :param status: The status of this DisableInterviewResponseData.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def error_message(self):
        """Gets the error_message of this DisableInterviewResponseData.  # noqa: E501


        :return: The error_message of this DisableInterviewResponseData.  # noqa: E501
        :rtype: object
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DisableInterviewResponseData.


        :param error_message: The error_message of this DisableInterviewResponseData.  # noqa: E501
        :type: object
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")  # noqa: E501

        self._error_message = error_message

    @property
    def candidate_id(self):
        """Gets the candidate_id of this DisableInterviewResponseData.  # noqa: E501

        Candidate id whose interview is disabled.  # noqa: E501

        :return: The candidate_id of this DisableInterviewResponseData.  # noqa: E501
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this DisableInterviewResponseData.

        Candidate id whose interview is disabled.  # noqa: E501

        :param candidate_id: The candidate_id of this DisableInterviewResponseData.  # noqa: E501
        :type: str
        """
        if candidate_id is None:
            raise ValueError("Invalid value for `candidate_id`, must not be `None`")  # noqa: E501

        self._candidate_id = candidate_id

    @property
    def video_screen_id(self):
        """Gets the video_screen_id of this DisableInterviewResponseData.  # noqa: E501

        This is the interview id.  # noqa: E501

        :return: The video_screen_id of this DisableInterviewResponseData.  # noqa: E501
        :rtype: str
        """
        return self._video_screen_id

    @video_screen_id.setter
    def video_screen_id(self, video_screen_id):
        """Sets the video_screen_id of this DisableInterviewResponseData.

        This is the interview id.  # noqa: E501

        :param video_screen_id: The video_screen_id of this DisableInterviewResponseData.  # noqa: E501
        :type: str
        """
        if video_screen_id is None:
            raise ValueError("Invalid value for `video_screen_id`, must not be `None`")  # noqa: E501

        self._video_screen_id = video_screen_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DisableInterviewResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisableInterviewResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
