# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GiveEvaluationRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'overall_evaluation': 'str',
        'overall_evaluation_status': 'str',
        'recruiter_user_id': 'str',
        'video_screen_id': 'str',
        'answer_ratings': 'list[GiveEvaluationRequestAnswerRatings]',
        'role_name': 'str'
    }

    attribute_map = {
        'overall_evaluation': 'overallEvaluation',
        'overall_evaluation_status': 'overallEvaluationStatus',
        'recruiter_user_id': 'recruiterUserId',
        'video_screen_id': 'videoScreenId',
        'answer_ratings': 'answerRatings',
        'role_name': 'roleName'
    }

    def __init__(self, overall_evaluation=None, overall_evaluation_status=None, recruiter_user_id=None, video_screen_id=None, answer_ratings=None, role_name=None):  # noqa: E501
        """GiveEvaluationRequest - a model defined in Swagger"""  # noqa: E501
        self._overall_evaluation = None
        self._overall_evaluation_status = None
        self._recruiter_user_id = None
        self._video_screen_id = None
        self._answer_ratings = None
        self._role_name = None
        self.discriminator = None
        self.overall_evaluation = overall_evaluation
        self.overall_evaluation_status = overall_evaluation_status
        self.recruiter_user_id = recruiter_user_id
        self.video_screen_id = video_screen_id
        self.answer_ratings = answer_ratings
        self.role_name = role_name

    @property
    def overall_evaluation(self):
        """Gets the overall_evaluation of this GiveEvaluationRequest.  # noqa: E501

        Comment given by evaluator.  # noqa: E501

        :return: The overall_evaluation of this GiveEvaluationRequest.  # noqa: E501
        :rtype: str
        """
        return self._overall_evaluation

    @overall_evaluation.setter
    def overall_evaluation(self, overall_evaluation):
        """Sets the overall_evaluation of this GiveEvaluationRequest.

        Comment given by evaluator.  # noqa: E501

        :param overall_evaluation: The overall_evaluation of this GiveEvaluationRequest.  # noqa: E501
        :type: str
        """
        if overall_evaluation is None:
            raise ValueError("Invalid value for `overall_evaluation`, must not be `None`")  # noqa: E501

        self._overall_evaluation = overall_evaluation

    @property
    def overall_evaluation_status(self):
        """Gets the overall_evaluation_status of this GiveEvaluationRequest.  # noqa: E501

        This can be Yes, No, Maybe. This is the conclusion of the overall evaluation, indicates to consider the candidate or not.  # noqa: E501

        :return: The overall_evaluation_status of this GiveEvaluationRequest.  # noqa: E501
        :rtype: str
        """
        return self._overall_evaluation_status

    @overall_evaluation_status.setter
    def overall_evaluation_status(self, overall_evaluation_status):
        """Sets the overall_evaluation_status of this GiveEvaluationRequest.

        This can be Yes, No, Maybe. This is the conclusion of the overall evaluation, indicates to consider the candidate or not.  # noqa: E501

        :param overall_evaluation_status: The overall_evaluation_status of this GiveEvaluationRequest.  # noqa: E501
        :type: str
        """
        if overall_evaluation_status is None:
            raise ValueError("Invalid value for `overall_evaluation_status`, must not be `None`")  # noqa: E501

        self._overall_evaluation_status = overall_evaluation_status

    @property
    def recruiter_user_id(self):
        """Gets the recruiter_user_id of this GiveEvaluationRequest.  # noqa: E501

        user id of the evaluator.  # noqa: E501

        :return: The recruiter_user_id of this GiveEvaluationRequest.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_user_id

    @recruiter_user_id.setter
    def recruiter_user_id(self, recruiter_user_id):
        """Sets the recruiter_user_id of this GiveEvaluationRequest.

        user id of the evaluator.  # noqa: E501

        :param recruiter_user_id: The recruiter_user_id of this GiveEvaluationRequest.  # noqa: E501
        :type: str
        """
        if recruiter_user_id is None:
            raise ValueError("Invalid value for `recruiter_user_id`, must not be `None`")  # noqa: E501

        self._recruiter_user_id = recruiter_user_id

    @property
    def video_screen_id(self):
        """Gets the video_screen_id of this GiveEvaluationRequest.  # noqa: E501

        Interview id.  # noqa: E501

        :return: The video_screen_id of this GiveEvaluationRequest.  # noqa: E501
        :rtype: str
        """
        return self._video_screen_id

    @video_screen_id.setter
    def video_screen_id(self, video_screen_id):
        """Sets the video_screen_id of this GiveEvaluationRequest.

        Interview id.  # noqa: E501

        :param video_screen_id: The video_screen_id of this GiveEvaluationRequest.  # noqa: E501
        :type: str
        """
        if video_screen_id is None:
            raise ValueError("Invalid value for `video_screen_id`, must not be `None`")  # noqa: E501

        self._video_screen_id = video_screen_id

    @property
    def answer_ratings(self):
        """Gets the answer_ratings of this GiveEvaluationRequest.  # noqa: E501

        Rating given for each question.  # noqa: E501

        :return: The answer_ratings of this GiveEvaluationRequest.  # noqa: E501
        :rtype: list[GiveEvaluationRequestAnswerRatings]
        """
        return self._answer_ratings

    @answer_ratings.setter
    def answer_ratings(self, answer_ratings):
        """Sets the answer_ratings of this GiveEvaluationRequest.

        Rating given for each question.  # noqa: E501

        :param answer_ratings: The answer_ratings of this GiveEvaluationRequest.  # noqa: E501
        :type: list[GiveEvaluationRequestAnswerRatings]
        """
        if answer_ratings is None:
            raise ValueError("Invalid value for `answer_ratings`, must not be `None`")  # noqa: E501

        self._answer_ratings = answer_ratings

    @property
    def role_name(self):
        """Gets the role_name of this GiveEvaluationRequest.  # noqa: E501

        Role name for the evaluator.  # noqa: E501

        :return: The role_name of this GiveEvaluationRequest.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this GiveEvaluationRequest.

        Role name for the evaluator.  # noqa: E501

        :param role_name: The role_name of this GiveEvaluationRequest.  # noqa: E501
        :type: str
        """
        if role_name is None:
            raise ValueError("Invalid value for `role_name`, must not be `None`")  # noqa: E501

        self._role_name = role_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GiveEvaluationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GiveEvaluationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
