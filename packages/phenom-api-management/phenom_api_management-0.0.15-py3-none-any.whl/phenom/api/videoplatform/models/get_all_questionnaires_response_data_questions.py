# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetAllQuestionnairesResponseDataQuestions(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'questionnaire_id': 'str',
        'date_created': 'int',
        'delete': 'bool',
        'disable': 'bool',
        'draft': 'bool',
        'last_updated': 'int',
        'lc_questionnaire_name': 'str',
        'locales': 'list[GetAllQuestionnairesResponseDataLocales]',
        'question_ids': 'list[str]',
        'questionnaire_details': 'GetAllQuestionnairesResponseDataQuestionnaireDetails',
        'questionnaire_name': 'str',
        'audio_question_count': 'float',
        'mc_question_count': 'float',
        'score_question_count': 'float',
        'text_question_count': 'float',
        'total_questions_count': 'float',
        'video_question_count': 'float',
        'ai_question_count': 'float',
        'knockout_question_count': 'float',
        'manual_question_count': 'float',
        'single_choice_count': 'float',
        'video_or_audio_question_count': 'float'
    }

    attribute_map = {
        'questionnaire_id': 'questionnaireId',
        'date_created': 'dateCreated',
        'delete': 'delete',
        'disable': 'disable',
        'draft': 'draft',
        'last_updated': 'lastUpdated',
        'lc_questionnaire_name': 'lcQuestionnaireName',
        'locales': 'locales',
        'question_ids': 'questionIds',
        'questionnaire_details': 'questionnaireDetails',
        'questionnaire_name': 'questionnaireName',
        'audio_question_count': 'audioQuestionCount',
        'mc_question_count': 'mcQuestionCount',
        'score_question_count': 'scoreQuestionCount',
        'text_question_count': 'textQuestionCount',
        'total_questions_count': 'totalQuestionsCount',
        'video_question_count': 'videoQuestionCount',
        'ai_question_count': 'aiQuestionCount',
        'knockout_question_count': 'knockoutQuestionCount',
        'manual_question_count': 'manualQuestionCount',
        'single_choice_count': 'singleChoiceCount',
        'video_or_audio_question_count': 'videoOrAudioQuestionCount'
    }

    def __init__(self, questionnaire_id=None, date_created=None, delete=None, disable=None, draft=None, last_updated=None, lc_questionnaire_name=None, locales=None, question_ids=None, questionnaire_details=None, questionnaire_name=None, audio_question_count=None, mc_question_count=None, score_question_count=None, text_question_count=None, total_questions_count=None, video_question_count=None, ai_question_count=None, knockout_question_count=None, manual_question_count=None, single_choice_count=None, video_or_audio_question_count=None):  # noqa: E501
        """GetAllQuestionnairesResponseDataQuestions - a model defined in Swagger"""  # noqa: E501
        self._questionnaire_id = None
        self._date_created = None
        self._delete = None
        self._disable = None
        self._draft = None
        self._last_updated = None
        self._lc_questionnaire_name = None
        self._locales = None
        self._question_ids = None
        self._questionnaire_details = None
        self._questionnaire_name = None
        self._audio_question_count = None
        self._mc_question_count = None
        self._score_question_count = None
        self._text_question_count = None
        self._total_questions_count = None
        self._video_question_count = None
        self._ai_question_count = None
        self._knockout_question_count = None
        self._manual_question_count = None
        self._single_choice_count = None
        self._video_or_audio_question_count = None
        self.discriminator = None
        self.questionnaire_id = questionnaire_id
        self.date_created = date_created
        self.delete = delete
        self.disable = disable
        self.draft = draft
        self.last_updated = last_updated
        self.lc_questionnaire_name = lc_questionnaire_name
        if locales is not None:
            self.locales = locales
        if question_ids is not None:
            self.question_ids = question_ids
        self.questionnaire_details = questionnaire_details
        self.questionnaire_name = questionnaire_name
        if audio_question_count is not None:
            self.audio_question_count = audio_question_count
        if mc_question_count is not None:
            self.mc_question_count = mc_question_count
        if score_question_count is not None:
            self.score_question_count = score_question_count
        if text_question_count is not None:
            self.text_question_count = text_question_count
        if total_questions_count is not None:
            self.total_questions_count = total_questions_count
        if video_question_count is not None:
            self.video_question_count = video_question_count
        if ai_question_count is not None:
            self.ai_question_count = ai_question_count
        if knockout_question_count is not None:
            self.knockout_question_count = knockout_question_count
        if manual_question_count is not None:
            self.manual_question_count = manual_question_count
        if single_choice_count is not None:
            self.single_choice_count = single_choice_count
        if video_or_audio_question_count is not None:
            self.video_or_audio_question_count = video_or_audio_question_count

    @property
    def questionnaire_id(self):
        """Gets the questionnaire_id of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Total count of questionnaires.  # noqa: E501

        :return: The questionnaire_id of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_id

    @questionnaire_id.setter
    def questionnaire_id(self, questionnaire_id):
        """Sets the questionnaire_id of this GetAllQuestionnairesResponseDataQuestions.

        Total count of questionnaires.  # noqa: E501

        :param questionnaire_id: The questionnaire_id of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: str
        """
        if questionnaire_id is None:
            raise ValueError("Invalid value for `questionnaire_id`, must not be `None`")  # noqa: E501

        self._questionnaire_id = questionnaire_id

    @property
    def date_created(self):
        """Gets the date_created of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Date when questionnaire is created.  # noqa: E501

        :return: The date_created of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this GetAllQuestionnairesResponseDataQuestions.

        Date when questionnaire is created.  # noqa: E501

        :param date_created: The date_created of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: int
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def delete(self):
        """Gets the delete of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Indicates whether deleted. true if deleted else false.  # noqa: E501

        :return: The delete of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this GetAllQuestionnairesResponseDataQuestions.

        Indicates whether deleted. true if deleted else false.  # noqa: E501

        :param delete: The delete of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: bool
        """
        if delete is None:
            raise ValueError("Invalid value for `delete`, must not be `None`")  # noqa: E501

        self._delete = delete

    @property
    def disable(self):
        """Gets the disable of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Indicates whether questionnaire is disabled.  # noqa: E501

        :return: The disable of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this GetAllQuestionnairesResponseDataQuestions.

        Indicates whether questionnaire is disabled.  # noqa: E501

        :param disable: The disable of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: bool
        """
        if disable is None:
            raise ValueError("Invalid value for `disable`, must not be `None`")  # noqa: E501

        self._disable = disable

    @property
    def draft(self):
        """Gets the draft of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Indicates whether questionnaire is in draft.  # noqa: E501

        :return: The draft of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this GetAllQuestionnairesResponseDataQuestions.

        Indicates whether questionnaire is in draft.  # noqa: E501

        :param draft: The draft of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: bool
        """
        if draft is None:
            raise ValueError("Invalid value for `draft`, must not be `None`")  # noqa: E501

        self._draft = draft

    @property
    def last_updated(self):
        """Gets the last_updated of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Date when questionnaire is last updated.  # noqa: E501

        :return: The last_updated of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this GetAllQuestionnairesResponseDataQuestions.

        Date when questionnaire is last updated.  # noqa: E501

        :param last_updated: The last_updated of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: int
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")  # noqa: E501

        self._last_updated = last_updated

    @property
    def lc_questionnaire_name(self):
        """Gets the lc_questionnaire_name of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Questionnaire name in lowercase.  # noqa: E501

        :return: The lc_questionnaire_name of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: str
        """
        return self._lc_questionnaire_name

    @lc_questionnaire_name.setter
    def lc_questionnaire_name(self, lc_questionnaire_name):
        """Sets the lc_questionnaire_name of this GetAllQuestionnairesResponseDataQuestions.

        Questionnaire name in lowercase.  # noqa: E501

        :param lc_questionnaire_name: The lc_questionnaire_name of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: str
        """
        if lc_questionnaire_name is None:
            raise ValueError("Invalid value for `lc_questionnaire_name`, must not be `None`")  # noqa: E501

        self._lc_questionnaire_name = lc_questionnaire_name

    @property
    def locales(self):
        """Gets the locales of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Locales applicable for the questions to be translated.  # noqa: E501

        :return: The locales of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: list[GetAllQuestionnairesResponseDataLocales]
        """
        return self._locales

    @locales.setter
    def locales(self, locales):
        """Sets the locales of this GetAllQuestionnairesResponseDataQuestions.

        Locales applicable for the questions to be translated.  # noqa: E501

        :param locales: The locales of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: list[GetAllQuestionnairesResponseDataLocales]
        """

        self._locales = locales

    @property
    def question_ids(self):
        """Gets the question_ids of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501


        :return: The question_ids of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: list[str]
        """
        return self._question_ids

    @question_ids.setter
    def question_ids(self, question_ids):
        """Sets the question_ids of this GetAllQuestionnairesResponseDataQuestions.


        :param question_ids: The question_ids of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: list[str]
        """

        self._question_ids = question_ids

    @property
    def questionnaire_details(self):
        """Gets the questionnaire_details of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501


        :return: The questionnaire_details of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: GetAllQuestionnairesResponseDataQuestionnaireDetails
        """
        return self._questionnaire_details

    @questionnaire_details.setter
    def questionnaire_details(self, questionnaire_details):
        """Sets the questionnaire_details of this GetAllQuestionnairesResponseDataQuestions.


        :param questionnaire_details: The questionnaire_details of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: GetAllQuestionnairesResponseDataQuestionnaireDetails
        """
        if questionnaire_details is None:
            raise ValueError("Invalid value for `questionnaire_details`, must not be `None`")  # noqa: E501

        self._questionnaire_details = questionnaire_details

    @property
    def questionnaire_name(self):
        """Gets the questionnaire_name of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Questionnaire name of the question.  # noqa: E501

        :return: The questionnaire_name of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_name

    @questionnaire_name.setter
    def questionnaire_name(self, questionnaire_name):
        """Sets the questionnaire_name of this GetAllQuestionnairesResponseDataQuestions.

        Questionnaire name of the question.  # noqa: E501

        :param questionnaire_name: The questionnaire_name of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: str
        """
        if questionnaire_name is None:
            raise ValueError("Invalid value for `questionnaire_name`, must not be `None`")  # noqa: E501

        self._questionnaire_name = questionnaire_name

    @property
    def audio_question_count(self):
        """Gets the audio_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Count of audio question.  # noqa: E501

        :return: The audio_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._audio_question_count

    @audio_question_count.setter
    def audio_question_count(self, audio_question_count):
        """Sets the audio_question_count of this GetAllQuestionnairesResponseDataQuestions.

        Count of audio question.  # noqa: E501

        :param audio_question_count: The audio_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._audio_question_count = audio_question_count

    @property
    def mc_question_count(self):
        """Gets the mc_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Count of multichoice question.  # noqa: E501

        :return: The mc_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._mc_question_count

    @mc_question_count.setter
    def mc_question_count(self, mc_question_count):
        """Sets the mc_question_count of this GetAllQuestionnairesResponseDataQuestions.

        Count of multichoice question.  # noqa: E501

        :param mc_question_count: The mc_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._mc_question_count = mc_question_count

    @property
    def score_question_count(self):
        """Gets the score_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Count of score question.  # noqa: E501

        :return: The score_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._score_question_count

    @score_question_count.setter
    def score_question_count(self, score_question_count):
        """Sets the score_question_count of this GetAllQuestionnairesResponseDataQuestions.

        Count of score question.  # noqa: E501

        :param score_question_count: The score_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._score_question_count = score_question_count

    @property
    def text_question_count(self):
        """Gets the text_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Count of text question.  # noqa: E501

        :return: The text_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._text_question_count

    @text_question_count.setter
    def text_question_count(self, text_question_count):
        """Sets the text_question_count of this GetAllQuestionnairesResponseDataQuestions.

        Count of text question.  # noqa: E501

        :param text_question_count: The text_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._text_question_count = text_question_count

    @property
    def total_questions_count(self):
        """Gets the total_questions_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Count of all questions.  # noqa: E501

        :return: The total_questions_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._total_questions_count

    @total_questions_count.setter
    def total_questions_count(self, total_questions_count):
        """Sets the total_questions_count of this GetAllQuestionnairesResponseDataQuestions.

        Count of all questions.  # noqa: E501

        :param total_questions_count: The total_questions_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._total_questions_count = total_questions_count

    @property
    def video_question_count(self):
        """Gets the video_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Count of video question.  # noqa: E501

        :return: The video_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._video_question_count

    @video_question_count.setter
    def video_question_count(self, video_question_count):
        """Sets the video_question_count of this GetAllQuestionnairesResponseDataQuestions.

        Count of video question.  # noqa: E501

        :param video_question_count: The video_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._video_question_count = video_question_count

    @property
    def ai_question_count(self):
        """Gets the ai_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Count of ai generated question.  # noqa: E501

        :return: The ai_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._ai_question_count

    @ai_question_count.setter
    def ai_question_count(self, ai_question_count):
        """Sets the ai_question_count of this GetAllQuestionnairesResponseDataQuestions.

        Count of ai generated question.  # noqa: E501

        :param ai_question_count: The ai_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._ai_question_count = ai_question_count

    @property
    def knockout_question_count(self):
        """Gets the knockout_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Count of knockout question.  # noqa: E501

        :return: The knockout_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._knockout_question_count

    @knockout_question_count.setter
    def knockout_question_count(self, knockout_question_count):
        """Sets the knockout_question_count of this GetAllQuestionnairesResponseDataQuestions.

        Count of knockout question.  # noqa: E501

        :param knockout_question_count: The knockout_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._knockout_question_count = knockout_question_count

    @property
    def manual_question_count(self):
        """Gets the manual_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Count of manual question.  # noqa: E501

        :return: The manual_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._manual_question_count

    @manual_question_count.setter
    def manual_question_count(self, manual_question_count):
        """Sets the manual_question_count of this GetAllQuestionnairesResponseDataQuestions.

        Count of manual question.  # noqa: E501

        :param manual_question_count: The manual_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._manual_question_count = manual_question_count

    @property
    def single_choice_count(self):
        """Gets the single_choice_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Count of single choice question.  # noqa: E501

        :return: The single_choice_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._single_choice_count

    @single_choice_count.setter
    def single_choice_count(self, single_choice_count):
        """Sets the single_choice_count of this GetAllQuestionnairesResponseDataQuestions.

        Count of single choice question.  # noqa: E501

        :param single_choice_count: The single_choice_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._single_choice_count = single_choice_count

    @property
    def video_or_audio_question_count(self):
        """Gets the video_or_audio_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501

        Count of video or audio question.  # noqa: E501

        :return: The video_or_audio_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :rtype: float
        """
        return self._video_or_audio_question_count

    @video_or_audio_question_count.setter
    def video_or_audio_question_count(self, video_or_audio_question_count):
        """Sets the video_or_audio_question_count of this GetAllQuestionnairesResponseDataQuestions.

        Count of video or audio question.  # noqa: E501

        :param video_or_audio_question_count: The video_or_audio_question_count of this GetAllQuestionnairesResponseDataQuestions.  # noqa: E501
        :type: float
        """

        self._video_or_audio_question_count = video_or_audio_question_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAllQuestionnairesResponseDataQuestions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAllQuestionnairesResponseDataQuestions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
