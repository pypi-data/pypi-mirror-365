# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class UpdateQuestionResponseData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'question_id': 'str',
        'question_text': 'str',
        'type': 'str',
        'question_translations': 'list[CreateQuestionResponseDataQuestionTranslations]',
        'date_created': 'int',
        'last_updated': 'int',
        'max_points': 'float'
    }

    attribute_map = {
        'question_id': 'questionId',
        'question_text': 'questionText',
        'type': 'type',
        'question_translations': 'questionTranslations',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'max_points': 'maxPoints'
    }

    def __init__(self, question_id=None, question_text=None, type=None, question_translations=None, date_created=None, last_updated=None, max_points=None):  # noqa: E501
        """UpdateQuestionResponseData - a model defined in Swagger"""  # noqa: E501
        self._question_id = None
        self._question_text = None
        self._type = None
        self._question_translations = None
        self._date_created = None
        self._last_updated = None
        self._max_points = None
        self.discriminator = None
        self.question_id = question_id
        self.question_text = question_text
        self.type = type
        self.question_translations = question_translations
        self.date_created = date_created
        self.last_updated = last_updated
        self.max_points = max_points

    @property
    def question_id(self):
        """Gets the question_id of this UpdateQuestionResponseData.  # noqa: E501

        Question id of the question.  # noqa: E501

        :return: The question_id of this UpdateQuestionResponseData.  # noqa: E501
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this UpdateQuestionResponseData.

        Question id of the question.  # noqa: E501

        :param question_id: The question_id of this UpdateQuestionResponseData.  # noqa: E501
        :type: str
        """
        if question_id is None:
            raise ValueError("Invalid value for `question_id`, must not be `None`")  # noqa: E501

        self._question_id = question_id

    @property
    def question_text(self):
        """Gets the question_text of this UpdateQuestionResponseData.  # noqa: E501

        Question text for the given question.  # noqa: E501

        :return: The question_text of this UpdateQuestionResponseData.  # noqa: E501
        :rtype: str
        """
        return self._question_text

    @question_text.setter
    def question_text(self, question_text):
        """Sets the question_text of this UpdateQuestionResponseData.

        Question text for the given question.  # noqa: E501

        :param question_text: The question_text of this UpdateQuestionResponseData.  # noqa: E501
        :type: str
        """
        if question_text is None:
            raise ValueError("Invalid value for `question_text`, must not be `None`")  # noqa: E501

        self._question_text = question_text

    @property
    def type(self):
        """Gets the type of this UpdateQuestionResponseData.  # noqa: E501

        Type of the question, could be video, audio, videoOrAudio, multiple, scored, single, knockout, text.  # noqa: E501

        :return: The type of this UpdateQuestionResponseData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateQuestionResponseData.

        Type of the question, could be video, audio, videoOrAudio, multiple, scored, single, knockout, text.  # noqa: E501

        :param type: The type of this UpdateQuestionResponseData.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def question_translations(self):
        """Gets the question_translations of this UpdateQuestionResponseData.  # noqa: E501

        Translated questions for a locale.  # noqa: E501

        :return: The question_translations of this UpdateQuestionResponseData.  # noqa: E501
        :rtype: list[CreateQuestionResponseDataQuestionTranslations]
        """
        return self._question_translations

    @question_translations.setter
    def question_translations(self, question_translations):
        """Sets the question_translations of this UpdateQuestionResponseData.

        Translated questions for a locale.  # noqa: E501

        :param question_translations: The question_translations of this UpdateQuestionResponseData.  # noqa: E501
        :type: list[CreateQuestionResponseDataQuestionTranslations]
        """
        if question_translations is None:
            raise ValueError("Invalid value for `question_translations`, must not be `None`")  # noqa: E501

        self._question_translations = question_translations

    @property
    def date_created(self):
        """Gets the date_created of this UpdateQuestionResponseData.  # noqa: E501

        Date when the question is created.  # noqa: E501

        :return: The date_created of this UpdateQuestionResponseData.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this UpdateQuestionResponseData.

        Date when the question is created.  # noqa: E501

        :param date_created: The date_created of this UpdateQuestionResponseData.  # noqa: E501
        :type: int
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this UpdateQuestionResponseData.  # noqa: E501

        Date when the question is updated.  # noqa: E501

        :return: The last_updated of this UpdateQuestionResponseData.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this UpdateQuestionResponseData.

        Date when the question is updated.  # noqa: E501

        :param last_updated: The last_updated of this UpdateQuestionResponseData.  # noqa: E501
        :type: int
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")  # noqa: E501

        self._last_updated = last_updated

    @property
    def max_points(self):
        """Gets the max_points of this UpdateQuestionResponseData.  # noqa: E501

        This field is applicable for scored question.  # noqa: E501

        :return: The max_points of this UpdateQuestionResponseData.  # noqa: E501
        :rtype: float
        """
        return self._max_points

    @max_points.setter
    def max_points(self, max_points):
        """Sets the max_points of this UpdateQuestionResponseData.

        This field is applicable for scored question.  # noqa: E501

        :param max_points: The max_points of this UpdateQuestionResponseData.  # noqa: E501
        :type: float
        """
        if max_points is None:
            raise ValueError("Invalid value for `max_points`, must not be `None`")  # noqa: E501

        self._max_points = max_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateQuestionResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateQuestionResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
