# coding: utf-8

"""
    communications-email

    These APIs ensures an easy integration process of email management for developers to send, read, and track email histories within applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ForwardProfileRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'str',
        'to_email': 'str',
        'candidate_email': 'str'
    }

    attribute_map = {
        'subject': 'subject',
        'to_email': 'toEmail',
        'candidate_email': 'candidateEmail'
    }

    def __init__(self, subject=None, to_email=None, candidate_email=None):  # noqa: E501
        """ForwardProfileRequest - a model defined in Swagger"""  # noqa: E501
        self._subject = None
        self._to_email = None
        self._candidate_email = None
        self.discriminator = None
        self.subject = subject
        self.to_email = to_email
        self.candidate_email = candidate_email

    @property
    def subject(self):
        """Gets the subject of this ForwardProfileRequest.  # noqa: E501

        Subject for the Forward profile Request.  # noqa: E501

        :return: The subject of this ForwardProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ForwardProfileRequest.

        Subject for the Forward profile Request.  # noqa: E501

        :param subject: The subject of this ForwardProfileRequest.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def to_email(self):
        """Gets the to_email of this ForwardProfileRequest.  # noqa: E501

        Recipient's email address.  # noqa: E501

        :return: The to_email of this ForwardProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._to_email

    @to_email.setter
    def to_email(self, to_email):
        """Sets the to_email of this ForwardProfileRequest.

        Recipient's email address.  # noqa: E501

        :param to_email: The to_email of this ForwardProfileRequest.  # noqa: E501
        :type: str
        """
        if to_email is None:
            raise ValueError("Invalid value for `to_email`, must not be `None`")  # noqa: E501

        self._to_email = to_email

    @property
    def candidate_email(self):
        """Gets the candidate_email of this ForwardProfileRequest.  # noqa: E501

        Candidate's email address.  # noqa: E501

        :return: The candidate_email of this ForwardProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._candidate_email

    @candidate_email.setter
    def candidate_email(self, candidate_email):
        """Sets the candidate_email of this ForwardProfileRequest.

        Candidate's email address.  # noqa: E501

        :param candidate_email: The candidate_email of this ForwardProfileRequest.  # noqa: E501
        :type: str
        """
        if candidate_email is None:
            raise ValueError("Invalid value for `candidate_email`, must not be `None`")  # noqa: E501

        self._candidate_email = candidate_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForwardProfileRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForwardProfileRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
