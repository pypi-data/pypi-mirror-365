# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class AddOrUpdateExperienceRequestExperience(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'str',
        'is_current': 'bool',
        'job_title': 'str',
        'job_summary': 'str',
        'start_month': 'int',
        'start_year': 'int',
        'end_month': 'int',
        'end_year': 'int',
        'industry': 'str',
        'type': 'str',
        'designation': 'str',
        'role': 'str',
        'job_location': 'str',
        'country': 'str',
        'state': 'str',
        'city': 'str'
    }

    attribute_map = {
        'company': 'company',
        'is_current': 'isCurrent',
        'job_title': 'jobTitle',
        'job_summary': 'jobSummary',
        'start_month': 'startMonth',
        'start_year': 'startYear',
        'end_month': 'endMonth',
        'end_year': 'endYear',
        'industry': 'industry',
        'type': 'type',
        'designation': 'designation',
        'role': 'role',
        'job_location': 'jobLocation',
        'country': 'country',
        'state': 'state',
        'city': 'city'
    }

    def __init__(self, company=None, is_current=None, job_title=None, job_summary=None, start_month=None, start_year=None, end_month=None, end_year=None, industry=None, type=None, designation=None, role=None, job_location=None, country=None, state=None, city=None):  # noqa: E501
        """AddOrUpdateExperienceRequestExperience - a model defined in Swagger"""  # noqa: E501
        self._company = None
        self._is_current = None
        self._job_title = None
        self._job_summary = None
        self._start_month = None
        self._start_year = None
        self._end_month = None
        self._end_year = None
        self._industry = None
        self._type = None
        self._designation = None
        self._role = None
        self._job_location = None
        self._country = None
        self._state = None
        self._city = None
        self.discriminator = None
        if company is not None:
            self.company = company
        if is_current is not None:
            self.is_current = is_current
        if job_title is not None:
            self.job_title = job_title
        if job_summary is not None:
            self.job_summary = job_summary
        if start_month is not None:
            self.start_month = start_month
        if start_year is not None:
            self.start_year = start_year
        if end_month is not None:
            self.end_month = end_month
        if end_year is not None:
            self.end_year = end_year
        if industry is not None:
            self.industry = industry
        if type is not None:
            self.type = type
        if designation is not None:
            self.designation = designation
        if role is not None:
            self.role = role
        if job_location is not None:
            self.job_location = job_location
        if country is not None:
            self.country = country
        if state is not None:
            self.state = state
        if city is not None:
            self.city = city

    @property
    def company(self):
        """Gets the company of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The name of the company where the candidate gained experience.  # noqa: E501

        :return: The company of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this AddOrUpdateExperienceRequestExperience.

        The name of the company where the candidate gained experience.  # noqa: E501

        :param company: The company of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def is_current(self):
        """Gets the is_current of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        Indicates whether the candidate is currently employed in this position.  # noqa: E501

        :return: The is_current of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this AddOrUpdateExperienceRequestExperience.

        Indicates whether the candidate is currently employed in this position.  # noqa: E501

        :param is_current: The is_current of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: bool
        """

        self._is_current = is_current

    @property
    def job_title(self):
        """Gets the job_title of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The job title or position held by the candidate.  # noqa: E501

        :return: The job_title of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this AddOrUpdateExperienceRequestExperience.

        The job title or position held by the candidate.  # noqa: E501

        :param job_title: The job_title of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def job_summary(self):
        """Gets the job_summary of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        A summary or description of the candidate's job responsibilities.  # noqa: E501

        :return: The job_summary of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: str
        """
        return self._job_summary

    @job_summary.setter
    def job_summary(self, job_summary):
        """Sets the job_summary of this AddOrUpdateExperienceRequestExperience.

        A summary or description of the candidate's job responsibilities.  # noqa: E501

        :param job_summary: The job_summary of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: str
        """

        self._job_summary = job_summary

    @property
    def start_month(self):
        """Gets the start_month of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The starting month of the candidate's employment.  # noqa: E501

        :return: The start_month of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: int
        """
        return self._start_month

    @start_month.setter
    def start_month(self, start_month):
        """Sets the start_month of this AddOrUpdateExperienceRequestExperience.

        The starting month of the candidate's employment.  # noqa: E501

        :param start_month: The start_month of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: int
        """

        self._start_month = start_month

    @property
    def start_year(self):
        """Gets the start_year of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The starting year of the candidate's employment.  # noqa: E501

        :return: The start_year of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: int
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year):
        """Sets the start_year of this AddOrUpdateExperienceRequestExperience.

        The starting year of the candidate's employment.  # noqa: E501

        :param start_year: The start_year of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: int
        """

        self._start_year = start_year

    @property
    def end_month(self):
        """Gets the end_month of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The ending month of the candidate's employment, if applicable.  # noqa: E501

        :return: The end_month of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: int
        """
        return self._end_month

    @end_month.setter
    def end_month(self, end_month):
        """Sets the end_month of this AddOrUpdateExperienceRequestExperience.

        The ending month of the candidate's employment, if applicable.  # noqa: E501

        :param end_month: The end_month of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: int
        """

        self._end_month = end_month

    @property
    def end_year(self):
        """Gets the end_year of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The ending year of the candidate's employment, if applicable.  # noqa: E501

        :return: The end_year of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: int
        """
        return self._end_year

    @end_year.setter
    def end_year(self, end_year):
        """Sets the end_year of this AddOrUpdateExperienceRequestExperience.

        The ending year of the candidate's employment, if applicable.  # noqa: E501

        :param end_year: The end_year of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: int
        """

        self._end_year = end_year

    @property
    def industry(self):
        """Gets the industry of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The industry or sector associated with the candidate's experience.  # noqa: E501

        :return: The industry of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this AddOrUpdateExperienceRequestExperience.

        The industry or sector associated with the candidate's experience.  # noqa: E501

        :param industry: The industry of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def type(self):
        """Gets the type of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The type of experience (e.g., 'Full-time', 'Part-time').  # noqa: E501

        :return: The type of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AddOrUpdateExperienceRequestExperience.

        The type of experience (e.g., 'Full-time', 'Part-time').  # noqa: E501

        :param type: The type of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def designation(self):
        """Gets the designation of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The designation or role associated with the candidate's experience.  # noqa: E501

        :return: The designation of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this AddOrUpdateExperienceRequestExperience.

        The designation or role associated with the candidate's experience.  # noqa: E501

        :param designation: The designation of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: str
        """

        self._designation = designation

    @property
    def role(self):
        """Gets the role of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The specific role or function performed by the candidate.  # noqa: E501

        :return: The role of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AddOrUpdateExperienceRequestExperience.

        The specific role or function performed by the candidate.  # noqa: E501

        :param role: The role of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def job_location(self):
        """Gets the job_location of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The location of the job or work associated with the experience.  # noqa: E501

        :return: The job_location of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: str
        """
        return self._job_location

    @job_location.setter
    def job_location(self, job_location):
        """Sets the job_location of this AddOrUpdateExperienceRequestExperience.

        The location of the job or work associated with the experience.  # noqa: E501

        :param job_location: The job_location of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: str
        """

        self._job_location = job_location

    @property
    def country(self):
        """Gets the country of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The country where the candidate gained experience.  # noqa: E501

        :return: The country of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddOrUpdateExperienceRequestExperience.

        The country where the candidate gained experience.  # noqa: E501

        :param country: The country of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def state(self):
        """Gets the state of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The state or region where the candidate gained experience.  # noqa: E501

        :return: The state of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddOrUpdateExperienceRequestExperience.

        The state or region where the candidate gained experience.  # noqa: E501

        :param state: The state of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def city(self):
        """Gets the city of this AddOrUpdateExperienceRequestExperience.  # noqa: E501

        The city where the candidate gained experience.  # noqa: E501

        :return: The city of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddOrUpdateExperienceRequestExperience.

        The city where the candidate gained experience.  # noqa: E501

        :param city: The city of this AddOrUpdateExperienceRequestExperience.  # noqa: E501
        :type: str
        """

        self._city = city

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddOrUpdateExperienceRequestExperience, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOrUpdateExperienceRequestExperience):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
