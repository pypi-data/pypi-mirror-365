# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class UpdateCertificationRequestCertifications(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certification_number': 'str',
        'name': 'str',
        'institute': 'str',
        'description': 'str',
        'state': 'str',
        'issued_date': 'UpdateCertificationRequestIssuedDate',
        'expiry_date': 'UpdateCertificationRequestExpiryDate'
    }

    attribute_map = {
        'certification_number': 'certificationNumber',
        'name': 'name',
        'institute': 'institute',
        'description': 'description',
        'state': 'state',
        'issued_date': 'issuedDate',
        'expiry_date': 'expiryDate'
    }

    def __init__(self, certification_number=None, name=None, institute=None, description=None, state=None, issued_date=None, expiry_date=None):  # noqa: E501
        """UpdateCertificationRequestCertifications - a model defined in Swagger"""  # noqa: E501
        self._certification_number = None
        self._name = None
        self._institute = None
        self._description = None
        self._state = None
        self._issued_date = None
        self._expiry_date = None
        self.discriminator = None
        if certification_number is not None:
            self.certification_number = certification_number
        if name is not None:
            self.name = name
        if institute is not None:
            self.institute = institute
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        if issued_date is not None:
            self.issued_date = issued_date
        if expiry_date is not None:
            self.expiry_date = expiry_date

    @property
    def certification_number(self):
        """Gets the certification_number of this UpdateCertificationRequestCertifications.  # noqa: E501

        Unique identifier or number associated with the certification.  # noqa: E501

        :return: The certification_number of this UpdateCertificationRequestCertifications.  # noqa: E501
        :rtype: str
        """
        return self._certification_number

    @certification_number.setter
    def certification_number(self, certification_number):
        """Sets the certification_number of this UpdateCertificationRequestCertifications.

        Unique identifier or number associated with the certification.  # noqa: E501

        :param certification_number: The certification_number of this UpdateCertificationRequestCertifications.  # noqa: E501
        :type: str
        """

        self._certification_number = certification_number

    @property
    def name(self):
        """Gets the name of this UpdateCertificationRequestCertifications.  # noqa: E501

        Name or title of the certification.  # noqa: E501

        :return: The name of this UpdateCertificationRequestCertifications.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateCertificationRequestCertifications.

        Name or title of the certification.  # noqa: E501

        :param name: The name of this UpdateCertificationRequestCertifications.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def institute(self):
        """Gets the institute of this UpdateCertificationRequestCertifications.  # noqa: E501

        Institute or organization that issued the certification.  # noqa: E501

        :return: The institute of this UpdateCertificationRequestCertifications.  # noqa: E501
        :rtype: str
        """
        return self._institute

    @institute.setter
    def institute(self, institute):
        """Sets the institute of this UpdateCertificationRequestCertifications.

        Institute or organization that issued the certification.  # noqa: E501

        :param institute: The institute of this UpdateCertificationRequestCertifications.  # noqa: E501
        :type: str
        """

        self._institute = institute

    @property
    def description(self):
        """Gets the description of this UpdateCertificationRequestCertifications.  # noqa: E501

        Description or details of the certification.  # noqa: E501

        :return: The description of this UpdateCertificationRequestCertifications.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateCertificationRequestCertifications.

        Description or details of the certification.  # noqa: E501

        :param description: The description of this UpdateCertificationRequestCertifications.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this UpdateCertificationRequestCertifications.  # noqa: E501

        State or location where the certification was issued.  # noqa: E501

        :return: The state of this UpdateCertificationRequestCertifications.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UpdateCertificationRequestCertifications.

        State or location where the certification was issued.  # noqa: E501

        :param state: The state of this UpdateCertificationRequestCertifications.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def issued_date(self):
        """Gets the issued_date of this UpdateCertificationRequestCertifications.  # noqa: E501


        :return: The issued_date of this UpdateCertificationRequestCertifications.  # noqa: E501
        :rtype: UpdateCertificationRequestIssuedDate
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this UpdateCertificationRequestCertifications.


        :param issued_date: The issued_date of this UpdateCertificationRequestCertifications.  # noqa: E501
        :type: UpdateCertificationRequestIssuedDate
        """

        self._issued_date = issued_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this UpdateCertificationRequestCertifications.  # noqa: E501


        :return: The expiry_date of this UpdateCertificationRequestCertifications.  # noqa: E501
        :rtype: UpdateCertificationRequestExpiryDate
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this UpdateCertificationRequestCertifications.


        :param expiry_date: The expiry_date of this UpdateCertificationRequestCertifications.  # noqa: E501
        :type: UpdateCertificationRequestExpiryDate
        """

        self._expiry_date = expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateCertificationRequestCertifications, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCertificationRequestCertifications):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
