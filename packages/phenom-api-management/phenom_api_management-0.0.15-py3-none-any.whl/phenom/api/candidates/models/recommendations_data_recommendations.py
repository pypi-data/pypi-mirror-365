# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class RecommendationsDataRecommendations(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'text': 'str',
        'type': 'str',
        'relation': 'str',
        'priority': 'str'
    }

    attribute_map = {
        'field_id': 'fieldID',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'text': 'text',
        'type': 'type',
        'relation': 'relation',
        'priority': 'priority'
    }

    def __init__(self, field_id=None, first_name=None, last_name=None, text=None, type=None, relation=None, priority=None):  # noqa: E501
        """RecommendationsDataRecommendations - a model defined in Swagger"""  # noqa: E501
        self._field_id = None
        self._first_name = None
        self._last_name = None
        self._text = None
        self._type = None
        self._relation = None
        self._priority = None
        self.discriminator = None
        if field_id is not None:
            self.field_id = field_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if text is not None:
            self.text = text
        if type is not None:
            self.type = type
        if relation is not None:
            self.relation = relation
        if priority is not None:
            self.priority = priority

    @property
    def field_id(self):
        """Gets the field_id of this RecommendationsDataRecommendations.  # noqa: E501

        Unique identifier for the recommendation field.  # noqa: E501

        :return: The field_id of this RecommendationsDataRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this RecommendationsDataRecommendations.

        Unique identifier for the recommendation field.  # noqa: E501

        :param field_id: The field_id of this RecommendationsDataRecommendations.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    @property
    def first_name(self):
        """Gets the first_name of this RecommendationsDataRecommendations.  # noqa: E501

        First name of the person providing the recommendation.  # noqa: E501

        :return: The first_name of this RecommendationsDataRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this RecommendationsDataRecommendations.

        First name of the person providing the recommendation.  # noqa: E501

        :param first_name: The first_name of this RecommendationsDataRecommendations.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this RecommendationsDataRecommendations.  # noqa: E501

        Last name of the person providing the recommendation.  # noqa: E501

        :return: The last_name of this RecommendationsDataRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this RecommendationsDataRecommendations.

        Last name of the person providing the recommendation.  # noqa: E501

        :param last_name: The last_name of this RecommendationsDataRecommendations.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def text(self):
        """Gets the text of this RecommendationsDataRecommendations.  # noqa: E501

        Text or content of the recommendation.  # noqa: E501

        :return: The text of this RecommendationsDataRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this RecommendationsDataRecommendations.

        Text or content of the recommendation.  # noqa: E501

        :param text: The text of this RecommendationsDataRecommendations.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this RecommendationsDataRecommendations.  # noqa: E501

        Type or category of the recommendation.  # noqa: E501

        :return: The type of this RecommendationsDataRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecommendationsDataRecommendations.

        Type or category of the recommendation.  # noqa: E501

        :param type: The type of this RecommendationsDataRecommendations.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def relation(self):
        """Gets the relation of this RecommendationsDataRecommendations.  # noqa: E501

        Relationship of the person providing the recommendation to the candidate.  # noqa: E501

        :return: The relation of this RecommendationsDataRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this RecommendationsDataRecommendations.

        Relationship of the person providing the recommendation to the candidate.  # noqa: E501

        :param relation: The relation of this RecommendationsDataRecommendations.  # noqa: E501
        :type: str
        """

        self._relation = relation

    @property
    def priority(self):
        """Gets the priority of this RecommendationsDataRecommendations.  # noqa: E501

        Priority of the recommendation.  # noqa: E501

        :return: The priority of this RecommendationsDataRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this RecommendationsDataRecommendations.

        Priority of the recommendation.  # noqa: E501

        :param priority: The priority of this RecommendationsDataRecommendations.  # noqa: E501
        :type: str
        """

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecommendationsDataRecommendations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommendationsDataRecommendations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
