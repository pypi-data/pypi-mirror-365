# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class UpdateAwardsRequestAwards(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'awarded_on': 'UpdateAwardsRequestAwardedOn',
        'title': 'str',
        'description': 'str'
    }

    attribute_map = {
        'awarded_on': 'awardedOn',
        'title': 'title',
        'description': 'description'
    }

    def __init__(self, awarded_on=None, title=None, description=None):  # noqa: E501
        """UpdateAwardsRequestAwards - a model defined in Swagger"""  # noqa: E501
        self._awarded_on = None
        self._title = None
        self._description = None
        self.discriminator = None
        if awarded_on is not None:
            self.awarded_on = awarded_on
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description

    @property
    def awarded_on(self):
        """Gets the awarded_on of this UpdateAwardsRequestAwards.  # noqa: E501


        :return: The awarded_on of this UpdateAwardsRequestAwards.  # noqa: E501
        :rtype: UpdateAwardsRequestAwardedOn
        """
        return self._awarded_on

    @awarded_on.setter
    def awarded_on(self, awarded_on):
        """Sets the awarded_on of this UpdateAwardsRequestAwards.


        :param awarded_on: The awarded_on of this UpdateAwardsRequestAwards.  # noqa: E501
        :type: UpdateAwardsRequestAwardedOn
        """

        self._awarded_on = awarded_on

    @property
    def title(self):
        """Gets the title of this UpdateAwardsRequestAwards.  # noqa: E501

        Title of the award.  # noqa: E501

        :return: The title of this UpdateAwardsRequestAwards.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UpdateAwardsRequestAwards.

        Title of the award.  # noqa: E501

        :param title: The title of this UpdateAwardsRequestAwards.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this UpdateAwardsRequestAwards.  # noqa: E501

        Description or details of the award.  # noqa: E501

        :return: The description of this UpdateAwardsRequestAwards.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAwardsRequestAwards.

        Description or details of the award.  # noqa: E501

        :param description: The description of this UpdateAwardsRequestAwards.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateAwardsRequestAwards, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAwardsRequestAwards):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
