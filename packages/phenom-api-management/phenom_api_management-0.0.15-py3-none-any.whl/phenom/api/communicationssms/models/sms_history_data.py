# coding: utf-8

"""
    communications-sms

    These APIs ensures an easy integration process of SMS management for developers to send, read, and track SMS histories within applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class SMSHistoryData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_date': 'int',
        'updated_date': 'int',
        'no_of_messages': 'int',
        'target': 'str',
        'user_id': 'str',
        'recruiter_user_id': 'str',
        'candidate_phone': 'str',
        'candidate_standard_phone': 'str',
        'recruiter_phone': 'str',
        'message': 'str',
        'is_read': 'bool',
        'parent': 'str',
        'time_stamp': 'int'
    }

    attribute_map = {
        'created_date': 'createdDate',
        'updated_date': 'updatedDate',
        'no_of_messages': 'noOfMessages',
        'target': 'target',
        'user_id': 'userId',
        'recruiter_user_id': 'recruiterUserId',
        'candidate_phone': 'candidatePhone',
        'candidate_standard_phone': 'candidateStandardPhone',
        'recruiter_phone': 'recruiterPhone',
        'message': 'message',
        'is_read': 'isRead',
        'parent': 'parent',
        'time_stamp': 'timeStamp'
    }

    def __init__(self, created_date=None, updated_date=None, no_of_messages=None, target=None, user_id=None, recruiter_user_id=None, candidate_phone=None, candidate_standard_phone=None, recruiter_phone=None, message=None, is_read=None, parent=None, time_stamp=None):  # noqa: E501
        """SMSHistoryData - a model defined in Swagger"""  # noqa: E501
        self._created_date = None
        self._updated_date = None
        self._no_of_messages = None
        self._target = None
        self._user_id = None
        self._recruiter_user_id = None
        self._candidate_phone = None
        self._candidate_standard_phone = None
        self._recruiter_phone = None
        self._message = None
        self._is_read = None
        self._parent = None
        self._time_stamp = None
        self.discriminator = None
        self.created_date = created_date
        self.updated_date = updated_date
        self.no_of_messages = no_of_messages
        self.target = target
        self.user_id = user_id
        self.recruiter_user_id = recruiter_user_id
        self.candidate_phone = candidate_phone
        self.candidate_standard_phone = candidate_standard_phone
        self.recruiter_phone = recruiter_phone
        self.message = message
        self.is_read = is_read
        self.parent = parent
        self.time_stamp = time_stamp

    @property
    def created_date(self):
        """Gets the created_date of this SMSHistoryData.  # noqa: E501

        Timestamp when the SMS history entry was created.  # noqa: E501

        :return: The created_date of this SMSHistoryData.  # noqa: E501
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this SMSHistoryData.

        Timestamp when the SMS history entry was created.  # noqa: E501

        :param created_date: The created_date of this SMSHistoryData.  # noqa: E501
        :type: int
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def updated_date(self):
        """Gets the updated_date of this SMSHistoryData.  # noqa: E501

        Timestamp when the SMS history entry was last updated.  # noqa: E501

        :return: The updated_date of this SMSHistoryData.  # noqa: E501
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this SMSHistoryData.

        Timestamp when the SMS history entry was last updated.  # noqa: E501

        :param updated_date: The updated_date of this SMSHistoryData.  # noqa: E501
        :type: int
        """
        if updated_date is None:
            raise ValueError("Invalid value for `updated_date`, must not be `None`")  # noqa: E501

        self._updated_date = updated_date

    @property
    def no_of_messages(self):
        """Gets the no_of_messages of this SMSHistoryData.  # noqa: E501

        Number of messages in the SMS history .  # noqa: E501

        :return: The no_of_messages of this SMSHistoryData.  # noqa: E501
        :rtype: int
        """
        return self._no_of_messages

    @no_of_messages.setter
    def no_of_messages(self, no_of_messages):
        """Sets the no_of_messages of this SMSHistoryData.

        Number of messages in the SMS history .  # noqa: E501

        :param no_of_messages: The no_of_messages of this SMSHistoryData.  # noqa: E501
        :type: int
        """
        if no_of_messages is None:
            raise ValueError("Invalid value for `no_of_messages`, must not be `None`")  # noqa: E501

        self._no_of_messages = no_of_messages

    @property
    def target(self):
        """Gets the target of this SMSHistoryData.  # noqa: E501

        The target of the SMS history.  # noqa: E501

        :return: The target of this SMSHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this SMSHistoryData.

        The target of the SMS history.  # noqa: E501

        :param target: The target of this SMSHistoryData.  # noqa: E501
        :type: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def user_id(self):
        """Gets the user_id of this SMSHistoryData.  # noqa: E501

        User ID associated with the SMS history .  # noqa: E501

        :return: The user_id of this SMSHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SMSHistoryData.

        User ID associated with the SMS history .  # noqa: E501

        :param user_id: The user_id of this SMSHistoryData.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def recruiter_user_id(self):
        """Gets the recruiter_user_id of this SMSHistoryData.  # noqa: E501

        Recruiter user ID associated with the SMS history .  # noqa: E501

        :return: The recruiter_user_id of this SMSHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_user_id

    @recruiter_user_id.setter
    def recruiter_user_id(self, recruiter_user_id):
        """Sets the recruiter_user_id of this SMSHistoryData.

        Recruiter user ID associated with the SMS history .  # noqa: E501

        :param recruiter_user_id: The recruiter_user_id of this SMSHistoryData.  # noqa: E501
        :type: str
        """
        if recruiter_user_id is None:
            raise ValueError("Invalid value for `recruiter_user_id`, must not be `None`")  # noqa: E501

        self._recruiter_user_id = recruiter_user_id

    @property
    def candidate_phone(self):
        """Gets the candidate_phone of this SMSHistoryData.  # noqa: E501

        Phone number of the candidate associated with the SMS history .  # noqa: E501

        :return: The candidate_phone of this SMSHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._candidate_phone

    @candidate_phone.setter
    def candidate_phone(self, candidate_phone):
        """Sets the candidate_phone of this SMSHistoryData.

        Phone number of the candidate associated with the SMS history .  # noqa: E501

        :param candidate_phone: The candidate_phone of this SMSHistoryData.  # noqa: E501
        :type: str
        """
        if candidate_phone is None:
            raise ValueError("Invalid value for `candidate_phone`, must not be `None`")  # noqa: E501

        self._candidate_phone = candidate_phone

    @property
    def candidate_standard_phone(self):
        """Gets the candidate_standard_phone of this SMSHistoryData.  # noqa: E501

        Standardized phone number of the candidate.  # noqa: E501

        :return: The candidate_standard_phone of this SMSHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._candidate_standard_phone

    @candidate_standard_phone.setter
    def candidate_standard_phone(self, candidate_standard_phone):
        """Sets the candidate_standard_phone of this SMSHistoryData.

        Standardized phone number of the candidate.  # noqa: E501

        :param candidate_standard_phone: The candidate_standard_phone of this SMSHistoryData.  # noqa: E501
        :type: str
        """
        if candidate_standard_phone is None:
            raise ValueError("Invalid value for `candidate_standard_phone`, must not be `None`")  # noqa: E501

        self._candidate_standard_phone = candidate_standard_phone

    @property
    def recruiter_phone(self):
        """Gets the recruiter_phone of this SMSHistoryData.  # noqa: E501

        Phone number of the recruiter associated with the SMS history.  # noqa: E501

        :return: The recruiter_phone of this SMSHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_phone

    @recruiter_phone.setter
    def recruiter_phone(self, recruiter_phone):
        """Sets the recruiter_phone of this SMSHistoryData.

        Phone number of the recruiter associated with the SMS history.  # noqa: E501

        :param recruiter_phone: The recruiter_phone of this SMSHistoryData.  # noqa: E501
        :type: str
        """
        if recruiter_phone is None:
            raise ValueError("Invalid value for `recruiter_phone`, must not be `None`")  # noqa: E501

        self._recruiter_phone = recruiter_phone

    @property
    def message(self):
        """Gets the message of this SMSHistoryData.  # noqa: E501

        Content of the SMS message in the history.  # noqa: E501

        :return: The message of this SMSHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SMSHistoryData.

        Content of the SMS message in the history.  # noqa: E501

        :param message: The message of this SMSHistoryData.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def is_read(self):
        """Gets the is_read of this SMSHistoryData.  # noqa: E501

        Indicates whether the SMS history  has been read.  # noqa: E501

        :return: The is_read of this SMSHistoryData.  # noqa: E501
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this SMSHistoryData.

        Indicates whether the SMS history  has been read.  # noqa: E501

        :param is_read: The is_read of this SMSHistoryData.  # noqa: E501
        :type: bool
        """
        if is_read is None:
            raise ValueError("Invalid value for `is_read`, must not be `None`")  # noqa: E501

        self._is_read = is_read

    @property
    def parent(self):
        """Gets the parent of this SMSHistoryData.  # noqa: E501

        Parent identifier associated with the SMS history.  # noqa: E501

        :return: The parent of this SMSHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this SMSHistoryData.

        Parent identifier associated with the SMS history.  # noqa: E501

        :param parent: The parent of this SMSHistoryData.  # noqa: E501
        :type: str
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")  # noqa: E501

        self._parent = parent

    @property
    def time_stamp(self):
        """Gets the time_stamp of this SMSHistoryData.  # noqa: E501

        Timestamp associated with the SMS history.  # noqa: E501

        :return: The time_stamp of this SMSHistoryData.  # noqa: E501
        :rtype: int
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this SMSHistoryData.

        Timestamp associated with the SMS history.  # noqa: E501

        :param time_stamp: The time_stamp of this SMSHistoryData.  # noqa: E501
        :type: int
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501

        self._time_stamp = time_stamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SMSHistoryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SMSHistoryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
