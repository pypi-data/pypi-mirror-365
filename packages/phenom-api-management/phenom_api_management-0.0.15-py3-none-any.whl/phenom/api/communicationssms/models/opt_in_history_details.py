# coding: utf-8

"""
    communications-sms

    These APIs ensures an easy integration process of SMS management for developers to send, read, and track SMS histories within applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class OptInHistoryDetails(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'list[OptInHistoryDetailsContent]',
        'pageable': 'OptInHistoryDetailsPageable',
        'last': 'bool',
        'total_elements': 'int',
        'total_pages': 'int',
        'first': 'bool',
        'size': 'int',
        'number': 'int',
        'sort': 'OptInHistoryDetailsSort',
        'number_of_elements': 'int',
        'empty': 'bool'
    }

    attribute_map = {
        'content': 'content',
        'pageable': 'pageable',
        'last': 'last',
        'total_elements': 'totalElements',
        'total_pages': 'totalPages',
        'first': 'first',
        'size': 'size',
        'number': 'number',
        'sort': 'sort',
        'number_of_elements': 'numberOfElements',
        'empty': 'empty'
    }

    def __init__(self, content=None, pageable=None, last=None, total_elements=None, total_pages=None, first=None, size=None, number=None, sort=None, number_of_elements=None, empty=None):  # noqa: E501
        """OptInHistoryDetails - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._pageable = None
        self._last = None
        self._total_elements = None
        self._total_pages = None
        self._first = None
        self._size = None
        self._number = None
        self._sort = None
        self._number_of_elements = None
        self._empty = None
        self.discriminator = None
        self.content = content
        self.pageable = pageable
        self.last = last
        self.total_elements = total_elements
        self.total_pages = total_pages
        self.first = first
        self.size = size
        self.number = number
        self.sort = sort
        self.number_of_elements = number_of_elements
        self.empty = empty

    @property
    def content(self):
        """Gets the content of this OptInHistoryDetails.  # noqa: E501

        Content in OptIn history.  # noqa: E501

        :return: The content of this OptInHistoryDetails.  # noqa: E501
        :rtype: list[OptInHistoryDetailsContent]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this OptInHistoryDetails.

        Content in OptIn history.  # noqa: E501

        :param content: The content of this OptInHistoryDetails.  # noqa: E501
        :type: list[OptInHistoryDetailsContent]
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def pageable(self):
        """Gets the pageable of this OptInHistoryDetails.  # noqa: E501


        :return: The pageable of this OptInHistoryDetails.  # noqa: E501
        :rtype: OptInHistoryDetailsPageable
        """
        return self._pageable

    @pageable.setter
    def pageable(self, pageable):
        """Sets the pageable of this OptInHistoryDetails.


        :param pageable: The pageable of this OptInHistoryDetails.  # noqa: E501
        :type: OptInHistoryDetailsPageable
        """
        if pageable is None:
            raise ValueError("Invalid value for `pageable`, must not be `None`")  # noqa: E501

        self._pageable = pageable

    @property
    def last(self):
        """Gets the last of this OptInHistoryDetails.  # noqa: E501

        Indicates the last page.  # noqa: E501

        :return: The last of this OptInHistoryDetails.  # noqa: E501
        :rtype: bool
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this OptInHistoryDetails.

        Indicates the last page.  # noqa: E501

        :param last: The last of this OptInHistoryDetails.  # noqa: E501
        :type: bool
        """
        if last is None:
            raise ValueError("Invalid value for `last`, must not be `None`")  # noqa: E501

        self._last = last

    @property
    def total_elements(self):
        """Gets the total_elements of this OptInHistoryDetails.  # noqa: E501

        Total number of elements.  # noqa: E501

        :return: The total_elements of this OptInHistoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_elements

    @total_elements.setter
    def total_elements(self, total_elements):
        """Sets the total_elements of this OptInHistoryDetails.

        Total number of elements.  # noqa: E501

        :param total_elements: The total_elements of this OptInHistoryDetails.  # noqa: E501
        :type: int
        """
        if total_elements is None:
            raise ValueError("Invalid value for `total_elements`, must not be `None`")  # noqa: E501

        self._total_elements = total_elements

    @property
    def total_pages(self):
        """Gets the total_pages of this OptInHistoryDetails.  # noqa: E501

        Total number of pages.  # noqa: E501

        :return: The total_pages of this OptInHistoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this OptInHistoryDetails.

        Total number of pages.  # noqa: E501

        :param total_pages: The total_pages of this OptInHistoryDetails.  # noqa: E501
        :type: int
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")  # noqa: E501

        self._total_pages = total_pages

    @property
    def first(self):
        """Gets the first of this OptInHistoryDetails.  # noqa: E501

        Indicates the first page.  # noqa: E501

        :return: The first of this OptInHistoryDetails.  # noqa: E501
        :rtype: bool
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this OptInHistoryDetails.

        Indicates the first page.  # noqa: E501

        :param first: The first of this OptInHistoryDetails.  # noqa: E501
        :type: bool
        """
        if first is None:
            raise ValueError("Invalid value for `first`, must not be `None`")  # noqa: E501

        self._first = first

    @property
    def size(self):
        """Gets the size of this OptInHistoryDetails.  # noqa: E501

        The size of the content.  # noqa: E501

        :return: The size of this OptInHistoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this OptInHistoryDetails.

        The size of the content.  # noqa: E501

        :param size: The size of this OptInHistoryDetails.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def number(self):
        """Gets the number of this OptInHistoryDetails.  # noqa: E501

        The current page number.  # noqa: E501

        :return: The number of this OptInHistoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OptInHistoryDetails.

        The current page number.  # noqa: E501

        :param number: The number of this OptInHistoryDetails.  # noqa: E501
        :type: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def sort(self):
        """Gets the sort of this OptInHistoryDetails.  # noqa: E501


        :return: The sort of this OptInHistoryDetails.  # noqa: E501
        :rtype: OptInHistoryDetailsSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this OptInHistoryDetails.


        :param sort: The sort of this OptInHistoryDetails.  # noqa: E501
        :type: OptInHistoryDetailsSort
        """
        if sort is None:
            raise ValueError("Invalid value for `sort`, must not be `None`")  # noqa: E501

        self._sort = sort

    @property
    def number_of_elements(self):
        """Gets the number_of_elements of this OptInHistoryDetails.  # noqa: E501

        Number of elements in the current page.  # noqa: E501

        :return: The number_of_elements of this OptInHistoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._number_of_elements

    @number_of_elements.setter
    def number_of_elements(self, number_of_elements):
        """Sets the number_of_elements of this OptInHistoryDetails.

        Number of elements in the current page.  # noqa: E501

        :param number_of_elements: The number_of_elements of this OptInHistoryDetails.  # noqa: E501
        :type: int
        """
        if number_of_elements is None:
            raise ValueError("Invalid value for `number_of_elements`, must not be `None`")  # noqa: E501

        self._number_of_elements = number_of_elements

    @property
    def empty(self):
        """Gets the empty of this OptInHistoryDetails.  # noqa: E501

        Indicates whether the content is empty.  # noqa: E501

        :return: The empty of this OptInHistoryDetails.  # noqa: E501
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this OptInHistoryDetails.

        Indicates whether the content is empty.  # noqa: E501

        :param empty: The empty of this OptInHistoryDetails.  # noqa: E501
        :type: bool
        """
        if empty is None:
            raise ValueError("Invalid value for `empty`, must not be `None`")  # noqa: E501

        self._empty = empty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptInHistoryDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptInHistoryDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
