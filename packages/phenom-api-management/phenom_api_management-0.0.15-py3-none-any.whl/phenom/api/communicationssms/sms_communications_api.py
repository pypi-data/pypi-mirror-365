# coding: utf-8

"""
    communications-sms

    These APIs ensures an easy integration process of SMS management for developers to send, read, and track SMS histories within applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phenom.commons.api_client import ApiClient


class SMSCommunicationsApi(object):
    base_path = "/communications/sms"  # your base path

    def __init__(self, token, gateway_url, apikey, api_client=None):
        if api_client is None:
            api_client = ApiClient(gateway_url + self.base_path, apikey, token)
        self.api_client = api_client

    def fetchsms_communications(self, phone_number, x_ph_userid, **kwargs):  # noqa: E501
        """Get SMS History  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetchsms_communications(phone_number, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone_number: (required)
        :param str x_ph_userid: (required)
        :param int offset:
        :param int limit:
        :return: SMSHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fetchsms_communications_with_http_info(phone_number, x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.fetchsms_communications_with_http_info(phone_number, x_ph_userid, **kwargs)  # noqa: E501
            return data

    def fetchsms_communications_with_http_info(self, phone_number, x_ph_userid, **kwargs):  # noqa: E501
        """Get SMS History  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetchsms_communications_with_http_info(phone_number, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone_number: (required)
        :param str x_ph_userid: (required)
        :param int offset:
        :param int limit:
        :return: SMSHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number', 'x_ph_userid', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetchsms_communications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params or
                params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `fetchsms_communications`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `fetchsms_communications`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'phone_number' in params:
            query_params.append(('phoneNumber', params['phone_number']))  # noqa: E501

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SMSHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_opt_in(self, x_ph_userid, **kwargs):  # noqa: E501
        """Get OptIn Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_opt_in(x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_userid: (required)
        :param str email:
        :param str phone_number:
        :return: OptInStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_opt_in_with_http_info(x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_opt_in_with_http_info(x_ph_userid, **kwargs)  # noqa: E501
            return data

    def get_opt_in_with_http_info(self, x_ph_userid, **kwargs):  # noqa: E501
        """Get OptIn Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_opt_in_with_http_info(x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_userid: (required)
        :param str email:
        :param str phone_number:
        :return: OptInStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ph_userid', 'email', 'phone_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_opt_in" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `get_opt_in`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'phone_number' in params:
            query_params.append(('phoneNumber', params['phone_number']))  # noqa: E501

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/optIn', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OptInStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_opt_in_history(self, phone_number, x_ph_userid, **kwargs):  # noqa: E501
        """Get OptIn History  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_opt_in_history(phone_number, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone_number: (required)
        :param str x_ph_userid: (required)
        :param int offset:
        :param int size:
        :param str communication_id:
        :return: OptInHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_opt_in_history_with_http_info(phone_number, x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_opt_in_history_with_http_info(phone_number, x_ph_userid, **kwargs)  # noqa: E501
            return data

    def get_opt_in_history_with_http_info(self, phone_number, x_ph_userid, **kwargs):  # noqa: E501
        """Get OptIn History  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_opt_in_history_with_http_info(phone_number, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone_number: (required)
        :param str x_ph_userid: (required)
        :param int offset:
        :param int size:
        :param str communication_id:
        :return: OptInHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number', 'x_ph_userid', 'offset', 'size', 'communication_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_opt_in_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params or
                params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `get_opt_in_history`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `get_opt_in_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'communication_id' in params:
            query_params.append(('communicationId', params['communication_id']))  # noqa: E501
        if 'phone_number' in params:
            query_params.append(('phoneNumber', params['phone_number']))  # noqa: E501

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/optIn/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OptInHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_sms(self, body, x_ph_userid, **kwargs):  # noqa: E501
        """Send SMS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_sms(body, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendSMSRequest body: (required)
        :param str x_ph_userid: (required)
        :return: SendSMS
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_sms_with_http_info(body, x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.send_sms_with_http_info(body, x_ph_userid, **kwargs)  # noqa: E501
            return data

    def send_sms_with_http_info(self, body, x_ph_userid, **kwargs):  # noqa: E501
        """Send SMS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_sms_with_http_info(body, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendSMSRequest body: (required)
        :param str x_ph_userid: (required)
        :return: SendSMS
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_sms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `send_sms`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `send_sms`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/send', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SendSMS',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sms_activity(self, activity_id, phone_number, x_ph_userid, **kwargs):  # noqa: E501
        """Get SMS Activity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sms_activity(activity_id, phone_number, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activity_id: (required)
        :param str phone_number: (required)
        :param str x_ph_userid: (required)
        :return: SMSActivity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sms_activity_with_http_info(activity_id, phone_number, x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.sms_activity_with_http_info(activity_id, phone_number, x_ph_userid, **kwargs)  # noqa: E501
            return data

    def sms_activity_with_http_info(self, activity_id, phone_number, x_ph_userid, **kwargs):  # noqa: E501
        """Get SMS Activity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sms_activity_with_http_info(activity_id, phone_number, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str activity_id: (required)
        :param str phone_number: (required)
        :param str x_ph_userid: (required)
        :return: SMSActivity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['activity_id', 'phone_number', 'x_ph_userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sms_activity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `sms_activity`")  # noqa: E501
        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params or
                params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `sms_activity`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `sms_activity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'activity_id' in params:
            query_params.append(('activityId', params['activity_id']))  # noqa: E501
        if 'phone_number' in params:
            query_params.append(('phoneNumber', params['phone_number']))  # noqa: E501

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/activity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SMSActivity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_opt_in(self, body, x_ph_userid, **kwargs):  # noqa: E501
        """Update OptIn Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_opt_in(body, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OptInRequest body: (required)
        :param str x_ph_userid: (required)
        :return: OptInResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_opt_in_with_http_info(body, x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_opt_in_with_http_info(body, x_ph_userid, **kwargs)  # noqa: E501
            return data

    def update_opt_in_with_http_info(self, body, x_ph_userid, **kwargs):  # noqa: E501
        """Update OptIn Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_opt_in_with_http_info(body, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OptInRequest body: (required)
        :param str x_ph_userid: (required)
        :return: OptInResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_opt_in" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_opt_in`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `update_opt_in`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/optIn', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OptInResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
