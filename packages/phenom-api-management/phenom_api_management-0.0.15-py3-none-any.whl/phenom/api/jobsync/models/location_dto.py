# coding: utf-8

"""
    jobsync-api

    Job Sync enables the user to manage jobs (view, create, update and delete jobs) in the Phenom database directly from the ATS, with the updates reflected on the career site.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: shravan.malla@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class LocationDTO(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'state': 'str',
        'country': 'str',
        'address': 'str',
        'postal_code': 'str'
    }

    attribute_map = {
        'city': 'city',
        'state': 'state',
        'country': 'country',
        'address': 'address',
        'postal_code': 'postalCode'
    }

    def __init__(self, city=None, state=None, country=None, address=None, postal_code=None):  # noqa: E501
        """LocationDTO - a model defined in Swagger"""  # noqa: E501
        self._city = None
        self._state = None
        self._country = None
        self._address = None
        self._postal_code = None
        self.discriminator = None
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if address is not None:
            self.address = address
        if postal_code is not None:
            self.postal_code = postal_code

    @property
    def city(self):
        """Gets the city of this LocationDTO.  # noqa: E501

        ATS job posting city name.  # noqa: E501

        :return: The city of this LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this LocationDTO.

        ATS job posting city name.  # noqa: E501

        :param city: The city of this LocationDTO.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this LocationDTO.  # noqa: E501

        ATS job posting state name.  # noqa: E501

        :return: The state of this LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LocationDTO.

        ATS job posting state name.  # noqa: E501

        :param state: The state of this LocationDTO.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this LocationDTO.  # noqa: E501

        ATS job posting country name.  # noqa: E501

        :return: The country of this LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this LocationDTO.

        ATS job posting country name.  # noqa: E501

        :param country: The country of this LocationDTO.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def address(self):
        """Gets the address of this LocationDTO.  # noqa: E501

        ATS job posting address.  # noqa: E501

        :return: The address of this LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LocationDTO.

        ATS job posting address.  # noqa: E501

        :param address: The address of this LocationDTO.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def postal_code(self):
        """Gets the postal_code of this LocationDTO.  # noqa: E501

        ATS job posting location zip code.  # noqa: E501

        :return: The postal_code of this LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this LocationDTO.

        ATS job posting location zip code.  # noqa: E501

        :param postal_code: The postal_code of this LocationDTO.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
