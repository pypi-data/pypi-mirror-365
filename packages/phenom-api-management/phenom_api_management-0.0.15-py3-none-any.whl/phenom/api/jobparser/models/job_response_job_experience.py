# coding: utf-8

"""
    job-parser-api

    The process of extracting important information from the raw job description is called Job Parsing. This information can include things like job titles, required skills, required experience, job duties, and qualifications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class JobResponseJobExperience(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_overall_exp': 'int',
        'max_overall_exp': 'int'
    }

    attribute_map = {
        'min_overall_exp': 'minOverallExp',
        'max_overall_exp': 'maxOverallExp'
    }

    def __init__(self, min_overall_exp=None, max_overall_exp=None):  # noqa: E501
        """JobResponseJobExperience - a model defined in Swagger"""  # noqa: E501
        self._min_overall_exp = None
        self._max_overall_exp = None
        self.discriminator = None
        if min_overall_exp is not None:
            self.min_overall_exp = min_overall_exp
        if max_overall_exp is not None:
            self.max_overall_exp = max_overall_exp

    @property
    def min_overall_exp(self):
        """Gets the min_overall_exp of this JobResponseJobExperience.  # noqa: E501

        Minimum experience required.  # noqa: E501

        :return: The min_overall_exp of this JobResponseJobExperience.  # noqa: E501
        :rtype: int
        """
        return self._min_overall_exp

    @min_overall_exp.setter
    def min_overall_exp(self, min_overall_exp):
        """Sets the min_overall_exp of this JobResponseJobExperience.

        Minimum experience required.  # noqa: E501

        :param min_overall_exp: The min_overall_exp of this JobResponseJobExperience.  # noqa: E501
        :type: int
        """

        self._min_overall_exp = min_overall_exp

    @property
    def max_overall_exp(self):
        """Gets the max_overall_exp of this JobResponseJobExperience.  # noqa: E501

        Maximum experience required.  # noqa: E501

        :return: The max_overall_exp of this JobResponseJobExperience.  # noqa: E501
        :rtype: int
        """
        return self._max_overall_exp

    @max_overall_exp.setter
    def max_overall_exp(self, max_overall_exp):
        """Sets the max_overall_exp of this JobResponseJobExperience.

        Maximum experience required.  # noqa: E501

        :param max_overall_exp: The max_overall_exp of this JobResponseJobExperience.  # noqa: E501
        :type: int
        """

        self._max_overall_exp = max_overall_exp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobResponseJobExperience, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobResponseJobExperience):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
