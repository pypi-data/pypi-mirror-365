# coding: utf-8

"""
    job-parser-api

    The process of extracting important information from the raw job description is called Job Parsing. This information can include things like job titles, required skills, required experience, job duties, and qualifications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class JobResponseSkillRanking(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'term': 'str',
        'score': 'float'
    }

    attribute_map = {
        'term': 'term',
        'score': 'score'
    }

    def __init__(self, term=None, score=None):  # noqa: E501
        """JobResponseSkillRanking - a model defined in Swagger"""  # noqa: E501
        self._term = None
        self._score = None
        self.discriminator = None
        if term is not None:
            self.term = term
        if score is not None:
            self.score = score

    @property
    def term(self):
        """Gets the term of this JobResponseSkillRanking.  # noqa: E501

        Extracted skill name.  # noqa: E501

        :return: The term of this JobResponseSkillRanking.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this JobResponseSkillRanking.

        Extracted skill name.  # noqa: E501

        :param term: The term of this JobResponseSkillRanking.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def score(self):
        """Gets the score of this JobResponseSkillRanking.  # noqa: E501

        Extracted skill importance score.  # noqa: E501

        :return: The score of this JobResponseSkillRanking.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this JobResponseSkillRanking.

        Extracted skill importance score.  # noqa: E501

        :param score: The score of this JobResponseSkillRanking.  # noqa: E501
        :type: float
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobResponseSkillRanking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobResponseSkillRanking):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
