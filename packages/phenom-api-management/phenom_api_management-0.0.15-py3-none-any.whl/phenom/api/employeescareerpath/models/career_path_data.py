# coding: utf-8

"""
    employees-api-careerpath

    The Employee upskill APIs are related to the career pathing that an employee can use them for upskilling in an organisation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CareerPathData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_profiles': 'list[PathItem]',
        'user_id': 'str',
        'path_id': 'str'
    }

    attribute_map = {
        'job_profiles': 'jobProfiles',
        'user_id': 'userId',
        'path_id': 'pathId'
    }

    def __init__(self, job_profiles=None, user_id='POS30003965', path_id='8168055'):  # noqa: E501
        """CareerPathData - a model defined in Swagger"""  # noqa: E501
        self._job_profiles = None
        self._user_id = None
        self._path_id = None
        self.discriminator = None
        if job_profiles is not None:
            self.job_profiles = job_profiles
        if user_id is not None:
            self.user_id = user_id
        if path_id is not None:
            self.path_id = path_id

    @property
    def job_profiles(self):
        """Gets the job_profiles of this CareerPathData.  # noqa: E501


        :return: The job_profiles of this CareerPathData.  # noqa: E501
        :rtype: list[PathItem]
        """
        return self._job_profiles

    @job_profiles.setter
    def job_profiles(self, job_profiles):
        """Sets the job_profiles of this CareerPathData.


        :param job_profiles: The job_profiles of this CareerPathData.  # noqa: E501
        :type: list[PathItem]
        """

        self._job_profiles = job_profiles

    @property
    def user_id(self):
        """Gets the user_id of this CareerPathData.  # noqa: E501

        UserId- unique field to identify the employee.  # noqa: E501

        :return: The user_id of this CareerPathData.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CareerPathData.

        UserId- unique field to identify the employee.  # noqa: E501

        :param user_id: The user_id of this CareerPathData.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def path_id(self):
        """Gets the path_id of this CareerPathData.  # noqa: E501

        Path Id - unique field to identify the careerPath of the employee.  # noqa: E501

        :return: The path_id of this CareerPathData.  # noqa: E501
        :rtype: str
        """
        return self._path_id

    @path_id.setter
    def path_id(self, path_id):
        """Sets the path_id of this CareerPathData.

        Path Id - unique field to identify the careerPath of the employee.  # noqa: E501

        :param path_id: The path_id of this CareerPathData.  # noqa: E501
        :type: str
        """

        self._path_id = path_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CareerPathData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CareerPathData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
