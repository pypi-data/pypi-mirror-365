# coding: utf-8

"""
    resume-parser-api

    The Resume Parser extracts important information of a candidate such as candidate's name, contact information, email id, education, work experience, and skills, etc. from the resume using Deep learning models.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ResumeResponseDataResumedataWorkhistory(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'str',
        'title': 'str',
        'city': 'str',
        'state': 'str',
        'country': 'str',
        'startdate': 'str',
        'description': 'str',
        'enddate': 'str',
        'skill': 'list[str]'
    }

    attribute_map = {
        'company': 'company',
        'title': 'title',
        'city': 'city',
        'state': 'state',
        'country': 'country',
        'startdate': 'startdate',
        'description': 'description',
        'enddate': 'enddate',
        'skill': 'skill'
    }

    def __init__(self, company=None, title=None, city=None, state=None, country=None, startdate=None, description=None, enddate=None, skill=None):  # noqa: E501
        """ResumeResponseDataResumedataWorkhistory - a model defined in Swagger"""  # noqa: E501
        self._company = None
        self._title = None
        self._city = None
        self._state = None
        self._country = None
        self._startdate = None
        self._description = None
        self._enddate = None
        self._skill = None
        self.discriminator = None
        if company is not None:
            self.company = company
        if title is not None:
            self.title = title
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if startdate is not None:
            self.startdate = startdate
        if description is not None:
            self.description = description
        if enddate is not None:
            self.enddate = enddate
        if skill is not None:
            self.skill = skill

    @property
    def company(self):
        """Gets the company of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501

        Company name.  # noqa: E501

        :return: The company of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ResumeResponseDataResumedataWorkhistory.

        Company name.  # noqa: E501

        :param company: The company of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def title(self):
        """Gets the title of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501

        Title.  # noqa: E501

        :return: The title of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ResumeResponseDataResumedataWorkhistory.

        Title.  # noqa: E501

        :param title: The title of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def city(self):
        """Gets the city of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501

        City.  # noqa: E501

        :return: The city of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ResumeResponseDataResumedataWorkhistory.

        City.  # noqa: E501

        :param city: The city of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501

        State.  # noqa: E501

        :return: The state of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ResumeResponseDataResumedataWorkhistory.

        State.  # noqa: E501

        :param state: The state of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501

        Country.  # noqa: E501

        :return: The country of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ResumeResponseDataResumedataWorkhistory.

        Country.  # noqa: E501

        :param country: The country of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def startdate(self):
        """Gets the startdate of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501

        Start date  # noqa: E501

        :return: The startdate of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :rtype: str
        """
        return self._startdate

    @startdate.setter
    def startdate(self, startdate):
        """Sets the startdate of this ResumeResponseDataResumedataWorkhistory.

        Start date  # noqa: E501

        :param startdate: The startdate of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :type: str
        """

        self._startdate = startdate

    @property
    def description(self):
        """Gets the description of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501

        Experience description.  # noqa: E501

        :return: The description of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResumeResponseDataResumedataWorkhistory.

        Experience description.  # noqa: E501

        :param description: The description of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enddate(self):
        """Gets the enddate of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501

        End date.  # noqa: E501

        :return: The enddate of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :rtype: str
        """
        return self._enddate

    @enddate.setter
    def enddate(self, enddate):
        """Sets the enddate of this ResumeResponseDataResumedataWorkhistory.

        End date.  # noqa: E501

        :param enddate: The enddate of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :type: str
        """

        self._enddate = enddate

    @property
    def skill(self):
        """Gets the skill of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501

        Experience section skills.  # noqa: E501

        :return: The skill of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :rtype: list[str]
        """
        return self._skill

    @skill.setter
    def skill(self, skill):
        """Sets the skill of this ResumeResponseDataResumedataWorkhistory.

        Experience section skills.  # noqa: E501

        :param skill: The skill of this ResumeResponseDataResumedataWorkhistory.  # noqa: E501
        :type: list[str]
        """

        self._skill = skill

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResumeResponseDataResumedataWorkhistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResumeResponseDataResumedataWorkhistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
