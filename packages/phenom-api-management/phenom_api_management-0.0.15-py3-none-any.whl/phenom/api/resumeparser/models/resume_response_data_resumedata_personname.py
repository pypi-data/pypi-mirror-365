# coding: utf-8

"""
    resume-parser-api

    The Resume Parser extracts important information of a candidate such as candidate's name, contact information, email id, education, work experience, and skills, etc. from the resume using Deep learning models.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ResumeResponseDataResumedataPersonname(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fullname': 'str',
        'firstname': 'str',
        'middlename': 'str',
        'lastname': 'str'
    }

    attribute_map = {
        'fullname': 'fullname',
        'firstname': 'firstname',
        'middlename': 'middlename',
        'lastname': 'lastname'
    }

    def __init__(self, fullname=None, firstname=None, middlename=None, lastname=None):  # noqa: E501
        """ResumeResponseDataResumedataPersonname - a model defined in Swagger"""  # noqa: E501
        self._fullname = None
        self._firstname = None
        self._middlename = None
        self._lastname = None
        self.discriminator = None
        if fullname is not None:
            self.fullname = fullname
        if firstname is not None:
            self.firstname = firstname
        if middlename is not None:
            self.middlename = middlename
        if lastname is not None:
            self.lastname = lastname

    @property
    def fullname(self):
        """Gets the fullname of this ResumeResponseDataResumedataPersonname.  # noqa: E501

        Full name of Candidate.  # noqa: E501

        :return: The fullname of this ResumeResponseDataResumedataPersonname.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this ResumeResponseDataResumedataPersonname.

        Full name of Candidate.  # noqa: E501

        :param fullname: The fullname of this ResumeResponseDataResumedataPersonname.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def firstname(self):
        """Gets the firstname of this ResumeResponseDataResumedataPersonname.  # noqa: E501

        First name of Candidate.  # noqa: E501

        :return: The firstname of this ResumeResponseDataResumedataPersonname.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this ResumeResponseDataResumedataPersonname.

        First name of Candidate.  # noqa: E501

        :param firstname: The firstname of this ResumeResponseDataResumedataPersonname.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def middlename(self):
        """Gets the middlename of this ResumeResponseDataResumedataPersonname.  # noqa: E501

        Middle name of Candidate.  # noqa: E501

        :return: The middlename of this ResumeResponseDataResumedataPersonname.  # noqa: E501
        :rtype: str
        """
        return self._middlename

    @middlename.setter
    def middlename(self, middlename):
        """Sets the middlename of this ResumeResponseDataResumedataPersonname.

        Middle name of Candidate.  # noqa: E501

        :param middlename: The middlename of this ResumeResponseDataResumedataPersonname.  # noqa: E501
        :type: str
        """

        self._middlename = middlename

    @property
    def lastname(self):
        """Gets the lastname of this ResumeResponseDataResumedataPersonname.  # noqa: E501

        Last name of Candidate.  # noqa: E501

        :return: The lastname of this ResumeResponseDataResumedataPersonname.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this ResumeResponseDataResumedataPersonname.

        Last name of Candidate.  # noqa: E501

        :param lastname: The lastname of this ResumeResponseDataResumedataPersonname.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResumeResponseDataResumedataPersonname, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResumeResponseDataResumedataPersonname):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
