# coding: utf-8

"""
    resume-parser-api

    The Resume Parser extracts important information of a candidate such as candidate's name, contact information, email id, education, work experience, and skills, etc. from the resume using Deep learning models.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ResumeResponseDataResumedataSkilltaxonomy(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'skillname': 'str',
        'lastused': 'str',
        'monthsused': 'str',
        'availability': 'str'
    }

    attribute_map = {
        'skillname': 'skillname',
        'lastused': 'lastused',
        'monthsused': 'monthsused',
        'availability': 'availability'
    }

    def __init__(self, skillname=None, lastused=None, monthsused=None, availability=None):  # noqa: E501
        """ResumeResponseDataResumedataSkilltaxonomy - a model defined in Swagger"""  # noqa: E501
        self._skillname = None
        self._lastused = None
        self._monthsused = None
        self._availability = None
        self.discriminator = None
        if skillname is not None:
            self.skillname = skillname
        if lastused is not None:
            self.lastused = lastused
        if monthsused is not None:
            self.monthsused = monthsused
        if availability is not None:
            self.availability = availability

    @property
    def skillname(self):
        """Gets the skillname of this ResumeResponseDataResumedataSkilltaxonomy.  # noqa: E501

        Skill name.  # noqa: E501

        :return: The skillname of this ResumeResponseDataResumedataSkilltaxonomy.  # noqa: E501
        :rtype: str
        """
        return self._skillname

    @skillname.setter
    def skillname(self, skillname):
        """Sets the skillname of this ResumeResponseDataResumedataSkilltaxonomy.

        Skill name.  # noqa: E501

        :param skillname: The skillname of this ResumeResponseDataResumedataSkilltaxonomy.  # noqa: E501
        :type: str
        """

        self._skillname = skillname

    @property
    def lastused(self):
        """Gets the lastused of this ResumeResponseDataResumedataSkilltaxonomy.  # noqa: E501

        Last used.  # noqa: E501

        :return: The lastused of this ResumeResponseDataResumedataSkilltaxonomy.  # noqa: E501
        :rtype: str
        """
        return self._lastused

    @lastused.setter
    def lastused(self, lastused):
        """Sets the lastused of this ResumeResponseDataResumedataSkilltaxonomy.

        Last used.  # noqa: E501

        :param lastused: The lastused of this ResumeResponseDataResumedataSkilltaxonomy.  # noqa: E501
        :type: str
        """

        self._lastused = lastused

    @property
    def monthsused(self):
        """Gets the monthsused of this ResumeResponseDataResumedataSkilltaxonomy.  # noqa: E501

        Months used.  # noqa: E501

        :return: The monthsused of this ResumeResponseDataResumedataSkilltaxonomy.  # noqa: E501
        :rtype: str
        """
        return self._monthsused

    @monthsused.setter
    def monthsused(self, monthsused):
        """Sets the monthsused of this ResumeResponseDataResumedataSkilltaxonomy.

        Months used.  # noqa: E501

        :param monthsused: The monthsused of this ResumeResponseDataResumedataSkilltaxonomy.  # noqa: E501
        :type: str
        """

        self._monthsused = monthsused

    @property
    def availability(self):
        """Gets the availability of this ResumeResponseDataResumedataSkilltaxonomy.  # noqa: E501

        Availability.  # noqa: E501

        :return: The availability of this ResumeResponseDataResumedataSkilltaxonomy.  # noqa: E501
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this ResumeResponseDataResumedataSkilltaxonomy.

        Availability.  # noqa: E501

        :param availability: The availability of this ResumeResponseDataResumedataSkilltaxonomy.  # noqa: E501
        :type: str
        """

        self._availability = availability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResumeResponseDataResumedataSkilltaxonomy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResumeResponseDataResumedataSkilltaxonomy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
