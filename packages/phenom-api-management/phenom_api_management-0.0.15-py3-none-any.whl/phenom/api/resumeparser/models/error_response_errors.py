# coding: utf-8

"""
    resume-parser-api

    The Resume Parser extracts important information of a candidate such as candidate's name, contact information, email id, education, work experience, and skills, etc. from the resume using Deep learning models.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ErrorResponseErrors(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_api': 'str',
        'error_code': 'str',
        'time_stamp': 'str',
        'message': 'str',
        'message_key': 'str'
    }

    attribute_map = {
        'error_api': 'errorAPI',
        'error_code': 'errorCode',
        'time_stamp': 'timeStamp',
        'message': 'message',
        'message_key': 'messageKey'
    }

    def __init__(self, error_api=None, error_code=None, time_stamp=None, message=None, message_key=None):  # noqa: E501
        """ErrorResponseErrors - a model defined in Swagger"""  # noqa: E501
        self._error_api = None
        self._error_code = None
        self._time_stamp = None
        self._message = None
        self._message_key = None
        self.discriminator = None
        if error_api is not None:
            self.error_api = error_api
        if error_code is not None:
            self.error_code = error_code
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if message is not None:
            self.message = message
        if message_key is not None:
            self.message_key = message_key

    @property
    def error_api(self):
        """Gets the error_api of this ErrorResponseErrors.  # noqa: E501

        Status returned by the API.  # noqa: E501

        :return: The error_api of this ErrorResponseErrors.  # noqa: E501
        :rtype: str
        """
        return self._error_api

    @error_api.setter
    def error_api(self, error_api):
        """Sets the error_api of this ErrorResponseErrors.

        Status returned by the API.  # noqa: E501

        :param error_api: The error_api of this ErrorResponseErrors.  # noqa: E501
        :type: str
        """

        self._error_api = error_api

    @property
    def error_code(self):
        """Gets the error_code of this ErrorResponseErrors.  # noqa: E501

        ErrorCode by the API.  # noqa: E501

        :return: The error_code of this ErrorResponseErrors.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ErrorResponseErrors.

        ErrorCode by the API.  # noqa: E501

        :param error_code: The error_code of this ErrorResponseErrors.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ErrorResponseErrors.  # noqa: E501

        TimeStamp.  # noqa: E501

        :return: The time_stamp of this ErrorResponseErrors.  # noqa: E501
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ErrorResponseErrors.

        TimeStamp.  # noqa: E501

        :param time_stamp: The time_stamp of this ErrorResponseErrors.  # noqa: E501
        :type: str
        """

        self._time_stamp = time_stamp

    @property
    def message(self):
        """Gets the message of this ErrorResponseErrors.  # noqa: E501

        Error message.  # noqa: E501

        :return: The message of this ErrorResponseErrors.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorResponseErrors.

        Error message.  # noqa: E501

        :param message: The message of this ErrorResponseErrors.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def message_key(self):
        """Gets the message_key of this ErrorResponseErrors.  # noqa: E501

        Error message key.  # noqa: E501

        :return: The message_key of this ErrorResponseErrors.  # noqa: E501
        :rtype: str
        """
        return self._message_key

    @message_key.setter
    def message_key(self, message_key):
        """Sets the message_key of this ErrorResponseErrors.

        Error message key.  # noqa: E501

        :param message_key: The message_key of this ErrorResponseErrors.  # noqa: E501
        :type: str
        """

        self._message_key = message_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorResponseErrors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorResponseErrors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
