# coding: utf-8

"""
    resume-parser-api

    The Resume Parser extracts important information of a candidate such as candidate's name, contact information, email id, education, work experience, and skills, etc. from the resume using Deep learning models.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ResumeResponseDataResumedataMobile(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'str',
        'formattednumber': 'str'
    }

    attribute_map = {
        'number': 'number',
        'formattednumber': 'formattednumber'
    }

    def __init__(self, number=None, formattednumber=None):  # noqa: E501
        """ResumeResponseDataResumedataMobile - a model defined in Swagger"""  # noqa: E501
        self._number = None
        self._formattednumber = None
        self.discriminator = None
        if number is not None:
            self.number = number
        if formattednumber is not None:
            self.formattednumber = formattednumber

    @property
    def number(self):
        """Gets the number of this ResumeResponseDataResumedataMobile.  # noqa: E501

        Mobile number of Candidate.  # noqa: E501

        :return: The number of this ResumeResponseDataResumedataMobile.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ResumeResponseDataResumedataMobile.

        Mobile number of Candidate.  # noqa: E501

        :param number: The number of this ResumeResponseDataResumedataMobile.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def formattednumber(self):
        """Gets the formattednumber of this ResumeResponseDataResumedataMobile.  # noqa: E501

        Formatted number of Candidate.  # noqa: E501

        :return: The formattednumber of this ResumeResponseDataResumedataMobile.  # noqa: E501
        :rtype: str
        """
        return self._formattednumber

    @formattednumber.setter
    def formattednumber(self, formattednumber):
        """Sets the formattednumber of this ResumeResponseDataResumedataMobile.

        Formatted number of Candidate.  # noqa: E501

        :param formattednumber: The formattednumber of this ResumeResponseDataResumedataMobile.  # noqa: E501
        :type: str
        """

        self._formattednumber = formattednumber

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResumeResponseDataResumedataMobile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResumeResponseDataResumedataMobile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
