# coding: utf-8

"""
    aisourcing-api

    AI matching FitScore provides a concise assessment indicating how well a candidate aligns with a job based on their skills, experience, and qualifications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phenom.commons.api_client import ApiClient


class AIMatchingApi(object):
    base_path = "/ai-matching"  # your base path

    def __init__(self, token, gateway_url, apikey, api_client=None):
        if api_client is None:
            api_client = ApiClient(gateway_url + self.base_path, apikey, token)
        self.api_client = api_client

    def job_fitscore(self, body, **kwargs):  # noqa: E501
        """Job Fitscore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.job_fitscore(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FitScoreRequest body: (required)
        :return: FitscoreResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.job_fitscore_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.job_fitscore_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def job_fitscore_with_http_info(self, body, **kwargs):  # noqa: E501
        """Job Fitscore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.job_fitscore_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FitScoreRequest body: (required)
        :return: FitscoreResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_fitscore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `job_fitscore`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/job-fitscore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FitscoreResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skills_matching(self, x_ph_user_id, candidate_id, job_id, **kwargs):  # noqa: E501
        """Skills Matching  # noqa: E501

        This API provides details of matching skills between a job and candidate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skills_matching(x_ph_user_id, candidate_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_user_id: Phenom Recruiter ID. (required)
        :param str candidate_id: Candidate ID given by Phenom's CRM. (required)
        :param str job_id: ATS Job ID. (required)
        :return: SkillMatchingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skills_matching_with_http_info(x_ph_user_id, candidate_id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.skills_matching_with_http_info(x_ph_user_id, candidate_id, job_id, **kwargs)  # noqa: E501
            return data

    def skills_matching_with_http_info(self, x_ph_user_id, candidate_id, job_id, **kwargs):  # noqa: E501
        """Skills Matching  # noqa: E501

        This API provides details of matching skills between a job and candidate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skills_matching_with_http_info(x_ph_user_id, candidate_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_user_id: Phenom Recruiter ID. (required)
        :param str candidate_id: Candidate ID given by Phenom's CRM. (required)
        :param str job_id: ATS Job ID. (required)
        :return: SkillMatchingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ph_user_id', 'candidate_id', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skills_matching" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `skills_matching`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `skills_matching`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `skills_matching`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/jobs/{jobId}/matching-skills', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillMatchingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
