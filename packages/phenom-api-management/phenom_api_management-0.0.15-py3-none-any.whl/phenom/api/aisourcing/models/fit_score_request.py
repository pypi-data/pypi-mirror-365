# coding: utf-8

"""
    aisourcing-api

    AI matching FitScore provides a concise assessment indicating how well a candidate aligns with a job based on their skills, experience, and qualifications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class FitScoreRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'user_profile': 'UserProfileFitScore',
        'job_ids': 'list[str]'
    }

    attribute_map = {
        'user_id': 'userId',
        'user_profile': 'userProfile',
        'job_ids': 'jobIds'
    }

    def __init__(self, user_id=None, user_profile=None, job_ids=None):  # noqa: E501
        """FitScoreRequest - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._user_profile = None
        self._job_ids = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if user_profile is not None:
            self.user_profile = user_profile
        if job_ids is not None:
            self.job_ids = job_ids

    @property
    def user_id(self):
        """Gets the user_id of this FitScoreRequest.  # noqa: E501

        User id of a job.  # noqa: E501

        :return: The user_id of this FitScoreRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this FitScoreRequest.

        User id of a job.  # noqa: E501

        :param user_id: The user_id of this FitScoreRequest.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_profile(self):
        """Gets the user_profile of this FitScoreRequest.  # noqa: E501


        :return: The user_profile of this FitScoreRequest.  # noqa: E501
        :rtype: UserProfileFitScore
        """
        return self._user_profile

    @user_profile.setter
    def user_profile(self, user_profile):
        """Sets the user_profile of this FitScoreRequest.


        :param user_profile: The user_profile of this FitScoreRequest.  # noqa: E501
        :type: UserProfileFitScore
        """

        self._user_profile = user_profile

    @property
    def job_ids(self):
        """Gets the job_ids of this FitScoreRequest.  # noqa: E501

        Job ids to check fitscore.  # noqa: E501

        :return: The job_ids of this FitScoreRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._job_ids

    @job_ids.setter
    def job_ids(self, job_ids):
        """Sets the job_ids of this FitScoreRequest.

        Job ids to check fitscore.  # noqa: E501

        :param job_ids: The job_ids of this FitScoreRequest.  # noqa: E501
        :type: list[str]
        """

        self._job_ids = job_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FitScoreRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FitScoreRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
