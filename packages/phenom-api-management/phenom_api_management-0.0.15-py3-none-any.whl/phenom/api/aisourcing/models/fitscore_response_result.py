# coding: utf-8

"""
    aisourcing-api

    AI matching FitScore provides a concise assessment indicating how well a candidate aligns with a job based on their skills, experience, and qualifications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class FitscoreResponseResult(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'str',
        'fit_level': 'str',
        'title_fit': 'str',
        'skill_fit': 'str',
        'experience_fit': 'str',
        'location_fit': 'str',
        'skill_gap': 'FitscoreResponseSkillGap'
    }

    attribute_map = {
        'job_id': 'jobId',
        'fit_level': 'fitLevel',
        'title_fit': 'titleFit',
        'skill_fit': 'skillFit',
        'experience_fit': 'experienceFit',
        'location_fit': 'locationFit',
        'skill_gap': 'skillGap'
    }

    def __init__(self, job_id=None, fit_level=None, title_fit=None, skill_fit=None, experience_fit=None, location_fit=None, skill_gap=None):  # noqa: E501
        """FitscoreResponseResult - a model defined in Swagger"""  # noqa: E501
        self._job_id = None
        self._fit_level = None
        self._title_fit = None
        self._skill_fit = None
        self._experience_fit = None
        self._location_fit = None
        self._skill_gap = None
        self.discriminator = None
        if job_id is not None:
            self.job_id = job_id
        if fit_level is not None:
            self.fit_level = fit_level
        if title_fit is not None:
            self.title_fit = title_fit
        if skill_fit is not None:
            self.skill_fit = skill_fit
        if experience_fit is not None:
            self.experience_fit = experience_fit
        if location_fit is not None:
            self.location_fit = location_fit
        if skill_gap is not None:
            self.skill_gap = skill_gap

    @property
    def job_id(self):
        """Gets the job_id of this FitscoreResponseResult.  # noqa: E501

        Job Id for which fitscore is calculated.  # noqa: E501

        :return: The job_id of this FitscoreResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this FitscoreResponseResult.

        Job Id for which fitscore is calculated.  # noqa: E501

        :param job_id: The job_id of this FitscoreResponseResult.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def fit_level(self):
        """Gets the fit_level of this FitscoreResponseResult.  # noqa: E501

        Shows how well the user fits the job.  # noqa: E501

        :return: The fit_level of this FitscoreResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._fit_level

    @fit_level.setter
    def fit_level(self, fit_level):
        """Sets the fit_level of this FitscoreResponseResult.

        Shows how well the user fits the job.  # noqa: E501

        :param fit_level: The fit_level of this FitscoreResponseResult.  # noqa: E501
        :type: str
        """

        self._fit_level = fit_level

    @property
    def title_fit(self):
        """Gets the title_fit of this FitscoreResponseResult.  # noqa: E501

        Shows how well the user title fits the job.  # noqa: E501

        :return: The title_fit of this FitscoreResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._title_fit

    @title_fit.setter
    def title_fit(self, title_fit):
        """Sets the title_fit of this FitscoreResponseResult.

        Shows how well the user title fits the job.  # noqa: E501

        :param title_fit: The title_fit of this FitscoreResponseResult.  # noqa: E501
        :type: str
        """

        self._title_fit = title_fit

    @property
    def skill_fit(self):
        """Gets the skill_fit of this FitscoreResponseResult.  # noqa: E501

        Shows how well the user skills fits the job.  # noqa: E501

        :return: The skill_fit of this FitscoreResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._skill_fit

    @skill_fit.setter
    def skill_fit(self, skill_fit):
        """Sets the skill_fit of this FitscoreResponseResult.

        Shows how well the user skills fits the job.  # noqa: E501

        :param skill_fit: The skill_fit of this FitscoreResponseResult.  # noqa: E501
        :type: str
        """

        self._skill_fit = skill_fit

    @property
    def experience_fit(self):
        """Gets the experience_fit of this FitscoreResponseResult.  # noqa: E501

        Shows how well the user experience fits the job.  # noqa: E501

        :return: The experience_fit of this FitscoreResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._experience_fit

    @experience_fit.setter
    def experience_fit(self, experience_fit):
        """Sets the experience_fit of this FitscoreResponseResult.

        Shows how well the user experience fits the job.  # noqa: E501

        :param experience_fit: The experience_fit of this FitscoreResponseResult.  # noqa: E501
        :type: str
        """

        self._experience_fit = experience_fit

    @property
    def location_fit(self):
        """Gets the location_fit of this FitscoreResponseResult.  # noqa: E501

        Shows how well the user location fits the job.  # noqa: E501

        :return: The location_fit of this FitscoreResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._location_fit

    @location_fit.setter
    def location_fit(self, location_fit):
        """Sets the location_fit of this FitscoreResponseResult.

        Shows how well the user location fits the job.  # noqa: E501

        :param location_fit: The location_fit of this FitscoreResponseResult.  # noqa: E501
        :type: str
        """

        self._location_fit = location_fit

    @property
    def skill_gap(self):
        """Gets the skill_gap of this FitscoreResponseResult.  # noqa: E501


        :return: The skill_gap of this FitscoreResponseResult.  # noqa: E501
        :rtype: FitscoreResponseSkillGap
        """
        return self._skill_gap

    @skill_gap.setter
    def skill_gap(self, skill_gap):
        """Sets the skill_gap of this FitscoreResponseResult.


        :param skill_gap: The skill_gap of this FitscoreResponseResult.  # noqa: E501
        :type: FitscoreResponseSkillGap
        """

        self._skill_gap = skill_gap

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FitscoreResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FitscoreResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
