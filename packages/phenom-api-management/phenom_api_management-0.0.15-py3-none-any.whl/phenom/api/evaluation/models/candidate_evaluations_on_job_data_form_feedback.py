# coding: utf-8

"""
    evaluation-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateEvaluationsOnJobDataFormFeedback(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'login_user_name': 'str',
        'created_date': 'str',
        'rating': 'str',
        'recommendation': 'str'
    }

    attribute_map = {
        'login_user_name': 'loginUserName',
        'created_date': 'createdDate',
        'rating': 'rating',
        'recommendation': 'recommendation'
    }

    def __init__(self, login_user_name=None, created_date=None, rating=None, recommendation=None):  # noqa: E501
        """CandidateEvaluationsOnJobDataFormFeedback - a model defined in Swagger"""  # noqa: E501
        self._login_user_name = None
        self._created_date = None
        self._rating = None
        self._recommendation = None
        self.discriminator = None
        if login_user_name is not None:
            self.login_user_name = login_user_name
        if created_date is not None:
            self.created_date = created_date
        if rating is not None:
            self.rating = rating
        if recommendation is not None:
            self.recommendation = recommendation

    @property
    def login_user_name(self):
        """Gets the login_user_name of this CandidateEvaluationsOnJobDataFormFeedback.  # noqa: E501

        Evaluation given user name.  # noqa: E501

        :return: The login_user_name of this CandidateEvaluationsOnJobDataFormFeedback.  # noqa: E501
        :rtype: str
        """
        return self._login_user_name

    @login_user_name.setter
    def login_user_name(self, login_user_name):
        """Sets the login_user_name of this CandidateEvaluationsOnJobDataFormFeedback.

        Evaluation given user name.  # noqa: E501

        :param login_user_name: The login_user_name of this CandidateEvaluationsOnJobDataFormFeedback.  # noqa: E501
        :type: str
        """

        self._login_user_name = login_user_name

    @property
    def created_date(self):
        """Gets the created_date of this CandidateEvaluationsOnJobDataFormFeedback.  # noqa: E501

        Evaluation given date.  # noqa: E501

        :return: The created_date of this CandidateEvaluationsOnJobDataFormFeedback.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CandidateEvaluationsOnJobDataFormFeedback.

        Evaluation given date.  # noqa: E501

        :param created_date: The created_date of this CandidateEvaluationsOnJobDataFormFeedback.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def rating(self):
        """Gets the rating of this CandidateEvaluationsOnJobDataFormFeedback.  # noqa: E501

        Evaluation rating.  # noqa: E501

        :return: The rating of this CandidateEvaluationsOnJobDataFormFeedback.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this CandidateEvaluationsOnJobDataFormFeedback.

        Evaluation rating.  # noqa: E501

        :param rating: The rating of this CandidateEvaluationsOnJobDataFormFeedback.  # noqa: E501
        :type: str
        """

        self._rating = rating

    @property
    def recommendation(self):
        """Gets the recommendation of this CandidateEvaluationsOnJobDataFormFeedback.  # noqa: E501

        Evaluation recommendation.  # noqa: E501

        :return: The recommendation of this CandidateEvaluationsOnJobDataFormFeedback.  # noqa: E501
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this CandidateEvaluationsOnJobDataFormFeedback.

        Evaluation recommendation.  # noqa: E501

        :param recommendation: The recommendation of this CandidateEvaluationsOnJobDataFormFeedback.  # noqa: E501
        :type: str
        """

        self._recommendation = recommendation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateEvaluationsOnJobDataFormFeedback, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateEvaluationsOnJobDataFormFeedback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
