# coding: utf-8

"""
    evaluation-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateEvaluationsDataInformation(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reason': 'list[str]',
        'evaluated_by_email': 'str',
        'rating': 'str',
        'recommendation': 'str',
        'additional_questions': 'list[QuestionAndAnswers]',
        'updated_date': 'str',
        'source': 'str',
        'evaluated_by_name': 'str'
    }

    attribute_map = {
        'reason': 'reason',
        'evaluated_by_email': 'evaluatedByEmail',
        'rating': 'rating',
        'recommendation': 'recommendation',
        'additional_questions': 'additionalQuestions',
        'updated_date': 'updatedDate',
        'source': 'source',
        'evaluated_by_name': 'evaluatedByName'
    }

    def __init__(self, reason=None, evaluated_by_email=None, rating=None, recommendation=None, additional_questions=None, updated_date=None, source=None, evaluated_by_name=None):  # noqa: E501
        """CandidateEvaluationsDataInformation - a model defined in Swagger"""  # noqa: E501
        self._reason = None
        self._evaluated_by_email = None
        self._rating = None
        self._recommendation = None
        self._additional_questions = None
        self._updated_date = None
        self._source = None
        self._evaluated_by_name = None
        self.discriminator = None
        if reason is not None:
            self.reason = reason
        if evaluated_by_email is not None:
            self.evaluated_by_email = evaluated_by_email
        if rating is not None:
            self.rating = rating
        if recommendation is not None:
            self.recommendation = recommendation
        if additional_questions is not None:
            self.additional_questions = additional_questions
        if updated_date is not None:
            self.updated_date = updated_date
        if source is not None:
            self.source = source
        if evaluated_by_name is not None:
            self.evaluated_by_name = evaluated_by_name

    @property
    def reason(self):
        """Gets the reason of this CandidateEvaluationsDataInformation.  # noqa: E501

        List of reason given by evaluator.  # noqa: E501

        :return: The reason of this CandidateEvaluationsDataInformation.  # noqa: E501
        :rtype: list[str]
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CandidateEvaluationsDataInformation.

        List of reason given by evaluator.  # noqa: E501

        :param reason: The reason of this CandidateEvaluationsDataInformation.  # noqa: E501
        :type: list[str]
        """

        self._reason = reason

    @property
    def evaluated_by_email(self):
        """Gets the evaluated_by_email of this CandidateEvaluationsDataInformation.  # noqa: E501

        Email address of evaluator.  # noqa: E501

        :return: The evaluated_by_email of this CandidateEvaluationsDataInformation.  # noqa: E501
        :rtype: str
        """
        return self._evaluated_by_email

    @evaluated_by_email.setter
    def evaluated_by_email(self, evaluated_by_email):
        """Sets the evaluated_by_email of this CandidateEvaluationsDataInformation.

        Email address of evaluator.  # noqa: E501

        :param evaluated_by_email: The evaluated_by_email of this CandidateEvaluationsDataInformation.  # noqa: E501
        :type: str
        """

        self._evaluated_by_email = evaluated_by_email

    @property
    def rating(self):
        """Gets the rating of this CandidateEvaluationsDataInformation.  # noqa: E501

        Rating given by evaluator.  # noqa: E501

        :return: The rating of this CandidateEvaluationsDataInformation.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this CandidateEvaluationsDataInformation.

        Rating given by evaluator.  # noqa: E501

        :param rating: The rating of this CandidateEvaluationsDataInformation.  # noqa: E501
        :type: str
        """

        self._rating = rating

    @property
    def recommendation(self):
        """Gets the recommendation of this CandidateEvaluationsDataInformation.  # noqa: E501

        Recommendation given by evaluator.  # noqa: E501

        :return: The recommendation of this CandidateEvaluationsDataInformation.  # noqa: E501
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this CandidateEvaluationsDataInformation.

        Recommendation given by evaluator.  # noqa: E501

        :param recommendation: The recommendation of this CandidateEvaluationsDataInformation.  # noqa: E501
        :type: str
        """

        self._recommendation = recommendation

    @property
    def additional_questions(self):
        """Gets the additional_questions of this CandidateEvaluationsDataInformation.  # noqa: E501


        :return: The additional_questions of this CandidateEvaluationsDataInformation.  # noqa: E501
        :rtype: list[QuestionAndAnswers]
        """
        return self._additional_questions

    @additional_questions.setter
    def additional_questions(self, additional_questions):
        """Sets the additional_questions of this CandidateEvaluationsDataInformation.


        :param additional_questions: The additional_questions of this CandidateEvaluationsDataInformation.  # noqa: E501
        :type: list[QuestionAndAnswers]
        """

        self._additional_questions = additional_questions

    @property
    def updated_date(self):
        """Gets the updated_date of this CandidateEvaluationsDataInformation.  # noqa: E501

        Latest updated date.  # noqa: E501

        :return: The updated_date of this CandidateEvaluationsDataInformation.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this CandidateEvaluationsDataInformation.

        Latest updated date.  # noqa: E501

        :param updated_date: The updated_date of this CandidateEvaluationsDataInformation.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    @property
    def source(self):
        """Gets the source of this CandidateEvaluationsDataInformation.  # noqa: E501

        Source of the evaluation.  # noqa: E501

        :return: The source of this CandidateEvaluationsDataInformation.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CandidateEvaluationsDataInformation.

        Source of the evaluation.  # noqa: E501

        :param source: The source of this CandidateEvaluationsDataInformation.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def evaluated_by_name(self):
        """Gets the evaluated_by_name of this CandidateEvaluationsDataInformation.  # noqa: E501

        Evaluated by user's name.  # noqa: E501

        :return: The evaluated_by_name of this CandidateEvaluationsDataInformation.  # noqa: E501
        :rtype: str
        """
        return self._evaluated_by_name

    @evaluated_by_name.setter
    def evaluated_by_name(self, evaluated_by_name):
        """Sets the evaluated_by_name of this CandidateEvaluationsDataInformation.

        Evaluated by user's name.  # noqa: E501

        :param evaluated_by_name: The evaluated_by_name of this CandidateEvaluationsDataInformation.  # noqa: E501
        :type: str
        """

        self._evaluated_by_name = evaluated_by_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateEvaluationsDataInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateEvaluationsDataInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
