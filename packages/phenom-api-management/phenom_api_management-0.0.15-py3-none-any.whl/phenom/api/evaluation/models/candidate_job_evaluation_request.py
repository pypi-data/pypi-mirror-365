# coding: utf-8

"""
    evaluation-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateJobEvaluationRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rating': 'float',
        'recommendation': 'str',
        'current_status': 'str',
        'previous_status': 'str',
        'new_note_display_text': 'str',
        'new_note_text': 'str',
        'tagged_recruiters': 'list[str]',
        'form_id': 'str',
        'form_name': 'str',
        'is_rejected': 'bool'
    }

    attribute_map = {
        'rating': 'rating',
        'recommendation': 'recommendation',
        'current_status': 'currentStatus',
        'previous_status': 'previousStatus',
        'new_note_display_text': 'newNoteDisplayText',
        'new_note_text': 'newNoteText',
        'tagged_recruiters': 'taggedRecruiters',
        'form_id': 'formId',
        'form_name': 'formName',
        'is_rejected': 'isRejected'
    }

    def __init__(self, rating=None, recommendation=None, current_status=None, previous_status=None, new_note_display_text=None, new_note_text=None, tagged_recruiters=None, form_id=None, form_name=None, is_rejected=False):  # noqa: E501
        """CandidateJobEvaluationRequest - a model defined in Swagger"""  # noqa: E501
        self._rating = None
        self._recommendation = None
        self._current_status = None
        self._previous_status = None
        self._new_note_display_text = None
        self._new_note_text = None
        self._tagged_recruiters = None
        self._form_id = None
        self._form_name = None
        self._is_rejected = None
        self.discriminator = None
        if rating is not None:
            self.rating = rating
        if recommendation is not None:
            self.recommendation = recommendation
        if current_status is not None:
            self.current_status = current_status
        if previous_status is not None:
            self.previous_status = previous_status
        if new_note_display_text is not None:
            self.new_note_display_text = new_note_display_text
        if new_note_text is not None:
            self.new_note_text = new_note_text
        if tagged_recruiters is not None:
            self.tagged_recruiters = tagged_recruiters
        if form_id is not None:
            self.form_id = form_id
        if form_name is not None:
            self.form_name = form_name
        if is_rejected is not None:
            self.is_rejected = is_rejected

    @property
    def rating(self):
        """Gets the rating of this CandidateJobEvaluationRequest.  # noqa: E501

        Candidate rating based on the provided evaluation.  # noqa: E501

        :return: The rating of this CandidateJobEvaluationRequest.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this CandidateJobEvaluationRequest.

        Candidate rating based on the provided evaluation.  # noqa: E501

        :param rating: The rating of this CandidateJobEvaluationRequest.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def recommendation(self):
        """Gets the recommendation of this CandidateJobEvaluationRequest.  # noqa: E501

        Recommendation of the candidate based on given evaluation.  # noqa: E501

        :return: The recommendation of this CandidateJobEvaluationRequest.  # noqa: E501
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this CandidateJobEvaluationRequest.

        Recommendation of the candidate based on given evaluation.  # noqa: E501

        :param recommendation: The recommendation of this CandidateJobEvaluationRequest.  # noqa: E501
        :type: str
        """

        self._recommendation = recommendation

    @property
    def current_status(self):
        """Gets the current_status of this CandidateJobEvaluationRequest.  # noqa: E501

        Current status of the candidate based on given evaluation.  # noqa: E501

        :return: The current_status of this CandidateJobEvaluationRequest.  # noqa: E501
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this CandidateJobEvaluationRequest.

        Current status of the candidate based on given evaluation.  # noqa: E501

        :param current_status: The current_status of this CandidateJobEvaluationRequest.  # noqa: E501
        :type: str
        """

        self._current_status = current_status

    @property
    def previous_status(self):
        """Gets the previous_status of this CandidateJobEvaluationRequest.  # noqa: E501

        Previous status of the candidate before this evaluation.  # noqa: E501

        :return: The previous_status of this CandidateJobEvaluationRequest.  # noqa: E501
        :rtype: str
        """
        return self._previous_status

    @previous_status.setter
    def previous_status(self, previous_status):
        """Sets the previous_status of this CandidateJobEvaluationRequest.

        Previous status of the candidate before this evaluation.  # noqa: E501

        :param previous_status: The previous_status of this CandidateJobEvaluationRequest.  # noqa: E501
        :type: str
        """

        self._previous_status = previous_status

    @property
    def new_note_display_text(self):
        """Gets the new_note_display_text of this CandidateJobEvaluationRequest.  # noqa: E501

        Note added by evaluator.  # noqa: E501

        :return: The new_note_display_text of this CandidateJobEvaluationRequest.  # noqa: E501
        :rtype: str
        """
        return self._new_note_display_text

    @new_note_display_text.setter
    def new_note_display_text(self, new_note_display_text):
        """Sets the new_note_display_text of this CandidateJobEvaluationRequest.

        Note added by evaluator.  # noqa: E501

        :param new_note_display_text: The new_note_display_text of this CandidateJobEvaluationRequest.  # noqa: E501
        :type: str
        """

        self._new_note_display_text = new_note_display_text

    @property
    def new_note_text(self):
        """Gets the new_note_text of this CandidateJobEvaluationRequest.  # noqa: E501

        Note added by evaluator.  # noqa: E501

        :return: The new_note_text of this CandidateJobEvaluationRequest.  # noqa: E501
        :rtype: str
        """
        return self._new_note_text

    @new_note_text.setter
    def new_note_text(self, new_note_text):
        """Sets the new_note_text of this CandidateJobEvaluationRequest.

        Note added by evaluator.  # noqa: E501

        :param new_note_text: The new_note_text of this CandidateJobEvaluationRequest.  # noqa: E501
        :type: str
        """

        self._new_note_text = new_note_text

    @property
    def tagged_recruiters(self):
        """Gets the tagged_recruiters of this CandidateJobEvaluationRequest.  # noqa: E501

        List of tagged recruiters.  # noqa: E501

        :return: The tagged_recruiters of this CandidateJobEvaluationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tagged_recruiters

    @tagged_recruiters.setter
    def tagged_recruiters(self, tagged_recruiters):
        """Sets the tagged_recruiters of this CandidateJobEvaluationRequest.

        List of tagged recruiters.  # noqa: E501

        :param tagged_recruiters: The tagged_recruiters of this CandidateJobEvaluationRequest.  # noqa: E501
        :type: list[str]
        """

        self._tagged_recruiters = tagged_recruiters

    @property
    def form_id(self):
        """Gets the form_id of this CandidateJobEvaluationRequest.  # noqa: E501

        Id of the evaluation form.  # noqa: E501

        :return: The form_id of this CandidateJobEvaluationRequest.  # noqa: E501
        :rtype: str
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this CandidateJobEvaluationRequest.

        Id of the evaluation form.  # noqa: E501

        :param form_id: The form_id of this CandidateJobEvaluationRequest.  # noqa: E501
        :type: str
        """

        self._form_id = form_id

    @property
    def form_name(self):
        """Gets the form_name of this CandidateJobEvaluationRequest.  # noqa: E501

        Name of the evaluation form.  # noqa: E501

        :return: The form_name of this CandidateJobEvaluationRequest.  # noqa: E501
        :rtype: str
        """
        return self._form_name

    @form_name.setter
    def form_name(self, form_name):
        """Sets the form_name of this CandidateJobEvaluationRequest.

        Name of the evaluation form.  # noqa: E501

        :param form_name: The form_name of this CandidateJobEvaluationRequest.  # noqa: E501
        :type: str
        """

        self._form_name = form_name

    @property
    def is_rejected(self):
        """Gets the is_rejected of this CandidateJobEvaluationRequest.  # noqa: E501

        Candidate is rejected (true or false).  # noqa: E501

        :return: The is_rejected of this CandidateJobEvaluationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_rejected

    @is_rejected.setter
    def is_rejected(self, is_rejected):
        """Sets the is_rejected of this CandidateJobEvaluationRequest.

        Candidate is rejected (true or false).  # noqa: E501

        :param is_rejected: The is_rejected of this CandidateJobEvaluationRequest.  # noqa: E501
        :type: bool
        """

        self._is_rejected = is_rejected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateJobEvaluationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateJobEvaluationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
