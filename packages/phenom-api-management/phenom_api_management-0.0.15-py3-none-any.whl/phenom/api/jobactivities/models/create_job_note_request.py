# coding: utf-8

"""
    jobs-activities-api

    These API's allows you to perform activities on Jobs  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CreateJobNoteRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tagged_recruiters': 'list[str]',
        'entity_type': 'str',
        'note_text': 'str',
        'as_private': 'bool'
    }

    attribute_map = {
        'tagged_recruiters': 'taggedRecruiters',
        'entity_type': 'entityType',
        'note_text': 'noteText',
        'as_private': 'asPrivate'
    }

    def __init__(self, tagged_recruiters=None, entity_type=None, note_text=None, as_private=None):  # noqa: E501
        """CreateJobNoteRequest - a model defined in Swagger"""  # noqa: E501
        self._tagged_recruiters = None
        self._entity_type = None
        self._note_text = None
        self._as_private = None
        self.discriminator = None
        self.tagged_recruiters = tagged_recruiters
        self.entity_type = entity_type
        self.note_text = note_text
        self.as_private = as_private

    @property
    def tagged_recruiters(self):
        """Gets the tagged_recruiters of this CreateJobNoteRequest.  # noqa: E501


        :return: The tagged_recruiters of this CreateJobNoteRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tagged_recruiters

    @tagged_recruiters.setter
    def tagged_recruiters(self, tagged_recruiters):
        """Sets the tagged_recruiters of this CreateJobNoteRequest.


        :param tagged_recruiters: The tagged_recruiters of this CreateJobNoteRequest.  # noqa: E501
        :type: list[str]
        """
        if tagged_recruiters is None:
            raise ValueError("Invalid value for `tagged_recruiters`, must not be `None`")  # noqa: E501

        self._tagged_recruiters = tagged_recruiters

    @property
    def entity_type(self):
        """Gets the entity_type of this CreateJobNoteRequest.  # noqa: E501


        :return: The entity_type of this CreateJobNoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this CreateJobNoteRequest.


        :param entity_type: The entity_type of this CreateJobNoteRequest.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def note_text(self):
        """Gets the note_text of this CreateJobNoteRequest.  # noqa: E501


        :return: The note_text of this CreateJobNoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._note_text

    @note_text.setter
    def note_text(self, note_text):
        """Sets the note_text of this CreateJobNoteRequest.


        :param note_text: The note_text of this CreateJobNoteRequest.  # noqa: E501
        :type: str
        """
        if note_text is None:
            raise ValueError("Invalid value for `note_text`, must not be `None`")  # noqa: E501

        self._note_text = note_text

    @property
    def as_private(self):
        """Gets the as_private of this CreateJobNoteRequest.  # noqa: E501


        :return: The as_private of this CreateJobNoteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._as_private

    @as_private.setter
    def as_private(self, as_private):
        """Sets the as_private of this CreateJobNoteRequest.


        :param as_private: The as_private of this CreateJobNoteRequest.  # noqa: E501
        :type: bool
        """
        if as_private is None:
            raise ValueError("Invalid value for `as_private`, must not be `None`")  # noqa: E501

        self._as_private = as_private

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateJobNoteRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateJobNoteRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
