# coding: utf-8

"""
    employees-api-referral

    The employee referral APIs are used to refer, track and recommend jobs to external candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ReferralData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'str',
        'category': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'phone': 'str',
        'message': 'str',
        'questionnaire': 'ReferralDataQuestionnaire'
    }

    attribute_map = {
        'job_id': 'jobId',
        'category': 'category',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'phone': 'phone',
        'message': 'message',
        'questionnaire': 'questionnaire'
    }

    def __init__(self, job_id='12121', category='Engineering', first_name='John', last_name='Deal', phone='919181912122', message='APPLY NOW', questionnaire=None):  # noqa: E501
        """ReferralData - a model defined in Swagger"""  # noqa: E501
        self._job_id = None
        self._category = None
        self._first_name = None
        self._last_name = None
        self._phone = None
        self._message = None
        self._questionnaire = None
        self.discriminator = None
        if job_id is not None:
            self.job_id = job_id
        if category is not None:
            self.category = category
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if phone is not None:
            self.phone = phone
        if message is not None:
            self.message = message
        if questionnaire is not None:
            self.questionnaire = questionnaire

    @property
    def job_id(self):
        """Gets the job_id of this ReferralData.  # noqa: E501

        Job Id - unique field to identify the job.  # noqa: E501

        :return: The job_id of this ReferralData.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ReferralData.

        Job Id - unique field to identify the job.  # noqa: E501

        :param job_id: The job_id of this ReferralData.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def category(self):
        """Gets the category of this ReferralData.  # noqa: E501

        Category of the job that employee is making a referral.  # noqa: E501

        :return: The category of this ReferralData.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ReferralData.

        Category of the job that employee is making a referral.  # noqa: E501

        :param category: The category of this ReferralData.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def first_name(self):
        """Gets the first_name of this ReferralData.  # noqa: E501

        FirstName of the candidate which employee is referring.  # noqa: E501

        :return: The first_name of this ReferralData.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ReferralData.

        FirstName of the candidate which employee is referring.  # noqa: E501

        :param first_name: The first_name of this ReferralData.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ReferralData.  # noqa: E501

        LastName of the candidate which employee is referring.  # noqa: E501

        :return: The last_name of this ReferralData.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ReferralData.

        LastName of the candidate which employee is referring.  # noqa: E501

        :param last_name: The last_name of this ReferralData.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this ReferralData.  # noqa: E501

        Phone Number of the candidate which employee is referring.  # noqa: E501

        :return: The phone of this ReferralData.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ReferralData.

        Phone Number of the candidate which employee is referring.  # noqa: E501

        :param phone: The phone of this ReferralData.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def message(self):
        """Gets the message of this ReferralData.  # noqa: E501

        Personal Message to the candidate which employee is referring.  # noqa: E501

        :return: The message of this ReferralData.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ReferralData.

        Personal Message to the candidate which employee is referring.  # noqa: E501

        :param message: The message of this ReferralData.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def questionnaire(self):
        """Gets the questionnaire of this ReferralData.  # noqa: E501


        :return: The questionnaire of this ReferralData.  # noqa: E501
        :rtype: ReferralDataQuestionnaire
        """
        return self._questionnaire

    @questionnaire.setter
    def questionnaire(self, questionnaire):
        """Sets the questionnaire of this ReferralData.


        :param questionnaire: The questionnaire of this ReferralData.  # noqa: E501
        :type: ReferralDataQuestionnaire
        """

        self._questionnaire = questionnaire

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReferralData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReferralData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
