# coding: utf-8

"""
    servicehub-scim-api

    API endpoints for user management, utilizing the SCIM protocol.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ScimUser(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schemas': 'list[str]',
        'id': 'str',
        'user_name': 'str',
        'name': 'ScimUserName',
        'display_name': 'str',
        'title': 'str',
        'user_type': 'str',
        'active': 'bool',
        'emails': 'list[ScimUserEmails]',
        'photos': 'list[ScimUserPhotos]',
        'phone_numbers': 'list[ScimUserPhoneNumbers]',
        'addresses': 'list[ScimUserAddresses]',
        'roles': 'list[ScimUserRoles]',
        'groups': 'list[ScimUserGroups]',
        'entitlements': 'list[ScimUserEntitlements]'
    }

    attribute_map = {
        'schemas': 'schemas',
        'id': 'id',
        'user_name': 'userName',
        'name': 'name',
        'display_name': 'displayName',
        'title': 'title',
        'user_type': 'userType',
        'active': 'active',
        'emails': 'emails',
        'photos': 'photos',
        'phone_numbers': 'phoneNumbers',
        'addresses': 'addresses',
        'roles': 'roles',
        'groups': 'groups',
        'entitlements': 'entitlements'
    }

    def __init__(self, schemas=None, id=None, user_name=None, name=None, display_name=None, title=None, user_type=None, active=None, emails=None, photos=None, phone_numbers=None, addresses=None, roles=None, groups=None, entitlements=None):  # noqa: E501
        """ScimUser - a model defined in Swagger"""  # noqa: E501
        self._schemas = None
        self._id = None
        self._user_name = None
        self._name = None
        self._display_name = None
        self._title = None
        self._user_type = None
        self._active = None
        self._emails = None
        self._photos = None
        self._phone_numbers = None
        self._addresses = None
        self._roles = None
        self._groups = None
        self._entitlements = None
        self.discriminator = None
        if schemas is not None:
            self.schemas = schemas
        if id is not None:
            self.id = id
        if user_name is not None:
            self.user_name = user_name
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if title is not None:
            self.title = title
        if user_type is not None:
            self.user_type = user_type
        if active is not None:
            self.active = active
        if emails is not None:
            self.emails = emails
        if photos is not None:
            self.photos = photos
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if addresses is not None:
            self.addresses = addresses
        if roles is not None:
            self.roles = roles
        if groups is not None:
            self.groups = groups
        if entitlements is not None:
            self.entitlements = entitlements

    @property
    def schemas(self):
        """Gets the schemas of this ScimUser.  # noqa: E501

        An array of strings indicating the available schemas for the resource.  # noqa: E501

        :return: The schemas of this ScimUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this ScimUser.

        An array of strings indicating the available schemas for the resource.  # noqa: E501

        :param schemas: The schemas of this ScimUser.  # noqa: E501
        :type: list[str]
        """

        self._schemas = schemas

    @property
    def id(self):
        """Gets the id of this ScimUser.  # noqa: E501

        The unique identifier for the User.  # noqa: E501

        :return: The id of this ScimUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScimUser.

        The unique identifier for the User.  # noqa: E501

        :param id: The id of this ScimUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this ScimUser.  # noqa: E501

        Unique identifier for the User, typically used by the user to directly authenticate to the service provider.  # noqa: E501

        :return: The user_name of this ScimUser.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ScimUser.

        Unique identifier for the User, typically used by the user to directly authenticate to the service provider.  # noqa: E501

        :param user_name: The user_name of this ScimUser.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def name(self):
        """Gets the name of this ScimUser.  # noqa: E501


        :return: The name of this ScimUser.  # noqa: E501
        :rtype: ScimUserName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScimUser.


        :param name: The name of this ScimUser.  # noqa: E501
        :type: ScimUserName
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this ScimUser.  # noqa: E501

        User's display name.  # noqa: E501

        :return: The display_name of this ScimUser.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ScimUser.

        User's display name.  # noqa: E501

        :param display_name: The display_name of this ScimUser.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def title(self):
        """Gets the title of this ScimUser.  # noqa: E501

        User's title or job position.  # noqa: E501

        :return: The title of this ScimUser.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ScimUser.

        User's title or job position.  # noqa: E501

        :param title: The title of this ScimUser.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def user_type(self):
        """Gets the user_type of this ScimUser.  # noqa: E501

        Type of user.  # noqa: E501

        :return: The user_type of this ScimUser.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this ScimUser.

        Type of user.  # noqa: E501

        :param user_type: The user_type of this ScimUser.  # noqa: E501
        :type: str
        """

        self._user_type = user_type

    @property
    def active(self):
        """Gets the active of this ScimUser.  # noqa: E501

        Indicates whether the user is active.  # noqa: E501

        :return: The active of this ScimUser.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ScimUser.

        Indicates whether the user is active.  # noqa: E501

        :param active: The active of this ScimUser.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def emails(self):
        """Gets the emails of this ScimUser.  # noqa: E501

        User's email addresses.  # noqa: E501

        :return: The emails of this ScimUser.  # noqa: E501
        :rtype: list[ScimUserEmails]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ScimUser.

        User's email addresses.  # noqa: E501

        :param emails: The emails of this ScimUser.  # noqa: E501
        :type: list[ScimUserEmails]
        """

        self._emails = emails

    @property
    def photos(self):
        """Gets the photos of this ScimUser.  # noqa: E501

        User's photos.  # noqa: E501

        :return: The photos of this ScimUser.  # noqa: E501
        :rtype: list[ScimUserPhotos]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this ScimUser.

        User's photos.  # noqa: E501

        :param photos: The photos of this ScimUser.  # noqa: E501
        :type: list[ScimUserPhotos]
        """

        self._photos = photos

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this ScimUser.  # noqa: E501

        User's phone numbers.  # noqa: E501

        :return: The phone_numbers of this ScimUser.  # noqa: E501
        :rtype: list[ScimUserPhoneNumbers]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this ScimUser.

        User's phone numbers.  # noqa: E501

        :param phone_numbers: The phone_numbers of this ScimUser.  # noqa: E501
        :type: list[ScimUserPhoneNumbers]
        """

        self._phone_numbers = phone_numbers

    @property
    def addresses(self):
        """Gets the addresses of this ScimUser.  # noqa: E501

        User's addresses.  # noqa: E501

        :return: The addresses of this ScimUser.  # noqa: E501
        :rtype: list[ScimUserAddresses]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this ScimUser.

        User's addresses.  # noqa: E501

        :param addresses: The addresses of this ScimUser.  # noqa: E501
        :type: list[ScimUserAddresses]
        """

        self._addresses = addresses

    @property
    def roles(self):
        """Gets the roles of this ScimUser.  # noqa: E501

        An array representing the roles assigned to the user.  # noqa: E501

        :return: The roles of this ScimUser.  # noqa: E501
        :rtype: list[ScimUserRoles]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ScimUser.

        An array representing the roles assigned to the user.  # noqa: E501

        :param roles: The roles of this ScimUser.  # noqa: E501
        :type: list[ScimUserRoles]
        """

        self._roles = roles

    @property
    def groups(self):
        """Gets the groups of this ScimUser.  # noqa: E501

        An array representing the tenants associated with the user.  # noqa: E501

        :return: The groups of this ScimUser.  # noqa: E501
        :rtype: list[ScimUserGroups]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ScimUser.

        An array representing the tenants associated with the user.  # noqa: E501

        :param groups: The groups of this ScimUser.  # noqa: E501
        :type: list[ScimUserGroups]
        """

        self._groups = groups

    @property
    def entitlements(self):
        """Gets the entitlements of this ScimUser.  # noqa: E501

        User's entitlements.  # noqa: E501

        :return: The entitlements of this ScimUser.  # noqa: E501
        :rtype: list[ScimUserEntitlements]
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this ScimUser.

        User's entitlements.  # noqa: E501

        :param entitlements: The entitlements of this ScimUser.  # noqa: E501
        :type: list[ScimUserEntitlements]
        """

        self._entitlements = entitlements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScimUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScimUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
