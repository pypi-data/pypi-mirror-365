# coding: utf-8

"""
    jobs-questionnarie-api

    These APIs streamline question management, providing tools to create, delete, and update questions. Additionally, they offer functionality to attach question lists to specific job profiles.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CreateJobQuestionnarieRequestPreScreeningQuestions(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'question': 'str',
        'options': 'list[CreateJobQuestionnarieRequestOptions]',
        'type': 'str',
        'knockoff_type': 'bool',
        'knockoff_message': 'str',
        'qualified_answer': 'str'
    }

    attribute_map = {
        'question': 'question',
        'options': 'options',
        'type': 'type',
        'knockoff_type': 'knockoffType',
        'knockoff_message': 'knockoffMessage',
        'qualified_answer': 'qualifiedAnswer'
    }

    def __init__(self, question=None, options=None, type=None, knockoff_type=None, knockoff_message=None, qualified_answer=None):  # noqa: E501
        """CreateJobQuestionnarieRequestPreScreeningQuestions - a model defined in Swagger"""  # noqa: E501
        self._question = None
        self._options = None
        self._type = None
        self._knockoff_type = None
        self._knockoff_message = None
        self._qualified_answer = None
        self.discriminator = None
        self.question = question
        self.options = options
        self.type = type
        self.knockoff_type = knockoff_type
        self.knockoff_message = knockoff_message
        if qualified_answer is not None:
            self.qualified_answer = qualified_answer

    @property
    def question(self):
        """Gets the question of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501

        The text of the pre screening question.  # noqa: E501

        :return: The question of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this CreateJobQuestionnarieRequestPreScreeningQuestions.

        The text of the pre screening question.  # noqa: E501

        :param question: The question of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501
        :type: str
        """
        if question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")  # noqa: E501

        self._question = question

    @property
    def options(self):
        """Gets the options of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501


        :return: The options of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501
        :rtype: list[CreateJobQuestionnarieRequestOptions]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CreateJobQuestionnarieRequestPreScreeningQuestions.


        :param options: The options of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501
        :type: list[CreateJobQuestionnarieRequestOptions]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    @property
    def type(self):
        """Gets the type of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501

        The type of the question.  # noqa: E501

        :return: The type of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateJobQuestionnarieRequestPreScreeningQuestions.

        The type of the question.  # noqa: E501

        :param type: The type of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def knockoff_type(self):
        """Gets the knockoff_type of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501

        A boolean indicating if the question has a knockoff.  # noqa: E501

        :return: The knockoff_type of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._knockoff_type

    @knockoff_type.setter
    def knockoff_type(self, knockoff_type):
        """Sets the knockoff_type of this CreateJobQuestionnarieRequestPreScreeningQuestions.

        A boolean indicating if the question has a knockoff.  # noqa: E501

        :param knockoff_type: The knockoff_type of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501
        :type: bool
        """
        if knockoff_type is None:
            raise ValueError("Invalid value for `knockoff_type`, must not be `None`")  # noqa: E501

        self._knockoff_type = knockoff_type

    @property
    def knockoff_message(self):
        """Gets the knockoff_message of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501

        The knockoff message associated with the question.  # noqa: E501

        :return: The knockoff_message of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501
        :rtype: str
        """
        return self._knockoff_message

    @knockoff_message.setter
    def knockoff_message(self, knockoff_message):
        """Sets the knockoff_message of this CreateJobQuestionnarieRequestPreScreeningQuestions.

        The knockoff message associated with the question.  # noqa: E501

        :param knockoff_message: The knockoff_message of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501
        :type: str
        """
        if knockoff_message is None:
            raise ValueError("Invalid value for `knockoff_message`, must not be `None`")  # noqa: E501

        self._knockoff_message = knockoff_message

    @property
    def qualified_answer(self):
        """Gets the qualified_answer of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501

        The qualified answer for the question. Can be nullable.  # noqa: E501

        :return: The qualified_answer of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501
        :rtype: str
        """
        return self._qualified_answer

    @qualified_answer.setter
    def qualified_answer(self, qualified_answer):
        """Sets the qualified_answer of this CreateJobQuestionnarieRequestPreScreeningQuestions.

        The qualified answer for the question. Can be nullable.  # noqa: E501

        :param qualified_answer: The qualified_answer of this CreateJobQuestionnarieRequestPreScreeningQuestions.  # noqa: E501
        :type: str
        """

        self._qualified_answer = qualified_answer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateJobQuestionnarieRequestPreScreeningQuestions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateJobQuestionnarieRequestPreScreeningQuestions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
