# coding: utf-8

"""
    campaigns-sms

    These APIs ensures an easy integration process of SMS management for developers to send, read, and track SMS campaigns within applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class SMSCampaignOptInRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone_number': 'str',
        'email': 'str',
        'opt_in': 'bool'
    }

    attribute_map = {
        'phone_number': 'phoneNumber',
        'email': 'email',
        'opt_in': 'optIn'
    }

    def __init__(self, phone_number=None, email=None, opt_in=None):  # noqa: E501
        """SMSCampaignOptInRequest - a model defined in Swagger"""  # noqa: E501
        self._phone_number = None
        self._email = None
        self._opt_in = None
        self.discriminator = None
        if phone_number is not None:
            self.phone_number = phone_number
        if email is not None:
            self.email = email
        self.opt_in = opt_in

    @property
    def phone_number(self):
        """Gets the phone_number of this SMSCampaignOptInRequest.  # noqa: E501

        Phone Number associated with SMS Campaign OptIn Request.  # noqa: E501

        :return: The phone_number of this SMSCampaignOptInRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this SMSCampaignOptInRequest.

        Phone Number associated with SMS Campaign OptIn Request.  # noqa: E501

        :param phone_number: The phone_number of this SMSCampaignOptInRequest.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email(self):
        """Gets the email of this SMSCampaignOptInRequest.  # noqa: E501

        Email associated with SMS Campaign OptIn Request.  # noqa: E501

        :return: The email of this SMSCampaignOptInRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SMSCampaignOptInRequest.

        Email associated with SMS Campaign OptIn Request.  # noqa: E501

        :param email: The email of this SMSCampaignOptInRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def opt_in(self):
        """Gets the opt_in of this SMSCampaignOptInRequest.  # noqa: E501

        Flag indicating the opt-in status for the SMS campaign.  # noqa: E501

        :return: The opt_in of this SMSCampaignOptInRequest.  # noqa: E501
        :rtype: bool
        """
        return self._opt_in

    @opt_in.setter
    def opt_in(self, opt_in):
        """Sets the opt_in of this SMSCampaignOptInRequest.

        Flag indicating the opt-in status for the SMS campaign.  # noqa: E501

        :param opt_in: The opt_in of this SMSCampaignOptInRequest.  # noqa: E501
        :type: bool
        """
        if opt_in is None:
            raise ValueError("Invalid value for `opt_in`, must not be `None`")  # noqa: E501

        self._opt_in = opt_in

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SMSCampaignOptInRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SMSCampaignOptInRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
