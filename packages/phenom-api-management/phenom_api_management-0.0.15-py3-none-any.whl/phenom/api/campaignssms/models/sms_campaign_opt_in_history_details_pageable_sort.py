# coding: utf-8

"""
    campaigns-sms

    These APIs ensures an easy integration process of SMS management for developers to send, read, and track SMS campaigns within applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class SMSCampaignOptInHistoryDetailsPageableSort(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sorted': 'bool',
        'empty': 'bool',
        'unsorted': 'bool'
    }

    attribute_map = {
        'sorted': 'sorted',
        'empty': 'empty',
        'unsorted': 'unsorted'
    }

    def __init__(self, sorted=None, empty=None, unsorted=None):  # noqa: E501
        """SMSCampaignOptInHistoryDetailsPageableSort - a model defined in Swagger"""  # noqa: E501
        self._sorted = None
        self._empty = None
        self._unsorted = None
        self.discriminator = None
        self.sorted = sorted
        self.empty = empty
        self.unsorted = unsorted

    @property
    def sorted(self):
        """Gets the sorted of this SMSCampaignOptInHistoryDetailsPageableSort.  # noqa: E501

        Indicates whether the result set is sorted.  # noqa: E501

        :return: The sorted of this SMSCampaignOptInHistoryDetailsPageableSort.  # noqa: E501
        :rtype: bool
        """
        return self._sorted

    @sorted.setter
    def sorted(self, sorted):
        """Sets the sorted of this SMSCampaignOptInHistoryDetailsPageableSort.

        Indicates whether the result set is sorted.  # noqa: E501

        :param sorted: The sorted of this SMSCampaignOptInHistoryDetailsPageableSort.  # noqa: E501
        :type: bool
        """
        if sorted is None:
            raise ValueError("Invalid value for `sorted`, must not be `None`")  # noqa: E501

        self._sorted = sorted

    @property
    def empty(self):
        """Gets the empty of this SMSCampaignOptInHistoryDetailsPageableSort.  # noqa: E501

        Indicates whether the sorting is empty.  # noqa: E501

        :return: The empty of this SMSCampaignOptInHistoryDetailsPageableSort.  # noqa: E501
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this SMSCampaignOptInHistoryDetailsPageableSort.

        Indicates whether the sorting is empty.  # noqa: E501

        :param empty: The empty of this SMSCampaignOptInHistoryDetailsPageableSort.  # noqa: E501
        :type: bool
        """
        if empty is None:
            raise ValueError("Invalid value for `empty`, must not be `None`")  # noqa: E501

        self._empty = empty

    @property
    def unsorted(self):
        """Gets the unsorted of this SMSCampaignOptInHistoryDetailsPageableSort.  # noqa: E501

        Indicates whether the sorting is unsorted.  # noqa: E501

        :return: The unsorted of this SMSCampaignOptInHistoryDetailsPageableSort.  # noqa: E501
        :rtype: bool
        """
        return self._unsorted

    @unsorted.setter
    def unsorted(self, unsorted):
        """Sets the unsorted of this SMSCampaignOptInHistoryDetailsPageableSort.

        Indicates whether the sorting is unsorted.  # noqa: E501

        :param unsorted: The unsorted of this SMSCampaignOptInHistoryDetailsPageableSort.  # noqa: E501
        :type: bool
        """
        if unsorted is None:
            raise ValueError("Invalid value for `unsorted`, must not be `None`")  # noqa: E501

        self._unsorted = unsorted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SMSCampaignOptInHistoryDetailsPageableSort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SMSCampaignOptInHistoryDetailsPageableSort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
