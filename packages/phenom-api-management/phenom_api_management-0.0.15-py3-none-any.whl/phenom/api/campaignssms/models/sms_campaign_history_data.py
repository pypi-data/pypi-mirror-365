# coding: utf-8

"""
    campaigns-sms

    These APIs ensures an easy integration process of SMS management for developers to send, read, and track SMS campaigns within applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class SMSCampaignHistoryData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone_number': 'str',
        'campaign_name': 'str',
        'campaign_type': 'str',
        'created_date': 'int',
        'body': 'str',
        'event': 'str'
    }

    attribute_map = {
        'phone_number': 'phoneNumber',
        'campaign_name': 'campaignName',
        'campaign_type': 'campaignType',
        'created_date': 'createdDate',
        'body': 'body',
        'event': 'event'
    }

    def __init__(self, phone_number=None, campaign_name=None, campaign_type=None, created_date=None, body=None, event=None):  # noqa: E501
        """SMSCampaignHistoryData - a model defined in Swagger"""  # noqa: E501
        self._phone_number = None
        self._campaign_name = None
        self._campaign_type = None
        self._created_date = None
        self._body = None
        self._event = None
        self.discriminator = None
        self.phone_number = phone_number
        self.campaign_name = campaign_name
        self.campaign_type = campaign_type
        self.created_date = created_date
        self.body = body
        self.event = event

    @property
    def phone_number(self):
        """Gets the phone_number of this SMSCampaignHistoryData.  # noqa: E501

        PhoneNumber associated with SMS campaign History.  # noqa: E501

        :return: The phone_number of this SMSCampaignHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this SMSCampaignHistoryData.

        PhoneNumber associated with SMS campaign History.  # noqa: E501

        :param phone_number: The phone_number of this SMSCampaignHistoryData.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def campaign_name(self):
        """Gets the campaign_name of this SMSCampaignHistoryData.  # noqa: E501

        The SMS CampaignName in the SMS Campaign History.  # noqa: E501

        :return: The campaign_name of this SMSCampaignHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._campaign_name

    @campaign_name.setter
    def campaign_name(self, campaign_name):
        """Sets the campaign_name of this SMSCampaignHistoryData.

        The SMS CampaignName in the SMS Campaign History.  # noqa: E501

        :param campaign_name: The campaign_name of this SMSCampaignHistoryData.  # noqa: E501
        :type: str
        """
        if campaign_name is None:
            raise ValueError("Invalid value for `campaign_name`, must not be `None`")  # noqa: E501

        self._campaign_name = campaign_name

    @property
    def campaign_type(self):
        """Gets the campaign_type of this SMSCampaignHistoryData.  # noqa: E501

        Type of the campaign in the SMS Campaign History .  # noqa: E501

        :return: The campaign_type of this SMSCampaignHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._campaign_type

    @campaign_type.setter
    def campaign_type(self, campaign_type):
        """Sets the campaign_type of this SMSCampaignHistoryData.

        Type of the campaign in the SMS Campaign History .  # noqa: E501

        :param campaign_type: The campaign_type of this SMSCampaignHistoryData.  # noqa: E501
        :type: str
        """
        if campaign_type is None:
            raise ValueError("Invalid value for `campaign_type`, must not be `None`")  # noqa: E501

        self._campaign_type = campaign_type

    @property
    def created_date(self):
        """Gets the created_date of this SMSCampaignHistoryData.  # noqa: E501

        Timestamp indicating when the email campaign history entry was created.  # noqa: E501

        :return: The created_date of this SMSCampaignHistoryData.  # noqa: E501
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this SMSCampaignHistoryData.

        Timestamp indicating when the email campaign history entry was created.  # noqa: E501

        :param created_date: The created_date of this SMSCampaignHistoryData.  # noqa: E501
        :type: int
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def body(self):
        """Gets the body of this SMSCampaignHistoryData.  # noqa: E501

        Body Defines the Message that was sent to candidate in the SMS Campaign.  # noqa: E501

        :return: The body of this SMSCampaignHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SMSCampaignHistoryData.

        Body Defines the Message that was sent to candidate in the SMS Campaign.  # noqa: E501

        :param body: The body of this SMSCampaignHistoryData.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def event(self):
        """Gets the event of this SMSCampaignHistoryData.  # noqa: E501

        Defines the status of the SMS Campaign for a Candidate.  # noqa: E501

        :return: The event of this SMSCampaignHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this SMSCampaignHistoryData.

        Defines the status of the SMS Campaign for a Candidate.  # noqa: E501

        :param event: The event of this SMSCampaignHistoryData.  # noqa: E501
        :type: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SMSCampaignHistoryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SMSCampaignHistoryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
