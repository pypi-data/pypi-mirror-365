# coding: utf-8

"""
    candidates-attachments-api

    The Candidate APIs allows you to add, update and delete candidate attachments.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class AttachmentUpdateResponse(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'message': 'str',
        'literal_id': 'str',
        'literal_values': 'object',
        'data': 'object'
    }

    attribute_map = {
        'status': 'status',
        'message': 'message',
        'literal_id': 'literalId',
        'literal_values': 'literalValues',
        'data': 'data'
    }

    def __init__(self, status=None, message=None, literal_id=None, literal_values=None, data=None):  # noqa: E501
        """AttachmentUpdateResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._message = None
        self._literal_id = None
        self._literal_values = None
        self._data = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if message is not None:
            self.message = message
        if literal_id is not None:
            self.literal_id = literal_id
        if literal_values is not None:
            self.literal_values = literal_values
        if data is not None:
            self.data = data

    @property
    def status(self):
        """Gets the status of this AttachmentUpdateResponse.  # noqa: E501

        HTTP status code indicating the response status.  # noqa: E501

        :return: The status of this AttachmentUpdateResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AttachmentUpdateResponse.

        HTTP status code indicating the response status.  # noqa: E501

        :param status: The status of this AttachmentUpdateResponse.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def message(self):
        """Gets the message of this AttachmentUpdateResponse.  # noqa: E501

        Description or message providing details about the response.  # noqa: E501

        :return: The message of this AttachmentUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AttachmentUpdateResponse.

        Description or message providing details about the response.  # noqa: E501

        :param message: The message of this AttachmentUpdateResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def literal_id(self):
        """Gets the literal_id of this AttachmentUpdateResponse.  # noqa: E501

        Unique identifier for providing details about the response.  # noqa: E501

        :return: The literal_id of this AttachmentUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._literal_id

    @literal_id.setter
    def literal_id(self, literal_id):
        """Sets the literal_id of this AttachmentUpdateResponse.

        Unique identifier for providing details about the response.  # noqa: E501

        :param literal_id: The literal_id of this AttachmentUpdateResponse.  # noqa: E501
        :type: str
        """

        self._literal_id = literal_id

    @property
    def literal_values(self):
        """Gets the literal_values of this AttachmentUpdateResponse.  # noqa: E501

        Unique values for providing details about the response.  # noqa: E501

        :return: The literal_values of this AttachmentUpdateResponse.  # noqa: E501
        :rtype: object
        """
        return self._literal_values

    @literal_values.setter
    def literal_values(self, literal_values):
        """Sets the literal_values of this AttachmentUpdateResponse.

        Unique values for providing details about the response.  # noqa: E501

        :param literal_values: The literal_values of this AttachmentUpdateResponse.  # noqa: E501
        :type: object
        """

        self._literal_values = literal_values

    @property
    def data(self):
        """Gets the data of this AttachmentUpdateResponse.  # noqa: E501

        Provides details about the response.  # noqa: E501

        :return: The data of this AttachmentUpdateResponse.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AttachmentUpdateResponse.

        Provides details about the response.  # noqa: E501

        :param data: The data of this AttachmentUpdateResponse.  # noqa: E501
        :type: object
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentUpdateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentUpdateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
