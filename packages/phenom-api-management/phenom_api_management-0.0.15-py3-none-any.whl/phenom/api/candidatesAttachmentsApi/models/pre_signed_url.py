# coding: utf-8

"""
    candidates-attachments-api

    The Candidate APIs allows you to add, update and delete candidate attachments.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class PreSignedUrl(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_code': 'int',
        'file_url': 'str',
        'message': 'str',
        'file_name': 'str',
        'file_size': 'int'
    }

    attribute_map = {
        'status_code': 'statusCode',
        'file_url': 'fileUrl',
        'message': 'message',
        'file_name': 'fileName',
        'file_size': 'fileSize'
    }

    def __init__(self, status_code=None, file_url=None, message=None, file_name=None, file_size=None):  # noqa: E501
        """PreSignedUrl - a model defined in Swagger"""  # noqa: E501
        self._status_code = None
        self._file_url = None
        self._message = None
        self._file_name = None
        self._file_size = None
        self.discriminator = None
        self.status_code = status_code
        self.file_url = file_url
        self.message = message
        self.file_name = file_name
        self.file_size = file_size

    @property
    def status_code(self):
        """Gets the status_code of this PreSignedUrl.  # noqa: E501

        HTTP status code indicating the result of the operation.  # noqa: E501

        :return: The status_code of this PreSignedUrl.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this PreSignedUrl.

        HTTP status code indicating the result of the operation.  # noqa: E501

        :param status_code: The status_code of this PreSignedUrl.  # noqa: E501
        :type: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")  # noqa: E501

        self._status_code = status_code

    @property
    def file_url(self):
        """Gets the file_url of this PreSignedUrl.  # noqa: E501

        URL pointing to the location of the file which is valid only for 5 minutes.  # noqa: E501

        :return: The file_url of this PreSignedUrl.  # noqa: E501
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """Sets the file_url of this PreSignedUrl.

        URL pointing to the location of the file which is valid only for 5 minutes.  # noqa: E501

        :param file_url: The file_url of this PreSignedUrl.  # noqa: E501
        :type: str
        """
        if file_url is None:
            raise ValueError("Invalid value for `file_url`, must not be `None`")  # noqa: E501

        self._file_url = file_url

    @property
    def message(self):
        """Gets the message of this PreSignedUrl.  # noqa: E501

        Description or message providing additional information about the result.  # noqa: E501

        :return: The message of this PreSignedUrl.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PreSignedUrl.

        Description or message providing additional information about the result.  # noqa: E501

        :param message: The message of this PreSignedUrl.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def file_name(self):
        """Gets the file_name of this PreSignedUrl.  # noqa: E501

        Name of the file associated with the operation.  # noqa: E501

        :return: The file_name of this PreSignedUrl.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this PreSignedUrl.

        Name of the file associated with the operation.  # noqa: E501

        :param file_name: The file_name of this PreSignedUrl.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this PreSignedUrl.  # noqa: E501

        The size of the file associated with the operation in KBs.  # noqa: E501

        :return: The file_size of this PreSignedUrl.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this PreSignedUrl.

        The size of the file associated with the operation in KBs.  # noqa: E501

        :param file_size: The file_size of this PreSignedUrl.  # noqa: E501
        :type: int
        """
        if file_size is None:
            raise ValueError("Invalid value for `file_size`, must not be `None`")  # noqa: E501

        self._file_size = file_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreSignedUrl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreSignedUrl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
