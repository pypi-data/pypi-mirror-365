# coding: utf-8

"""
    evaluation-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class JobCandidateStatusRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'current_status': 'str',
        'previous_status': 'str',
        'is_rejected': 'bool'
    }

    attribute_map = {
        'comment': 'comment',
        'current_status': 'currentStatus',
        'previous_status': 'previousStatus',
        'is_rejected': 'isRejected'
    }

    def __init__(self, comment=None, current_status=None, previous_status=None, is_rejected=None):  # noqa: E501
        """JobCandidateStatusRequest - a model defined in Swagger"""  # noqa: E501
        self._comment = None
        self._current_status = None
        self._previous_status = None
        self._is_rejected = None
        self.discriminator = None
        if comment is not None:
            self.comment = comment
        if current_status is not None:
            self.current_status = current_status
        if previous_status is not None:
            self.previous_status = previous_status
        if is_rejected is not None:
            self.is_rejected = is_rejected

    @property
    def comment(self):
        """Gets the comment of this JobCandidateStatusRequest.  # noqa: E501

        Comment added by user.  # noqa: E501

        :return: The comment of this JobCandidateStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this JobCandidateStatusRequest.

        Comment added by user.  # noqa: E501

        :param comment: The comment of this JobCandidateStatusRequest.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def current_status(self):
        """Gets the current_status of this JobCandidateStatusRequest.  # noqa: E501

        Current job candidacy status is based on the decision provided by the user.  # noqa: E501

        :return: The current_status of this JobCandidateStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this JobCandidateStatusRequest.

        Current job candidacy status is based on the decision provided by the user.  # noqa: E501

        :param current_status: The current_status of this JobCandidateStatusRequest.  # noqa: E501
        :type: str
        """

        self._current_status = current_status

    @property
    def previous_status(self):
        """Gets the previous_status of this JobCandidateStatusRequest.  # noqa: E501

        Current status of the candidate to job before this decision.  # noqa: E501

        :return: The previous_status of this JobCandidateStatusRequest.  # noqa: E501
        :rtype: str
        """
        return self._previous_status

    @previous_status.setter
    def previous_status(self, previous_status):
        """Sets the previous_status of this JobCandidateStatusRequest.

        Current status of the candidate to job before this decision.  # noqa: E501

        :param previous_status: The previous_status of this JobCandidateStatusRequest.  # noqa: E501
        :type: str
        """

        self._previous_status = previous_status

    @property
    def is_rejected(self):
        """Gets the is_rejected of this JobCandidateStatusRequest.  # noqa: E501

        True or false whether the candidate is rejected.  # noqa: E501

        :return: The is_rejected of this JobCandidateStatusRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_rejected

    @is_rejected.setter
    def is_rejected(self, is_rejected):
        """Sets the is_rejected of this JobCandidateStatusRequest.

        True or false whether the candidate is rejected.  # noqa: E501

        :param is_rejected: The is_rejected of this JobCandidateStatusRequest.  # noqa: E501
        :type: bool
        """

        self._is_rejected = is_rejected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobCandidateStatusRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobCandidateStatusRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
