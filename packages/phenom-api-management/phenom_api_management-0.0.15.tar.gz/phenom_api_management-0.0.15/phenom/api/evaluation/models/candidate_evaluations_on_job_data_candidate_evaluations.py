# coding: utf-8

"""
    evaluation-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateEvaluationsOnJobDataCandidateEvaluations(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'form_id': 'str',
        'form_name': 'str',
        'average_rating': 'str',
        'last_evaluated_date': 'str',
        'form_feedback': 'list[CandidateEvaluationsOnJobDataFormFeedback]'
    }

    attribute_map = {
        'form_id': 'formId',
        'form_name': 'formName',
        'average_rating': 'averageRating',
        'last_evaluated_date': 'lastEvaluatedDate',
        'form_feedback': 'formFeedback'
    }

    def __init__(self, form_id=None, form_name=None, average_rating=None, last_evaluated_date=None, form_feedback=None):  # noqa: E501
        """CandidateEvaluationsOnJobDataCandidateEvaluations - a model defined in Swagger"""  # noqa: E501
        self._form_id = None
        self._form_name = None
        self._average_rating = None
        self._last_evaluated_date = None
        self._form_feedback = None
        self.discriminator = None
        if form_id is not None:
            self.form_id = form_id
        if form_name is not None:
            self.form_name = form_name
        if average_rating is not None:
            self.average_rating = average_rating
        if last_evaluated_date is not None:
            self.last_evaluated_date = last_evaluated_date
        if form_feedback is not None:
            self.form_feedback = form_feedback

    @property
    def form_id(self):
        """Gets the form_id of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501

        Evaluation form id.  # noqa: E501

        :return: The form_id of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this CandidateEvaluationsOnJobDataCandidateEvaluations.

        Evaluation form id.  # noqa: E501

        :param form_id: The form_id of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501
        :type: str
        """

        self._form_id = form_id

    @property
    def form_name(self):
        """Gets the form_name of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501

        Evaluation form name.  # noqa: E501

        :return: The form_name of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._form_name

    @form_name.setter
    def form_name(self, form_name):
        """Sets the form_name of this CandidateEvaluationsOnJobDataCandidateEvaluations.

        Evaluation form name.  # noqa: E501

        :param form_name: The form_name of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501
        :type: str
        """

        self._form_name = form_name

    @property
    def average_rating(self):
        """Gets the average_rating of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501

        Evaluation average rating.  # noqa: E501

        :return: The average_rating of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._average_rating

    @average_rating.setter
    def average_rating(self, average_rating):
        """Sets the average_rating of this CandidateEvaluationsOnJobDataCandidateEvaluations.

        Evaluation average rating.  # noqa: E501

        :param average_rating: The average_rating of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501
        :type: str
        """

        self._average_rating = average_rating

    @property
    def last_evaluated_date(self):
        """Gets the last_evaluated_date of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501

        Evaluation last evaluated date.  # noqa: E501

        :return: The last_evaluated_date of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._last_evaluated_date

    @last_evaluated_date.setter
    def last_evaluated_date(self, last_evaluated_date):
        """Sets the last_evaluated_date of this CandidateEvaluationsOnJobDataCandidateEvaluations.

        Evaluation last evaluated date.  # noqa: E501

        :param last_evaluated_date: The last_evaluated_date of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501
        :type: str
        """

        self._last_evaluated_date = last_evaluated_date

    @property
    def form_feedback(self):
        """Gets the form_feedback of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501

        Form feedback details.  # noqa: E501

        :return: The form_feedback of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501
        :rtype: list[CandidateEvaluationsOnJobDataFormFeedback]
        """
        return self._form_feedback

    @form_feedback.setter
    def form_feedback(self, form_feedback):
        """Sets the form_feedback of this CandidateEvaluationsOnJobDataCandidateEvaluations.

        Form feedback details.  # noqa: E501

        :param form_feedback: The form_feedback of this CandidateEvaluationsOnJobDataCandidateEvaluations.  # noqa: E501
        :type: list[CandidateEvaluationsOnJobDataFormFeedback]
        """

        self._form_feedback = form_feedback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateEvaluationsOnJobDataCandidateEvaluations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateEvaluationsOnJobDataCandidateEvaluations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
