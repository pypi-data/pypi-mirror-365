# coding: utf-8

"""
    evaluation-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateEvaluationsDataCandidateEvaluations(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'str',
        'job_title': 'str',
        'type': 'str',
        'information': 'list[CandidateEvaluationsDataInformation]',
        'updated_date': 'str'
    }

    attribute_map = {
        'job_id': 'jobId',
        'job_title': 'jobTitle',
        'type': 'type',
        'information': 'information',
        'updated_date': 'updatedDate'
    }

    def __init__(self, job_id=None, job_title=None, type=None, information=None, updated_date=None):  # noqa: E501
        """CandidateEvaluationsDataCandidateEvaluations - a model defined in Swagger"""  # noqa: E501
        self._job_id = None
        self._job_title = None
        self._type = None
        self._information = None
        self._updated_date = None
        self.discriminator = None
        if job_id is not None:
            self.job_id = job_id
        if job_title is not None:
            self.job_title = job_title
        if type is not None:
            self.type = type
        if information is not None:
            self.information = information
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def job_id(self):
        """Gets the job_id of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501

        Job's reference id.  # noqa: E501

        :return: The job_id of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this CandidateEvaluationsDataCandidateEvaluations.

        Job's reference id.  # noqa: E501

        :param job_id: The job_id of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_title(self):
        """Gets the job_title of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501

        Job's title.  # noqa: E501

        :return: The job_title of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this CandidateEvaluationsDataCandidateEvaluations.

        Job's title.  # noqa: E501

        :param job_title: The job_title of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def type(self):
        """Gets the type of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501

        Type of evaluation provided, whether it be HRM or CRM.  # noqa: E501

        :return: The type of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CandidateEvaluationsDataCandidateEvaluations.

        Type of evaluation provided, whether it be HRM or CRM.  # noqa: E501

        :param type: The type of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def information(self):
        """Gets the information of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501

        List of information.  # noqa: E501

        :return: The information of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501
        :rtype: list[CandidateEvaluationsDataInformation]
        """
        return self._information

    @information.setter
    def information(self, information):
        """Sets the information of this CandidateEvaluationsDataCandidateEvaluations.

        List of information.  # noqa: E501

        :param information: The information of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501
        :type: list[CandidateEvaluationsDataInformation]
        """

        self._information = information

    @property
    def updated_date(self):
        """Gets the updated_date of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501

        Latest updated date.  # noqa: E501

        :return: The updated_date of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this CandidateEvaluationsDataCandidateEvaluations.

        Latest updated date.  # noqa: E501

        :param updated_date: The updated_date of this CandidateEvaluationsDataCandidateEvaluations.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateEvaluationsDataCandidateEvaluations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateEvaluationsDataCandidateEvaluations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
