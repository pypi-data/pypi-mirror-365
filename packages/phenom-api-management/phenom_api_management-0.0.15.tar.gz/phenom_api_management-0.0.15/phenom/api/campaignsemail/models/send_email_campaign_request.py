# coding: utf-8

"""
    campaigns-email

    These APIs ensures an easy integration process of Email management for developers to send, read, and track Email campaigns within applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class SendEmailCampaignRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'str',
        'email_content': 'str',
        'campaign_id': 'str',
        'to_email': 'str'
    }

    attribute_map = {
        'subject': 'subject',
        'email_content': 'emailContent',
        'campaign_id': 'campaignId',
        'to_email': 'toEmail'
    }

    def __init__(self, subject=None, email_content=None, campaign_id=None, to_email=None):  # noqa: E501
        """SendEmailCampaignRequest - a model defined in Swagger"""  # noqa: E501
        self._subject = None
        self._email_content = None
        self._campaign_id = None
        self._to_email = None
        self.discriminator = None
        self.subject = subject
        self.email_content = email_content
        self.campaign_id = campaign_id
        self.to_email = to_email

    @property
    def subject(self):
        """Gets the subject of this SendEmailCampaignRequest.  # noqa: E501

        Subject of the Send Email Campaign Request.  # noqa: E501

        :return: The subject of this SendEmailCampaignRequest.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendEmailCampaignRequest.

        Subject of the Send Email Campaign Request.  # noqa: E501

        :param subject: The subject of this SendEmailCampaignRequest.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def email_content(self):
        """Gets the email_content of this SendEmailCampaignRequest.  # noqa: E501

        Email content of the Send Email Campaign Request.  # noqa: E501

        :return: The email_content of this SendEmailCampaignRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_content

    @email_content.setter
    def email_content(self, email_content):
        """Sets the email_content of this SendEmailCampaignRequest.

        Email content of the Send Email Campaign Request.  # noqa: E501

        :param email_content: The email_content of this SendEmailCampaignRequest.  # noqa: E501
        :type: str
        """
        if email_content is None:
            raise ValueError("Invalid value for `email_content`, must not be `None`")  # noqa: E501

        self._email_content = email_content

    @property
    def campaign_id(self):
        """Gets the campaign_id of this SendEmailCampaignRequest.  # noqa: E501

        Campaign Id for Send Email Campaign Request.  # noqa: E501

        :return: The campaign_id of this SendEmailCampaignRequest.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this SendEmailCampaignRequest.

        Campaign Id for Send Email Campaign Request.  # noqa: E501

        :param campaign_id: The campaign_id of this SendEmailCampaignRequest.  # noqa: E501
        :type: str
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def to_email(self):
        """Gets the to_email of this SendEmailCampaignRequest.  # noqa: E501

        Sender's email address in send email campaign Request.  # noqa: E501

        :return: The to_email of this SendEmailCampaignRequest.  # noqa: E501
        :rtype: str
        """
        return self._to_email

    @to_email.setter
    def to_email(self, to_email):
        """Sets the to_email of this SendEmailCampaignRequest.

        Sender's email address in send email campaign Request.  # noqa: E501

        :param to_email: The to_email of this SendEmailCampaignRequest.  # noqa: E501
        :type: str
        """
        if to_email is None:
            raise ValueError("Invalid value for `to_email`, must not be `None`")  # noqa: E501

        self._to_email = to_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendEmailCampaignRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendEmailCampaignRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
