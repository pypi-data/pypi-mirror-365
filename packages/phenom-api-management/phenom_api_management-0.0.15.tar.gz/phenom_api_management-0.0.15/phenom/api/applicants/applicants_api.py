# coding: utf-8

"""
    applicants-api

    This API collection enables seamless operations by facilitating the retrieval of essential applicant details, updating and managing hiring statuses for candidates, assigning multiple candidates as leads for specific job roles, and obtaining detailed activity logs associated with applicants.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phenom.commons.api_client import ApiClient


class ApplicantsApi(object):
    base_path = "/candidates-api/applications"  # your base path

    def __init__(self, token, gateway_url, apikey, api_client=None):
        if api_client is None:
            api_client = ApiClient(gateway_url + self.base_path, apikey, token)
        self.api_client = api_client

    def get_applicants_for_job(self, job_id, x_ph_userid, _from, size, **kwargs):  # noqa: E501
        """Get Applicants  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applicants_for_job(job_id, x_ph_userid, _from, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: (required)
        :param str x_ph_userid: (required)
        :param int _from: (required)
        :param int size: (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_applicants_for_job_with_http_info(job_id, x_ph_userid, _from, size, **kwargs)  # noqa: E501
        else:
            (data) = self.get_applicants_for_job_with_http_info(job_id, x_ph_userid, _from, size, **kwargs)  # noqa: E501
            return data

    def get_applicants_for_job_with_http_info(self, job_id, x_ph_userid, _from, size, **kwargs):  # noqa: E501
        """Get Applicants  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applicants_for_job_with_http_info(job_id, x_ph_userid, _from, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: (required)
        :param str x_ph_userid: (required)
        :param int _from: (required)
        :param int size: (required)
        :return: Applicants
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id', 'x_ph_userid', '_from', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_applicants_for_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_applicants_for_job`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `get_applicants_for_job`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_applicants_for_job`")  # noqa: E501
        # verify the required parameter 'size' is set
        if ('size' not in params or
                params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `get_applicants_for_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/jobs/{jobId}/applicants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Applicants',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_candidate_applications(self, x_ph_userid, candidate_id, **kwargs):  # noqa: E501
        """Get Candidate Applications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_applications(x_ph_userid, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_userid: (required)
        :param str candidate_id: ID of the candidate. (Required) (required)
        :return: CandidateApplications
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candidate_applications_with_http_info(x_ph_userid, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candidate_applications_with_http_info(x_ph_userid, candidate_id, **kwargs)  # noqa: E501
            return data

    def get_candidate_applications_with_http_info(self, x_ph_userid, candidate_id, **kwargs):  # noqa: E501
        """Get Candidate Applications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_applications_with_http_info(x_ph_userid, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_userid: (required)
        :param str candidate_id: ID of the candidate. (Required) (required)
        :return: CandidateApplications
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ph_userid', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candidate_applications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `get_candidate_applications`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_candidate_applications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CandidateApplications',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_specific_additional_fields(self, x_ph_userid, candidate_id, job_id, **kwargs):  # noqa: E501
        """Get Additional Fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_specific_additional_fields(x_ph_userid, candidate_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_userid: (required)
        :param str candidate_id: ID of the candidate. (Required) (required)
        :param str job_id: ID of the job. (Required) (required)
        :return: AdditionalFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_specific_additional_fields_with_http_info(x_ph_userid, candidate_id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_specific_additional_fields_with_http_info(x_ph_userid, candidate_id, job_id, **kwargs)  # noqa: E501
            return data

    def get_job_specific_additional_fields_with_http_info(self, x_ph_userid, candidate_id, job_id, **kwargs):  # noqa: E501
        """Get Additional Fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_specific_additional_fields_with_http_info(x_ph_userid, candidate_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_userid: (required)
        :param str candidate_id: ID of the candidate. (Required) (required)
        :param str job_id: ID of the job. (Required) (required)
        :return: AdditionalFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ph_userid', 'candidate_id', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_specific_additional_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `get_job_specific_additional_fields`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_job_specific_additional_fields`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_job_specific_additional_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/jobs/{jobId}/additional-fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdditionalFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_job_specific_additional_fields(self, body, x_ph_userid, candidate_id, job_id, **kwargs):  # noqa: E501
        """Update Additional Fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_job_specific_additional_fields(body, x_ph_userid, candidate_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdditionalFieldsUpdateRequest body: update job specific additional fields of a candidate (required)
        :param str x_ph_userid: (required)
        :param str candidate_id: ID of the candidate. (Required) (required)
        :param str job_id: ID of the job. (Required) (required)
        :return: AdditionalFieldsUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_job_specific_additional_fields_with_http_info(body, x_ph_userid, candidate_id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_job_specific_additional_fields_with_http_info(body, x_ph_userid, candidate_id, job_id, **kwargs)  # noqa: E501
            return data

    def update_job_specific_additional_fields_with_http_info(self, body, x_ph_userid, candidate_id, job_id, **kwargs):  # noqa: E501
        """Update Additional Fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_job_specific_additional_fields_with_http_info(body, x_ph_userid, candidate_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdditionalFieldsUpdateRequest body: update job specific additional fields of a candidate (required)
        :param str x_ph_userid: (required)
        :param str candidate_id: ID of the candidate. (Required) (required)
        :param str job_id: ID of the job. (Required) (required)
        :return: AdditionalFieldsUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_userid', 'candidate_id', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_job_specific_additional_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_job_specific_additional_fields`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `update_job_specific_additional_fields`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_job_specific_additional_fields`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `update_job_specific_additional_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/jobs/{jobId}/additional-fields', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdditionalFieldsUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
