# coding: utf-8

"""
    applicants-api

    This API collection enables seamless operations by facilitating the retrieval of essential applicant details, updating and managing hiring statuses for candidates, assigning multiple candidates as leads for specific job roles, and obtaining detailed activity logs associated with applicants.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phenom.commons.api_client import ApiClient


class ActivityApi(object):
    base_path = "/candidates-api/applications"  # your base path

    def __init__(self, token, gateway_url, apikey, api_client=None):
        if api_client is None:
            api_client = ApiClient(gateway_url + self.base_path, apikey, token)
        self.api_client = api_client

    def get_job_activities(self, candidate_id, x_ph_userid, **kwargs):  # noqa: E501
        """Get Job Activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_activities(candidate_id, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: Id of candidate. (required)
        :param str x_ph_userid: (required)
        :param int _from: The number of activities to skip before starting to collect the result.
        :param int size: The number of activities to be included in the request.
        :return: JobActivities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_activities_with_http_info(candidate_id, x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_activities_with_http_info(candidate_id, x_ph_userid, **kwargs)  # noqa: E501
            return data

    def get_job_activities_with_http_info(self, candidate_id, x_ph_userid, **kwargs):  # noqa: E501
        """Get Job Activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_activities_with_http_info(candidate_id, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: Id of candidate. (required)
        :param str x_ph_userid: (required)
        :param int _from: The number of activities to skip before starting to collect the result.
        :param int size: The number of activities to be included in the request.
        :return: JobActivities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'x_ph_userid', '_from', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_activities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_job_activities`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `get_job_activities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/job-activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobActivities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
