# coding: utf-8

"""
    applicants-api

    This API collection enables seamless operations by facilitating the retrieval of essential applicant details, updating and managing hiring statuses for candidates, assigning multiple candidates as leads for specific job roles, and obtaining detailed activity logs associated with applicants.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class AssignCandidatesToJobResponse(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'object',
        'message': 'str',
        'status': 'str'
    }

    attribute_map = {
        'data': 'data',
        'message': 'message',
        'status': 'status'
    }

    def __init__(self, data=None, message=None, status=None):  # noqa: E501
        """AssignCandidatesToJobResponse - a model defined in Swagger"""  # noqa: E501
        self._data = None
        self._message = None
        self._status = None
        self.discriminator = None
        if data is not None:
            self.data = data
        if message is not None:
            self.message = message
        if status is not None:
            self.status = status

    @property
    def data(self):
        """Gets the data of this AssignCandidatesToJobResponse.  # noqa: E501

        Data object for additional information related to the assignment of candidates to a job.  # noqa: E501

        :return: The data of this AssignCandidatesToJobResponse.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AssignCandidatesToJobResponse.

        Data object for additional information related to the assignment of candidates to a job.  # noqa: E501

        :param data: The data of this AssignCandidatesToJobResponse.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def message(self):
        """Gets the message of this AssignCandidatesToJobResponse.  # noqa: E501

        A message related to the assignment of candidates to the job.  # noqa: E501

        :return: The message of this AssignCandidatesToJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AssignCandidatesToJobResponse.

        A message related to the assignment of candidates to the job.  # noqa: E501

        :param message: The message of this AssignCandidatesToJobResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this AssignCandidatesToJobResponse.  # noqa: E501

        The overall status of the assignment process.  # noqa: E501

        :return: The status of this AssignCandidatesToJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssignCandidatesToJobResponse.

        The overall status of the assignment process.  # noqa: E501

        :param status: The status of this AssignCandidatesToJobResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignCandidatesToJobResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignCandidatesToJobResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
