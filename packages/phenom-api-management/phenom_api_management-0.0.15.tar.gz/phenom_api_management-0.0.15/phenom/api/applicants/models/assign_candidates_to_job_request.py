# coding: utf-8

"""
    applicants-api

    This API collection enables seamless operations by facilitating the retrieval of essential applicant details, updating and managing hiring statuses for candidates, assigning multiple candidates as leads for specific job roles, and obtaining detailed activity logs associated with applicants.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class AssignCandidatesToJobRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'candidate_ids': 'list[str]',
        'job_id': 'str',
        'sync_to_ats': 'bool',
        'push_to_ats': 'bool'
    }

    attribute_map = {
        'candidate_ids': 'candidateIds',
        'job_id': 'jobId',
        'sync_to_ats': 'syncToATS',
        'push_to_ats': 'pushToATS'
    }

    def __init__(self, candidate_ids=None, job_id=None, sync_to_ats=None, push_to_ats=None):  # noqa: E501
        """AssignCandidatesToJobRequest - a model defined in Swagger"""  # noqa: E501
        self._candidate_ids = None
        self._job_id = None
        self._sync_to_ats = None
        self._push_to_ats = None
        self.discriminator = None
        if candidate_ids is not None:
            self.candidate_ids = candidate_ids
        if job_id is not None:
            self.job_id = job_id
        if sync_to_ats is not None:
            self.sync_to_ats = sync_to_ats
        if push_to_ats is not None:
            self.push_to_ats = push_to_ats

    @property
    def candidate_ids(self):
        """Gets the candidate_ids of this AssignCandidatesToJobRequest.  # noqa: E501

        An array of candidate IDs to be assigned to the specified job.  # noqa: E501

        :return: The candidate_ids of this AssignCandidatesToJobRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._candidate_ids

    @candidate_ids.setter
    def candidate_ids(self, candidate_ids):
        """Sets the candidate_ids of this AssignCandidatesToJobRequest.

        An array of candidate IDs to be assigned to the specified job.  # noqa: E501

        :param candidate_ids: The candidate_ids of this AssignCandidatesToJobRequest.  # noqa: E501
        :type: list[str]
        """

        self._candidate_ids = candidate_ids

    @property
    def job_id(self):
        """Gets the job_id of this AssignCandidatesToJobRequest.  # noqa: E501

        The unique identifier of the job to which candidates are to be assigned.  # noqa: E501

        :return: The job_id of this AssignCandidatesToJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this AssignCandidatesToJobRequest.

        The unique identifier of the job to which candidates are to be assigned.  # noqa: E501

        :param job_id: The job_id of this AssignCandidatesToJobRequest.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def sync_to_ats(self):
        """Gets the sync_to_ats of this AssignCandidatesToJobRequest.  # noqa: E501

        A boolean indicating whether the assignment should be synchronized with the Applicant Tracking System (ATS).  # noqa: E501

        :return: The sync_to_ats of this AssignCandidatesToJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._sync_to_ats

    @sync_to_ats.setter
    def sync_to_ats(self, sync_to_ats):
        """Sets the sync_to_ats of this AssignCandidatesToJobRequest.

        A boolean indicating whether the assignment should be synchronized with the Applicant Tracking System (ATS).  # noqa: E501

        :param sync_to_ats: The sync_to_ats of this AssignCandidatesToJobRequest.  # noqa: E501
        :type: bool
        """

        self._sync_to_ats = sync_to_ats

    @property
    def push_to_ats(self):
        """Gets the push_to_ats of this AssignCandidatesToJobRequest.  # noqa: E501

        A boolean indicating whether the assigned candidates should be pushed to the Applicant Tracking System (ATS).  # noqa: E501

        :return: The push_to_ats of this AssignCandidatesToJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._push_to_ats

    @push_to_ats.setter
    def push_to_ats(self, push_to_ats):
        """Sets the push_to_ats of this AssignCandidatesToJobRequest.

        A boolean indicating whether the assigned candidates should be pushed to the Applicant Tracking System (ATS).  # noqa: E501

        :param push_to_ats: The push_to_ats of this AssignCandidatesToJobRequest.  # noqa: E501
        :type: bool
        """

        self._push_to_ats = push_to_ats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignCandidatesToJobRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignCandidatesToJobRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
