# coding: utf-8

"""
    candidates-api-activities

    The Note APIs allows you to Add, Get, Update and Delete Notes.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetNoteActivitiesData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recruiters_user_id': 'str',
        'action_type': 'str',
        'created_date': 'str',
        'candidate_id': 'str',
        'action_value': 'str',
        'added_new_value': 'str',
        'scope_attr': 'GetNoteActivitiesScopeAttr',
        'recruiter_name': 'str'
    }

    attribute_map = {
        'recruiters_user_id': 'recruitersUserId',
        'action_type': 'actionType',
        'created_date': 'createdDate',
        'candidate_id': 'candidateId',
        'action_value': 'actionValue',
        'added_new_value': 'addedNewValue',
        'scope_attr': 'scopeAttr',
        'recruiter_name': 'recruiterName'
    }

    def __init__(self, recruiters_user_id=None, action_type=None, created_date=None, candidate_id=None, action_value=None, added_new_value=None, scope_attr=None, recruiter_name=None):  # noqa: E501
        """GetNoteActivitiesData - a model defined in Swagger"""  # noqa: E501
        self._recruiters_user_id = None
        self._action_type = None
        self._created_date = None
        self._candidate_id = None
        self._action_value = None
        self._added_new_value = None
        self._scope_attr = None
        self._recruiter_name = None
        self.discriminator = None
        self.recruiters_user_id = recruiters_user_id
        self.action_type = action_type
        self.created_date = created_date
        self.candidate_id = candidate_id
        self.action_value = action_value
        self.added_new_value = added_new_value
        self.scope_attr = scope_attr
        self.recruiter_name = recruiter_name

    @property
    def recruiters_user_id(self):
        """Gets the recruiters_user_id of this GetNoteActivitiesData.  # noqa: E501

        The user ID of the recruiter associated with the activity.  # noqa: E501

        :return: The recruiters_user_id of this GetNoteActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._recruiters_user_id

    @recruiters_user_id.setter
    def recruiters_user_id(self, recruiters_user_id):
        """Sets the recruiters_user_id of this GetNoteActivitiesData.

        The user ID of the recruiter associated with the activity.  # noqa: E501

        :param recruiters_user_id: The recruiters_user_id of this GetNoteActivitiesData.  # noqa: E501
        :type: str
        """
        if recruiters_user_id is None:
            raise ValueError("Invalid value for `recruiters_user_id`, must not be `None`")  # noqa: E501

        self._recruiters_user_id = recruiters_user_id

    @property
    def action_type(self):
        """Gets the action_type of this GetNoteActivitiesData.  # noqa: E501

        The type of action performed, such as 'create', 'update', or 'delete'.  # noqa: E501

        :return: The action_type of this GetNoteActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this GetNoteActivitiesData.

        The type of action performed, such as 'create', 'update', or 'delete'.  # noqa: E501

        :param action_type: The action_type of this GetNoteActivitiesData.  # noqa: E501
        :type: str
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501

        self._action_type = action_type

    @property
    def created_date(self):
        """Gets the created_date of this GetNoteActivitiesData.  # noqa: E501

        The timestamp when the activity was created.  # noqa: E501

        :return: The created_date of this GetNoteActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GetNoteActivitiesData.

        The timestamp when the activity was created.  # noqa: E501

        :param created_date: The created_date of this GetNoteActivitiesData.  # noqa: E501
        :type: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def candidate_id(self):
        """Gets the candidate_id of this GetNoteActivitiesData.  # noqa: E501

        The ID of the candidate related to the activity.  # noqa: E501

        :return: The candidate_id of this GetNoteActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this GetNoteActivitiesData.

        The ID of the candidate related to the activity.  # noqa: E501

        :param candidate_id: The candidate_id of this GetNoteActivitiesData.  # noqa: E501
        :type: str
        """
        if candidate_id is None:
            raise ValueError("Invalid value for `candidate_id`, must not be `None`")  # noqa: E501

        self._candidate_id = candidate_id

    @property
    def action_value(self):
        """Gets the action_value of this GetNoteActivitiesData.  # noqa: E501

        The value associated with the action.  # noqa: E501

        :return: The action_value of this GetNoteActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._action_value

    @action_value.setter
    def action_value(self, action_value):
        """Sets the action_value of this GetNoteActivitiesData.

        The value associated with the action.  # noqa: E501

        :param action_value: The action_value of this GetNoteActivitiesData.  # noqa: E501
        :type: str
        """
        if action_value is None:
            raise ValueError("Invalid value for `action_value`, must not be `None`")  # noqa: E501

        self._action_value = action_value

    @property
    def added_new_value(self):
        """Gets the added_new_value of this GetNoteActivitiesData.  # noqa: E501

        The new value added during the update action.  # noqa: E501

        :return: The added_new_value of this GetNoteActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._added_new_value

    @added_new_value.setter
    def added_new_value(self, added_new_value):
        """Sets the added_new_value of this GetNoteActivitiesData.

        The new value added during the update action.  # noqa: E501

        :param added_new_value: The added_new_value of this GetNoteActivitiesData.  # noqa: E501
        :type: str
        """
        if added_new_value is None:
            raise ValueError("Invalid value for `added_new_value`, must not be `None`")  # noqa: E501

        self._added_new_value = added_new_value

    @property
    def scope_attr(self):
        """Gets the scope_attr of this GetNoteActivitiesData.  # noqa: E501


        :return: The scope_attr of this GetNoteActivitiesData.  # noqa: E501
        :rtype: GetNoteActivitiesScopeAttr
        """
        return self._scope_attr

    @scope_attr.setter
    def scope_attr(self, scope_attr):
        """Sets the scope_attr of this GetNoteActivitiesData.


        :param scope_attr: The scope_attr of this GetNoteActivitiesData.  # noqa: E501
        :type: GetNoteActivitiesScopeAttr
        """
        if scope_attr is None:
            raise ValueError("Invalid value for `scope_attr`, must not be `None`")  # noqa: E501

        self._scope_attr = scope_attr

    @property
    def recruiter_name(self):
        """Gets the recruiter_name of this GetNoteActivitiesData.  # noqa: E501

        The name of the recruiter associated with the activity.  # noqa: E501

        :return: The recruiter_name of this GetNoteActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_name

    @recruiter_name.setter
    def recruiter_name(self, recruiter_name):
        """Sets the recruiter_name of this GetNoteActivitiesData.

        The name of the recruiter associated with the activity.  # noqa: E501

        :param recruiter_name: The recruiter_name of this GetNoteActivitiesData.  # noqa: E501
        :type: str
        """
        if recruiter_name is None:
            raise ValueError("Invalid value for `recruiter_name`, must not be `None`")  # noqa: E501

        self._recruiter_name = recruiter_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetNoteActivitiesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetNoteActivitiesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
