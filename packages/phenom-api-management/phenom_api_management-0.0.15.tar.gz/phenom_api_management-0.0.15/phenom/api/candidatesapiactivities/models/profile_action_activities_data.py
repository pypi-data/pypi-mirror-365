# coding: utf-8

"""
    candidates-api-activities

    The Note APIs allows you to Add, Get, Update and Delete Notes.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ProfileActionActivitiesData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recruiters_user_id': 'str',
        'recruiter_name': 'str',
        'candidate_id': 'str',
        'action_type': 'str',
        'created_date': 'float',
        'request_source': 'str',
        'additional_field_name': 'str',
        'previous_value': 'str',
        'updated_value': 'str',
        'action_value': 'str',
        'source': 'str',
        'reason': 'str',
        'from_name': 'str',
        'to_name': 'str',
        'category_name': 'str',
        'email': 'str',
        'event': 'str'
    }

    attribute_map = {
        'recruiters_user_id': 'recruitersUserId',
        'recruiter_name': 'recruiterName',
        'candidate_id': 'candidateId',
        'action_type': 'actionType',
        'created_date': 'createdDate',
        'request_source': 'requestSource',
        'additional_field_name': 'additionalFieldName',
        'previous_value': 'previousValue',
        'updated_value': 'updatedValue',
        'action_value': 'actionValue',
        'source': 'source',
        'reason': 'reason',
        'from_name': 'fromName',
        'to_name': 'toName',
        'category_name': 'categoryName',
        'email': 'email',
        'event': 'event'
    }

    def __init__(self, recruiters_user_id=None, recruiter_name=None, candidate_id=None, action_type=None, created_date=None, request_source=None, additional_field_name=None, previous_value=None, updated_value=None, action_value=None, source=None, reason=None, from_name=None, to_name=None, category_name=None, email=None, event=None):  # noqa: E501
        """ProfileActionActivitiesData - a model defined in Swagger"""  # noqa: E501
        self._recruiters_user_id = None
        self._recruiter_name = None
        self._candidate_id = None
        self._action_type = None
        self._created_date = None
        self._request_source = None
        self._additional_field_name = None
        self._previous_value = None
        self._updated_value = None
        self._action_value = None
        self._source = None
        self._reason = None
        self._from_name = None
        self._to_name = None
        self._category_name = None
        self._email = None
        self._event = None
        self.discriminator = None
        if recruiters_user_id is not None:
            self.recruiters_user_id = recruiters_user_id
        if recruiter_name is not None:
            self.recruiter_name = recruiter_name
        if candidate_id is not None:
            self.candidate_id = candidate_id
        if action_type is not None:
            self.action_type = action_type
        if created_date is not None:
            self.created_date = created_date
        if request_source is not None:
            self.request_source = request_source
        if additional_field_name is not None:
            self.additional_field_name = additional_field_name
        if previous_value is not None:
            self.previous_value = previous_value
        if updated_value is not None:
            self.updated_value = updated_value
        if action_value is not None:
            self.action_value = action_value
        if source is not None:
            self.source = source
        if reason is not None:
            self.reason = reason
        if from_name is not None:
            self.from_name = from_name
        if to_name is not None:
            self.to_name = to_name
        if category_name is not None:
            self.category_name = category_name
        if email is not None:
            self.email = email
        if event is not None:
            self.event = event

    @property
    def recruiters_user_id(self):
        """Gets the recruiters_user_id of this ProfileActionActivitiesData.  # noqa: E501

        The user ID of the recruiter associated with the profile action activity.  # noqa: E501

        :return: The recruiters_user_id of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._recruiters_user_id

    @recruiters_user_id.setter
    def recruiters_user_id(self, recruiters_user_id):
        """Sets the recruiters_user_id of this ProfileActionActivitiesData.

        The user ID of the recruiter associated with the profile action activity.  # noqa: E501

        :param recruiters_user_id: The recruiters_user_id of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._recruiters_user_id = recruiters_user_id

    @property
    def recruiter_name(self):
        """Gets the recruiter_name of this ProfileActionActivitiesData.  # noqa: E501

        The name of the recruiter associated with the profile action activity.  # noqa: E501

        :return: The recruiter_name of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_name

    @recruiter_name.setter
    def recruiter_name(self, recruiter_name):
        """Sets the recruiter_name of this ProfileActionActivitiesData.

        The name of the recruiter associated with the profile action activity.  # noqa: E501

        :param recruiter_name: The recruiter_name of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._recruiter_name = recruiter_name

    @property
    def candidate_id(self):
        """Gets the candidate_id of this ProfileActionActivitiesData.  # noqa: E501

        The ID of the candidate associated with the profile action activity.  # noqa: E501

        :return: The candidate_id of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this ProfileActionActivitiesData.

        The ID of the candidate associated with the profile action activity.  # noqa: E501

        :param candidate_id: The candidate_id of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._candidate_id = candidate_id

    @property
    def action_type(self):
        """Gets the action_type of this ProfileActionActivitiesData.  # noqa: E501

        The type of action performed in the profile action activity.  # noqa: E501

        :return: The action_type of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this ProfileActionActivitiesData.

        The type of action performed in the profile action activity.  # noqa: E501

        :param action_type: The action_type of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._action_type = action_type

    @property
    def created_date(self):
        """Gets the created_date of this ProfileActionActivitiesData.  # noqa: E501

        The date when the profile action activity was created.  # noqa: E501

        :return: The created_date of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: float
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProfileActionActivitiesData.

        The date when the profile action activity was created.  # noqa: E501

        :param created_date: The created_date of this ProfileActionActivitiesData.  # noqa: E501
        :type: float
        """

        self._created_date = created_date

    @property
    def request_source(self):
        """Gets the request_source of this ProfileActionActivitiesData.  # noqa: E501

        The source from which the profile action activity request originated.  # noqa: E501

        :return: The request_source of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._request_source

    @request_source.setter
    def request_source(self, request_source):
        """Sets the request_source of this ProfileActionActivitiesData.

        The source from which the profile action activity request originated.  # noqa: E501

        :param request_source: The request_source of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._request_source = request_source

    @property
    def additional_field_name(self):
        """Gets the additional_field_name of this ProfileActionActivitiesData.  # noqa: E501

        The name of the additional field associated with the profile action activity.  # noqa: E501

        :return: The additional_field_name of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._additional_field_name

    @additional_field_name.setter
    def additional_field_name(self, additional_field_name):
        """Sets the additional_field_name of this ProfileActionActivitiesData.

        The name of the additional field associated with the profile action activity.  # noqa: E501

        :param additional_field_name: The additional_field_name of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._additional_field_name = additional_field_name

    @property
    def previous_value(self):
        """Gets the previous_value of this ProfileActionActivitiesData.  # noqa: E501

        The previous value of the updated field.  # noqa: E501

        :return: The previous_value of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._previous_value

    @previous_value.setter
    def previous_value(self, previous_value):
        """Sets the previous_value of this ProfileActionActivitiesData.

        The previous value of the updated field.  # noqa: E501

        :param previous_value: The previous_value of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._previous_value = previous_value

    @property
    def updated_value(self):
        """Gets the updated_value of this ProfileActionActivitiesData.  # noqa: E501

        The updated value of the field in the profile action activity.  # noqa: E501

        :return: The updated_value of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._updated_value

    @updated_value.setter
    def updated_value(self, updated_value):
        """Sets the updated_value of this ProfileActionActivitiesData.

        The updated value of the field in the profile action activity.  # noqa: E501

        :param updated_value: The updated_value of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._updated_value = updated_value

    @property
    def action_value(self):
        """Gets the action_value of this ProfileActionActivitiesData.  # noqa: E501

        The value associated with the action performed in the profile action activity.  # noqa: E501

        :return: The action_value of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._action_value

    @action_value.setter
    def action_value(self, action_value):
        """Sets the action_value of this ProfileActionActivitiesData.

        The value associated with the action performed in the profile action activity.  # noqa: E501

        :param action_value: The action_value of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._action_value = action_value

    @property
    def source(self):
        """Gets the source of this ProfileActionActivitiesData.  # noqa: E501

        The source or origin of the profile action activity.  # noqa: E501

        :return: The source of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ProfileActionActivitiesData.

        The source or origin of the profile action activity.  # noqa: E501

        :param source: The source of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def reason(self):
        """Gets the reason of this ProfileActionActivitiesData.  # noqa: E501

        The reason or justification for the profile action activity.  # noqa: E501

        :return: The reason of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ProfileActionActivitiesData.

        The reason or justification for the profile action activity.  # noqa: E501

        :param reason: The reason of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def from_name(self):
        """Gets the from_name of this ProfileActionActivitiesData.  # noqa: E501

        The name associated with the sender of the profile action activity.  # noqa: E501

        :return: The from_name of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this ProfileActionActivitiesData.

        The name associated with the sender of the profile action activity.  # noqa: E501

        :param from_name: The from_name of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._from_name = from_name

    @property
    def to_name(self):
        """Gets the to_name of this ProfileActionActivitiesData.  # noqa: E501

        The name of the recipient in the profile action activity.  # noqa: E501

        :return: The to_name of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._to_name

    @to_name.setter
    def to_name(self, to_name):
        """Sets the to_name of this ProfileActionActivitiesData.

        The name of the recipient in the profile action activity.  # noqa: E501

        :param to_name: The to_name of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._to_name = to_name

    @property
    def category_name(self):
        """Gets the category_name of this ProfileActionActivitiesData.  # noqa: E501

        The name of the category associated with the profile action activity.  # noqa: E501

        :return: The category_name of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this ProfileActionActivitiesData.

        The name of the category associated with the profile action activity.  # noqa: E501

        :param category_name: The category_name of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._category_name = category_name

    @property
    def email(self):
        """Gets the email of this ProfileActionActivitiesData.  # noqa: E501

        The email associated with the profile action activity.  # noqa: E501

        :return: The email of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProfileActionActivitiesData.

        The email associated with the profile action activity.  # noqa: E501

        :param email: The email of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def event(self):
        """Gets the event of this ProfileActionActivitiesData.  # noqa: E501

        The event or occurrence associated with the profile action activity.  # noqa: E501

        :return: The event of this ProfileActionActivitiesData.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this ProfileActionActivitiesData.

        The event or occurrence associated with the profile action activity.  # noqa: E501

        :param event: The event of this ProfileActionActivitiesData.  # noqa: E501
        :type: str
        """

        self._event = event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileActionActivitiesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileActionActivitiesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
