# coding: utf-8

"""
    candidates-api-activities

    The Note APIs allows you to Add, Get, Update and Delete Notes.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phenom.commons.api_client import ApiClient


class CandidateNotesApi(object):
    base_path = "/candidates-api/activities"  # your base path

    def __init__(self, token, gateway_url, apikey, api_client=None):
        if api_client is None:
            api_client = ApiClient(gateway_url + self.base_path, apikey, token)
        self.api_client = api_client

    def add_notes(self, body, candidate_id, **kwargs):  # noqa: E501
        """Add Note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_notes(body, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddNotes body: Add notes to candidates. (required)
        :param str candidate_id: Unique identifier for the Candidate. (required)
        :param str x_ph_user_id:
        :return: CreateNoteSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_notes_with_http_info(body, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_notes_with_http_info(body, candidate_id, **kwargs)  # noqa: E501
            return data

    def add_notes_with_http_info(self, body, candidate_id, **kwargs):  # noqa: E501
        """Add Note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_notes_with_http_info(body, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddNotes body: Add notes to candidates. (required)
        :param str candidate_id: Unique identifier for the Candidate. (required)
        :param str x_ph_user_id:
        :return: CreateNoteSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'candidate_id', 'x_ph_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_notes`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `add_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateNoteSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_notes(self, candidate_id, note_id, x_ph_userid, **kwargs):  # noqa: E501
        """Delete Note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_notes(candidate_id, note_id, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: Unique Identifier for the candidate. (required)
        :param str note_id: Unique Identifier for the note. (required)
        :param str x_ph_userid: (required)
        :return: DeleteNoteSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_notes_with_http_info(candidate_id, note_id, x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_notes_with_http_info(candidate_id, note_id, x_ph_userid, **kwargs)  # noqa: E501
            return data

    def delete_notes_with_http_info(self, candidate_id, note_id, x_ph_userid, **kwargs):  # noqa: E501
        """Delete Note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_notes_with_http_info(candidate_id, note_id, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str candidate_id: Unique Identifier for the candidate. (required)
        :param str note_id: Unique Identifier for the note. (required)
        :param str x_ph_userid: (required)
        :return: DeleteNoteSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candidate_id', 'note_id', 'x_ph_userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `delete_notes`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `delete_notes`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `delete_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/notes/{noteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteNoteSuccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_candidate_job_notes(self, x_ph_user_id, job_id, candidate_id, **kwargs):  # noqa: E501
        """Get Candidate Job Notes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_job_notes(x_ph_user_id, job_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_user_id: (required)
        :param str job_id: (required)
        :param str candidate_id: (required)
        :return: GetCandidateJobNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candidate_job_notes_with_http_info(x_ph_user_id, job_id, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candidate_job_notes_with_http_info(x_ph_user_id, job_id, candidate_id, **kwargs)  # noqa: E501
            return data

    def get_candidate_job_notes_with_http_info(self, x_ph_user_id, job_id, candidate_id, **kwargs):  # noqa: E501
        """Get Candidate Job Notes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candidate_job_notes_with_http_info(x_ph_user_id, job_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_user_id: (required)
        :param str job_id: (required)
        :param str candidate_id: (required)
        :return: GetCandidateJobNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ph_user_id', 'job_id', 'candidate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candidate_job_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_candidate_job_notes`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_candidate_job_notes`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_candidate_job_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/jobs/{jobId}/candidates/{candidateId}/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCandidateJobNotes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notes(self, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Get Notes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notes(x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_user_id: (required)
        :param str candidate_id: (required)
        :param int _from: The number of notes to skip before starting to collect the result.
        :param int size: size of the result.
        :param str request_type: requestType of the notes.
        :param str recruiter_email: email of the recruiter.
        :param bool include_private_notes: Boolean flag to check whether to include private notes.
        :return: FetchCandidateNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notes_with_http_info(x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notes_with_http_info(x_ph_user_id, candidate_id, **kwargs)  # noqa: E501
            return data

    def get_notes_with_http_info(self, x_ph_user_id, candidate_id, **kwargs):  # noqa: E501
        """Get Notes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notes_with_http_info(x_ph_user_id, candidate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_user_id: (required)
        :param str candidate_id: (required)
        :param int _from: The number of notes to skip before starting to collect the result.
        :param int size: size of the result.
        :param str request_type: requestType of the notes.
        :param str recruiter_email: email of the recruiter.
        :param bool include_private_notes: Boolean flag to check whether to include private notes.
        :return: FetchCandidateNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ph_user_id', 'candidate_id', '_from', 'size', 'request_type', 'recruiter_email', 'include_private_notes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_ph_user_id' is set
        if ('x_ph_user_id' not in params or
                params['x_ph_user_id'] is None):
            raise ValueError("Missing the required parameter `x_ph_user_id` when calling `get_notes`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `get_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'request_type' in params:
            query_params.append(('requestType', params['request_type']))  # noqa: E501
        if 'recruiter_email' in params:
            query_params.append(('recruiterEmail', params['recruiter_email']))  # noqa: E501
        if 'include_private_notes' in params:
            query_params.append(('includePrivateNotes', params['include_private_notes']))  # noqa: E501

        header_params = {}
        if 'x_ph_user_id' in params:
            header_params['x-ph-userId'] = params['x_ph_user_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FetchCandidateNotes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_notes(self, body, x_ph_userid, candidate_id, note_id, **kwargs):  # noqa: E501
        """Update Note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_notes(body, x_ph_userid, candidate_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCandidateNote body: update CandidateNote (required)
        :param str x_ph_userid: (required)
        :param str candidate_id: (required)
        :param str note_id: (required)
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_notes_with_http_info(body, x_ph_userid, candidate_id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_notes_with_http_info(body, x_ph_userid, candidate_id, note_id, **kwargs)  # noqa: E501
            return data

    def update_notes_with_http_info(self, body, x_ph_userid, candidate_id, note_id, **kwargs):  # noqa: E501
        """Update Note  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_notes_with_http_info(body, x_ph_userid, candidate_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCandidateNote body: update CandidateNote (required)
        :param str x_ph_userid: (required)
        :param str candidate_id: (required)
        :param str note_id: (required)
        :return: SuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_userid', 'candidate_id', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_notes`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `update_notes`")  # noqa: E501
        # verify the required parameter 'candidate_id' is set
        if ('candidate_id' not in params or
                params['candidate_id'] is None):
            raise ValueError("Missing the required parameter `candidate_id` when calling `update_notes`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `update_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'candidate_id' in params:
            path_params['candidateId'] = params['candidate_id']  # noqa: E501
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/candidates/{candidateId}/notes/{noteId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
