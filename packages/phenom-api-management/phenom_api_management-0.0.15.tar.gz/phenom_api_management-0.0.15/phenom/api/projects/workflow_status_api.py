# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phenom.commons.api_client import ApiClient


class WorkflowStatusApi(object):
    base_path = "/projects-api"  # your base path

    def __init__(self, token, gateway_url, apikey, api_client=None):
        if api_client is None:
            api_client = ApiClient(gateway_url + self.base_path, apikey, token)
        self.api_client = api_client

    def create_workflow_status(self, body, x_ph_userid, **kwargs):  # noqa: E501
        """Create Workflow-Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workflow_status(body, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkflowStatusRequest body: Create workflow status (required)
        :param str x_ph_userid: (required)
        :return: CreationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_workflow_status_with_http_info(body, x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_workflow_status_with_http_info(body, x_ph_userid, **kwargs)  # noqa: E501
            return data

    def create_workflow_status_with_http_info(self, body, x_ph_userid, **kwargs):  # noqa: E501
        """Create Workflow-Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workflow_status_with_http_info(body, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkflowStatusRequest body: Create workflow status (required)
        :param str x_ph_userid: (required)
        :return: CreationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_ph_userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workflow_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_workflow_status`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `create_workflow_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/workflow-statuses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflow_status(self, status_id, x_ph_userid, **kwargs):  # noqa: E501
        """Delete Workflow-Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow_status(status_id, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status_id: statusId (required)
        :param str x_ph_userid: (required)
        :return: DeleteWorkflowStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflow_status_with_http_info(status_id, x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflow_status_with_http_info(status_id, x_ph_userid, **kwargs)  # noqa: E501
            return data

    def delete_workflow_status_with_http_info(self, status_id, x_ph_userid, **kwargs):  # noqa: E501
        """Delete Workflow-Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workflow_status_with_http_info(status_id, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status_id: statusId (required)
        :param str x_ph_userid: (required)
        :return: DeleteWorkflowStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status_id', 'x_ph_userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflow_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status_id' is set
        if ('status_id' not in params or
                params['status_id'] is None):
            raise ValueError("Missing the required parameter `status_id` when calling `delete_workflow_status`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `delete_workflow_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'status_id' in params:
            path_params['statusId'] = params['status_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/workflow-statuses/{statusId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteWorkflowStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_status(self, x_ph_userid, **kwargs):  # noqa: E501
        """Get Workflow-Statuses  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_status(x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_userid: (required)
        :param int _from: The number of workflow-statuses to skip before starting to collect the result
        :param int size: size of the result
        :param str search_name: keyword to search
        :return: GetAllWorkflowStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_status_with_http_info(x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_status_with_http_info(x_ph_userid, **kwargs)  # noqa: E501
            return data

    def get_workflow_status_with_http_info(self, x_ph_userid, **kwargs):  # noqa: E501
        """Get Workflow-Statuses  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_status_with_http_info(x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_ph_userid: (required)
        :param int _from: The number of workflow-statuses to skip before starting to collect the result
        :param int size: size of the result
        :param str search_name: keyword to search
        :return: GetAllWorkflowStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_ph_userid', '_from', 'size', 'search_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `get_workflow_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'search_name' in params:
            query_params.append(('searchName', params['search_name']))  # noqa: E501

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/workflow-statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllWorkflowStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_status_with_id(self, status_id, x_ph_userid, **kwargs):  # noqa: E501
        """Get Workflow by statusId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_status_with_id(status_id, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status_id: statusId (required)
        :param str x_ph_userid: (required)
        :return: GetWorkflowStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_status_with_id_with_http_info(status_id, x_ph_userid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_status_with_id_with_http_info(status_id, x_ph_userid, **kwargs)  # noqa: E501
            return data

    def get_workflow_status_with_id_with_http_info(self, status_id, x_ph_userid, **kwargs):  # noqa: E501
        """Get Workflow by statusId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_status_with_id_with_http_info(status_id, x_ph_userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status_id: statusId (required)
        :param str x_ph_userid: (required)
        :return: GetWorkflowStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status_id', 'x_ph_userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_status_with_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status_id' is set
        if ('status_id' not in params or
                params['status_id'] is None):
            raise ValueError("Missing the required parameter `status_id` when calling `get_workflow_status_with_id`")  # noqa: E501
        # verify the required parameter 'x_ph_userid' is set
        if ('x_ph_userid' not in params or
                params['x_ph_userid'] is None):
            raise ValueError("Missing the required parameter `x_ph_userid` when calling `get_workflow_status_with_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'status_id' in params:
            path_params['statusId'] = params['status_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_ph_userid' in params:
            header_params['x-ph-userid'] = params['x_ph_userid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/workflow-statuses/{statusId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWorkflowStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
