# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetProjectsResponseMatchingCriteria(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'must_have_skills': 'list[object]',
        'good_to_have_skills': 'list[object]',
        'location_list': 'list[object]',
        'years_of_experience': 'GetProjectsResponseMatchingCriteriaYearsOfExperience',
        'distance': 'GetProjectsResponseMatchingCriteriaDistance',
        'similar_job_title': 'str',
        'ideal_candidate': 'object'
    }

    attribute_map = {
        'must_have_skills': 'mustHaveSkills',
        'good_to_have_skills': 'goodToHaveSkills',
        'location_list': 'locationList',
        'years_of_experience': 'yearsOfExperience',
        'distance': 'distance',
        'similar_job_title': 'similarJobTitle',
        'ideal_candidate': 'idealCandidate'
    }

    def __init__(self, must_have_skills=None, good_to_have_skills=None, location_list=None, years_of_experience=None, distance=None, similar_job_title=None, ideal_candidate=None):  # noqa: E501
        """GetProjectsResponseMatchingCriteria - a model defined in Swagger"""  # noqa: E501
        self._must_have_skills = None
        self._good_to_have_skills = None
        self._location_list = None
        self._years_of_experience = None
        self._distance = None
        self._similar_job_title = None
        self._ideal_candidate = None
        self.discriminator = None
        if must_have_skills is not None:
            self.must_have_skills = must_have_skills
        if good_to_have_skills is not None:
            self.good_to_have_skills = good_to_have_skills
        if location_list is not None:
            self.location_list = location_list
        if years_of_experience is not None:
            self.years_of_experience = years_of_experience
        if distance is not None:
            self.distance = distance
        if similar_job_title is not None:
            self.similar_job_title = similar_job_title
        if ideal_candidate is not None:
            self.ideal_candidate = ideal_candidate

    @property
    def must_have_skills(self):
        """Gets the must_have_skills of this GetProjectsResponseMatchingCriteria.  # noqa: E501

        An array containing details of must-have skills for the project.  # noqa: E501

        :return: The must_have_skills of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :rtype: list[object]
        """
        return self._must_have_skills

    @must_have_skills.setter
    def must_have_skills(self, must_have_skills):
        """Sets the must_have_skills of this GetProjectsResponseMatchingCriteria.

        An array containing details of must-have skills for the project.  # noqa: E501

        :param must_have_skills: The must_have_skills of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :type: list[object]
        """

        self._must_have_skills = must_have_skills

    @property
    def good_to_have_skills(self):
        """Gets the good_to_have_skills of this GetProjectsResponseMatchingCriteria.  # noqa: E501

        An array containing details of good-to-have skills for the project.  # noqa: E501

        :return: The good_to_have_skills of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :rtype: list[object]
        """
        return self._good_to_have_skills

    @good_to_have_skills.setter
    def good_to_have_skills(self, good_to_have_skills):
        """Sets the good_to_have_skills of this GetProjectsResponseMatchingCriteria.

        An array containing details of good-to-have skills for the project.  # noqa: E501

        :param good_to_have_skills: The good_to_have_skills of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :type: list[object]
        """

        self._good_to_have_skills = good_to_have_skills

    @property
    def location_list(self):
        """Gets the location_list of this GetProjectsResponseMatchingCriteria.  # noqa: E501

        An array containing details of locations for the project.  # noqa: E501

        :return: The location_list of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :rtype: list[object]
        """
        return self._location_list

    @location_list.setter
    def location_list(self, location_list):
        """Sets the location_list of this GetProjectsResponseMatchingCriteria.

        An array containing details of locations for the project.  # noqa: E501

        :param location_list: The location_list of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :type: list[object]
        """

        self._location_list = location_list

    @property
    def years_of_experience(self):
        """Gets the years_of_experience of this GetProjectsResponseMatchingCriteria.  # noqa: E501


        :return: The years_of_experience of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :rtype: GetProjectsResponseMatchingCriteriaYearsOfExperience
        """
        return self._years_of_experience

    @years_of_experience.setter
    def years_of_experience(self, years_of_experience):
        """Sets the years_of_experience of this GetProjectsResponseMatchingCriteria.


        :param years_of_experience: The years_of_experience of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :type: GetProjectsResponseMatchingCriteriaYearsOfExperience
        """

        self._years_of_experience = years_of_experience

    @property
    def distance(self):
        """Gets the distance of this GetProjectsResponseMatchingCriteria.  # noqa: E501


        :return: The distance of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :rtype: GetProjectsResponseMatchingCriteriaDistance
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this GetProjectsResponseMatchingCriteria.


        :param distance: The distance of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :type: GetProjectsResponseMatchingCriteriaDistance
        """

        self._distance = distance

    @property
    def similar_job_title(self):
        """Gets the similar_job_title of this GetProjectsResponseMatchingCriteria.  # noqa: E501

        The similar job title for the project.  # noqa: E501

        :return: The similar_job_title of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :rtype: str
        """
        return self._similar_job_title

    @similar_job_title.setter
    def similar_job_title(self, similar_job_title):
        """Sets the similar_job_title of this GetProjectsResponseMatchingCriteria.

        The similar job title for the project.  # noqa: E501

        :param similar_job_title: The similar_job_title of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :type: str
        """

        self._similar_job_title = similar_job_title

    @property
    def ideal_candidate(self):
        """Gets the ideal_candidate of this GetProjectsResponseMatchingCriteria.  # noqa: E501

        Details of the ideal candidate for the project.  # noqa: E501

        :return: The ideal_candidate of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :rtype: object
        """
        return self._ideal_candidate

    @ideal_candidate.setter
    def ideal_candidate(self, ideal_candidate):
        """Sets the ideal_candidate of this GetProjectsResponseMatchingCriteria.

        Details of the ideal candidate for the project.  # noqa: E501

        :param ideal_candidate: The ideal_candidate of this GetProjectsResponseMatchingCriteria.  # noqa: E501
        :type: object
        """

        self._ideal_candidate = ideal_candidate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProjectsResponseMatchingCriteria, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProjectsResponseMatchingCriteria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
