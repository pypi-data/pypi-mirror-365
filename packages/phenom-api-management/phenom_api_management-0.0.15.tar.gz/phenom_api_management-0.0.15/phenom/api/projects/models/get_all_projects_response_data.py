# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetAllProjectsResponseData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_name': 'str',
        'project_id': 'str',
        'created_date': 'str',
        'created_recruiter_info': 'GetAllProjectsResponseCreatedRecruiterInfo',
        'workflow_id': 'str',
        'workflow_name': 'str'
    }

    attribute_map = {
        'project_name': 'projectName',
        'project_id': 'projectId',
        'created_date': 'createdDate',
        'created_recruiter_info': 'createdRecruiterInfo',
        'workflow_id': 'workflowId',
        'workflow_name': 'workflowName'
    }

    def __init__(self, project_name=None, project_id=None, created_date=None, created_recruiter_info=None, workflow_id=None, workflow_name=None):  # noqa: E501
        """GetAllProjectsResponseData - a model defined in Swagger"""  # noqa: E501
        self._project_name = None
        self._project_id = None
        self._created_date = None
        self._created_recruiter_info = None
        self._workflow_id = None
        self._workflow_name = None
        self.discriminator = None
        self.project_name = project_name
        self.project_id = project_id
        self.created_date = created_date
        self.created_recruiter_info = created_recruiter_info
        self.workflow_id = workflow_id
        self.workflow_name = workflow_name

    @property
    def project_name(self):
        """Gets the project_name of this GetAllProjectsResponseData.  # noqa: E501

        The name of the project.  # noqa: E501

        :return: The project_name of this GetAllProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this GetAllProjectsResponseData.

        The name of the project.  # noqa: E501

        :param project_name: The project_name of this GetAllProjectsResponseData.  # noqa: E501
        :type: str
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def project_id(self):
        """Gets the project_id of this GetAllProjectsResponseData.  # noqa: E501

        The unique identifier for the project.  # noqa: E501

        :return: The project_id of this GetAllProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GetAllProjectsResponseData.

        The unique identifier for the project.  # noqa: E501

        :param project_id: The project_id of this GetAllProjectsResponseData.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def created_date(self):
        """Gets the created_date of this GetAllProjectsResponseData.  # noqa: E501

        The date when the project was created.  # noqa: E501

        :return: The created_date of this GetAllProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GetAllProjectsResponseData.

        The date when the project was created.  # noqa: E501

        :param created_date: The created_date of this GetAllProjectsResponseData.  # noqa: E501
        :type: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def created_recruiter_info(self):
        """Gets the created_recruiter_info of this GetAllProjectsResponseData.  # noqa: E501


        :return: The created_recruiter_info of this GetAllProjectsResponseData.  # noqa: E501
        :rtype: GetAllProjectsResponseCreatedRecruiterInfo
        """
        return self._created_recruiter_info

    @created_recruiter_info.setter
    def created_recruiter_info(self, created_recruiter_info):
        """Sets the created_recruiter_info of this GetAllProjectsResponseData.


        :param created_recruiter_info: The created_recruiter_info of this GetAllProjectsResponseData.  # noqa: E501
        :type: GetAllProjectsResponseCreatedRecruiterInfo
        """
        if created_recruiter_info is None:
            raise ValueError("Invalid value for `created_recruiter_info`, must not be `None`")  # noqa: E501

        self._created_recruiter_info = created_recruiter_info

    @property
    def workflow_id(self):
        """Gets the workflow_id of this GetAllProjectsResponseData.  # noqa: E501

        The unique identifier for the workflow associated with the project.  # noqa: E501

        :return: The workflow_id of this GetAllProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this GetAllProjectsResponseData.

        The unique identifier for the workflow associated with the project.  # noqa: E501

        :param workflow_id: The workflow_id of this GetAllProjectsResponseData.  # noqa: E501
        :type: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")  # noqa: E501

        self._workflow_id = workflow_id

    @property
    def workflow_name(self):
        """Gets the workflow_name of this GetAllProjectsResponseData.  # noqa: E501

        The name of the workflow associated with the project.  # noqa: E501

        :return: The workflow_name of this GetAllProjectsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._workflow_name

    @workflow_name.setter
    def workflow_name(self, workflow_name):
        """Sets the workflow_name of this GetAllProjectsResponseData.

        The name of the workflow associated with the project.  # noqa: E501

        :param workflow_name: The workflow_name of this GetAllProjectsResponseData.  # noqa: E501
        :type: str
        """
        if workflow_name is None:
            raise ValueError("Invalid value for `workflow_name`, must not be `None`")  # noqa: E501

        self._workflow_name = workflow_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAllProjectsResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAllProjectsResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
