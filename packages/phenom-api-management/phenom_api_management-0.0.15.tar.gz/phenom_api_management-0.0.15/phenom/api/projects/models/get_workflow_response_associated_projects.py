# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetWorkflowResponseAssociatedProjects(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'str',
        'project_name': 'str'
    }

    attribute_map = {
        'project_id': 'projectId',
        'project_name': 'projectName'
    }

    def __init__(self, project_id=None, project_name=None):  # noqa: E501
        """GetWorkflowResponseAssociatedProjects - a model defined in Swagger"""  # noqa: E501
        self._project_id = None
        self._project_name = None
        self.discriminator = None
        self.project_id = project_id
        self.project_name = project_name

    @property
    def project_id(self):
        """Gets the project_id of this GetWorkflowResponseAssociatedProjects.  # noqa: E501

        ID of the associated project.  # noqa: E501

        :return: The project_id of this GetWorkflowResponseAssociatedProjects.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GetWorkflowResponseAssociatedProjects.

        ID of the associated project.  # noqa: E501

        :param project_id: The project_id of this GetWorkflowResponseAssociatedProjects.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this GetWorkflowResponseAssociatedProjects.  # noqa: E501

        Name of the associated project.  # noqa: E501

        :return: The project_name of this GetWorkflowResponseAssociatedProjects.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this GetWorkflowResponseAssociatedProjects.

        Name of the associated project.  # noqa: E501

        :param project_name: The project_name of this GetWorkflowResponseAssociatedProjects.  # noqa: E501
        :type: str
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetWorkflowResponseAssociatedProjects, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetWorkflowResponseAssociatedProjects):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
