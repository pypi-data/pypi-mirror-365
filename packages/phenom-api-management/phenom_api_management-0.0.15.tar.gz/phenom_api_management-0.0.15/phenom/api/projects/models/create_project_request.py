# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CreateProjectRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_name': 'str',
        'project_description': 'str',
        'is_confidential': 'bool',
        'category_list': 'list[CreateProjectRequestCategoryList]',
        'end_date': 'str',
        'hiring_team_list': 'list[CreateProjectRequestHiringTeamList]',
        'project_attachment_list': 'list[CreateProjectRequestProjectAttachmentList]',
        'workflow_id': 'str',
        'workflow_name': 'str',
        'created_recruiter_info': 'CreateProjectRequestCreatedRecruiterInfo',
        'status': 'str'
    }

    attribute_map = {
        'project_name': 'projectName',
        'project_description': 'projectDescription',
        'is_confidential': 'isConfidential',
        'category_list': 'categoryList',
        'end_date': 'endDate',
        'hiring_team_list': 'hiringTeamList',
        'project_attachment_list': 'projectAttachmentList',
        'workflow_id': 'workflowId',
        'workflow_name': 'workflowName',
        'created_recruiter_info': 'createdRecruiterInfo',
        'status': 'status'
    }

    def __init__(self, project_name=None, project_description=None, is_confidential=None, category_list=None, end_date=None, hiring_team_list=None, project_attachment_list=None, workflow_id=None, workflow_name=None, created_recruiter_info=None, status=None):  # noqa: E501
        """CreateProjectRequest - a model defined in Swagger"""  # noqa: E501
        self._project_name = None
        self._project_description = None
        self._is_confidential = None
        self._category_list = None
        self._end_date = None
        self._hiring_team_list = None
        self._project_attachment_list = None
        self._workflow_id = None
        self._workflow_name = None
        self._created_recruiter_info = None
        self._status = None
        self.discriminator = None
        self.project_name = project_name
        if project_description is not None:
            self.project_description = project_description
        self.is_confidential = is_confidential
        if category_list is not None:
            self.category_list = category_list
        if end_date is not None:
            self.end_date = end_date
        self.hiring_team_list = hiring_team_list
        if project_attachment_list is not None:
            self.project_attachment_list = project_attachment_list
        self.workflow_id = workflow_id
        self.workflow_name = workflow_name
        self.created_recruiter_info = created_recruiter_info
        self.status = status

    @property
    def project_name(self):
        """Gets the project_name of this CreateProjectRequest.  # noqa: E501

        Name of the project.  # noqa: E501

        :return: The project_name of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this CreateProjectRequest.

        Name of the project.  # noqa: E501

        :param project_name: The project_name of this CreateProjectRequest.  # noqa: E501
        :type: str
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def project_description(self):
        """Gets the project_description of this CreateProjectRequest.  # noqa: E501

        Description of the project.  # noqa: E501

        :return: The project_description of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_description

    @project_description.setter
    def project_description(self, project_description):
        """Sets the project_description of this CreateProjectRequest.

        Description of the project.  # noqa: E501

        :param project_description: The project_description of this CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._project_description = project_description

    @property
    def is_confidential(self):
        """Gets the is_confidential of this CreateProjectRequest.  # noqa: E501

        Flag indicating whether the project is confidential.  # noqa: E501

        :return: The is_confidential of this CreateProjectRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_confidential

    @is_confidential.setter
    def is_confidential(self, is_confidential):
        """Sets the is_confidential of this CreateProjectRequest.

        Flag indicating whether the project is confidential.  # noqa: E501

        :param is_confidential: The is_confidential of this CreateProjectRequest.  # noqa: E501
        :type: bool
        """
        if is_confidential is None:
            raise ValueError("Invalid value for `is_confidential`, must not be `None`")  # noqa: E501

        self._is_confidential = is_confidential

    @property
    def category_list(self):
        """Gets the category_list of this CreateProjectRequest.  # noqa: E501

        List of project categories.  # noqa: E501

        :return: The category_list of this CreateProjectRequest.  # noqa: E501
        :rtype: list[CreateProjectRequestCategoryList]
        """
        return self._category_list

    @category_list.setter
    def category_list(self, category_list):
        """Sets the category_list of this CreateProjectRequest.

        List of project categories.  # noqa: E501

        :param category_list: The category_list of this CreateProjectRequest.  # noqa: E501
        :type: list[CreateProjectRequestCategoryList]
        """

        self._category_list = category_list

    @property
    def end_date(self):
        """Gets the end_date of this CreateProjectRequest.  # noqa: E501

        End date of the project.  # noqa: E501

        :return: The end_date of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CreateProjectRequest.

        End date of the project.  # noqa: E501

        :param end_date: The end_date of this CreateProjectRequest.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def hiring_team_list(self):
        """Gets the hiring_team_list of this CreateProjectRequest.  # noqa: E501

        List of hiring team members.  # noqa: E501

        :return: The hiring_team_list of this CreateProjectRequest.  # noqa: E501
        :rtype: list[CreateProjectRequestHiringTeamList]
        """
        return self._hiring_team_list

    @hiring_team_list.setter
    def hiring_team_list(self, hiring_team_list):
        """Sets the hiring_team_list of this CreateProjectRequest.

        List of hiring team members.  # noqa: E501

        :param hiring_team_list: The hiring_team_list of this CreateProjectRequest.  # noqa: E501
        :type: list[CreateProjectRequestHiringTeamList]
        """
        if hiring_team_list is None:
            raise ValueError("Invalid value for `hiring_team_list`, must not be `None`")  # noqa: E501

        self._hiring_team_list = hiring_team_list

    @property
    def project_attachment_list(self):
        """Gets the project_attachment_list of this CreateProjectRequest.  # noqa: E501

        List of project attachments.  # noqa: E501

        :return: The project_attachment_list of this CreateProjectRequest.  # noqa: E501
        :rtype: list[CreateProjectRequestProjectAttachmentList]
        """
        return self._project_attachment_list

    @project_attachment_list.setter
    def project_attachment_list(self, project_attachment_list):
        """Sets the project_attachment_list of this CreateProjectRequest.

        List of project attachments.  # noqa: E501

        :param project_attachment_list: The project_attachment_list of this CreateProjectRequest.  # noqa: E501
        :type: list[CreateProjectRequestProjectAttachmentList]
        """

        self._project_attachment_list = project_attachment_list

    @property
    def workflow_id(self):
        """Gets the workflow_id of this CreateProjectRequest.  # noqa: E501

        ID of the workflow associated with the project.  # noqa: E501

        :return: The workflow_id of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this CreateProjectRequest.

        ID of the workflow associated with the project.  # noqa: E501

        :param workflow_id: The workflow_id of this CreateProjectRequest.  # noqa: E501
        :type: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")  # noqa: E501

        self._workflow_id = workflow_id

    @property
    def workflow_name(self):
        """Gets the workflow_name of this CreateProjectRequest.  # noqa: E501

        Name of the workflow associated with the project.  # noqa: E501

        :return: The workflow_name of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._workflow_name

    @workflow_name.setter
    def workflow_name(self, workflow_name):
        """Sets the workflow_name of this CreateProjectRequest.

        Name of the workflow associated with the project.  # noqa: E501

        :param workflow_name: The workflow_name of this CreateProjectRequest.  # noqa: E501
        :type: str
        """
        if workflow_name is None:
            raise ValueError("Invalid value for `workflow_name`, must not be `None`")  # noqa: E501

        self._workflow_name = workflow_name

    @property
    def created_recruiter_info(self):
        """Gets the created_recruiter_info of this CreateProjectRequest.  # noqa: E501


        :return: The created_recruiter_info of this CreateProjectRequest.  # noqa: E501
        :rtype: CreateProjectRequestCreatedRecruiterInfo
        """
        return self._created_recruiter_info

    @created_recruiter_info.setter
    def created_recruiter_info(self, created_recruiter_info):
        """Sets the created_recruiter_info of this CreateProjectRequest.


        :param created_recruiter_info: The created_recruiter_info of this CreateProjectRequest.  # noqa: E501
        :type: CreateProjectRequestCreatedRecruiterInfo
        """
        if created_recruiter_info is None:
            raise ValueError("Invalid value for `created_recruiter_info`, must not be `None`")  # noqa: E501

        self._created_recruiter_info = created_recruiter_info

    @property
    def status(self):
        """Gets the status of this CreateProjectRequest.  # noqa: E501

        Status of the project.  # noqa: E501

        :return: The status of this CreateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateProjectRequest.

        Status of the project.  # noqa: E501

        :param status: The status of this CreateProjectRequest.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateProjectRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateProjectRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
