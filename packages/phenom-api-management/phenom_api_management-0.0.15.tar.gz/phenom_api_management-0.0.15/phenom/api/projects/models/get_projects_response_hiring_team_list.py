# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetProjectsResponseHiringTeamList(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'email_id': 'str',
        'role': 'str',
        'id': 'str',
        'type': 'str',
        'picture_s3_url': 'str'
    }

    attribute_map = {
        'name': 'name',
        'email_id': 'emailId',
        'role': 'role',
        'id': 'id',
        'type': 'type',
        'picture_s3_url': 'pictureS3Url'
    }

    def __init__(self, name=None, email_id=None, role=None, id=None, type=None, picture_s3_url=None):  # noqa: E501
        """GetProjectsResponseHiringTeamList - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._email_id = None
        self._role = None
        self._id = None
        self._type = None
        self._picture_s3_url = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if email_id is not None:
            self.email_id = email_id
        if role is not None:
            self.role = role
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if picture_s3_url is not None:
            self.picture_s3_url = picture_s3_url

    @property
    def name(self):
        """Gets the name of this GetProjectsResponseHiringTeamList.  # noqa: E501

        The name of a member in the hiring team.  # noqa: E501

        :return: The name of this GetProjectsResponseHiringTeamList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetProjectsResponseHiringTeamList.

        The name of a member in the hiring team.  # noqa: E501

        :param name: The name of this GetProjectsResponseHiringTeamList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email_id(self):
        """Gets the email_id of this GetProjectsResponseHiringTeamList.  # noqa: E501

        The email address of a member in the hiring team.  # noqa: E501

        :return: The email_id of this GetProjectsResponseHiringTeamList.  # noqa: E501
        :rtype: str
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id):
        """Sets the email_id of this GetProjectsResponseHiringTeamList.

        The email address of a member in the hiring team.  # noqa: E501

        :param email_id: The email_id of this GetProjectsResponseHiringTeamList.  # noqa: E501
        :type: str
        """

        self._email_id = email_id

    @property
    def role(self):
        """Gets the role of this GetProjectsResponseHiringTeamList.  # noqa: E501

        The role of a member in the hiring team.  # noqa: E501

        :return: The role of this GetProjectsResponseHiringTeamList.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this GetProjectsResponseHiringTeamList.

        The role of a member in the hiring team.  # noqa: E501

        :param role: The role of this GetProjectsResponseHiringTeamList.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def id(self):
        """Gets the id of this GetProjectsResponseHiringTeamList.  # noqa: E501

        The unique identifier for a member in the hiring team.  # noqa: E501

        :return: The id of this GetProjectsResponseHiringTeamList.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetProjectsResponseHiringTeamList.

        The unique identifier for a member in the hiring team.  # noqa: E501

        :param id: The id of this GetProjectsResponseHiringTeamList.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this GetProjectsResponseHiringTeamList.  # noqa: E501

        The type of a member in the hiring team.  # noqa: E501

        :return: The type of this GetProjectsResponseHiringTeamList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetProjectsResponseHiringTeamList.

        The type of a member in the hiring team.  # noqa: E501

        :param type: The type of this GetProjectsResponseHiringTeamList.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def picture_s3_url(self):
        """Gets the picture_s3_url of this GetProjectsResponseHiringTeamList.  # noqa: E501

        The URL of the picture of a member in the hiring team.  # noqa: E501

        :return: The picture_s3_url of this GetProjectsResponseHiringTeamList.  # noqa: E501
        :rtype: str
        """
        return self._picture_s3_url

    @picture_s3_url.setter
    def picture_s3_url(self, picture_s3_url):
        """Sets the picture_s3_url of this GetProjectsResponseHiringTeamList.

        The URL of the picture of a member in the hiring team.  # noqa: E501

        :param picture_s3_url: The picture_s3_url of this GetProjectsResponseHiringTeamList.  # noqa: E501
        :type: str
        """

        self._picture_s3_url = picture_s3_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProjectsResponseHiringTeamList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProjectsResponseHiringTeamList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
