# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetProjectActivitiesResponse(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'message': 'str',
        'timestamp': 'str',
        'pagination': 'GetProjectActivitiesResponsePagination',
        'data': 'list[GetProjectActivitiesResponseData]'
    }

    attribute_map = {
        'status': 'status',
        'message': 'message',
        'timestamp': 'timestamp',
        'pagination': 'pagination',
        'data': 'data'
    }

    def __init__(self, status=None, message=None, timestamp=None, pagination=None, data=None):  # noqa: E501
        """GetProjectActivitiesResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._message = None
        self._timestamp = None
        self._pagination = None
        self._data = None
        self.discriminator = None
        self.status = status
        self.message = message
        self.timestamp = timestamp
        self.pagination = pagination
        self.data = data

    @property
    def status(self):
        """Gets the status of this GetProjectActivitiesResponse.  # noqa: E501

        Status of the response.  # noqa: E501

        :return: The status of this GetProjectActivitiesResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetProjectActivitiesResponse.

        Status of the response.  # noqa: E501

        :param status: The status of this GetProjectActivitiesResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def message(self):
        """Gets the message of this GetProjectActivitiesResponse.  # noqa: E501

        Message associated with the response.  # noqa: E501

        :return: The message of this GetProjectActivitiesResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GetProjectActivitiesResponse.

        Message associated with the response.  # noqa: E501

        :param message: The message of this GetProjectActivitiesResponse.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def timestamp(self):
        """Gets the timestamp of this GetProjectActivitiesResponse.  # noqa: E501

        Timestamp of the response.  # noqa: E501

        :return: The timestamp of this GetProjectActivitiesResponse.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GetProjectActivitiesResponse.

        Timestamp of the response.  # noqa: E501

        :param timestamp: The timestamp of this GetProjectActivitiesResponse.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def pagination(self):
        """Gets the pagination of this GetProjectActivitiesResponse.  # noqa: E501


        :return: The pagination of this GetProjectActivitiesResponse.  # noqa: E501
        :rtype: GetProjectActivitiesResponsePagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this GetProjectActivitiesResponse.


        :param pagination: The pagination of this GetProjectActivitiesResponse.  # noqa: E501
        :type: GetProjectActivitiesResponsePagination
        """
        if pagination is None:
            raise ValueError("Invalid value for `pagination`, must not be `None`")  # noqa: E501

        self._pagination = pagination

    @property
    def data(self):
        """Gets the data of this GetProjectActivitiesResponse.  # noqa: E501


        :return: The data of this GetProjectActivitiesResponse.  # noqa: E501
        :rtype: list[GetProjectActivitiesResponseData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GetProjectActivitiesResponse.


        :param data: The data of this GetProjectActivitiesResponse.  # noqa: E501
        :type: list[GetProjectActivitiesResponseData]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProjectActivitiesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProjectActivitiesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
