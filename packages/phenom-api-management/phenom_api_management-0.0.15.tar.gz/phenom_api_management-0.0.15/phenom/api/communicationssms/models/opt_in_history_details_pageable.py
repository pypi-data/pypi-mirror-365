# coding: utf-8

"""
    communications-sms

    These APIs ensures an easy integration process of SMS management for developers to send, read, and track SMS histories within applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class OptInHistoryDetailsPageable(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sort': 'OptInHistoryDetailsPageableSort',
        'page_number': 'int',
        'page_size': 'int',
        'offset': 'int',
        'paged': 'bool',
        'unpaged': 'bool'
    }

    attribute_map = {
        'sort': 'sort',
        'page_number': 'pageNumber',
        'page_size': 'pageSize',
        'offset': 'offset',
        'paged': 'paged',
        'unpaged': 'unpaged'
    }

    def __init__(self, sort=None, page_number=None, page_size=None, offset=None, paged=None, unpaged=None):  # noqa: E501
        """OptInHistoryDetailsPageable - a model defined in Swagger"""  # noqa: E501
        self._sort = None
        self._page_number = None
        self._page_size = None
        self._offset = None
        self._paged = None
        self._unpaged = None
        self.discriminator = None
        self.sort = sort
        self.page_number = page_number
        self.page_size = page_size
        self.offset = offset
        self.paged = paged
        self.unpaged = unpaged

    @property
    def sort(self):
        """Gets the sort of this OptInHistoryDetailsPageable.  # noqa: E501


        :return: The sort of this OptInHistoryDetailsPageable.  # noqa: E501
        :rtype: OptInHistoryDetailsPageableSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this OptInHistoryDetailsPageable.


        :param sort: The sort of this OptInHistoryDetailsPageable.  # noqa: E501
        :type: OptInHistoryDetailsPageableSort
        """
        if sort is None:
            raise ValueError("Invalid value for `sort`, must not be `None`")  # noqa: E501

        self._sort = sort

    @property
    def page_number(self):
        """Gets the page_number of this OptInHistoryDetailsPageable.  # noqa: E501

        The current page number.  # noqa: E501

        :return: The page_number of this OptInHistoryDetailsPageable.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this OptInHistoryDetailsPageable.

        The current page number.  # noqa: E501

        :param page_number: The page_number of this OptInHistoryDetailsPageable.  # noqa: E501
        :type: int
        """
        if page_number is None:
            raise ValueError("Invalid value for `page_number`, must not be `None`")  # noqa: E501

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this OptInHistoryDetailsPageable.  # noqa: E501

        The size of each page.  # noqa: E501

        :return: The page_size of this OptInHistoryDetailsPageable.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this OptInHistoryDetailsPageable.

        The size of each page.  # noqa: E501

        :param page_size: The page_size of this OptInHistoryDetailsPageable.  # noqa: E501
        :type: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    @property
    def offset(self):
        """Gets the offset of this OptInHistoryDetailsPageable.  # noqa: E501

        The offset of the content.  # noqa: E501

        :return: The offset of this OptInHistoryDetailsPageable.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this OptInHistoryDetailsPageable.

        The offset of the content.  # noqa: E501

        :param offset: The offset of this OptInHistoryDetailsPageable.  # noqa: E501
        :type: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def paged(self):
        """Gets the paged of this OptInHistoryDetailsPageable.  # noqa: E501

        Indicates whether the content is paged.  # noqa: E501

        :return: The paged of this OptInHistoryDetailsPageable.  # noqa: E501
        :rtype: bool
        """
        return self._paged

    @paged.setter
    def paged(self, paged):
        """Sets the paged of this OptInHistoryDetailsPageable.

        Indicates whether the content is paged.  # noqa: E501

        :param paged: The paged of this OptInHistoryDetailsPageable.  # noqa: E501
        :type: bool
        """
        if paged is None:
            raise ValueError("Invalid value for `paged`, must not be `None`")  # noqa: E501

        self._paged = paged

    @property
    def unpaged(self):
        """Gets the unpaged of this OptInHistoryDetailsPageable.  # noqa: E501

        Indicates whether the content is unpaged.  # noqa: E501

        :return: The unpaged of this OptInHistoryDetailsPageable.  # noqa: E501
        :rtype: bool
        """
        return self._unpaged

    @unpaged.setter
    def unpaged(self, unpaged):
        """Sets the unpaged of this OptInHistoryDetailsPageable.

        Indicates whether the content is unpaged.  # noqa: E501

        :param unpaged: The unpaged of this OptInHistoryDetailsPageable.  # noqa: E501
        :type: bool
        """
        if unpaged is None:
            raise ValueError("Invalid value for `unpaged`, must not be `None`")  # noqa: E501

        self._unpaged = unpaged

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptInHistoryDetailsPageable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptInHistoryDetailsPageable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
