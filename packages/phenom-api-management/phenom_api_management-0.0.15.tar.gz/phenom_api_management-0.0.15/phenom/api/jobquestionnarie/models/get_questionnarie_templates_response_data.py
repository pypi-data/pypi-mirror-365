# coding: utf-8

"""
    jobs-questionnarie-api

    These APIs streamline question management, providing tools to create, delete, and update questions. Additionally, they offer functionality to attach question lists to specific job profiles.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetQuestionnarieTemplatesResponseData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'questionnaire_name': 'str',
        'job_category': 'str',
        'recruiter_name': 'str',
        'recruiter_user_id': 'str',
        'as_default': 'str',
        'updated_date': 'float',
        'template_id': 'str'
    }

    attribute_map = {
        'questionnaire_name': 'questionnaireName',
        'job_category': 'jobCategory',
        'recruiter_name': 'recruiterName',
        'recruiter_user_id': 'recruiterUserId',
        'as_default': 'asDefault',
        'updated_date': 'updatedDate',
        'template_id': 'templateId'
    }

    def __init__(self, questionnaire_name=None, job_category=None, recruiter_name=None, recruiter_user_id=None, as_default=None, updated_date=None, template_id=None):  # noqa: E501
        """GetQuestionnarieTemplatesResponseData - a model defined in Swagger"""  # noqa: E501
        self._questionnaire_name = None
        self._job_category = None
        self._recruiter_name = None
        self._recruiter_user_id = None
        self._as_default = None
        self._updated_date = None
        self._template_id = None
        self.discriminator = None
        if questionnaire_name is not None:
            self.questionnaire_name = questionnaire_name
        if job_category is not None:
            self.job_category = job_category
        if recruiter_name is not None:
            self.recruiter_name = recruiter_name
        if recruiter_user_id is not None:
            self.recruiter_user_id = recruiter_user_id
        if as_default is not None:
            self.as_default = as_default
        if updated_date is not None:
            self.updated_date = updated_date
        if template_id is not None:
            self.template_id = template_id

    @property
    def questionnaire_name(self):
        """Gets the questionnaire_name of this GetQuestionnarieTemplatesResponseData.  # noqa: E501

        Name of the questionnaire.  # noqa: E501

        :return: The questionnaire_name of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_name

    @questionnaire_name.setter
    def questionnaire_name(self, questionnaire_name):
        """Sets the questionnaire_name of this GetQuestionnarieTemplatesResponseData.

        Name of the questionnaire.  # noqa: E501

        :param questionnaire_name: The questionnaire_name of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :type: str
        """

        self._questionnaire_name = questionnaire_name

    @property
    def job_category(self):
        """Gets the job_category of this GetQuestionnarieTemplatesResponseData.  # noqa: E501

        Category associated with the job.  # noqa: E501

        :return: The job_category of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :rtype: str
        """
        return self._job_category

    @job_category.setter
    def job_category(self, job_category):
        """Sets the job_category of this GetQuestionnarieTemplatesResponseData.

        Category associated with the job.  # noqa: E501

        :param job_category: The job_category of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :type: str
        """

        self._job_category = job_category

    @property
    def recruiter_name(self):
        """Gets the recruiter_name of this GetQuestionnarieTemplatesResponseData.  # noqa: E501

        Name of the recruiter.  # noqa: E501

        :return: The recruiter_name of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_name

    @recruiter_name.setter
    def recruiter_name(self, recruiter_name):
        """Sets the recruiter_name of this GetQuestionnarieTemplatesResponseData.

        Name of the recruiter.  # noqa: E501

        :param recruiter_name: The recruiter_name of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :type: str
        """

        self._recruiter_name = recruiter_name

    @property
    def recruiter_user_id(self):
        """Gets the recruiter_user_id of this GetQuestionnarieTemplatesResponseData.  # noqa: E501

        Unique identifier of the recruiter.  # noqa: E501

        :return: The recruiter_user_id of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_user_id

    @recruiter_user_id.setter
    def recruiter_user_id(self, recruiter_user_id):
        """Sets the recruiter_user_id of this GetQuestionnarieTemplatesResponseData.

        Unique identifier of the recruiter.  # noqa: E501

        :param recruiter_user_id: The recruiter_user_id of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :type: str
        """

        self._recruiter_user_id = recruiter_user_id

    @property
    def as_default(self):
        """Gets the as_default of this GetQuestionnarieTemplatesResponseData.  # noqa: E501

        Indicator if the questionnaire is set as default.  # noqa: E501

        :return: The as_default of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :rtype: str
        """
        return self._as_default

    @as_default.setter
    def as_default(self, as_default):
        """Sets the as_default of this GetQuestionnarieTemplatesResponseData.

        Indicator if the questionnaire is set as default.  # noqa: E501

        :param as_default: The as_default of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :type: str
        """

        self._as_default = as_default

    @property
    def updated_date(self):
        """Gets the updated_date of this GetQuestionnarieTemplatesResponseData.  # noqa: E501

        Timestamp indicating the date of the last update.  # noqa: E501

        :return: The updated_date of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :rtype: float
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this GetQuestionnarieTemplatesResponseData.

        Timestamp indicating the date of the last update.  # noqa: E501

        :param updated_date: The updated_date of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :type: float
        """

        self._updated_date = updated_date

    @property
    def template_id(self):
        """Gets the template_id of this GetQuestionnarieTemplatesResponseData.  # noqa: E501

        Unique identifier of the template.  # noqa: E501

        :return: The template_id of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this GetQuestionnarieTemplatesResponseData.

        Unique identifier of the template.  # noqa: E501

        :param template_id: The template_id of this GetQuestionnarieTemplatesResponseData.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetQuestionnarieTemplatesResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetQuestionnarieTemplatesResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
