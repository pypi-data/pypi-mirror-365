# coding: utf-8

"""
    job-parser-api

    The process of extracting important information from the raw job description is called Job Parsing. This information can include things like job titles, required skills, required experience, job duties, and qualifications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ErrorResponseResponse(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'status': 'int',
        'details': 'str',
        'error': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        'title': 'title',
        'status': 'status',
        'details': 'details',
        'error': 'error',
        'timestamp': 'timestamp'
    }

    def __init__(self, title=None, status=None, details=None, error=None, timestamp=None):  # noqa: E501
        """ErrorResponseResponse - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._status = None
        self._details = None
        self._error = None
        self._timestamp = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if status is not None:
            self.status = status
        if details is not None:
            self.details = details
        if error is not None:
            self.error = error
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def title(self):
        """Gets the title of this ErrorResponseResponse.  # noqa: E501

        Title.  # noqa: E501

        :return: The title of this ErrorResponseResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ErrorResponseResponse.

        Title.  # noqa: E501

        :param title: The title of this ErrorResponseResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def status(self):
        """Gets the status of this ErrorResponseResponse.  # noqa: E501

        Status.  # noqa: E501

        :return: The status of this ErrorResponseResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ErrorResponseResponse.

        Status.  # noqa: E501

        :param status: The status of this ErrorResponseResponse.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def details(self):
        """Gets the details of this ErrorResponseResponse.  # noqa: E501

        Error details.  # noqa: E501

        :return: The details of this ErrorResponseResponse.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ErrorResponseResponse.

        Error details.  # noqa: E501

        :param details: The details of this ErrorResponseResponse.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def error(self):
        """Gets the error of this ErrorResponseResponse.  # noqa: E501

        Error message.  # noqa: E501

        :return: The error of this ErrorResponseResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ErrorResponseResponse.

        Error message.  # noqa: E501

        :param error: The error of this ErrorResponseResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def timestamp(self):
        """Gets the timestamp of this ErrorResponseResponse.  # noqa: E501

        Time stamp.  # noqa: E501

        :return: The timestamp of this ErrorResponseResponse.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ErrorResponseResponse.

        Time stamp.  # noqa: E501

        :param timestamp: The timestamp of this ErrorResponseResponse.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorResponseResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorResponseResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
