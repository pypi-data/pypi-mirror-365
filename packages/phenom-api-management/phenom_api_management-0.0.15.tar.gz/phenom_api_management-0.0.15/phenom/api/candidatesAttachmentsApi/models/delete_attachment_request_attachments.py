# coding: utf-8

"""
    candidates-attachments-api

    The Candidate APIs allows you to add, update and delete candidate attachments.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class DeleteAttachmentRequestAttachments(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attachment_type': 'str',
        'md5sum': 'str',
        'attachment_name': 'str',
        'field_id': 'str'
    }

    attribute_map = {
        'attachment_type': 'attachmentType',
        'md5sum': 'md5sum',
        'attachment_name': 'attachmentName',
        'field_id': 'fieldId'
    }

    def __init__(self, attachment_type=None, md5sum=None, attachment_name=None, field_id=None):  # noqa: E501
        """DeleteAttachmentRequestAttachments - a model defined in Swagger"""  # noqa: E501
        self._attachment_type = None
        self._md5sum = None
        self._attachment_name = None
        self._field_id = None
        self.discriminator = None
        self.attachment_type = attachment_type
        self.md5sum = md5sum
        self.attachment_name = attachment_name
        if field_id is not None:
            self.field_id = field_id

    @property
    def attachment_type(self):
        """Gets the attachment_type of this DeleteAttachmentRequestAttachments.  # noqa: E501

        The type of the attachment to be deleted.  # noqa: E501

        :return: The attachment_type of this DeleteAttachmentRequestAttachments.  # noqa: E501
        :rtype: str
        """
        return self._attachment_type

    @attachment_type.setter
    def attachment_type(self, attachment_type):
        """Sets the attachment_type of this DeleteAttachmentRequestAttachments.

        The type of the attachment to be deleted.  # noqa: E501

        :param attachment_type: The attachment_type of this DeleteAttachmentRequestAttachments.  # noqa: E501
        :type: str
        """
        if attachment_type is None:
            raise ValueError("Invalid value for `attachment_type`, must not be `None`")  # noqa: E501

        self._attachment_type = attachment_type

    @property
    def md5sum(self):
        """Gets the md5sum of this DeleteAttachmentRequestAttachments.  # noqa: E501

        The MD5 checksum of the attachment to be deleted.  # noqa: E501

        :return: The md5sum of this DeleteAttachmentRequestAttachments.  # noqa: E501
        :rtype: str
        """
        return self._md5sum

    @md5sum.setter
    def md5sum(self, md5sum):
        """Sets the md5sum of this DeleteAttachmentRequestAttachments.

        The MD5 checksum of the attachment to be deleted.  # noqa: E501

        :param md5sum: The md5sum of this DeleteAttachmentRequestAttachments.  # noqa: E501
        :type: str
        """
        if md5sum is None:
            raise ValueError("Invalid value for `md5sum`, must not be `None`")  # noqa: E501

        self._md5sum = md5sum

    @property
    def attachment_name(self):
        """Gets the attachment_name of this DeleteAttachmentRequestAttachments.  # noqa: E501

        The name of the attachment to be deleted.  # noqa: E501

        :return: The attachment_name of this DeleteAttachmentRequestAttachments.  # noqa: E501
        :rtype: str
        """
        return self._attachment_name

    @attachment_name.setter
    def attachment_name(self, attachment_name):
        """Sets the attachment_name of this DeleteAttachmentRequestAttachments.

        The name of the attachment to be deleted.  # noqa: E501

        :param attachment_name: The attachment_name of this DeleteAttachmentRequestAttachments.  # noqa: E501
        :type: str
        """
        if attachment_name is None:
            raise ValueError("Invalid value for `attachment_name`, must not be `None`")  # noqa: E501

        self._attachment_name = attachment_name

    @property
    def field_id(self):
        """Gets the field_id of this DeleteAttachmentRequestAttachments.  # noqa: E501

        The ID of the attachment field to be deleted.  # noqa: E501

        :return: The field_id of this DeleteAttachmentRequestAttachments.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this DeleteAttachmentRequestAttachments.

        The ID of the attachment field to be deleted.  # noqa: E501

        :param field_id: The field_id of this DeleteAttachmentRequestAttachments.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeleteAttachmentRequestAttachments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeleteAttachmentRequestAttachments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
