# coding: utf-8

"""
    candidates-attachments-api

    The Candidate APIs allows you to add, update and delete candidate attachments.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class AddAttachmentsRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attachment': 'str',
        'is_parsable_resume': 'bool'
    }

    attribute_map = {
        'attachment': 'attachment',
        'is_parsable_resume': 'isParsableResume'
    }

    def __init__(self, attachment=None, is_parsable_resume=None):  # noqa: E501
        """AddAttachmentsRequest - a model defined in Swagger"""  # noqa: E501
        self._attachment = None
        self._is_parsable_resume = None
        self.discriminator = None
        if attachment is not None:
            self.attachment = attachment
        if is_parsable_resume is not None:
            self.is_parsable_resume = is_parsable_resume

    @property
    def attachment(self):
        """Gets the attachment of this AddAttachmentsRequest.  # noqa: E501

        File upload.  # noqa: E501

        :return: The attachment of this AddAttachmentsRequest.  # noqa: E501
        :rtype: str
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this AddAttachmentsRequest.

        File upload.  # noqa: E501

        :param attachment: The attachment of this AddAttachmentsRequest.  # noqa: E501
        :type: str
        """

        self._attachment = attachment

    @property
    def is_parsable_resume(self):
        """Gets the is_parsable_resume of this AddAttachmentsRequest.  # noqa: E501

        Flag indicating whether the attachment is parsable.  # noqa: E501

        :return: The is_parsable_resume of this AddAttachmentsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_parsable_resume

    @is_parsable_resume.setter
    def is_parsable_resume(self, is_parsable_resume):
        """Sets the is_parsable_resume of this AddAttachmentsRequest.

        Flag indicating whether the attachment is parsable.  # noqa: E501

        :param is_parsable_resume: The is_parsable_resume of this AddAttachmentsRequest.  # noqa: E501
        :type: bool
        """

        self._is_parsable_resume = is_parsable_resume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddAttachmentsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddAttachmentsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
