# coding: utf-8

"""
    recommendations-api

    These APIs provide job suggestions based on your profile, akin job listings, and nearby job opportunities tailored to your qualifications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ProfileMatchingResponse(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'total_count': 'int',
        'jobs': 'list[ProfileMatchingResponseJobs]'
    }

    attribute_map = {
        'status': 'status',
        'total_count': 'totalCount',
        'jobs': 'jobs'
    }

    def __init__(self, status=None, total_count=None, jobs=None):  # noqa: E501
        """ProfileMatchingResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._total_count = None
        self._jobs = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if total_count is not None:
            self.total_count = total_count
        if jobs is not None:
            self.jobs = jobs

    @property
    def status(self):
        """Gets the status of this ProfileMatchingResponse.  # noqa: E501

        HTTP Status code determining the response status.  # noqa: E501

        :return: The status of this ProfileMatchingResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProfileMatchingResponse.

        HTTP Status code determining the response status.  # noqa: E501

        :param status: The status of this ProfileMatchingResponse.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def total_count(self):
        """Gets the total_count of this ProfileMatchingResponse.  # noqa: E501

        Total recommendations identified by the service.  # noqa: E501

        :return: The total_count of this ProfileMatchingResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ProfileMatchingResponse.

        Total recommendations identified by the service.  # noqa: E501

        :param total_count: The total_count of this ProfileMatchingResponse.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def jobs(self):
        """Gets the jobs of this ProfileMatchingResponse.  # noqa: E501


        :return: The jobs of this ProfileMatchingResponse.  # noqa: E501
        :rtype: list[ProfileMatchingResponseJobs]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this ProfileMatchingResponse.


        :param jobs: The jobs of this ProfileMatchingResponse.  # noqa: E501
        :type: list[ProfileMatchingResponseJobs]
        """

        self._jobs = jobs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileMatchingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileMatchingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
