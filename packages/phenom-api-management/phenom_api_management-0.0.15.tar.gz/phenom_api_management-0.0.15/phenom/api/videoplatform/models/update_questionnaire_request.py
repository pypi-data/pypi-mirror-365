# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class UpdateQuestionnaireRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lc_questionnaire_name': 'str',
        'questionnaire_name': 'str',
        'question_ids': 'list[str]',
        'questionnaire_details': 'UpdateQuestionnaireRequestQuestionnaireDetails',
        'date_created': 'int',
        'last_updated': 'int',
        'questions': 'list[UpdateQuestionnaireRequestQuestions]',
        'locales': 'list[UpdateQuestionnaireRequestLocales]',
        'recruiter_user_id': 'str'
    }

    attribute_map = {
        'lc_questionnaire_name': 'lcQuestionnaireName',
        'questionnaire_name': 'questionnaireName',
        'question_ids': 'questionIds',
        'questionnaire_details': 'questionnaireDetails',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'questions': 'questions',
        'locales': 'locales',
        'recruiter_user_id': 'recruiterUserId'
    }

    def __init__(self, lc_questionnaire_name=None, questionnaire_name=None, question_ids=None, questionnaire_details=None, date_created=None, last_updated=None, questions=None, locales=None, recruiter_user_id=None):  # noqa: E501
        """UpdateQuestionnaireRequest - a model defined in Swagger"""  # noqa: E501
        self._lc_questionnaire_name = None
        self._questionnaire_name = None
        self._question_ids = None
        self._questionnaire_details = None
        self._date_created = None
        self._last_updated = None
        self._questions = None
        self._locales = None
        self._recruiter_user_id = None
        self.discriminator = None
        self.lc_questionnaire_name = lc_questionnaire_name
        self.questionnaire_name = questionnaire_name
        self.question_ids = question_ids
        self.questionnaire_details = questionnaire_details
        self.date_created = date_created
        self.last_updated = last_updated
        self.questions = questions
        self.locales = locales
        self.recruiter_user_id = recruiter_user_id

    @property
    def lc_questionnaire_name(self):
        """Gets the lc_questionnaire_name of this UpdateQuestionnaireRequest.  # noqa: E501

        Questionnaire name in lower case.  # noqa: E501

        :return: The lc_questionnaire_name of this UpdateQuestionnaireRequest.  # noqa: E501
        :rtype: str
        """
        return self._lc_questionnaire_name

    @lc_questionnaire_name.setter
    def lc_questionnaire_name(self, lc_questionnaire_name):
        """Sets the lc_questionnaire_name of this UpdateQuestionnaireRequest.

        Questionnaire name in lower case.  # noqa: E501

        :param lc_questionnaire_name: The lc_questionnaire_name of this UpdateQuestionnaireRequest.  # noqa: E501
        :type: str
        """
        if lc_questionnaire_name is None:
            raise ValueError("Invalid value for `lc_questionnaire_name`, must not be `None`")  # noqa: E501

        self._lc_questionnaire_name = lc_questionnaire_name

    @property
    def questionnaire_name(self):
        """Gets the questionnaire_name of this UpdateQuestionnaireRequest.  # noqa: E501

        Questionnaire name.  # noqa: E501

        :return: The questionnaire_name of this UpdateQuestionnaireRequest.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_name

    @questionnaire_name.setter
    def questionnaire_name(self, questionnaire_name):
        """Sets the questionnaire_name of this UpdateQuestionnaireRequest.

        Questionnaire name.  # noqa: E501

        :param questionnaire_name: The questionnaire_name of this UpdateQuestionnaireRequest.  # noqa: E501
        :type: str
        """
        if questionnaire_name is None:
            raise ValueError("Invalid value for `questionnaire_name`, must not be `None`")  # noqa: E501

        self._questionnaire_name = questionnaire_name

    @property
    def question_ids(self):
        """Gets the question_ids of this UpdateQuestionnaireRequest.  # noqa: E501


        :return: The question_ids of this UpdateQuestionnaireRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._question_ids

    @question_ids.setter
    def question_ids(self, question_ids):
        """Sets the question_ids of this UpdateQuestionnaireRequest.


        :param question_ids: The question_ids of this UpdateQuestionnaireRequest.  # noqa: E501
        :type: list[str]
        """
        if question_ids is None:
            raise ValueError("Invalid value for `question_ids`, must not be `None`")  # noqa: E501

        self._question_ids = question_ids

    @property
    def questionnaire_details(self):
        """Gets the questionnaire_details of this UpdateQuestionnaireRequest.  # noqa: E501


        :return: The questionnaire_details of this UpdateQuestionnaireRequest.  # noqa: E501
        :rtype: UpdateQuestionnaireRequestQuestionnaireDetails
        """
        return self._questionnaire_details

    @questionnaire_details.setter
    def questionnaire_details(self, questionnaire_details):
        """Sets the questionnaire_details of this UpdateQuestionnaireRequest.


        :param questionnaire_details: The questionnaire_details of this UpdateQuestionnaireRequest.  # noqa: E501
        :type: UpdateQuestionnaireRequestQuestionnaireDetails
        """
        if questionnaire_details is None:
            raise ValueError("Invalid value for `questionnaire_details`, must not be `None`")  # noqa: E501

        self._questionnaire_details = questionnaire_details

    @property
    def date_created(self):
        """Gets the date_created of this UpdateQuestionnaireRequest.  # noqa: E501

        Date when the questionnaire is created.  # noqa: E501

        :return: The date_created of this UpdateQuestionnaireRequest.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this UpdateQuestionnaireRequest.

        Date when the questionnaire is created.  # noqa: E501

        :param date_created: The date_created of this UpdateQuestionnaireRequest.  # noqa: E501
        :type: int
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this UpdateQuestionnaireRequest.  # noqa: E501

        Date when the questionnaire is updated.  # noqa: E501

        :return: The last_updated of this UpdateQuestionnaireRequest.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this UpdateQuestionnaireRequest.

        Date when the questionnaire is updated.  # noqa: E501

        :param last_updated: The last_updated of this UpdateQuestionnaireRequest.  # noqa: E501
        :type: int
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")  # noqa: E501

        self._last_updated = last_updated

    @property
    def questions(self):
        """Gets the questions of this UpdateQuestionnaireRequest.  # noqa: E501

        All questions in this list.  # noqa: E501

        :return: The questions of this UpdateQuestionnaireRequest.  # noqa: E501
        :rtype: list[UpdateQuestionnaireRequestQuestions]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this UpdateQuestionnaireRequest.

        All questions in this list.  # noqa: E501

        :param questions: The questions of this UpdateQuestionnaireRequest.  # noqa: E501
        :type: list[UpdateQuestionnaireRequestQuestions]
        """
        if questions is None:
            raise ValueError("Invalid value for `questions`, must not be `None`")  # noqa: E501

        self._questions = questions

    @property
    def locales(self):
        """Gets the locales of this UpdateQuestionnaireRequest.  # noqa: E501


        :return: The locales of this UpdateQuestionnaireRequest.  # noqa: E501
        :rtype: list[UpdateQuestionnaireRequestLocales]
        """
        return self._locales

    @locales.setter
    def locales(self, locales):
        """Sets the locales of this UpdateQuestionnaireRequest.


        :param locales: The locales of this UpdateQuestionnaireRequest.  # noqa: E501
        :type: list[UpdateQuestionnaireRequestLocales]
        """
        if locales is None:
            raise ValueError("Invalid value for `locales`, must not be `None`")  # noqa: E501

        self._locales = locales

    @property
    def recruiter_user_id(self):
        """Gets the recruiter_user_id of this UpdateQuestionnaireRequest.  # noqa: E501

        User id of the recruiter.  # noqa: E501

        :return: The recruiter_user_id of this UpdateQuestionnaireRequest.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_user_id

    @recruiter_user_id.setter
    def recruiter_user_id(self, recruiter_user_id):
        """Sets the recruiter_user_id of this UpdateQuestionnaireRequest.

        User id of the recruiter.  # noqa: E501

        :param recruiter_user_id: The recruiter_user_id of this UpdateQuestionnaireRequest.  # noqa: E501
        :type: str
        """
        if recruiter_user_id is None:
            raise ValueError("Invalid value for `recruiter_user_id`, must not be `None`")  # noqa: E501

        self._recruiter_user_id = recruiter_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateQuestionnaireRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateQuestionnaireRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
