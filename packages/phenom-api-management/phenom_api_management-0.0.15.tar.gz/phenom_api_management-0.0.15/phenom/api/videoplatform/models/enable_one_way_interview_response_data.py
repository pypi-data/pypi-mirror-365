# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class EnableOneWayInterviewResponseData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'str',
        'odva_template_config': 'EnableOneWayInterviewResponseDataOdvaTemplateConfig',
        'type': 'str',
        'auto_reminder_data': 'EnableOneWayInterviewResponseDataAutoReminderData',
        'enable_status': 'bool',
        'date_created': 'int',
        'last_updated': 'int'
    }

    attribute_map = {
        'job_id': 'jobId',
        'odva_template_config': 'odvaTemplateConfig',
        'type': 'type',
        'auto_reminder_data': 'autoReminderData',
        'enable_status': 'enableStatus',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated'
    }

    def __init__(self, job_id=None, odva_template_config=None, type=None, auto_reminder_data=None, enable_status=None, date_created=None, last_updated=None):  # noqa: E501
        """EnableOneWayInterviewResponseData - a model defined in Swagger"""  # noqa: E501
        self._job_id = None
        self._odva_template_config = None
        self._type = None
        self._auto_reminder_data = None
        self._enable_status = None
        self._date_created = None
        self._last_updated = None
        self.discriminator = None
        self.job_id = job_id
        self.odva_template_config = odva_template_config
        if type is not None:
            self.type = type
        self.auto_reminder_data = auto_reminder_data
        self.enable_status = enable_status
        self.date_created = date_created
        self.last_updated = last_updated

    @property
    def job_id(self):
        """Gets the job_id of this EnableOneWayInterviewResponseData.  # noqa: E501

        JobId of a Job.  # noqa: E501

        :return: The job_id of this EnableOneWayInterviewResponseData.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this EnableOneWayInterviewResponseData.

        JobId of a Job.  # noqa: E501

        :param job_id: The job_id of this EnableOneWayInterviewResponseData.  # noqa: E501
        :type: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def odva_template_config(self):
        """Gets the odva_template_config of this EnableOneWayInterviewResponseData.  # noqa: E501


        :return: The odva_template_config of this EnableOneWayInterviewResponseData.  # noqa: E501
        :rtype: EnableOneWayInterviewResponseDataOdvaTemplateConfig
        """
        return self._odva_template_config

    @odva_template_config.setter
    def odva_template_config(self, odva_template_config):
        """Sets the odva_template_config of this EnableOneWayInterviewResponseData.


        :param odva_template_config: The odva_template_config of this EnableOneWayInterviewResponseData.  # noqa: E501
        :type: EnableOneWayInterviewResponseDataOdvaTemplateConfig
        """
        if odva_template_config is None:
            raise ValueError("Invalid value for `odva_template_config`, must not be `None`")  # noqa: E501

        self._odva_template_config = odva_template_config

    @property
    def type(self):
        """Gets the type of this EnableOneWayInterviewResponseData.  # noqa: E501

        Config for a job or event.  # noqa: E501

        :return: The type of this EnableOneWayInterviewResponseData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnableOneWayInterviewResponseData.

        Config for a job or event.  # noqa: E501

        :param type: The type of this EnableOneWayInterviewResponseData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def auto_reminder_data(self):
        """Gets the auto_reminder_data of this EnableOneWayInterviewResponseData.  # noqa: E501


        :return: The auto_reminder_data of this EnableOneWayInterviewResponseData.  # noqa: E501
        :rtype: EnableOneWayInterviewResponseDataAutoReminderData
        """
        return self._auto_reminder_data

    @auto_reminder_data.setter
    def auto_reminder_data(self, auto_reminder_data):
        """Sets the auto_reminder_data of this EnableOneWayInterviewResponseData.


        :param auto_reminder_data: The auto_reminder_data of this EnableOneWayInterviewResponseData.  # noqa: E501
        :type: EnableOneWayInterviewResponseDataAutoReminderData
        """
        if auto_reminder_data is None:
            raise ValueError("Invalid value for `auto_reminder_data`, must not be `None`")  # noqa: E501

        self._auto_reminder_data = auto_reminder_data

    @property
    def enable_status(self):
        """Gets the enable_status of this EnableOneWayInterviewResponseData.  # noqa: E501

        true if one way interview is enabled else false.  # noqa: E501

        :return: The enable_status of this EnableOneWayInterviewResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._enable_status

    @enable_status.setter
    def enable_status(self, enable_status):
        """Sets the enable_status of this EnableOneWayInterviewResponseData.

        true if one way interview is enabled else false.  # noqa: E501

        :param enable_status: The enable_status of this EnableOneWayInterviewResponseData.  # noqa: E501
        :type: bool
        """
        if enable_status is None:
            raise ValueError("Invalid value for `enable_status`, must not be `None`")  # noqa: E501

        self._enable_status = enable_status

    @property
    def date_created(self):
        """Gets the date_created of this EnableOneWayInterviewResponseData.  # noqa: E501

        Date of when the one way interview is enabled.  # noqa: E501

        :return: The date_created of this EnableOneWayInterviewResponseData.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this EnableOneWayInterviewResponseData.

        Date of when the one way interview is enabled.  # noqa: E501

        :param date_created: The date_created of this EnableOneWayInterviewResponseData.  # noqa: E501
        :type: int
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this EnableOneWayInterviewResponseData.  # noqa: E501

        Date of when the one way interview is updated whether enabled or disabled.  # noqa: E501

        :return: The last_updated of this EnableOneWayInterviewResponseData.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this EnableOneWayInterviewResponseData.

        Date of when the one way interview is updated whether enabled or disabled.  # noqa: E501

        :param last_updated: The last_updated of this EnableOneWayInterviewResponseData.  # noqa: E501
        :type: int
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")  # noqa: E501

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnableOneWayInterviewResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnableOneWayInterviewResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
