# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class UpdateQuestionnaireRequestQuestionnaireDetails(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_number_retakes': 'float',
        'response_duration_limit_in_sec': 'float'
    }

    attribute_map = {
        'max_number_retakes': 'maxNumberRetakes',
        'response_duration_limit_in_sec': 'responseDurationLimitInSec'
    }

    def __init__(self, max_number_retakes=None, response_duration_limit_in_sec=None):  # noqa: E501
        """UpdateQuestionnaireRequestQuestionnaireDetails - a model defined in Swagger"""  # noqa: E501
        self._max_number_retakes = None
        self._response_duration_limit_in_sec = None
        self.discriminator = None
        self.max_number_retakes = max_number_retakes
        self.response_duration_limit_in_sec = response_duration_limit_in_sec

    @property
    def max_number_retakes(self):
        """Gets the max_number_retakes of this UpdateQuestionnaireRequestQuestionnaireDetails.  # noqa: E501

        Max retakes allowed for a media question.  # noqa: E501

        :return: The max_number_retakes of this UpdateQuestionnaireRequestQuestionnaireDetails.  # noqa: E501
        :rtype: float
        """
        return self._max_number_retakes

    @max_number_retakes.setter
    def max_number_retakes(self, max_number_retakes):
        """Sets the max_number_retakes of this UpdateQuestionnaireRequestQuestionnaireDetails.

        Max retakes allowed for a media question.  # noqa: E501

        :param max_number_retakes: The max_number_retakes of this UpdateQuestionnaireRequestQuestionnaireDetails.  # noqa: E501
        :type: float
        """
        if max_number_retakes is None:
            raise ValueError("Invalid value for `max_number_retakes`, must not be `None`")  # noqa: E501

        self._max_number_retakes = max_number_retakes

    @property
    def response_duration_limit_in_sec(self):
        """Gets the response_duration_limit_in_sec of this UpdateQuestionnaireRequestQuestionnaireDetails.  # noqa: E501

        Max time limit for the question.  # noqa: E501

        :return: The response_duration_limit_in_sec of this UpdateQuestionnaireRequestQuestionnaireDetails.  # noqa: E501
        :rtype: float
        """
        return self._response_duration_limit_in_sec

    @response_duration_limit_in_sec.setter
    def response_duration_limit_in_sec(self, response_duration_limit_in_sec):
        """Sets the response_duration_limit_in_sec of this UpdateQuestionnaireRequestQuestionnaireDetails.

        Max time limit for the question.  # noqa: E501

        :param response_duration_limit_in_sec: The response_duration_limit_in_sec of this UpdateQuestionnaireRequestQuestionnaireDetails.  # noqa: E501
        :type: float
        """
        if response_duration_limit_in_sec is None:
            raise ValueError("Invalid value for `response_duration_limit_in_sec`, must not be `None`")  # noqa: E501

        self._response_duration_limit_in_sec = response_duration_limit_in_sec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateQuestionnaireRequestQuestionnaireDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateQuestionnaireRequestQuestionnaireDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
