# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class PublishQuestionnaireResponseData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'questionnaire_id': 'str',
        'lc_questionnaire_name': 'str',
        'delete': 'bool',
        'disable': 'bool',
        'draft': 'bool',
        'locales': 'list[PublishQuestionnaireResponseDataLocales]',
        'questionnaire_category': 'list[str]',
        'questionnaire_name': 'str',
        'question_ids': 'list[str]',
        'questionnaire_details': 'PublishQuestionnaireResponseDataQuestionnaireDetails',
        'created_by': 'str',
        'created_by_name': 'str',
        'updated_by': 'str',
        'updated_by_name': 'str',
        'video_screen_interview_id': 'str',
        'date_created': 'int',
        'last_updated': 'int'
    }

    attribute_map = {
        'questionnaire_id': 'questionnaireId',
        'lc_questionnaire_name': 'lcQuestionnaireName',
        'delete': 'delete',
        'disable': 'disable',
        'draft': 'draft',
        'locales': 'locales',
        'questionnaire_category': 'questionnaireCategory',
        'questionnaire_name': 'questionnaireName',
        'question_ids': 'questionIds',
        'questionnaire_details': 'questionnaireDetails',
        'created_by': 'createdBy',
        'created_by_name': 'createdByName',
        'updated_by': 'updatedBy',
        'updated_by_name': 'updatedByName',
        'video_screen_interview_id': 'videoScreenInterviewId',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated'
    }

    def __init__(self, questionnaire_id=None, lc_questionnaire_name=None, delete=None, disable=None, draft=None, locales=None, questionnaire_category=None, questionnaire_name=None, question_ids=None, questionnaire_details=None, created_by=None, created_by_name=None, updated_by=None, updated_by_name=None, video_screen_interview_id=None, date_created=None, last_updated=None):  # noqa: E501
        """PublishQuestionnaireResponseData - a model defined in Swagger"""  # noqa: E501
        self._questionnaire_id = None
        self._lc_questionnaire_name = None
        self._delete = None
        self._disable = None
        self._draft = None
        self._locales = None
        self._questionnaire_category = None
        self._questionnaire_name = None
        self._question_ids = None
        self._questionnaire_details = None
        self._created_by = None
        self._created_by_name = None
        self._updated_by = None
        self._updated_by_name = None
        self._video_screen_interview_id = None
        self._date_created = None
        self._last_updated = None
        self.discriminator = None
        self.questionnaire_id = questionnaire_id
        self.lc_questionnaire_name = lc_questionnaire_name
        self.delete = delete
        self.disable = disable
        self.draft = draft
        self.locales = locales
        if questionnaire_category is not None:
            self.questionnaire_category = questionnaire_category
        self.questionnaire_name = questionnaire_name
        self.question_ids = question_ids
        self.questionnaire_details = questionnaire_details
        self.created_by = created_by
        self.created_by_name = created_by_name
        self.updated_by = updated_by
        self.updated_by_name = updated_by_name
        self.video_screen_interview_id = video_screen_interview_id
        self.date_created = date_created
        self.last_updated = last_updated

    @property
    def questionnaire_id(self):
        """Gets the questionnaire_id of this PublishQuestionnaireResponseData.  # noqa: E501

        QuestionnaireId for the questionnaire.  # noqa: E501

        :return: The questionnaire_id of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_id

    @questionnaire_id.setter
    def questionnaire_id(self, questionnaire_id):
        """Sets the questionnaire_id of this PublishQuestionnaireResponseData.

        QuestionnaireId for the questionnaire.  # noqa: E501

        :param questionnaire_id: The questionnaire_id of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: str
        """
        if questionnaire_id is None:
            raise ValueError("Invalid value for `questionnaire_id`, must not be `None`")  # noqa: E501

        self._questionnaire_id = questionnaire_id

    @property
    def lc_questionnaire_name(self):
        """Gets the lc_questionnaire_name of this PublishQuestionnaireResponseData.  # noqa: E501

        Questionnaire name in lower case.  # noqa: E501

        :return: The lc_questionnaire_name of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: str
        """
        return self._lc_questionnaire_name

    @lc_questionnaire_name.setter
    def lc_questionnaire_name(self, lc_questionnaire_name):
        """Sets the lc_questionnaire_name of this PublishQuestionnaireResponseData.

        Questionnaire name in lower case.  # noqa: E501

        :param lc_questionnaire_name: The lc_questionnaire_name of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: str
        """
        if lc_questionnaire_name is None:
            raise ValueError("Invalid value for `lc_questionnaire_name`, must not be `None`")  # noqa: E501

        self._lc_questionnaire_name = lc_questionnaire_name

    @property
    def delete(self):
        """Gets the delete of this PublishQuestionnaireResponseData.  # noqa: E501

        True if questionnaire deleted. Else false.  # noqa: E501

        :return: The delete of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this PublishQuestionnaireResponseData.

        True if questionnaire deleted. Else false.  # noqa: E501

        :param delete: The delete of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: bool
        """
        if delete is None:
            raise ValueError("Invalid value for `delete`, must not be `None`")  # noqa: E501

        self._delete = delete

    @property
    def disable(self):
        """Gets the disable of this PublishQuestionnaireResponseData.  # noqa: E501

        True if questionnaire disabled. Else false.  # noqa: E501

        :return: The disable of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this PublishQuestionnaireResponseData.

        True if questionnaire disabled. Else false.  # noqa: E501

        :param disable: The disable of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: bool
        """
        if disable is None:
            raise ValueError("Invalid value for `disable`, must not be `None`")  # noqa: E501

        self._disable = disable

    @property
    def draft(self):
        """Gets the draft of this PublishQuestionnaireResponseData.  # noqa: E501

        True if questionnaire is in draft. Else false.  # noqa: E501

        :return: The draft of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this PublishQuestionnaireResponseData.

        True if questionnaire is in draft. Else false.  # noqa: E501

        :param draft: The draft of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: bool
        """
        if draft is None:
            raise ValueError("Invalid value for `draft`, must not be `None`")  # noqa: E501

        self._draft = draft

    @property
    def locales(self):
        """Gets the locales of this PublishQuestionnaireResponseData.  # noqa: E501

        Locales applicable for questions to be translated.  # noqa: E501

        :return: The locales of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: list[PublishQuestionnaireResponseDataLocales]
        """
        return self._locales

    @locales.setter
    def locales(self, locales):
        """Sets the locales of this PublishQuestionnaireResponseData.

        Locales applicable for questions to be translated.  # noqa: E501

        :param locales: The locales of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: list[PublishQuestionnaireResponseDataLocales]
        """
        if locales is None:
            raise ValueError("Invalid value for `locales`, must not be `None`")  # noqa: E501

        self._locales = locales

    @property
    def questionnaire_category(self):
        """Gets the questionnaire_category of this PublishQuestionnaireResponseData.  # noqa: E501

        Indicates the categories this questionnaire belongs to.  # noqa: E501

        :return: The questionnaire_category of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: list[str]
        """
        return self._questionnaire_category

    @questionnaire_category.setter
    def questionnaire_category(self, questionnaire_category):
        """Sets the questionnaire_category of this PublishQuestionnaireResponseData.

        Indicates the categories this questionnaire belongs to.  # noqa: E501

        :param questionnaire_category: The questionnaire_category of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: list[str]
        """

        self._questionnaire_category = questionnaire_category

    @property
    def questionnaire_name(self):
        """Gets the questionnaire_name of this PublishQuestionnaireResponseData.  # noqa: E501

        Questionnaire name while created.  # noqa: E501

        :return: The questionnaire_name of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_name

    @questionnaire_name.setter
    def questionnaire_name(self, questionnaire_name):
        """Sets the questionnaire_name of this PublishQuestionnaireResponseData.

        Questionnaire name while created.  # noqa: E501

        :param questionnaire_name: The questionnaire_name of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: str
        """
        if questionnaire_name is None:
            raise ValueError("Invalid value for `questionnaire_name`, must not be `None`")  # noqa: E501

        self._questionnaire_name = questionnaire_name

    @property
    def question_ids(self):
        """Gets the question_ids of this PublishQuestionnaireResponseData.  # noqa: E501


        :return: The question_ids of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: list[str]
        """
        return self._question_ids

    @question_ids.setter
    def question_ids(self, question_ids):
        """Sets the question_ids of this PublishQuestionnaireResponseData.


        :param question_ids: The question_ids of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: list[str]
        """
        if question_ids is None:
            raise ValueError("Invalid value for `question_ids`, must not be `None`")  # noqa: E501

        self._question_ids = question_ids

    @property
    def questionnaire_details(self):
        """Gets the questionnaire_details of this PublishQuestionnaireResponseData.  # noqa: E501


        :return: The questionnaire_details of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: PublishQuestionnaireResponseDataQuestionnaireDetails
        """
        return self._questionnaire_details

    @questionnaire_details.setter
    def questionnaire_details(self, questionnaire_details):
        """Sets the questionnaire_details of this PublishQuestionnaireResponseData.


        :param questionnaire_details: The questionnaire_details of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: PublishQuestionnaireResponseDataQuestionnaireDetails
        """
        if questionnaire_details is None:
            raise ValueError("Invalid value for `questionnaire_details`, must not be `None`")  # noqa: E501

        self._questionnaire_details = questionnaire_details

    @property
    def created_by(self):
        """Gets the created_by of this PublishQuestionnaireResponseData.  # noqa: E501

        Id of the recruiter who created questionnaire.  # noqa: E501

        :return: The created_by of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PublishQuestionnaireResponseData.

        Id of the recruiter who created questionnaire.  # noqa: E501

        :param created_by: The created_by of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_by_name(self):
        """Gets the created_by_name of this PublishQuestionnaireResponseData.  # noqa: E501

        Name of the recruiter who created questionnaire.  # noqa: E501

        :return: The created_by_name of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: str
        """
        return self._created_by_name

    @created_by_name.setter
    def created_by_name(self, created_by_name):
        """Sets the created_by_name of this PublishQuestionnaireResponseData.

        Name of the recruiter who created questionnaire.  # noqa: E501

        :param created_by_name: The created_by_name of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: str
        """
        if created_by_name is None:
            raise ValueError("Invalid value for `created_by_name`, must not be `None`")  # noqa: E501

        self._created_by_name = created_by_name

    @property
    def updated_by(self):
        """Gets the updated_by of this PublishQuestionnaireResponseData.  # noqa: E501

        Id of the recruiter who updated questionnaire.  # noqa: E501

        :return: The updated_by of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this PublishQuestionnaireResponseData.

        Id of the recruiter who updated questionnaire.  # noqa: E501

        :param updated_by: The updated_by of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    @property
    def updated_by_name(self):
        """Gets the updated_by_name of this PublishQuestionnaireResponseData.  # noqa: E501

        Name of the recruiter who updated questionnaire.  # noqa: E501

        :return: The updated_by_name of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_name

    @updated_by_name.setter
    def updated_by_name(self, updated_by_name):
        """Sets the updated_by_name of this PublishQuestionnaireResponseData.

        Name of the recruiter who updated questionnaire.  # noqa: E501

        :param updated_by_name: The updated_by_name of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: str
        """
        if updated_by_name is None:
            raise ValueError("Invalid value for `updated_by_name`, must not be `None`")  # noqa: E501

        self._updated_by_name = updated_by_name

    @property
    def video_screen_interview_id(self):
        """Gets the video_screen_interview_id of this PublishQuestionnaireResponseData.  # noqa: E501

        Questionnaire interview id associated when questionnaire is created or updated.  # noqa: E501

        :return: The video_screen_interview_id of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: str
        """
        return self._video_screen_interview_id

    @video_screen_interview_id.setter
    def video_screen_interview_id(self, video_screen_interview_id):
        """Sets the video_screen_interview_id of this PublishQuestionnaireResponseData.

        Questionnaire interview id associated when questionnaire is created or updated.  # noqa: E501

        :param video_screen_interview_id: The video_screen_interview_id of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: str
        """
        if video_screen_interview_id is None:
            raise ValueError("Invalid value for `video_screen_interview_id`, must not be `None`")  # noqa: E501

        self._video_screen_interview_id = video_screen_interview_id

    @property
    def date_created(self):
        """Gets the date_created of this PublishQuestionnaireResponseData.  # noqa: E501

        Date when questionnaire is created.  # noqa: E501

        :return: The date_created of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this PublishQuestionnaireResponseData.

        Date when questionnaire is created.  # noqa: E501

        :param date_created: The date_created of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: int
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this PublishQuestionnaireResponseData.  # noqa: E501

        Date when questionnaire is updated.  # noqa: E501

        :return: The last_updated of this PublishQuestionnaireResponseData.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this PublishQuestionnaireResponseData.

        Date when questionnaire is updated.  # noqa: E501

        :param last_updated: The last_updated of this PublishQuestionnaireResponseData.  # noqa: E501
        :type: int
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")  # noqa: E501

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublishQuestionnaireResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublishQuestionnaireResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
