# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetQuestionnaireDetailsResponseDataLocales(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default': 'bool',
        'language': 'str',
        'locale': 'str'
    }

    attribute_map = {
        'default': 'default',
        'language': 'language',
        'locale': 'locale'
    }

    def __init__(self, default=None, language=None, locale=None):  # noqa: E501
        """GetQuestionnaireDetailsResponseDataLocales - a model defined in Swagger"""  # noqa: E501
        self._default = None
        self._language = None
        self._locale = None
        self.discriminator = None
        self.default = default
        self.language = language
        self.locale = locale

    @property
    def default(self):
        """Gets the default of this GetQuestionnaireDetailsResponseDataLocales.  # noqa: E501

        This indicates the default locale for the questionnaire.  # noqa: E501

        :return: The default of this GetQuestionnaireDetailsResponseDataLocales.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this GetQuestionnaireDetailsResponseDataLocales.

        This indicates the default locale for the questionnaire.  # noqa: E501

        :param default: The default of this GetQuestionnaireDetailsResponseDataLocales.  # noqa: E501
        :type: bool
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")  # noqa: E501

        self._default = default

    @property
    def language(self):
        """Gets the language of this GetQuestionnaireDetailsResponseDataLocales.  # noqa: E501

        Indicates the language in which the question is translated.  # noqa: E501

        :return: The language of this GetQuestionnaireDetailsResponseDataLocales.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GetQuestionnaireDetailsResponseDataLocales.

        Indicates the language in which the question is translated.  # noqa: E501

        :param language: The language of this GetQuestionnaireDetailsResponseDataLocales.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def locale(self):
        """Gets the locale of this GetQuestionnaireDetailsResponseDataLocales.  # noqa: E501

        Indicates the locale for the language.  # noqa: E501

        :return: The locale of this GetQuestionnaireDetailsResponseDataLocales.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this GetQuestionnaireDetailsResponseDataLocales.

        Indicates the locale for the language.  # noqa: E501

        :param locale: The locale of this GetQuestionnaireDetailsResponseDataLocales.  # noqa: E501
        :type: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetQuestionnaireDetailsResponseDataLocales, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetQuestionnaireDetailsResponseDataLocales):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
