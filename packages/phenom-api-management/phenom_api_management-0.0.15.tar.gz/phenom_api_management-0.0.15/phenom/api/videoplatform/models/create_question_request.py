# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CreateQuestionRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'question_text': 'str',
        'question_translations': 'list[object]',
        'type': 'str',
        'settings': 'CreateQuestionRequestSettings',
        'options': 'object',
        'questionnaire_id': 'str',
        'recruiter_user_id': 'str',
        'response_duration_limit_in_sec': 'float',
        'max_points': 'float'
    }

    attribute_map = {
        'question_text': 'questionText',
        'question_translations': 'questionTranslations',
        'type': 'type',
        'settings': 'settings',
        'options': 'options',
        'questionnaire_id': 'questionnaireId',
        'recruiter_user_id': 'recruiterUserId',
        'response_duration_limit_in_sec': 'responseDurationLimitInSec',
        'max_points': 'maxPoints'
    }

    def __init__(self, question_text=None, question_translations=None, type=None, settings=None, options=None, questionnaire_id=None, recruiter_user_id=None, response_duration_limit_in_sec=None, max_points=None):  # noqa: E501
        """CreateQuestionRequest - a model defined in Swagger"""  # noqa: E501
        self._question_text = None
        self._question_translations = None
        self._type = None
        self._settings = None
        self._options = None
        self._questionnaire_id = None
        self._recruiter_user_id = None
        self._response_duration_limit_in_sec = None
        self._max_points = None
        self.discriminator = None
        self.question_text = question_text
        self.question_translations = question_translations
        self.type = type
        if settings is not None:
            self.settings = settings
        self.options = options
        self.questionnaire_id = questionnaire_id
        self.recruiter_user_id = recruiter_user_id
        self.response_duration_limit_in_sec = response_duration_limit_in_sec
        self.max_points = max_points

    @property
    def question_text(self):
        """Gets the question_text of this CreateQuestionRequest.  # noqa: E501

        Question text for the question.  # noqa: E501

        :return: The question_text of this CreateQuestionRequest.  # noqa: E501
        :rtype: str
        """
        return self._question_text

    @question_text.setter
    def question_text(self, question_text):
        """Sets the question_text of this CreateQuestionRequest.

        Question text for the question.  # noqa: E501

        :param question_text: The question_text of this CreateQuestionRequest.  # noqa: E501
        :type: str
        """
        if question_text is None:
            raise ValueError("Invalid value for `question_text`, must not be `None`")  # noqa: E501

        self._question_text = question_text

    @property
    def question_translations(self):
        """Gets the question_translations of this CreateQuestionRequest.  # noqa: E501

        Translated questions for a locale.  # noqa: E501

        :return: The question_translations of this CreateQuestionRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._question_translations

    @question_translations.setter
    def question_translations(self, question_translations):
        """Sets the question_translations of this CreateQuestionRequest.

        Translated questions for a locale.  # noqa: E501

        :param question_translations: The question_translations of this CreateQuestionRequest.  # noqa: E501
        :type: list[object]
        """
        if question_translations is None:
            raise ValueError("Invalid value for `question_translations`, must not be `None`")  # noqa: E501

        self._question_translations = question_translations

    @property
    def type(self):
        """Gets the type of this CreateQuestionRequest.  # noqa: E501

        Type of the question, could be video, audio, videoOrAudio, multiple, scored, single, knockout, text.  # noqa: E501

        :return: The type of this CreateQuestionRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateQuestionRequest.

        Type of the question, could be video, audio, videoOrAudio, multiple, scored, single, knockout, text.  # noqa: E501

        :param type: The type of this CreateQuestionRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def settings(self):
        """Gets the settings of this CreateQuestionRequest.  # noqa: E501


        :return: The settings of this CreateQuestionRequest.  # noqa: E501
        :rtype: CreateQuestionRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateQuestionRequest.


        :param settings: The settings of this CreateQuestionRequest.  # noqa: E501
        :type: CreateQuestionRequestSettings
        """

        self._settings = settings

    @property
    def options(self):
        """Gets the options of this CreateQuestionRequest.  # noqa: E501

        This gives the locale specific options.  # noqa: E501

        :return: The options of this CreateQuestionRequest.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CreateQuestionRequest.

        This gives the locale specific options.  # noqa: E501

        :param options: The options of this CreateQuestionRequest.  # noqa: E501
        :type: object
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    @property
    def questionnaire_id(self):
        """Gets the questionnaire_id of this CreateQuestionRequest.  # noqa: E501

        Questionnaire id for the questionnaire.  # noqa: E501

        :return: The questionnaire_id of this CreateQuestionRequest.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_id

    @questionnaire_id.setter
    def questionnaire_id(self, questionnaire_id):
        """Sets the questionnaire_id of this CreateQuestionRequest.

        Questionnaire id for the questionnaire.  # noqa: E501

        :param questionnaire_id: The questionnaire_id of this CreateQuestionRequest.  # noqa: E501
        :type: str
        """
        if questionnaire_id is None:
            raise ValueError("Invalid value for `questionnaire_id`, must not be `None`")  # noqa: E501

        self._questionnaire_id = questionnaire_id

    @property
    def recruiter_user_id(self):
        """Gets the recruiter_user_id of this CreateQuestionRequest.  # noqa: E501

        User id of the recruiter.  # noqa: E501

        :return: The recruiter_user_id of this CreateQuestionRequest.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_user_id

    @recruiter_user_id.setter
    def recruiter_user_id(self, recruiter_user_id):
        """Sets the recruiter_user_id of this CreateQuestionRequest.

        User id of the recruiter.  # noqa: E501

        :param recruiter_user_id: The recruiter_user_id of this CreateQuestionRequest.  # noqa: E501
        :type: str
        """
        if recruiter_user_id is None:
            raise ValueError("Invalid value for `recruiter_user_id`, must not be `None`")  # noqa: E501

        self._recruiter_user_id = recruiter_user_id

    @property
    def response_duration_limit_in_sec(self):
        """Gets the response_duration_limit_in_sec of this CreateQuestionRequest.  # noqa: E501

        The time allocated in seconds to answer the question.  # noqa: E501

        :return: The response_duration_limit_in_sec of this CreateQuestionRequest.  # noqa: E501
        :rtype: float
        """
        return self._response_duration_limit_in_sec

    @response_duration_limit_in_sec.setter
    def response_duration_limit_in_sec(self, response_duration_limit_in_sec):
        """Sets the response_duration_limit_in_sec of this CreateQuestionRequest.

        The time allocated in seconds to answer the question.  # noqa: E501

        :param response_duration_limit_in_sec: The response_duration_limit_in_sec of this CreateQuestionRequest.  # noqa: E501
        :type: float
        """
        if response_duration_limit_in_sec is None:
            raise ValueError("Invalid value for `response_duration_limit_in_sec`, must not be `None`")  # noqa: E501

        self._response_duration_limit_in_sec = response_duration_limit_in_sec

    @property
    def max_points(self):
        """Gets the max_points of this CreateQuestionRequest.  # noqa: E501

        This is applicable for only scored question.  # noqa: E501

        :return: The max_points of this CreateQuestionRequest.  # noqa: E501
        :rtype: float
        """
        return self._max_points

    @max_points.setter
    def max_points(self, max_points):
        """Sets the max_points of this CreateQuestionRequest.

        This is applicable for only scored question.  # noqa: E501

        :param max_points: The max_points of this CreateQuestionRequest.  # noqa: E501
        :type: float
        """
        if max_points is None:
            raise ValueError("Invalid value for `max_points`, must not be `None`")  # noqa: E501

        self._max_points = max_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateQuestionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateQuestionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
