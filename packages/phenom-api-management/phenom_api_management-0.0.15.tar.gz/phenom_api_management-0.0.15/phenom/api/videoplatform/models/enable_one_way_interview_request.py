# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class EnableOneWayInterviewRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'str',
        'interview_expiry_days': 'float',
        'reminder_days': 'float',
        'enable_status': 'bool',
        'questionnaire_id': 'str'
    }

    attribute_map = {
        'job_id': 'jobId',
        'interview_expiry_days': 'interviewExpiryDays',
        'reminder_days': 'reminderDays',
        'enable_status': 'enableStatus',
        'questionnaire_id': 'questionnaireId'
    }

    def __init__(self, job_id=None, interview_expiry_days=None, reminder_days=None, enable_status=None, questionnaire_id=None):  # noqa: E501
        """EnableOneWayInterviewRequest - a model defined in Swagger"""  # noqa: E501
        self._job_id = None
        self._interview_expiry_days = None
        self._reminder_days = None
        self._enable_status = None
        self._questionnaire_id = None
        self.discriminator = None
        self.job_id = job_id
        self.interview_expiry_days = interview_expiry_days
        self.reminder_days = reminder_days
        self.enable_status = enable_status
        self.questionnaire_id = questionnaire_id

    @property
    def job_id(self):
        """Gets the job_id of this EnableOneWayInterviewRequest.  # noqa: E501

        JobId of a Job.  # noqa: E501

        :return: The job_id of this EnableOneWayInterviewRequest.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this EnableOneWayInterviewRequest.

        JobId of a Job.  # noqa: E501

        :param job_id: The job_id of this EnableOneWayInterviewRequest.  # noqa: E501
        :type: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def interview_expiry_days(self):
        """Gets the interview_expiry_days of this EnableOneWayInterviewRequest.  # noqa: E501

        If an invite is sent for a job, indicates the expiry of the invitation.  # noqa: E501

        :return: The interview_expiry_days of this EnableOneWayInterviewRequest.  # noqa: E501
        :rtype: float
        """
        return self._interview_expiry_days

    @interview_expiry_days.setter
    def interview_expiry_days(self, interview_expiry_days):
        """Sets the interview_expiry_days of this EnableOneWayInterviewRequest.

        If an invite is sent for a job, indicates the expiry of the invitation.  # noqa: E501

        :param interview_expiry_days: The interview_expiry_days of this EnableOneWayInterviewRequest.  # noqa: E501
        :type: float
        """
        if interview_expiry_days is None:
            raise ValueError("Invalid value for `interview_expiry_days`, must not be `None`")  # noqa: E501

        self._interview_expiry_days = interview_expiry_days

    @property
    def reminder_days(self):
        """Gets the reminder_days of this EnableOneWayInterviewRequest.  # noqa: E501

        If an invite is sent for a job, indicates the reminder to be sent before the expiry days.  # noqa: E501

        :return: The reminder_days of this EnableOneWayInterviewRequest.  # noqa: E501
        :rtype: float
        """
        return self._reminder_days

    @reminder_days.setter
    def reminder_days(self, reminder_days):
        """Sets the reminder_days of this EnableOneWayInterviewRequest.

        If an invite is sent for a job, indicates the reminder to be sent before the expiry days.  # noqa: E501

        :param reminder_days: The reminder_days of this EnableOneWayInterviewRequest.  # noqa: E501
        :type: float
        """
        if reminder_days is None:
            raise ValueError("Invalid value for `reminder_days`, must not be `None`")  # noqa: E501

        self._reminder_days = reminder_days

    @property
    def enable_status(self):
        """Gets the enable_status of this EnableOneWayInterviewRequest.  # noqa: E501

        Send true to enable one way interview, false to disable.  # noqa: E501

        :return: The enable_status of this EnableOneWayInterviewRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_status

    @enable_status.setter
    def enable_status(self, enable_status):
        """Sets the enable_status of this EnableOneWayInterviewRequest.

        Send true to enable one way interview, false to disable.  # noqa: E501

        :param enable_status: The enable_status of this EnableOneWayInterviewRequest.  # noqa: E501
        :type: bool
        """
        if enable_status is None:
            raise ValueError("Invalid value for `enable_status`, must not be `None`")  # noqa: E501

        self._enable_status = enable_status

    @property
    def questionnaire_id(self):
        """Gets the questionnaire_id of this EnableOneWayInterviewRequest.  # noqa: E501

        Questionnaire id of the the questionnaire.  # noqa: E501

        :return: The questionnaire_id of this EnableOneWayInterviewRequest.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_id

    @questionnaire_id.setter
    def questionnaire_id(self, questionnaire_id):
        """Sets the questionnaire_id of this EnableOneWayInterviewRequest.

        Questionnaire id of the the questionnaire.  # noqa: E501

        :param questionnaire_id: The questionnaire_id of this EnableOneWayInterviewRequest.  # noqa: E501
        :type: str
        """
        if questionnaire_id is None:
            raise ValueError("Invalid value for `questionnaire_id`, must not be `None`")  # noqa: E501

        self._questionnaire_id = questionnaire_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnableOneWayInterviewRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnableOneWayInterviewRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
