# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetEvaluationsForInterviewResponseDataEvaluations(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'video_screen_id': 'str',
        'user_id': 'str',
        'questionnaire_id': 'str',
        'recruiter_user_id': 'str',
        'overall_evaluation': 'str',
        'overall_evaluation_status': 'str',
        'interview_avg_rating': 'float',
        'interview_overall_avg_rating': 'float',
        'evaluated_date': 'float',
        'answer_ratings': 'list[GetEvaluationsForInterviewResponseDataAnswerRatings]',
        'recruiter_name': 'str',
        'role_name': 'str',
        'date_created': 'int',
        'last_updated': 'int'
    }

    attribute_map = {
        'video_screen_id': 'videoScreenId',
        'user_id': 'userId',
        'questionnaire_id': 'questionnaireId',
        'recruiter_user_id': 'recruiterUserId',
        'overall_evaluation': 'overallEvaluation',
        'overall_evaluation_status': 'overallEvaluationStatus',
        'interview_avg_rating': 'interviewAvgRating',
        'interview_overall_avg_rating': 'interviewOverallAvgRating',
        'evaluated_date': 'evaluatedDate',
        'answer_ratings': 'answerRatings',
        'recruiter_name': 'recruiterName',
        'role_name': 'roleName',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated'
    }

    def __init__(self, video_screen_id=None, user_id=None, questionnaire_id=None, recruiter_user_id=None, overall_evaluation=None, overall_evaluation_status=None, interview_avg_rating=None, interview_overall_avg_rating=None, evaluated_date=None, answer_ratings=None, recruiter_name=None, role_name=None, date_created=None, last_updated=None):  # noqa: E501
        """GetEvaluationsForInterviewResponseDataEvaluations - a model defined in Swagger"""  # noqa: E501
        self._video_screen_id = None
        self._user_id = None
        self._questionnaire_id = None
        self._recruiter_user_id = None
        self._overall_evaluation = None
        self._overall_evaluation_status = None
        self._interview_avg_rating = None
        self._interview_overall_avg_rating = None
        self._evaluated_date = None
        self._answer_ratings = None
        self._recruiter_name = None
        self._role_name = None
        self._date_created = None
        self._last_updated = None
        self.discriminator = None
        self.video_screen_id = video_screen_id
        self.user_id = user_id
        self.questionnaire_id = questionnaire_id
        self.recruiter_user_id = recruiter_user_id
        self.overall_evaluation = overall_evaluation
        self.overall_evaluation_status = overall_evaluation_status
        self.interview_avg_rating = interview_avg_rating
        self.interview_overall_avg_rating = interview_overall_avg_rating
        self.evaluated_date = evaluated_date
        self.answer_ratings = answer_ratings
        self.recruiter_name = recruiter_name
        self.role_name = role_name
        self.date_created = date_created
        self.last_updated = last_updated

    @property
    def video_screen_id(self):
        """Gets the video_screen_id of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        This is the interview id.  # noqa: E501

        :return: The video_screen_id of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._video_screen_id

    @video_screen_id.setter
    def video_screen_id(self, video_screen_id):
        """Sets the video_screen_id of this GetEvaluationsForInterviewResponseDataEvaluations.

        This is the interview id.  # noqa: E501

        :param video_screen_id: The video_screen_id of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: str
        """
        if video_screen_id is None:
            raise ValueError("Invalid value for `video_screen_id`, must not be `None`")  # noqa: E501

        self._video_screen_id = video_screen_id

    @property
    def user_id(self):
        """Gets the user_id of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        This indicates the candidate id to whom recruiter evaluated.  # noqa: E501

        :return: The user_id of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetEvaluationsForInterviewResponseDataEvaluations.

        This indicates the candidate id to whom recruiter evaluated.  # noqa: E501

        :param user_id: The user_id of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def questionnaire_id(self):
        """Gets the questionnaire_id of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        This indicates what was the questionnaire for this interview.  # noqa: E501

        :return: The questionnaire_id of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_id

    @questionnaire_id.setter
    def questionnaire_id(self, questionnaire_id):
        """Sets the questionnaire_id of this GetEvaluationsForInterviewResponseDataEvaluations.

        This indicates what was the questionnaire for this interview.  # noqa: E501

        :param questionnaire_id: The questionnaire_id of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: str
        """
        if questionnaire_id is None:
            raise ValueError("Invalid value for `questionnaire_id`, must not be `None`")  # noqa: E501

        self._questionnaire_id = questionnaire_id

    @property
    def recruiter_user_id(self):
        """Gets the recruiter_user_id of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        This indicates the recruiter id who has evaluated/  # noqa: E501

        :return: The recruiter_user_id of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_user_id

    @recruiter_user_id.setter
    def recruiter_user_id(self, recruiter_user_id):
        """Sets the recruiter_user_id of this GetEvaluationsForInterviewResponseDataEvaluations.

        This indicates the recruiter id who has evaluated/  # noqa: E501

        :param recruiter_user_id: The recruiter_user_id of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: str
        """
        if recruiter_user_id is None:
            raise ValueError("Invalid value for `recruiter_user_id`, must not be `None`")  # noqa: E501

        self._recruiter_user_id = recruiter_user_id

    @property
    def overall_evaluation(self):
        """Gets the overall_evaluation of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        Comment given by the evaluator.  # noqa: E501

        :return: The overall_evaluation of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._overall_evaluation

    @overall_evaluation.setter
    def overall_evaluation(self, overall_evaluation):
        """Sets the overall_evaluation of this GetEvaluationsForInterviewResponseDataEvaluations.

        Comment given by the evaluator.  # noqa: E501

        :param overall_evaluation: The overall_evaluation of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: str
        """
        if overall_evaluation is None:
            raise ValueError("Invalid value for `overall_evaluation`, must not be `None`")  # noqa: E501

        self._overall_evaluation = overall_evaluation

    @property
    def overall_evaluation_status(self):
        """Gets the overall_evaluation_status of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        This can be Yes, No, Maybe. This is the conclusion of the overall evaluation, indicates to consider the candidate or not.  # noqa: E501

        :return: The overall_evaluation_status of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._overall_evaluation_status

    @overall_evaluation_status.setter
    def overall_evaluation_status(self, overall_evaluation_status):
        """Sets the overall_evaluation_status of this GetEvaluationsForInterviewResponseDataEvaluations.

        This can be Yes, No, Maybe. This is the conclusion of the overall evaluation, indicates to consider the candidate or not.  # noqa: E501

        :param overall_evaluation_status: The overall_evaluation_status of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: str
        """
        if overall_evaluation_status is None:
            raise ValueError("Invalid value for `overall_evaluation_status`, must not be `None`")  # noqa: E501

        self._overall_evaluation_status = overall_evaluation_status

    @property
    def interview_avg_rating(self):
        """Gets the interview_avg_rating of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        This is the average rating for all questions.  # noqa: E501

        :return: The interview_avg_rating of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: float
        """
        return self._interview_avg_rating

    @interview_avg_rating.setter
    def interview_avg_rating(self, interview_avg_rating):
        """Sets the interview_avg_rating of this GetEvaluationsForInterviewResponseDataEvaluations.

        This is the average rating for all questions.  # noqa: E501

        :param interview_avg_rating: The interview_avg_rating of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: float
        """
        if interview_avg_rating is None:
            raise ValueError("Invalid value for `interview_avg_rating`, must not be `None`")  # noqa: E501

        self._interview_avg_rating = interview_avg_rating

    @property
    def interview_overall_avg_rating(self):
        """Gets the interview_overall_avg_rating of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        This is the average rating among all evaluators.  # noqa: E501

        :return: The interview_overall_avg_rating of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: float
        """
        return self._interview_overall_avg_rating

    @interview_overall_avg_rating.setter
    def interview_overall_avg_rating(self, interview_overall_avg_rating):
        """Sets the interview_overall_avg_rating of this GetEvaluationsForInterviewResponseDataEvaluations.

        This is the average rating among all evaluators.  # noqa: E501

        :param interview_overall_avg_rating: The interview_overall_avg_rating of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: float
        """
        if interview_overall_avg_rating is None:
            raise ValueError("Invalid value for `interview_overall_avg_rating`, must not be `None`")  # noqa: E501

        self._interview_overall_avg_rating = interview_overall_avg_rating

    @property
    def evaluated_date(self):
        """Gets the evaluated_date of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        This is the evaluated date.  # noqa: E501

        :return: The evaluated_date of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: float
        """
        return self._evaluated_date

    @evaluated_date.setter
    def evaluated_date(self, evaluated_date):
        """Sets the evaluated_date of this GetEvaluationsForInterviewResponseDataEvaluations.

        This is the evaluated date.  # noqa: E501

        :param evaluated_date: The evaluated_date of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: float
        """
        if evaluated_date is None:
            raise ValueError("Invalid value for `evaluated_date`, must not be `None`")  # noqa: E501

        self._evaluated_date = evaluated_date

    @property
    def answer_ratings(self):
        """Gets the answer_ratings of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        Rating for each question.  # noqa: E501

        :return: The answer_ratings of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: list[GetEvaluationsForInterviewResponseDataAnswerRatings]
        """
        return self._answer_ratings

    @answer_ratings.setter
    def answer_ratings(self, answer_ratings):
        """Sets the answer_ratings of this GetEvaluationsForInterviewResponseDataEvaluations.

        Rating for each question.  # noqa: E501

        :param answer_ratings: The answer_ratings of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: list[GetEvaluationsForInterviewResponseDataAnswerRatings]
        """
        if answer_ratings is None:
            raise ValueError("Invalid value for `answer_ratings`, must not be `None`")  # noqa: E501

        self._answer_ratings = answer_ratings

    @property
    def recruiter_name(self):
        """Gets the recruiter_name of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        This is the name of the recruiter who evaluated.  # noqa: E501

        :return: The recruiter_name of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_name

    @recruiter_name.setter
    def recruiter_name(self, recruiter_name):
        """Sets the recruiter_name of this GetEvaluationsForInterviewResponseDataEvaluations.

        This is the name of the recruiter who evaluated.  # noqa: E501

        :param recruiter_name: The recruiter_name of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: str
        """
        if recruiter_name is None:
            raise ValueError("Invalid value for `recruiter_name`, must not be `None`")  # noqa: E501

        self._recruiter_name = recruiter_name

    @property
    def role_name(self):
        """Gets the role_name of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        This is the role assigned for evaluator.  # noqa: E501

        :return: The role_name of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this GetEvaluationsForInterviewResponseDataEvaluations.

        This is the role assigned for evaluator.  # noqa: E501

        :param role_name: The role_name of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: str
        """
        if role_name is None:
            raise ValueError("Invalid value for `role_name`, must not be `None`")  # noqa: E501

        self._role_name = role_name

    @property
    def date_created(self):
        """Gets the date_created of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        This is date when evaluated.  # noqa: E501

        :return: The date_created of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this GetEvaluationsForInterviewResponseDataEvaluations.

        This is date when evaluated.  # noqa: E501

        :param date_created: The date_created of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: int
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501

        This is the date when last evaluation updated.  # noqa: E501

        :return: The last_updated of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this GetEvaluationsForInterviewResponseDataEvaluations.

        This is the date when last evaluation updated.  # noqa: E501

        :param last_updated: The last_updated of this GetEvaluationsForInterviewResponseDataEvaluations.  # noqa: E501
        :type: int
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")  # noqa: E501

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetEvaluationsForInterviewResponseDataEvaluations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetEvaluationsForInterviewResponseDataEvaluations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
