# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetAllInterviewsForJobIdResponseData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interviews': 'list[GetAllInterviewsForJobIdResponseDataInterviews]'
    }

    attribute_map = {
        'interviews': 'interviews'
    }

    def __init__(self, interviews=None):  # noqa: E501
        """GetAllInterviewsForJobIdResponseData - a model defined in Swagger"""  # noqa: E501
        self._interviews = None
        self.discriminator = None
        self.interviews = interviews

    @property
    def interviews(self):
        """Gets the interviews of this GetAllInterviewsForJobIdResponseData.  # noqa: E501

        Contains all interviews for a given jobId.  # noqa: E501

        :return: The interviews of this GetAllInterviewsForJobIdResponseData.  # noqa: E501
        :rtype: list[GetAllInterviewsForJobIdResponseDataInterviews]
        """
        return self._interviews

    @interviews.setter
    def interviews(self, interviews):
        """Sets the interviews of this GetAllInterviewsForJobIdResponseData.

        Contains all interviews for a given jobId.  # noqa: E501

        :param interviews: The interviews of this GetAllInterviewsForJobIdResponseData.  # noqa: E501
        :type: list[GetAllInterviewsForJobIdResponseDataInterviews]
        """
        if interviews is None:
            raise ValueError("Invalid value for `interviews`, must not be `None`")  # noqa: E501

        self._interviews = interviews

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAllInterviewsForJobIdResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAllInterviewsForJobIdResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
