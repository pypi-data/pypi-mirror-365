# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetAllQuestionsResponseData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_count': 'float',
        'questions': 'list[GetAllQuestionsResponseDataQuestions]'
    }

    attribute_map = {
        'total_count': 'totalCount',
        'questions': 'questions'
    }

    def __init__(self, total_count=None, questions=None):  # noqa: E501
        """GetAllQuestionsResponseData - a model defined in Swagger"""  # noqa: E501
        self._total_count = None
        self._questions = None
        self.discriminator = None
        self.total_count = total_count
        self.questions = questions

    @property
    def total_count(self):
        """Gets the total_count of this GetAllQuestionsResponseData.  # noqa: E501

        Total count of available questions.  # noqa: E501

        :return: The total_count of this GetAllQuestionsResponseData.  # noqa: E501
        :rtype: float
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this GetAllQuestionsResponseData.

        Total count of available questions.  # noqa: E501

        :param total_count: The total_count of this GetAllQuestionsResponseData.  # noqa: E501
        :type: float
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    @property
    def questions(self):
        """Gets the questions of this GetAllQuestionsResponseData.  # noqa: E501

        Contains all questions.  # noqa: E501

        :return: The questions of this GetAllQuestionsResponseData.  # noqa: E501
        :rtype: list[GetAllQuestionsResponseDataQuestions]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this GetAllQuestionsResponseData.

        Contains all questions.  # noqa: E501

        :param questions: The questions of this GetAllQuestionsResponseData.  # noqa: E501
        :type: list[GetAllQuestionsResponseDataQuestions]
        """
        if questions is None:
            raise ValueError("Invalid value for `questions`, must not be `None`")  # noqa: E501

        self._questions = questions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAllQuestionsResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAllQuestionsResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
