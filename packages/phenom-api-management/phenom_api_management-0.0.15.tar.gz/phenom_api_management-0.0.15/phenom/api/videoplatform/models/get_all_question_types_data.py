# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetAllQuestionTypesData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'question_types': 'list[GetAllQuestionTypesDataQuestionTypes]',
        'duration_in_sec': 'list[float]',
        'character_count': 'list[float]',
        'multi_choice_settings': 'GetAllQuestionTypesDataMultiChoiceSettings',
        'knockout_question_configuration': 'list[GetAllQuestionTypesDataKnockoutQuestionConfiguration]'
    }

    attribute_map = {
        'question_types': 'questionTypes',
        'duration_in_sec': 'durationInSec',
        'character_count': 'characterCount',
        'multi_choice_settings': 'multiChoiceSettings',
        'knockout_question_configuration': 'knockoutQuestionConfiguration'
    }

    def __init__(self, question_types=None, duration_in_sec=None, character_count=None, multi_choice_settings=None, knockout_question_configuration=None):  # noqa: E501
        """GetAllQuestionTypesData - a model defined in Swagger"""  # noqa: E501
        self._question_types = None
        self._duration_in_sec = None
        self._character_count = None
        self._multi_choice_settings = None
        self._knockout_question_configuration = None
        self.discriminator = None
        self.question_types = question_types
        self.duration_in_sec = duration_in_sec
        self.character_count = character_count
        self.multi_choice_settings = multi_choice_settings
        self.knockout_question_configuration = knockout_question_configuration

    @property
    def question_types(self):
        """Gets the question_types of this GetAllQuestionTypesData.  # noqa: E501

        Contains all question types.  # noqa: E501

        :return: The question_types of this GetAllQuestionTypesData.  # noqa: E501
        :rtype: list[GetAllQuestionTypesDataQuestionTypes]
        """
        return self._question_types

    @question_types.setter
    def question_types(self, question_types):
        """Sets the question_types of this GetAllQuestionTypesData.

        Contains all question types.  # noqa: E501

        :param question_types: The question_types of this GetAllQuestionTypesData.  # noqa: E501
        :type: list[GetAllQuestionTypesDataQuestionTypes]
        """
        if question_types is None:
            raise ValueError("Invalid value for `question_types`, must not be `None`")  # noqa: E501

        self._question_types = question_types

    @property
    def duration_in_sec(self):
        """Gets the duration_in_sec of this GetAllQuestionTypesData.  # noqa: E501


        :return: The duration_in_sec of this GetAllQuestionTypesData.  # noqa: E501
        :rtype: list[float]
        """
        return self._duration_in_sec

    @duration_in_sec.setter
    def duration_in_sec(self, duration_in_sec):
        """Sets the duration_in_sec of this GetAllQuestionTypesData.


        :param duration_in_sec: The duration_in_sec of this GetAllQuestionTypesData.  # noqa: E501
        :type: list[float]
        """
        if duration_in_sec is None:
            raise ValueError("Invalid value for `duration_in_sec`, must not be `None`")  # noqa: E501

        self._duration_in_sec = duration_in_sec

    @property
    def character_count(self):
        """Gets the character_count of this GetAllQuestionTypesData.  # noqa: E501


        :return: The character_count of this GetAllQuestionTypesData.  # noqa: E501
        :rtype: list[float]
        """
        return self._character_count

    @character_count.setter
    def character_count(self, character_count):
        """Sets the character_count of this GetAllQuestionTypesData.


        :param character_count: The character_count of this GetAllQuestionTypesData.  # noqa: E501
        :type: list[float]
        """
        if character_count is None:
            raise ValueError("Invalid value for `character_count`, must not be `None`")  # noqa: E501

        self._character_count = character_count

    @property
    def multi_choice_settings(self):
        """Gets the multi_choice_settings of this GetAllQuestionTypesData.  # noqa: E501


        :return: The multi_choice_settings of this GetAllQuestionTypesData.  # noqa: E501
        :rtype: GetAllQuestionTypesDataMultiChoiceSettings
        """
        return self._multi_choice_settings

    @multi_choice_settings.setter
    def multi_choice_settings(self, multi_choice_settings):
        """Sets the multi_choice_settings of this GetAllQuestionTypesData.


        :param multi_choice_settings: The multi_choice_settings of this GetAllQuestionTypesData.  # noqa: E501
        :type: GetAllQuestionTypesDataMultiChoiceSettings
        """
        if multi_choice_settings is None:
            raise ValueError("Invalid value for `multi_choice_settings`, must not be `None`")  # noqa: E501

        self._multi_choice_settings = multi_choice_settings

    @property
    def knockout_question_configuration(self):
        """Gets the knockout_question_configuration of this GetAllQuestionTypesData.  # noqa: E501

        Knockout question UI parameters.  # noqa: E501

        :return: The knockout_question_configuration of this GetAllQuestionTypesData.  # noqa: E501
        :rtype: list[GetAllQuestionTypesDataKnockoutQuestionConfiguration]
        """
        return self._knockout_question_configuration

    @knockout_question_configuration.setter
    def knockout_question_configuration(self, knockout_question_configuration):
        """Sets the knockout_question_configuration of this GetAllQuestionTypesData.

        Knockout question UI parameters.  # noqa: E501

        :param knockout_question_configuration: The knockout_question_configuration of this GetAllQuestionTypesData.  # noqa: E501
        :type: list[GetAllQuestionTypesDataKnockoutQuestionConfiguration]
        """
        if knockout_question_configuration is None:
            raise ValueError("Invalid value for `knockout_question_configuration`, must not be `None`")  # noqa: E501

        self._knockout_question_configuration = knockout_question_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAllQuestionTypesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAllQuestionTypesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
