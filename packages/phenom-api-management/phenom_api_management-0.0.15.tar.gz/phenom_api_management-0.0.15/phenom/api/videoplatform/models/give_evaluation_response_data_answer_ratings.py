# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GiveEvaluationResponseDataAnswerRatings(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'question_id': 'str',
        'question_text': 'str',
        'type': 'str',
        'answer_rating': 'float',
        'video_id': 'str',
        'answer_text': 'str',
        'mcs_question_id': 'str'
    }

    attribute_map = {
        'question_id': 'questionId',
        'question_text': 'questionText',
        'type': 'type',
        'answer_rating': 'answerRating',
        'video_id': 'videoId',
        'answer_text': 'answerText',
        'mcs_question_id': 'mcsQuestionId'
    }

    def __init__(self, question_id=None, question_text=None, type=None, answer_rating=None, video_id=None, answer_text=None, mcs_question_id=None):  # noqa: E501
        """GiveEvaluationResponseDataAnswerRatings - a model defined in Swagger"""  # noqa: E501
        self._question_id = None
        self._question_text = None
        self._type = None
        self._answer_rating = None
        self._video_id = None
        self._answer_text = None
        self._mcs_question_id = None
        self.discriminator = None
        self.question_id = question_id
        self.question_text = question_text
        self.type = type
        self.answer_rating = answer_rating
        self.video_id = video_id
        self.answer_text = answer_text
        self.mcs_question_id = mcs_question_id

    @property
    def question_id(self):
        """Gets the question_id of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501

        This is the actual question id, differs from interview question id.  # noqa: E501

        :return: The question_id of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this GiveEvaluationResponseDataAnswerRatings.

        This is the actual question id, differs from interview question id.  # noqa: E501

        :param question_id: The question_id of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :type: str
        """
        if question_id is None:
            raise ValueError("Invalid value for `question_id`, must not be `None`")  # noqa: E501

        self._question_id = question_id

    @property
    def question_text(self):
        """Gets the question_text of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501

        Question text of the question.  # noqa: E501

        :return: The question_text of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :rtype: str
        """
        return self._question_text

    @question_text.setter
    def question_text(self, question_text):
        """Sets the question_text of this GiveEvaluationResponseDataAnswerRatings.

        Question text of the question.  # noqa: E501

        :param question_text: The question_text of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :type: str
        """
        if question_text is None:
            raise ValueError("Invalid value for `question_text`, must not be `None`")  # noqa: E501

        self._question_text = question_text

    @property
    def type(self):
        """Gets the type of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501

        Type of the question, could be video, audio, videoOrAudio, multiple, scored, single, knockout, text.  # noqa: E501

        :return: The type of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GiveEvaluationResponseDataAnswerRatings.

        Type of the question, could be video, audio, videoOrAudio, multiple, scored, single, knockout, text.  # noqa: E501

        :param type: The type of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def answer_rating(self):
        """Gets the answer_rating of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501

        Rating given for the question.  # noqa: E501

        :return: The answer_rating of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :rtype: float
        """
        return self._answer_rating

    @answer_rating.setter
    def answer_rating(self, answer_rating):
        """Sets the answer_rating of this GiveEvaluationResponseDataAnswerRatings.

        Rating given for the question.  # noqa: E501

        :param answer_rating: The answer_rating of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :type: float
        """
        if answer_rating is None:
            raise ValueError("Invalid value for `answer_rating`, must not be `None`")  # noqa: E501

        self._answer_rating = answer_rating

    @property
    def video_id(self):
        """Gets the video_id of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501

        This field is only for media question.  # noqa: E501

        :return: The video_id of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this GiveEvaluationResponseDataAnswerRatings.

        This field is only for media question.  # noqa: E501

        :param video_id: The video_id of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :type: str
        """
        if video_id is None:
            raise ValueError("Invalid value for `video_id`, must not be `None`")  # noqa: E501

        self._video_id = video_id

    @property
    def answer_text(self):
        """Gets the answer_text of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501

        This field is only for text question.  # noqa: E501

        :return: The answer_text of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :rtype: str
        """
        return self._answer_text

    @answer_text.setter
    def answer_text(self, answer_text):
        """Sets the answer_text of this GiveEvaluationResponseDataAnswerRatings.

        This field is only for text question.  # noqa: E501

        :param answer_text: The answer_text of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :type: str
        """
        if answer_text is None:
            raise ValueError("Invalid value for `answer_text`, must not be `None`")  # noqa: E501

        self._answer_text = answer_text

    @property
    def mcs_question_id(self):
        """Gets the mcs_question_id of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501

        This is the interview question id.  # noqa: E501

        :return: The mcs_question_id of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :rtype: str
        """
        return self._mcs_question_id

    @mcs_question_id.setter
    def mcs_question_id(self, mcs_question_id):
        """Sets the mcs_question_id of this GiveEvaluationResponseDataAnswerRatings.

        This is the interview question id.  # noqa: E501

        :param mcs_question_id: The mcs_question_id of this GiveEvaluationResponseDataAnswerRatings.  # noqa: E501
        :type: str
        """
        if mcs_question_id is None:
            raise ValueError("Invalid value for `mcs_question_id`, must not be `None`")  # noqa: E501

        self._mcs_question_id = mcs_question_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GiveEvaluationResponseDataAnswerRatings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GiveEvaluationResponseDataAnswerRatings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
