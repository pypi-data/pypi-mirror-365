# coding: utf-8

"""
    videoplatform-api

    Interview Screening APIs allows to invite candidate to interview, evaluate and review candidates interview performances.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from phenom.commons.api_client import ApiClient


class QuestionsApi(object):
    base_path = "/interview-screening"  # your base path

    def __init__(self, token, gateway_url, apikey, api_client=None):
        if api_client is None:
            api_client = ApiClient(gateway_url + self.base_path, apikey, token)
        self.api_client = api_client

    def create_new_question_for_interview(self, body, **kwargs):  # noqa: E501
        """Create Question  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_question_for_interview(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateQuestionRequest body: (required)
        :return: CreateQuestionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_question_for_interview_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_question_for_interview_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_new_question_for_interview_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Question  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_question_for_interview_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateQuestionRequest body: (required)
        :return: CreateQuestionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_question_for_interview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_new_question_for_interview`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/questions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateQuestionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_the_question_for_question_id(self, questionnaire_id, question_id, **kwargs):  # noqa: E501
        """Delete Question  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_the_question_for_question_id(questionnaire_id, question_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str questionnaire_id: (required)
        :param str question_id: (required)
        :return: DeleteQuestionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_the_question_for_question_id_with_http_info(questionnaire_id, question_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_the_question_for_question_id_with_http_info(questionnaire_id, question_id, **kwargs)  # noqa: E501
            return data

    def delete_the_question_for_question_id_with_http_info(self, questionnaire_id, question_id, **kwargs):  # noqa: E501
        """Delete Question  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_the_question_for_question_id_with_http_info(questionnaire_id, question_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str questionnaire_id: (required)
        :param str question_id: (required)
        :return: DeleteQuestionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['questionnaire_id', 'question_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_the_question_for_question_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'questionnaire_id' is set
        if ('questionnaire_id' not in params or
                params['questionnaire_id'] is None):
            raise ValueError("Missing the required parameter `questionnaire_id` when calling `delete_the_question_for_question_id`")  # noqa: E501
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params or
                params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `delete_the_question_for_question_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']  # noqa: E501

        query_params = []
        if 'questionnaire_id' in params:
            query_params.append(('questionnaireId', params['questionnaire_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/questions/{questionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteQuestionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_questions(self, _from, **kwargs):  # noqa: E501
        """Get Questions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_questions(_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float _from: (required)
        :return: GetAllQuestionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_questions_with_http_info(_from, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_questions_with_http_info(_from, **kwargs)  # noqa: E501
            return data

    def get_all_questions_with_http_info(self, _from, **kwargs):  # noqa: E501
        """Get Questions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_questions_with_http_info(_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float _from: (required)
        :return: GetAllQuestionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_questions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_all_questions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/questions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllQuestionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_question_details(self, question_id, **kwargs):  # noqa: E501
        """Get Question Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_question_details(question_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str question_id: (required)
        :return: GetQuestionDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_question_details_with_http_info(question_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_question_details_with_http_info(question_id, **kwargs)  # noqa: E501
            return data

    def get_question_details_with_http_info(self, question_id, **kwargs):  # noqa: E501
        """Get Question Details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_question_details_with_http_info(question_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str question_id: (required)
        :return: GetQuestionDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['question_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_question_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'question_id' is set
        if ('question_id' not in params or
                params['question_id'] is None):
            raise ValueError("Missing the required parameter `question_id` when calling `get_question_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'question_id' in params:
            path_params['questionId'] = params['question_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/questions/{questionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetQuestionDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_question_types(self, **kwargs):  # noqa: E501
        """All Question Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_question_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetAllQuestionTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_question_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_question_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_question_types_with_http_info(self, **kwargs):  # noqa: E501
        """All Question Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_question_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetAllQuestionTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_question_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/questions/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllQuestionTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_question_data(self, body, **kwargs):  # noqa: E501
        """Update Question  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_question_data(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateQuestionRequest body: (required)
        :return: UpdateQuestionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_question_data_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_question_data_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_question_data_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update Question  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_question_data_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateQuestionRequest body: (required)
        :return: UpdateQuestionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_question_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_question_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/questions', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateQuestionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
