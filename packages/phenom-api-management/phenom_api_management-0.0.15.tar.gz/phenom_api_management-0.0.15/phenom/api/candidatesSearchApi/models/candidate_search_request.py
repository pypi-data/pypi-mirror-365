# coding: utf-8

"""
    candidates-search-api

    These APIs helps to search and suggest based on keyword and filter among available candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateSearchRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'int',
        'size': 'int',
        'searchkeyword': 'str',
        'filters': 'list[OneOfCandidateSearchRequestFiltersItems]',
        'filters_operator': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'size': 'size',
        'searchkeyword': 'searchkeyword',
        'filters': 'filters',
        'filters_operator': 'filtersOperator'
    }

    def __init__(self, _from=None, size=None, searchkeyword=None, filters=None, filters_operator=None):  # noqa: E501
        """CandidateSearchRequest - a model defined in Swagger"""  # noqa: E501
        self.__from = None
        self._size = None
        self._searchkeyword = None
        self._filters = None
        self._filters_operator = None
        self.discriminator = None
        if _from is not None:
            self._from = _from
        if size is not None:
            self.size = size
        if searchkeyword is not None:
            self.searchkeyword = searchkeyword
        if filters is not None:
            self.filters = filters
        if filters_operator is not None:
            self.filters_operator = filters_operator

    @property
    def _from(self):
        """Gets the _from of this CandidateSearchRequest.  # noqa: E501

        Starting point from which the data should be retrieved.  # noqa: E501

        :return: The _from of this CandidateSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CandidateSearchRequest.

        Starting point from which the data should be retrieved.  # noqa: E501

        :param _from: The _from of this CandidateSearchRequest.  # noqa: E501
        :type: int
        """

        self.__from = _from

    @property
    def size(self):
        """Gets the size of this CandidateSearchRequest.  # noqa: E501

        Size of the response.  # noqa: E501

        :return: The size of this CandidateSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CandidateSearchRequest.

        Size of the response.  # noqa: E501

        :param size: The size of this CandidateSearchRequest.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def searchkeyword(self):
        """Gets the searchkeyword of this CandidateSearchRequest.  # noqa: E501

        Searching entered keyword in candidate profile.  # noqa: E501

        :return: The searchkeyword of this CandidateSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._searchkeyword

    @searchkeyword.setter
    def searchkeyword(self, searchkeyword):
        """Sets the searchkeyword of this CandidateSearchRequest.

        Searching entered keyword in candidate profile.  # noqa: E501

        :param searchkeyword: The searchkeyword of this CandidateSearchRequest.  # noqa: E501
        :type: str
        """

        self._searchkeyword = searchkeyword

    @property
    def filters(self):
        """Gets the filters of this CandidateSearchRequest.  # noqa: E501


        :return: The filters of this CandidateSearchRequest.  # noqa: E501
        :rtype: list[OneOfCandidateSearchRequestFiltersItems]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this CandidateSearchRequest.


        :param filters: The filters of this CandidateSearchRequest.  # noqa: E501
        :type: list[OneOfCandidateSearchRequestFiltersItems]
        """

        self._filters = filters

    @property
    def filters_operator(self):
        """Gets the filters_operator of this CandidateSearchRequest.  # noqa: E501

        Search operator accepts \"and\" / \"or\".  # noqa: E501

        :return: The filters_operator of this CandidateSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._filters_operator

    @filters_operator.setter
    def filters_operator(self, filters_operator):
        """Sets the filters_operator of this CandidateSearchRequest.

        Search operator accepts \"and\" / \"or\".  # noqa: E501

        :param filters_operator: The filters_operator of this CandidateSearchRequest.  # noqa: E501
        :type: str
        """

        self._filters_operator = filters_operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
