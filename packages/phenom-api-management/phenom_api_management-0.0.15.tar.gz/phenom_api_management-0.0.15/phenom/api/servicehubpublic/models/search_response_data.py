# coding: utf-8

"""
    servicehub-public-api

    Public APIs for managing user data.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class SearchResponseData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'realm': 'str',
        'email': 'str',
        'user_desc': 'str',
        'enabled': 'bool',
        'user_type': 'str',
        'legacy_user_id': 'str',
        'is_email_verified': 'bool',
        'created_on': 'float',
        'app_access_count': 'float',
        'group_count': 'float',
        'configure_otp': 'bool',
        'org_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_name': 'userName',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'realm': 'realm',
        'email': 'email',
        'user_desc': 'userDesc',
        'enabled': 'enabled',
        'user_type': 'userType',
        'legacy_user_id': 'legacyUserId',
        'is_email_verified': 'isEmailVerified',
        'created_on': 'createdOn',
        'app_access_count': 'appAccessCount',
        'group_count': 'groupCount',
        'configure_otp': 'configureOtp',
        'org_name': 'orgName'
    }

    def __init__(self, id=None, user_name=None, first_name=None, last_name=None, realm=None, email=None, user_desc=None, enabled=None, user_type=None, legacy_user_id=None, is_email_verified=None, created_on=None, app_access_count=None, group_count=None, configure_otp=None, org_name=None):  # noqa: E501
        """SearchResponseData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_name = None
        self._first_name = None
        self._last_name = None
        self._realm = None
        self._email = None
        self._user_desc = None
        self._enabled = None
        self._user_type = None
        self._legacy_user_id = None
        self._is_email_verified = None
        self._created_on = None
        self._app_access_count = None
        self._group_count = None
        self._configure_otp = None
        self._org_name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_name is not None:
            self.user_name = user_name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if realm is not None:
            self.realm = realm
        if email is not None:
            self.email = email
        if user_desc is not None:
            self.user_desc = user_desc
        if enabled is not None:
            self.enabled = enabled
        if user_type is not None:
            self.user_type = user_type
        if legacy_user_id is not None:
            self.legacy_user_id = legacy_user_id
        if is_email_verified is not None:
            self.is_email_verified = is_email_verified
        if created_on is not None:
            self.created_on = created_on
        if app_access_count is not None:
            self.app_access_count = app_access_count
        if group_count is not None:
            self.group_count = group_count
        if configure_otp is not None:
            self.configure_otp = configure_otp
        if org_name is not None:
            self.org_name = org_name

    @property
    def id(self):
        """Gets the id of this SearchResponseData.  # noqa: E501

        ID of the user.  # noqa: E501

        :return: The id of this SearchResponseData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchResponseData.

        ID of the user.  # noqa: E501

        :param id: The id of this SearchResponseData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this SearchResponseData.  # noqa: E501

        Username of the user.  # noqa: E501

        :return: The user_name of this SearchResponseData.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this SearchResponseData.

        Username of the user.  # noqa: E501

        :param user_name: The user_name of this SearchResponseData.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def first_name(self):
        """Gets the first_name of this SearchResponseData.  # noqa: E501

        First name of the user.  # noqa: E501

        :return: The first_name of this SearchResponseData.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SearchResponseData.

        First name of the user.  # noqa: E501

        :param first_name: The first_name of this SearchResponseData.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this SearchResponseData.  # noqa: E501

        Last name of the user.  # noqa: E501

        :return: The last_name of this SearchResponseData.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SearchResponseData.

        Last name of the user.  # noqa: E501

        :param last_name: The last_name of this SearchResponseData.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def realm(self):
        """Gets the realm of this SearchResponseData.  # noqa: E501

        Realm of the user.  # noqa: E501

        :return: The realm of this SearchResponseData.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this SearchResponseData.

        Realm of the user.  # noqa: E501

        :param realm: The realm of this SearchResponseData.  # noqa: E501
        :type: str
        """

        self._realm = realm

    @property
    def email(self):
        """Gets the email of this SearchResponseData.  # noqa: E501

        Email address of the user.  # noqa: E501

        :return: The email of this SearchResponseData.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SearchResponseData.

        Email address of the user.  # noqa: E501

        :param email: The email of this SearchResponseData.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def user_desc(self):
        """Gets the user_desc of this SearchResponseData.  # noqa: E501

        Description of the user.  # noqa: E501

        :return: The user_desc of this SearchResponseData.  # noqa: E501
        :rtype: str
        """
        return self._user_desc

    @user_desc.setter
    def user_desc(self, user_desc):
        """Sets the user_desc of this SearchResponseData.

        Description of the user.  # noqa: E501

        :param user_desc: The user_desc of this SearchResponseData.  # noqa: E501
        :type: str
        """

        self._user_desc = user_desc

    @property
    def enabled(self):
        """Gets the enabled of this SearchResponseData.  # noqa: E501

        Flag indicating if the user is enabled.  # noqa: E501

        :return: The enabled of this SearchResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SearchResponseData.

        Flag indicating if the user is enabled.  # noqa: E501

        :param enabled: The enabled of this SearchResponseData.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def user_type(self):
        """Gets the user_type of this SearchResponseData.  # noqa: E501

        Type of the user.  # noqa: E501

        :return: The user_type of this SearchResponseData.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this SearchResponseData.

        Type of the user.  # noqa: E501

        :param user_type: The user_type of this SearchResponseData.  # noqa: E501
        :type: str
        """

        self._user_type = user_type

    @property
    def legacy_user_id(self):
        """Gets the legacy_user_id of this SearchResponseData.  # noqa: E501

        Legacy ID of the user.  # noqa: E501

        :return: The legacy_user_id of this SearchResponseData.  # noqa: E501
        :rtype: str
        """
        return self._legacy_user_id

    @legacy_user_id.setter
    def legacy_user_id(self, legacy_user_id):
        """Sets the legacy_user_id of this SearchResponseData.

        Legacy ID of the user.  # noqa: E501

        :param legacy_user_id: The legacy_user_id of this SearchResponseData.  # noqa: E501
        :type: str
        """

        self._legacy_user_id = legacy_user_id

    @property
    def is_email_verified(self):
        """Gets the is_email_verified of this SearchResponseData.  # noqa: E501

        Flag indicating if the user's email is verified.  # noqa: E501

        :return: The is_email_verified of this SearchResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._is_email_verified

    @is_email_verified.setter
    def is_email_verified(self, is_email_verified):
        """Sets the is_email_verified of this SearchResponseData.

        Flag indicating if the user's email is verified.  # noqa: E501

        :param is_email_verified: The is_email_verified of this SearchResponseData.  # noqa: E501
        :type: bool
        """

        self._is_email_verified = is_email_verified

    @property
    def created_on(self):
        """Gets the created_on of this SearchResponseData.  # noqa: E501

        Timestamp indicating when the user was created.  # noqa: E501

        :return: The created_on of this SearchResponseData.  # noqa: E501
        :rtype: float
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this SearchResponseData.

        Timestamp indicating when the user was created.  # noqa: E501

        :param created_on: The created_on of this SearchResponseData.  # noqa: E501
        :type: float
        """

        self._created_on = created_on

    @property
    def app_access_count(self):
        """Gets the app_access_count of this SearchResponseData.  # noqa: E501

        Count of applications the user has access to.  # noqa: E501

        :return: The app_access_count of this SearchResponseData.  # noqa: E501
        :rtype: float
        """
        return self._app_access_count

    @app_access_count.setter
    def app_access_count(self, app_access_count):
        """Sets the app_access_count of this SearchResponseData.

        Count of applications the user has access to.  # noqa: E501

        :param app_access_count: The app_access_count of this SearchResponseData.  # noqa: E501
        :type: float
        """

        self._app_access_count = app_access_count

    @property
    def group_count(self):
        """Gets the group_count of this SearchResponseData.  # noqa: E501

        Count of groups the user is a part of.  # noqa: E501

        :return: The group_count of this SearchResponseData.  # noqa: E501
        :rtype: float
        """
        return self._group_count

    @group_count.setter
    def group_count(self, group_count):
        """Sets the group_count of this SearchResponseData.

        Count of groups the user is a part of.  # noqa: E501

        :param group_count: The group_count of this SearchResponseData.  # noqa: E501
        :type: float
        """

        self._group_count = group_count

    @property
    def configure_otp(self):
        """Gets the configure_otp of this SearchResponseData.  # noqa: E501

        Flag indicating if OTP is configured for the user.  # noqa: E501

        :return: The configure_otp of this SearchResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._configure_otp

    @configure_otp.setter
    def configure_otp(self, configure_otp):
        """Sets the configure_otp of this SearchResponseData.

        Flag indicating if OTP is configured for the user.  # noqa: E501

        :param configure_otp: The configure_otp of this SearchResponseData.  # noqa: E501
        :type: bool
        """

        self._configure_otp = configure_otp

    @property
    def org_name(self):
        """Gets the org_name of this SearchResponseData.  # noqa: E501

        Name of the organization associated with the user.  # noqa: E501

        :return: The org_name of this SearchResponseData.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this SearchResponseData.

        Name of the organization associated with the user.  # noqa: E501

        :param org_name: The org_name of this SearchResponseData.  # noqa: E501
        :type: str
        """

        self._org_name = org_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
