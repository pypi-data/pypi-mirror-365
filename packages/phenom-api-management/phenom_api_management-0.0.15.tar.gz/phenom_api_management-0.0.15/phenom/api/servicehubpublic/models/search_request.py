# coding: utf-8

"""
    servicehub-public-api

    Public APIs for managing user data.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class SearchRequest(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'search_keyword': 'str',
        'user_ids': 'list[str]',
        'product': 'SearchRequestProduct',
        'date_filter': 'list[SearchRequestDateFilter]',
        'usernames': 'list[str]',
        'sort_column': 'str',
        'sort_order': 'str',
        'selectors': 'list[str]',
        '_from': 'str',
        'size': 'str',
        'is2_fa_enabled': 'bool'
    }

    attribute_map = {
        'enabled': 'enabled',
        'search_keyword': 'searchKeyword',
        'user_ids': 'userIds',
        'product': 'product',
        'date_filter': 'dateFilter',
        'usernames': 'usernames',
        'sort_column': 'sortColumn',
        'sort_order': 'sortOrder',
        'selectors': 'selectors',
        '_from': 'from',
        'size': 'size',
        'is2_fa_enabled': 'is2FAEnabled'
    }

    def __init__(self, enabled=None, search_keyword=None, user_ids=None, product=None, date_filter=None, usernames=None, sort_column=None, sort_order=None, selectors=None, _from=None, size=None, is2_fa_enabled=None):  # noqa: E501
        """SearchRequest - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._search_keyword = None
        self._user_ids = None
        self._product = None
        self._date_filter = None
        self._usernames = None
        self._sort_column = None
        self._sort_order = None
        self._selectors = None
        self.__from = None
        self._size = None
        self._is2_fa_enabled = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if search_keyword is not None:
            self.search_keyword = search_keyword
        if user_ids is not None:
            self.user_ids = user_ids
        if product is not None:
            self.product = product
        if date_filter is not None:
            self.date_filter = date_filter
        if usernames is not None:
            self.usernames = usernames
        if sort_column is not None:
            self.sort_column = sort_column
        if sort_order is not None:
            self.sort_order = sort_order
        if selectors is not None:
            self.selectors = selectors
        if _from is not None:
            self._from = _from
        if size is not None:
            self.size = size
        if is2_fa_enabled is not None:
            self.is2_fa_enabled = is2_fa_enabled

    @property
    def enabled(self):
        """Gets the enabled of this SearchRequest.  # noqa: E501

        Flag to indicate if the search functionality is enabled.  # noqa: E501

        :return: The enabled of this SearchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SearchRequest.

        Flag to indicate if the search functionality is enabled.  # noqa: E501

        :param enabled: The enabled of this SearchRequest.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def search_keyword(self):
        """Gets the search_keyword of this SearchRequest.  # noqa: E501

        Keyword to search for in user data.  # noqa: E501

        :return: The search_keyword of this SearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._search_keyword

    @search_keyword.setter
    def search_keyword(self, search_keyword):
        """Sets the search_keyword of this SearchRequest.

        Keyword to search for in user data.  # noqa: E501

        :param search_keyword: The search_keyword of this SearchRequest.  # noqa: E501
        :type: str
        """

        self._search_keyword = search_keyword

    @property
    def user_ids(self):
        """Gets the user_ids of this SearchRequest.  # noqa: E501

        List of user IDs to include in the search.  # noqa: E501

        :return: The user_ids of this SearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this SearchRequest.

        List of user IDs to include in the search.  # noqa: E501

        :param user_ids: The user_ids of this SearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._user_ids = user_ids

    @property
    def product(self):
        """Gets the product of this SearchRequest.  # noqa: E501


        :return: The product of this SearchRequest.  # noqa: E501
        :rtype: SearchRequestProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this SearchRequest.


        :param product: The product of this SearchRequest.  # noqa: E501
        :type: SearchRequestProduct
        """

        self._product = product

    @property
    def date_filter(self):
        """Gets the date_filter of this SearchRequest.  # noqa: E501

        List of date filters for the search.  # noqa: E501

        :return: The date_filter of this SearchRequest.  # noqa: E501
        :rtype: list[SearchRequestDateFilter]
        """
        return self._date_filter

    @date_filter.setter
    def date_filter(self, date_filter):
        """Sets the date_filter of this SearchRequest.

        List of date filters for the search.  # noqa: E501

        :param date_filter: The date_filter of this SearchRequest.  # noqa: E501
        :type: list[SearchRequestDateFilter]
        """

        self._date_filter = date_filter

    @property
    def usernames(self):
        """Gets the usernames of this SearchRequest.  # noqa: E501

        List of usernames to include in the search.  # noqa: E501

        :return: The usernames of this SearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._usernames

    @usernames.setter
    def usernames(self, usernames):
        """Sets the usernames of this SearchRequest.

        List of usernames to include in the search.  # noqa: E501

        :param usernames: The usernames of this SearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._usernames = usernames

    @property
    def sort_column(self):
        """Gets the sort_column of this SearchRequest.  # noqa: E501

        Column to sort the search results by.  # noqa: E501

        :return: The sort_column of this SearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort_column

    @sort_column.setter
    def sort_column(self, sort_column):
        """Sets the sort_column of this SearchRequest.

        Column to sort the search results by.  # noqa: E501

        :param sort_column: The sort_column of this SearchRequest.  # noqa: E501
        :type: str
        """

        self._sort_column = sort_column

    @property
    def sort_order(self):
        """Gets the sort_order of this SearchRequest.  # noqa: E501

        Order to sort the search results (ascending or descending).  # noqa: E501

        :return: The sort_order of this SearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SearchRequest.

        Order to sort the search results (ascending or descending).  # noqa: E501

        :param sort_order: The sort_order of this SearchRequest.  # noqa: E501
        :type: str
        """

        self._sort_order = sort_order

    @property
    def selectors(self):
        """Gets the selectors of this SearchRequest.  # noqa: E501

        List of selectors for the search.  # noqa: E501

        :return: The selectors of this SearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this SearchRequest.

        List of selectors for the search.  # noqa: E501

        :param selectors: The selectors of this SearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._selectors = selectors

    @property
    def _from(self):
        """Gets the _from of this SearchRequest.  # noqa: E501

        Starting point for paginated results.  # noqa: E501

        :return: The _from of this SearchRequest.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SearchRequest.

        Starting point for paginated results.  # noqa: E501

        :param _from: The _from of this SearchRequest.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def size(self):
        """Gets the size of this SearchRequest.  # noqa: E501

        Number of results to return per page.  # noqa: E501

        :return: The size of this SearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SearchRequest.

        Number of results to return per page.  # noqa: E501

        :param size: The size of this SearchRequest.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def is2_fa_enabled(self):
        """Gets the is2_fa_enabled of this SearchRequest.  # noqa: E501

        Flag to indicate if 2FA is enabled for the users.  # noqa: E501

        :return: The is2_fa_enabled of this SearchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is2_fa_enabled

    @is2_fa_enabled.setter
    def is2_fa_enabled(self, is2_fa_enabled):
        """Sets the is2_fa_enabled of this SearchRequest.

        Flag to indicate if 2FA is enabled for the users.  # noqa: E501

        :param is2_fa_enabled: The is2_fa_enabled of this SearchRequest.  # noqa: E501
        :type: bool
        """

        self._is2_fa_enabled = is2_fa_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
