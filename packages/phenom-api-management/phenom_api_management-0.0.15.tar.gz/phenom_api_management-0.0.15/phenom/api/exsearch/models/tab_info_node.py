# coding: utf-8

"""
    ex-search-api

    These APIs helps in searching and providing suggestions based on keywords within employee profiles.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class TabInfoNode(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'type': 'str',
        'mutual_history': 'bool'
    }

    attribute_map = {
        'key': 'key',
        'type': 'type',
        'mutual_history': 'mutualHistory'
    }

    def __init__(self, key=None, type=None, mutual_history=None):  # noqa: E501
        """TabInfoNode - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._type = None
        self._mutual_history = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if type is not None:
            self.type = type
        if mutual_history is not None:
            self.mutual_history = mutual_history

    @property
    def key(self):
        """Gets the key of this TabInfoNode.  # noqa: E501

        Field name to populate fields based on this attribute.  # noqa: E501

        :return: The key of this TabInfoNode.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TabInfoNode.

        Field name to populate fields based on this attribute.  # noqa: E501

        :param key: The key of this TabInfoNode.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def type(self):
        """Gets the type of this TabInfoNode.  # noqa: E501

        Accepted Value - Custom.  # noqa: E501

        :return: The type of this TabInfoNode.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TabInfoNode.

        Accepted Value - Custom.  # noqa: E501

        :param type: The type of this TabInfoNode.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def mutual_history(self):
        """Gets the mutual_history of this TabInfoNode.  # noqa: E501

        True or False based on Profiles Settings.  # noqa: E501

        :return: The mutual_history of this TabInfoNode.  # noqa: E501
        :rtype: bool
        """
        return self._mutual_history

    @mutual_history.setter
    def mutual_history(self, mutual_history):
        """Sets the mutual_history of this TabInfoNode.

        True or False based on Profiles Settings.  # noqa: E501

        :param mutual_history: The mutual_history of this TabInfoNode.  # noqa: E501
        :type: bool
        """

        self._mutual_history = mutual_history

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TabInfoNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TabInfoNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
