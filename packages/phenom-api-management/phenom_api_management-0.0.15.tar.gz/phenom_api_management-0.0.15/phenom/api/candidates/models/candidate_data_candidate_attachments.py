# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateDataCandidateAttachments(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resume_file_name': 'str',
        'is_created_from_candidates': 'bool',
        'document_type': 'str',
        'attachment_type': 'str'
    }

    attribute_map = {
        'resume_file_name': 'resumeFileName',
        'is_created_from_candidates': 'isCreatedFromCandidates',
        'document_type': 'documentType',
        'attachment_type': 'attachmentType'
    }

    def __init__(self, resume_file_name=None, is_created_from_candidates=None, document_type=None, attachment_type=None):  # noqa: E501
        """CandidateDataCandidateAttachments - a model defined in Swagger"""  # noqa: E501
        self._resume_file_name = None
        self._is_created_from_candidates = None
        self._document_type = None
        self._attachment_type = None
        self.discriminator = None
        if resume_file_name is not None:
            self.resume_file_name = resume_file_name
        if is_created_from_candidates is not None:
            self.is_created_from_candidates = is_created_from_candidates
        if document_type is not None:
            self.document_type = document_type
        if attachment_type is not None:
            self.attachment_type = attachment_type

    @property
    def resume_file_name(self):
        """Gets the resume_file_name of this CandidateDataCandidateAttachments.  # noqa: E501

        Name of the resume file.  # noqa: E501

        :return: The resume_file_name of this CandidateDataCandidateAttachments.  # noqa: E501
        :rtype: str
        """
        return self._resume_file_name

    @resume_file_name.setter
    def resume_file_name(self, resume_file_name):
        """Sets the resume_file_name of this CandidateDataCandidateAttachments.

        Name of the resume file.  # noqa: E501

        :param resume_file_name: The resume_file_name of this CandidateDataCandidateAttachments.  # noqa: E501
        :type: str
        """

        self._resume_file_name = resume_file_name

    @property
    def is_created_from_candidates(self):
        """Gets the is_created_from_candidates of this CandidateDataCandidateAttachments.  # noqa: E501

        Indicates whether the attachment is created from candidates.  # noqa: E501

        :return: The is_created_from_candidates of this CandidateDataCandidateAttachments.  # noqa: E501
        :rtype: bool
        """
        return self._is_created_from_candidates

    @is_created_from_candidates.setter
    def is_created_from_candidates(self, is_created_from_candidates):
        """Sets the is_created_from_candidates of this CandidateDataCandidateAttachments.

        Indicates whether the attachment is created from candidates.  # noqa: E501

        :param is_created_from_candidates: The is_created_from_candidates of this CandidateDataCandidateAttachments.  # noqa: E501
        :type: bool
        """

        self._is_created_from_candidates = is_created_from_candidates

    @property
    def document_type(self):
        """Gets the document_type of this CandidateDataCandidateAttachments.  # noqa: E501

        Type of the document.  # noqa: E501

        :return: The document_type of this CandidateDataCandidateAttachments.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this CandidateDataCandidateAttachments.

        Type of the document.  # noqa: E501

        :param document_type: The document_type of this CandidateDataCandidateAttachments.  # noqa: E501
        :type: str
        """

        self._document_type = document_type

    @property
    def attachment_type(self):
        """Gets the attachment_type of this CandidateDataCandidateAttachments.  # noqa: E501

        Type of the attachment.  # noqa: E501

        :return: The attachment_type of this CandidateDataCandidateAttachments.  # noqa: E501
        :rtype: str
        """
        return self._attachment_type

    @attachment_type.setter
    def attachment_type(self, attachment_type):
        """Sets the attachment_type of this CandidateDataCandidateAttachments.

        Type of the attachment.  # noqa: E501

        :param attachment_type: The attachment_type of this CandidateDataCandidateAttachments.  # noqa: E501
        :type: str
        """

        self._attachment_type = attachment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateDataCandidateAttachments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateDataCandidateAttachments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
