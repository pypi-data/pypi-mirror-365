# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateDataCandidateExperience(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'str',
        'job_title': 'str',
        'industry': 'str',
        'role': 'str',
        'job_location': 'str',
        'start_date': 'float',
        'end_date': 'float',
        'is_current': 'bool',
        'company_url': 'str',
        'job_summary': 'str'
    }

    attribute_map = {
        'company': 'company',
        'job_title': 'jobTitle',
        'industry': 'industry',
        'role': 'role',
        'job_location': 'jobLocation',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'is_current': 'isCurrent',
        'company_url': 'companyUrl',
        'job_summary': 'jobSummary'
    }

    def __init__(self, company=None, job_title=None, industry=None, role=None, job_location=None, start_date=None, end_date=None, is_current=None, company_url=None, job_summary=None):  # noqa: E501
        """CandidateDataCandidateExperience - a model defined in Swagger"""  # noqa: E501
        self._company = None
        self._job_title = None
        self._industry = None
        self._role = None
        self._job_location = None
        self._start_date = None
        self._end_date = None
        self._is_current = None
        self._company_url = None
        self._job_summary = None
        self.discriminator = None
        if company is not None:
            self.company = company
        if job_title is not None:
            self.job_title = job_title
        if industry is not None:
            self.industry = industry
        if role is not None:
            self.role = role
        if job_location is not None:
            self.job_location = job_location
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if is_current is not None:
            self.is_current = is_current
        if company_url is not None:
            self.company_url = company_url
        if job_summary is not None:
            self.job_summary = job_summary

    @property
    def company(self):
        """Gets the company of this CandidateDataCandidateExperience.  # noqa: E501

        A string representing the name of the company.  # noqa: E501

        :return: The company of this CandidateDataCandidateExperience.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CandidateDataCandidateExperience.

        A string representing the name of the company.  # noqa: E501

        :param company: The company of this CandidateDataCandidateExperience.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def job_title(self):
        """Gets the job_title of this CandidateDataCandidateExperience.  # noqa: E501

        A string representing the job title.  # noqa: E501

        :return: The job_title of this CandidateDataCandidateExperience.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this CandidateDataCandidateExperience.

        A string representing the job title.  # noqa: E501

        :param job_title: The job_title of this CandidateDataCandidateExperience.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def industry(self):
        """Gets the industry of this CandidateDataCandidateExperience.  # noqa: E501

        A string representing the industry associated with the experience.  # noqa: E501

        :return: The industry of this CandidateDataCandidateExperience.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this CandidateDataCandidateExperience.

        A string representing the industry associated with the experience.  # noqa: E501

        :param industry: The industry of this CandidateDataCandidateExperience.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def role(self):
        """Gets the role of this CandidateDataCandidateExperience.  # noqa: E501

        A string representing the role in the experience.  # noqa: E501

        :return: The role of this CandidateDataCandidateExperience.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CandidateDataCandidateExperience.

        A string representing the role in the experience.  # noqa: E501

        :param role: The role of this CandidateDataCandidateExperience.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def job_location(self):
        """Gets the job_location of this CandidateDataCandidateExperience.  # noqa: E501

        A string representing the location of the job.  # noqa: E501

        :return: The job_location of this CandidateDataCandidateExperience.  # noqa: E501
        :rtype: str
        """
        return self._job_location

    @job_location.setter
    def job_location(self, job_location):
        """Sets the job_location of this CandidateDataCandidateExperience.

        A string representing the location of the job.  # noqa: E501

        :param job_location: The job_location of this CandidateDataCandidateExperience.  # noqa: E501
        :type: str
        """

        self._job_location = job_location

    @property
    def start_date(self):
        """Gets the start_date of this CandidateDataCandidateExperience.  # noqa: E501

        A number representing the start date of the experience.  # noqa: E501

        :return: The start_date of this CandidateDataCandidateExperience.  # noqa: E501
        :rtype: float
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CandidateDataCandidateExperience.

        A number representing the start date of the experience.  # noqa: E501

        :param start_date: The start_date of this CandidateDataCandidateExperience.  # noqa: E501
        :type: float
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this CandidateDataCandidateExperience.  # noqa: E501

        A number representing the end date of the experience.  # noqa: E501

        :return: The end_date of this CandidateDataCandidateExperience.  # noqa: E501
        :rtype: float
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CandidateDataCandidateExperience.

        A number representing the end date of the experience.  # noqa: E501

        :param end_date: The end_date of this CandidateDataCandidateExperience.  # noqa: E501
        :type: float
        """

        self._end_date = end_date

    @property
    def is_current(self):
        """Gets the is_current of this CandidateDataCandidateExperience.  # noqa: E501

        A boolean indicating whether the experience is current.  # noqa: E501

        :return: The is_current of this CandidateDataCandidateExperience.  # noqa: E501
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this CandidateDataCandidateExperience.

        A boolean indicating whether the experience is current.  # noqa: E501

        :param is_current: The is_current of this CandidateDataCandidateExperience.  # noqa: E501
        :type: bool
        """

        self._is_current = is_current

    @property
    def company_url(self):
        """Gets the company_url of this CandidateDataCandidateExperience.  # noqa: E501

        A string representing the URL of the company.  # noqa: E501

        :return: The company_url of this CandidateDataCandidateExperience.  # noqa: E501
        :rtype: str
        """
        return self._company_url

    @company_url.setter
    def company_url(self, company_url):
        """Sets the company_url of this CandidateDataCandidateExperience.

        A string representing the URL of the company.  # noqa: E501

        :param company_url: The company_url of this CandidateDataCandidateExperience.  # noqa: E501
        :type: str
        """

        self._company_url = company_url

    @property
    def job_summary(self):
        """Gets the job_summary of this CandidateDataCandidateExperience.  # noqa: E501

        A string representing a summary of the job experience.  # noqa: E501

        :return: The job_summary of this CandidateDataCandidateExperience.  # noqa: E501
        :rtype: str
        """
        return self._job_summary

    @job_summary.setter
    def job_summary(self, job_summary):
        """Sets the job_summary of this CandidateDataCandidateExperience.

        A string representing a summary of the job experience.  # noqa: E501

        :param job_summary: The job_summary of this CandidateDataCandidateExperience.  # noqa: E501
        :type: str
        """

        self._job_summary = job_summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateDataCandidateExperience, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateDataCandidateExperience):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
