# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CandidateDataCandidate(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attachments': 'list[CandidateDataCandidateAttachments]',
        'education': 'list[EducationDataEducations]',
        'middle_name': 'str',
        'language_preference': 'str',
        'language_known': 'list[str]',
        'user_id': 'str',
        'last_update_timestamp': 'float',
        'employee_id': 'str',
        'skills': 'list[str]',
        'linked_in_profile_url': 'str',
        'first_name': 'str',
        'company': 'str',
        'created_date': 'float',
        'new_location': 'CandidateDataCandidateNewLocation',
        'updated_date': 'float',
        'preferred_communication_mode': 'CandidateDataCandidatePreferredCommunicationMode',
        'email_list': 'list[CandidateDataCandidateEmailList]',
        'experience': 'list[CandidateDataCandidateExperience]',
        'contacts': 'list[CandidateDataCandidateContacts]',
        'last_name': 'str',
        'internal': 'bool',
        'ats_id': 'str'
    }

    attribute_map = {
        'attachments': 'attachments',
        'education': 'education',
        'middle_name': 'middleName',
        'language_preference': 'languagePreference',
        'language_known': 'languageKnown',
        'user_id': 'userId',
        'last_update_timestamp': 'lastUpdateTimestamp',
        'employee_id': 'employeeId',
        'skills': 'skills',
        'linked_in_profile_url': 'linkedInProfileURL',
        'first_name': 'firstName',
        'company': 'company',
        'created_date': 'createdDate',
        'new_location': 'newLocation',
        'updated_date': 'updatedDate',
        'preferred_communication_mode': 'preferredCommunicationMode',
        'email_list': 'emailList',
        'experience': 'experience',
        'contacts': 'contacts',
        'last_name': 'lastName',
        'internal': 'internal',
        'ats_id': 'atsId'
    }

    def __init__(self, attachments=None, education=None, middle_name=None, language_preference=None, language_known=None, user_id=None, last_update_timestamp=None, employee_id=None, skills=None, linked_in_profile_url=None, first_name=None, company=None, created_date=None, new_location=None, updated_date=None, preferred_communication_mode=None, email_list=None, experience=None, contacts=None, last_name=None, internal=None, ats_id=None):  # noqa: E501
        """CandidateDataCandidate - a model defined in Swagger"""  # noqa: E501
        self._attachments = None
        self._education = None
        self._middle_name = None
        self._language_preference = None
        self._language_known = None
        self._user_id = None
        self._last_update_timestamp = None
        self._employee_id = None
        self._skills = None
        self._linked_in_profile_url = None
        self._first_name = None
        self._company = None
        self._created_date = None
        self._new_location = None
        self._updated_date = None
        self._preferred_communication_mode = None
        self._email_list = None
        self._experience = None
        self._contacts = None
        self._last_name = None
        self._internal = None
        self._ats_id = None
        self.discriminator = None
        if attachments is not None:
            self.attachments = attachments
        if education is not None:
            self.education = education
        if middle_name is not None:
            self.middle_name = middle_name
        if language_preference is not None:
            self.language_preference = language_preference
        if language_known is not None:
            self.language_known = language_known
        if user_id is not None:
            self.user_id = user_id
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if employee_id is not None:
            self.employee_id = employee_id
        if skills is not None:
            self.skills = skills
        if linked_in_profile_url is not None:
            self.linked_in_profile_url = linked_in_profile_url
        if first_name is not None:
            self.first_name = first_name
        if company is not None:
            self.company = company
        if created_date is not None:
            self.created_date = created_date
        if new_location is not None:
            self.new_location = new_location
        if updated_date is not None:
            self.updated_date = updated_date
        if preferred_communication_mode is not None:
            self.preferred_communication_mode = preferred_communication_mode
        if email_list is not None:
            self.email_list = email_list
        if experience is not None:
            self.experience = experience
        if contacts is not None:
            self.contacts = contacts
        if last_name is not None:
            self.last_name = last_name
        if internal is not None:
            self.internal = internal
        if ats_id is not None:
            self.ats_id = ats_id

    @property
    def attachments(self):
        """Gets the attachments of this CandidateDataCandidate.  # noqa: E501

        Array containing details of attachments associated with the candidate.  # noqa: E501

        :return: The attachments of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateAttachments]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this CandidateDataCandidate.

        Array containing details of attachments associated with the candidate.  # noqa: E501

        :param attachments: The attachments of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateAttachments]
        """

        self._attachments = attachments

    @property
    def education(self):
        """Gets the education of this CandidateDataCandidate.  # noqa: E501

        Array containing objects representing the educational background of the candidate.  # noqa: E501

        :return: The education of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[EducationDataEducations]
        """
        return self._education

    @education.setter
    def education(self, education):
        """Sets the education of this CandidateDataCandidate.

        Array containing objects representing the educational background of the candidate.  # noqa: E501

        :param education: The education of this CandidateDataCandidate.  # noqa: E501
        :type: list[EducationDataEducations]
        """

        self._education = education

    @property
    def middle_name(self):
        """Gets the middle_name of this CandidateDataCandidate.  # noqa: E501

        The middle name of the candidate.  # noqa: E501

        :return: The middle_name of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this CandidateDataCandidate.

        The middle name of the candidate.  # noqa: E501

        :param middle_name: The middle_name of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def language_preference(self):
        """Gets the language_preference of this CandidateDataCandidate.  # noqa: E501

        The language preference of the candidate.  # noqa: E501

        :return: The language_preference of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._language_preference

    @language_preference.setter
    def language_preference(self, language_preference):
        """Sets the language_preference of this CandidateDataCandidate.

        The language preference of the candidate.  # noqa: E501

        :param language_preference: The language_preference of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._language_preference = language_preference

    @property
    def language_known(self):
        """Gets the language_known of this CandidateDataCandidate.  # noqa: E501

        List of languages known by the candidate.  # noqa: E501

        :return: The language_known of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._language_known

    @language_known.setter
    def language_known(self, language_known):
        """Sets the language_known of this CandidateDataCandidate.

        List of languages known by the candidate.  # noqa: E501

        :param language_known: The language_known of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._language_known = language_known

    @property
    def user_id(self):
        """Gets the user_id of this CandidateDataCandidate.  # noqa: E501

        Unique identifier for the user or candidate.  # noqa: E501

        :return: The user_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CandidateDataCandidate.

        Unique identifier for the user or candidate.  # noqa: E501

        :param user_id: The user_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this CandidateDataCandidate.  # noqa: E501

        Timestamp indicating the last update time of the candidate's profile.  # noqa: E501

        :return: The last_update_timestamp of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this CandidateDataCandidate.

        Timestamp indicating the last update time of the candidate's profile.  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def employee_id(self):
        """Gets the employee_id of this CandidateDataCandidate.  # noqa: E501

        Employee profile ID associated with the candidate.  # noqa: E501

        :return: The employee_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this CandidateDataCandidate.

        Employee profile ID associated with the candidate.  # noqa: E501

        :param employee_id: The employee_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._employee_id = employee_id

    @property
    def skills(self):
        """Gets the skills of this CandidateDataCandidate.  # noqa: E501

        List of skills possessed by the candidate.  # noqa: E501

        :return: The skills of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this CandidateDataCandidate.

        List of skills possessed by the candidate.  # noqa: E501

        :param skills: The skills of this CandidateDataCandidate.  # noqa: E501
        :type: list[str]
        """

        self._skills = skills

    @property
    def linked_in_profile_url(self):
        """Gets the linked_in_profile_url of this CandidateDataCandidate.  # noqa: E501

        URL to the candidate's LinkedIn profile.  # noqa: E501

        :return: The linked_in_profile_url of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._linked_in_profile_url

    @linked_in_profile_url.setter
    def linked_in_profile_url(self, linked_in_profile_url):
        """Sets the linked_in_profile_url of this CandidateDataCandidate.

        URL to the candidate's LinkedIn profile.  # noqa: E501

        :param linked_in_profile_url: The linked_in_profile_url of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._linked_in_profile_url = linked_in_profile_url

    @property
    def first_name(self):
        """Gets the first_name of this CandidateDataCandidate.  # noqa: E501

        First name of the candidate.  # noqa: E501

        :return: The first_name of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CandidateDataCandidate.

        First name of the candidate.  # noqa: E501

        :param first_name: The first_name of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def company(self):
        """Gets the company of this CandidateDataCandidate.  # noqa: E501

        The name of the company associated with the candidate.  # noqa: E501

        :return: The company of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CandidateDataCandidate.

        The name of the company associated with the candidate.  # noqa: E501

        :param company: The company of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def created_date(self):
        """Gets the created_date of this CandidateDataCandidate.  # noqa: E501

        A timestamp indicating the date and time when the candidate profile was created.  # noqa: E501

        :return: The created_date of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CandidateDataCandidate.

        A timestamp indicating the date and time when the candidate profile was created.  # noqa: E501

        :param created_date: The created_date of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._created_date = created_date

    @property
    def new_location(self):
        """Gets the new_location of this CandidateDataCandidate.  # noqa: E501


        :return: The new_location of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidateNewLocation
        """
        return self._new_location

    @new_location.setter
    def new_location(self, new_location):
        """Sets the new_location of this CandidateDataCandidate.


        :param new_location: The new_location of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidateNewLocation
        """

        self._new_location = new_location

    @property
    def updated_date(self):
        """Gets the updated_date of this CandidateDataCandidate.  # noqa: E501

        The date when the information was last updated.  # noqa: E501

        :return: The updated_date of this CandidateDataCandidate.  # noqa: E501
        :rtype: float
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this CandidateDataCandidate.

        The date when the information was last updated.  # noqa: E501

        :param updated_date: The updated_date of this CandidateDataCandidate.  # noqa: E501
        :type: float
        """

        self._updated_date = updated_date

    @property
    def preferred_communication_mode(self):
        """Gets the preferred_communication_mode of this CandidateDataCandidate.  # noqa: E501


        :return: The preferred_communication_mode of this CandidateDataCandidate.  # noqa: E501
        :rtype: CandidateDataCandidatePreferredCommunicationMode
        """
        return self._preferred_communication_mode

    @preferred_communication_mode.setter
    def preferred_communication_mode(self, preferred_communication_mode):
        """Sets the preferred_communication_mode of this CandidateDataCandidate.


        :param preferred_communication_mode: The preferred_communication_mode of this CandidateDataCandidate.  # noqa: E501
        :type: CandidateDataCandidatePreferredCommunicationMode
        """

        self._preferred_communication_mode = preferred_communication_mode

    @property
    def email_list(self):
        """Gets the email_list of this CandidateDataCandidate.  # noqa: E501

        An array representing an email list.  # noqa: E501

        :return: The email_list of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateEmailList]
        """
        return self._email_list

    @email_list.setter
    def email_list(self, email_list):
        """Sets the email_list of this CandidateDataCandidate.

        An array representing an email list.  # noqa: E501

        :param email_list: The email_list of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateEmailList]
        """

        self._email_list = email_list

    @property
    def experience(self):
        """Gets the experience of this CandidateDataCandidate.  # noqa: E501

        An array representing professional experiences.  # noqa: E501

        :return: The experience of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateExperience]
        """
        return self._experience

    @experience.setter
    def experience(self, experience):
        """Sets the experience of this CandidateDataCandidate.

        An array representing professional experiences.  # noqa: E501

        :param experience: The experience of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateExperience]
        """

        self._experience = experience

    @property
    def contacts(self):
        """Gets the contacts of this CandidateDataCandidate.  # noqa: E501

        An array representing contact information for the individual.  # noqa: E501

        :return: The contacts of this CandidateDataCandidate.  # noqa: E501
        :rtype: list[CandidateDataCandidateContacts]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this CandidateDataCandidate.

        An array representing contact information for the individual.  # noqa: E501

        :param contacts: The contacts of this CandidateDataCandidate.  # noqa: E501
        :type: list[CandidateDataCandidateContacts]
        """

        self._contacts = contacts

    @property
    def last_name(self):
        """Gets the last_name of this CandidateDataCandidate.  # noqa: E501

        A string representing the last name of the individual.  # noqa: E501

        :return: The last_name of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CandidateDataCandidate.

        A string representing the last name of the individual.  # noqa: E501

        :param last_name: The last_name of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def internal(self):
        """Gets the internal of this CandidateDataCandidate.  # noqa: E501

        A boolean indicating whether the individual is internal to the organization.  # noqa: E501

        :return: The internal of this CandidateDataCandidate.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this CandidateDataCandidate.

        A boolean indicating whether the individual is internal to the organization.  # noqa: E501

        :param internal: The internal of this CandidateDataCandidate.  # noqa: E501
        :type: bool
        """

        self._internal = internal

    @property
    def ats_id(self):
        """Gets the ats_id of this CandidateDataCandidate.  # noqa: E501

        A string representing the unique identifier associated with the Applicant Tracking System (ATS).  # noqa: E501

        :return: The ats_id of this CandidateDataCandidate.  # noqa: E501
        :rtype: str
        """
        return self._ats_id

    @ats_id.setter
    def ats_id(self, ats_id):
        """Sets the ats_id of this CandidateDataCandidate.

        A string representing the unique identifier associated with the Applicant Tracking System (ATS).  # noqa: E501

        :param ats_id: The ats_id of this CandidateDataCandidate.  # noqa: E501
        :type: str
        """

        self._ats_id = ats_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateDataCandidate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateDataCandidate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
