# coding: utf-8

"""
    candidates-api

    The Candidate APIs allows you to add, update and delete candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CreateCandidateRequestContacts(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'phone_number': 'str',
        'status': 'str',
        'country_code': 'str'
    }

    attribute_map = {
        'type': 'type',
        'phone_number': 'phoneNumber',
        'status': 'status',
        'country_code': 'countryCode'
    }

    def __init__(self, type=None, phone_number=None, status=None, country_code=None):  # noqa: E501
        """CreateCandidateRequestContacts - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._phone_number = None
        self._status = None
        self._country_code = None
        self.discriminator = None
        self.type = type
        self.phone_number = phone_number
        self.status = status
        self.country_code = country_code

    @property
    def type(self):
        """Gets the type of this CreateCandidateRequestContacts.  # noqa: E501

        The type of contact (e.g., 'Primary' or 'Secondary').  # noqa: E501

        :return: The type of this CreateCandidateRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateCandidateRequestContacts.

        The type of contact (e.g., 'Primary' or 'Secondary').  # noqa: E501

        :param type: The type of this CreateCandidateRequestContacts.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def phone_number(self):
        """Gets the phone_number of this CreateCandidateRequestContacts.  # noqa: E501

        The phone number of the contact.  # noqa: E501

        :return: The phone_number of this CreateCandidateRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CreateCandidateRequestContacts.

        The phone number of the contact.  # noqa: E501

        :param phone_number: The phone_number of this CreateCandidateRequestContacts.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def status(self):
        """Gets the status of this CreateCandidateRequestContacts.  # noqa: E501

        The status of the contact (e.g., 'Primary' or 'Secondary').  # noqa: E501

        :return: The status of this CreateCandidateRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateCandidateRequestContacts.

        The status of the contact (e.g., 'Primary' or 'Secondary').  # noqa: E501

        :param status: The status of this CreateCandidateRequestContacts.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Primary", "Secondary"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def country_code(self):
        """Gets the country_code of this CreateCandidateRequestContacts.  # noqa: E501

        The country code associated with the contact.  # noqa: E501

        :return: The country_code of this CreateCandidateRequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CreateCandidateRequestContacts.

        The country code associated with the contact.  # noqa: E501

        :param country_code: The country_code of this CreateCandidateRequestContacts.  # noqa: E501
        :type: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCandidateRequestContacts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCandidateRequestContacts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
