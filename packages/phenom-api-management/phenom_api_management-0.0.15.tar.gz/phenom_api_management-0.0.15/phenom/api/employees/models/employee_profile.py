# coding: utf-8

"""
    employees-api

    The employee profile APIs are used to create, access, update and delete employee profile and preferences.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class EmployeeProfile(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employee_id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'designation': 'str',
        'location': 'str',
        'picture_url': 'str'
    }

    attribute_map = {
        'employee_id': 'employeeId',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'designation': 'designation',
        'location': 'location',
        'picture_url': 'pictureUrl'
    }

    def __init__(self, employee_id='1002345', first_name='John', last_name='Doe', email='test.email@example.com', designation='Software Developer', location='Princeton,New Jersey,USA', picture_url='https://assets.client.com/CareerConnectResources/pp/CLIENTID/wallpaper_preview.jpg'):  # noqa: E501
        """EmployeeProfile - a model defined in Swagger"""  # noqa: E501
        self._employee_id = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._designation = None
        self._location = None
        self._picture_url = None
        self.discriminator = None
        if employee_id is not None:
            self.employee_id = employee_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if designation is not None:
            self.designation = designation
        if location is not None:
            self.location = location
        if picture_url is not None:
            self.picture_url = picture_url

    @property
    def employee_id(self):
        """Gets the employee_id of this EmployeeProfile.  # noqa: E501

        Employee Id - unique field to identify the employee.  # noqa: E501

        :return: The employee_id of this EmployeeProfile.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this EmployeeProfile.

        Employee Id - unique field to identify the employee.  # noqa: E501

        :param employee_id: The employee_id of this EmployeeProfile.  # noqa: E501
        :type: str
        """

        self._employee_id = employee_id

    @property
    def first_name(self):
        """Gets the first_name of this EmployeeProfile.  # noqa: E501

        First name of the employee.  # noqa: E501

        :return: The first_name of this EmployeeProfile.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EmployeeProfile.

        First name of the employee.  # noqa: E501

        :param first_name: The first_name of this EmployeeProfile.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this EmployeeProfile.  # noqa: E501

        Last name of the employee.  # noqa: E501

        :return: The last_name of this EmployeeProfile.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this EmployeeProfile.

        Last name of the employee.  # noqa: E501

        :param last_name: The last_name of this EmployeeProfile.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this EmployeeProfile.  # noqa: E501

        Company email of the employee.  # noqa: E501

        :return: The email of this EmployeeProfile.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EmployeeProfile.

        Company email of the employee.  # noqa: E501

        :param email: The email of this EmployeeProfile.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def designation(self):
        """Gets the designation of this EmployeeProfile.  # noqa: E501

        Designation of the employee in the company.  # noqa: E501

        :return: The designation of this EmployeeProfile.  # noqa: E501
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this EmployeeProfile.

        Designation of the employee in the company.  # noqa: E501

        :param designation: The designation of this EmployeeProfile.  # noqa: E501
        :type: str
        """

        self._designation = designation

    @property
    def location(self):
        """Gets the location of this EmployeeProfile.  # noqa: E501

        Location of the employee.  # noqa: E501

        :return: The location of this EmployeeProfile.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EmployeeProfile.

        Location of the employee.  # noqa: E501

        :param location: The location of this EmployeeProfile.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def picture_url(self):
        """Gets the picture_url of this EmployeeProfile.  # noqa: E501

        Picture of the employee.  # noqa: E501

        :return: The picture_url of this EmployeeProfile.  # noqa: E501
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this EmployeeProfile.

        Picture of the employee.  # noqa: E501

        :param picture_url: The picture_url of this EmployeeProfile.  # noqa: E501
        :type: str
        """

        self._picture_url = picture_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmployeeProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmployeeProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
