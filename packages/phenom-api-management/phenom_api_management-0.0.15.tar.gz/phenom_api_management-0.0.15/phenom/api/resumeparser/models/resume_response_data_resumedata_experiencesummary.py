# coding: utf-8

"""
    resume-parser-api

    The Resume Parser extracts important information of a candidate such as candidate's name, contact information, email id, education, work experience, and skills, etc. from the resume using Deep learning models.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ResumeResponseDataResumedataExperiencesummary(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currentemployer': 'str',
        'currentrole': 'str',
        'gapperiod': 'str',
        'longeststay': 'str',
        'averagestay': 'str',
        'totalexperienceinmonths': 'str',
        'totalexperienceinyear': 'str'
    }

    attribute_map = {
        'currentemployer': 'currentemployer',
        'currentrole': 'currentrole',
        'gapperiod': 'gapperiod',
        'longeststay': 'longeststay',
        'averagestay': 'averagestay',
        'totalexperienceinmonths': 'totalexperienceinmonths',
        'totalexperienceinyear': 'totalexperienceinyear'
    }

    def __init__(self, currentemployer=None, currentrole=None, gapperiod=None, longeststay=None, averagestay=None, totalexperienceinmonths=None, totalexperienceinyear=None):  # noqa: E501
        """ResumeResponseDataResumedataExperiencesummary - a model defined in Swagger"""  # noqa: E501
        self._currentemployer = None
        self._currentrole = None
        self._gapperiod = None
        self._longeststay = None
        self._averagestay = None
        self._totalexperienceinmonths = None
        self._totalexperienceinyear = None
        self.discriminator = None
        if currentemployer is not None:
            self.currentemployer = currentemployer
        if currentrole is not None:
            self.currentrole = currentrole
        if gapperiod is not None:
            self.gapperiod = gapperiod
        if longeststay is not None:
            self.longeststay = longeststay
        if averagestay is not None:
            self.averagestay = averagestay
        if totalexperienceinmonths is not None:
            self.totalexperienceinmonths = totalexperienceinmonths
        if totalexperienceinyear is not None:
            self.totalexperienceinyear = totalexperienceinyear

    @property
    def currentemployer(self):
        """Gets the currentemployer of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501

        Candidate working in current Company.  # noqa: E501

        :return: The currentemployer of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :rtype: str
        """
        return self._currentemployer

    @currentemployer.setter
    def currentemployer(self, currentemployer):
        """Sets the currentemployer of this ResumeResponseDataResumedataExperiencesummary.

        Candidate working in current Company.  # noqa: E501

        :param currentemployer: The currentemployer of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :type: str
        """

        self._currentemployer = currentemployer

    @property
    def currentrole(self):
        """Gets the currentrole of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501

        Current role of candidate.  # noqa: E501

        :return: The currentrole of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :rtype: str
        """
        return self._currentrole

    @currentrole.setter
    def currentrole(self, currentrole):
        """Sets the currentrole of this ResumeResponseDataResumedataExperiencesummary.

        Current role of candidate.  # noqa: E501

        :param currentrole: The currentrole of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :type: str
        """

        self._currentrole = currentrole

    @property
    def gapperiod(self):
        """Gets the gapperiod of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501

        Time frame for which candidate is not working.  # noqa: E501

        :return: The gapperiod of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :rtype: str
        """
        return self._gapperiod

    @gapperiod.setter
    def gapperiod(self, gapperiod):
        """Sets the gapperiod of this ResumeResponseDataResumedataExperiencesummary.

        Time frame for which candidate is not working.  # noqa: E501

        :param gapperiod: The gapperiod of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :type: str
        """

        self._gapperiod = gapperiod

    @property
    def longeststay(self):
        """Gets the longeststay of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501

        Longest time frame in a Company.  # noqa: E501

        :return: The longeststay of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :rtype: str
        """
        return self._longeststay

    @longeststay.setter
    def longeststay(self, longeststay):
        """Sets the longeststay of this ResumeResponseDataResumedataExperiencesummary.

        Longest time frame in a Company.  # noqa: E501

        :param longeststay: The longeststay of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :type: str
        """

        self._longeststay = longeststay

    @property
    def averagestay(self):
        """Gets the averagestay of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501

        Average stay.  # noqa: E501

        :return: The averagestay of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :rtype: str
        """
        return self._averagestay

    @averagestay.setter
    def averagestay(self, averagestay):
        """Sets the averagestay of this ResumeResponseDataResumedataExperiencesummary.

        Average stay.  # noqa: E501

        :param averagestay: The averagestay of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :type: str
        """

        self._averagestay = averagestay

    @property
    def totalexperienceinmonths(self):
        """Gets the totalexperienceinmonths of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501

        Total experience in months.  # noqa: E501

        :return: The totalexperienceinmonths of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :rtype: str
        """
        return self._totalexperienceinmonths

    @totalexperienceinmonths.setter
    def totalexperienceinmonths(self, totalexperienceinmonths):
        """Sets the totalexperienceinmonths of this ResumeResponseDataResumedataExperiencesummary.

        Total experience in months.  # noqa: E501

        :param totalexperienceinmonths: The totalexperienceinmonths of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :type: str
        """

        self._totalexperienceinmonths = totalexperienceinmonths

    @property
    def totalexperienceinyear(self):
        """Gets the totalexperienceinyear of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501

        Total experience in year.  # noqa: E501

        :return: The totalexperienceinyear of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :rtype: str
        """
        return self._totalexperienceinyear

    @totalexperienceinyear.setter
    def totalexperienceinyear(self, totalexperienceinyear):
        """Sets the totalexperienceinyear of this ResumeResponseDataResumedataExperiencesummary.

        Total experience in year.  # noqa: E501

        :param totalexperienceinyear: The totalexperienceinyear of this ResumeResponseDataResumedataExperiencesummary.  # noqa: E501
        :type: str
        """

        self._totalexperienceinyear = totalexperienceinyear

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResumeResponseDataResumedataExperiencesummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResumeResponseDataResumedataExperiencesummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
