# coding: utf-8

"""
    hrm-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class TaskDetailsResponseDataJobsInfo(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'str',
        'job_location': 'str',
        'job_title': 'str',
        'user_role': 'str',
        'no_of_pending_tasks': 'float'
    }

    attribute_map = {
        'job_id': 'jobId',
        'job_location': 'jobLocation',
        'job_title': 'jobTitle',
        'user_role': 'userRole',
        'no_of_pending_tasks': 'noOfPendingTasks'
    }

    def __init__(self, job_id=None, job_location=None, job_title=None, user_role=None, no_of_pending_tasks=None):  # noqa: E501
        """TaskDetailsResponseDataJobsInfo - a model defined in Swagger"""  # noqa: E501
        self._job_id = None
        self._job_location = None
        self._job_title = None
        self._user_role = None
        self._no_of_pending_tasks = None
        self.discriminator = None
        if job_id is not None:
            self.job_id = job_id
        if job_location is not None:
            self.job_location = job_location
        if job_title is not None:
            self.job_title = job_title
        if user_role is not None:
            self.user_role = user_role
        if no_of_pending_tasks is not None:
            self.no_of_pending_tasks = no_of_pending_tasks

    @property
    def job_id(self):
        """Gets the job_id of this TaskDetailsResponseDataJobsInfo.  # noqa: E501

        The job's reference id.  # noqa: E501

        :return: The job_id of this TaskDetailsResponseDataJobsInfo.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this TaskDetailsResponseDataJobsInfo.

        The job's reference id.  # noqa: E501

        :param job_id: The job_id of this TaskDetailsResponseDataJobsInfo.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_location(self):
        """Gets the job_location of this TaskDetailsResponseDataJobsInfo.  # noqa: E501

        The job's location.  # noqa: E501

        :return: The job_location of this TaskDetailsResponseDataJobsInfo.  # noqa: E501
        :rtype: str
        """
        return self._job_location

    @job_location.setter
    def job_location(self, job_location):
        """Sets the job_location of this TaskDetailsResponseDataJobsInfo.

        The job's location.  # noqa: E501

        :param job_location: The job_location of this TaskDetailsResponseDataJobsInfo.  # noqa: E501
        :type: str
        """

        self._job_location = job_location

    @property
    def job_title(self):
        """Gets the job_title of this TaskDetailsResponseDataJobsInfo.  # noqa: E501

        The job's title.  # noqa: E501

        :return: The job_title of this TaskDetailsResponseDataJobsInfo.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this TaskDetailsResponseDataJobsInfo.

        The job's title.  # noqa: E501

        :param job_title: The job_title of this TaskDetailsResponseDataJobsInfo.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def user_role(self):
        """Gets the user_role of this TaskDetailsResponseDataJobsInfo.  # noqa: E501

        The user's role to the job.  # noqa: E501

        :return: The user_role of this TaskDetailsResponseDataJobsInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_role

    @user_role.setter
    def user_role(self, user_role):
        """Sets the user_role of this TaskDetailsResponseDataJobsInfo.

        The user's role to the job.  # noqa: E501

        :param user_role: The user_role of this TaskDetailsResponseDataJobsInfo.  # noqa: E501
        :type: str
        """

        self._user_role = user_role

    @property
    def no_of_pending_tasks(self):
        """Gets the no_of_pending_tasks of this TaskDetailsResponseDataJobsInfo.  # noqa: E501

        The number of pending tasks associated with a given task in this job for the user.  # noqa: E501

        :return: The no_of_pending_tasks of this TaskDetailsResponseDataJobsInfo.  # noqa: E501
        :rtype: float
        """
        return self._no_of_pending_tasks

    @no_of_pending_tasks.setter
    def no_of_pending_tasks(self, no_of_pending_tasks):
        """Sets the no_of_pending_tasks of this TaskDetailsResponseDataJobsInfo.

        The number of pending tasks associated with a given task in this job for the user.  # noqa: E501

        :param no_of_pending_tasks: The no_of_pending_tasks of this TaskDetailsResponseDataJobsInfo.  # noqa: E501
        :type: float
        """

        self._no_of_pending_tasks = no_of_pending_tasks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskDetailsResponseDataJobsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskDetailsResponseDataJobsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
