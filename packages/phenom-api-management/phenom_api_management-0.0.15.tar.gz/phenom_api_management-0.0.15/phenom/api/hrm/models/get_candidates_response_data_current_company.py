# coding: utf-8

"""
    hrm-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetCandidatesResponseDataCurrentCompany(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provided_by_user': 'bool',
        'job_title': 'str',
        'source': 'str',
        'priority': 'float',
        'transaction_id': 'str',
        'field_id': 'str',
        'company': 'str',
        'designation': 'str',
        'standardized_date': 'str'
    }

    attribute_map = {
        'provided_by_user': 'providedByUser',
        'job_title': 'jobTitle',
        'source': 'source',
        'priority': 'priority',
        'transaction_id': 'transactionId',
        'field_id': 'fieldID',
        'company': 'company',
        'designation': 'designation',
        'standardized_date': 'standardizedDate'
    }

    def __init__(self, provided_by_user=None, job_title=None, source=None, priority=None, transaction_id=None, field_id=None, company=None, designation=None, standardized_date=None):  # noqa: E501
        """GetCandidatesResponseDataCurrentCompany - a model defined in Swagger"""  # noqa: E501
        self._provided_by_user = None
        self._job_title = None
        self._source = None
        self._priority = None
        self._transaction_id = None
        self._field_id = None
        self._company = None
        self._designation = None
        self._standardized_date = None
        self.discriminator = None
        if provided_by_user is not None:
            self.provided_by_user = provided_by_user
        if job_title is not None:
            self.job_title = job_title
        if source is not None:
            self.source = source
        if priority is not None:
            self.priority = priority
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if field_id is not None:
            self.field_id = field_id
        if company is not None:
            self.company = company
        if designation is not None:
            self.designation = designation
        if standardized_date is not None:
            self.standardized_date = standardized_date

    @property
    def provided_by_user(self):
        """Gets the provided_by_user of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501

        Indicates if this information is provided by the user.  # noqa: E501

        :return: The provided_by_user of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :rtype: bool
        """
        return self._provided_by_user

    @provided_by_user.setter
    def provided_by_user(self, provided_by_user):
        """Sets the provided_by_user of this GetCandidatesResponseDataCurrentCompany.

        Indicates if this information is provided by the user.  # noqa: E501

        :param provided_by_user: The provided_by_user of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :type: bool
        """

        self._provided_by_user = provided_by_user

    @property
    def job_title(self):
        """Gets the job_title of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501

        Job title of the current company.  # noqa: E501

        :return: The job_title of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this GetCandidatesResponseDataCurrentCompany.

        Job title of the current company.  # noqa: E501

        :param job_title: The job_title of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def source(self):
        """Gets the source of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501

        Source of the information.  # noqa: E501

        :return: The source of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this GetCandidatesResponseDataCurrentCompany.

        Source of the information.  # noqa: E501

        :param source: The source of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def priority(self):
        """Gets the priority of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501

        Priority of the current company information.  # noqa: E501

        :return: The priority of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this GetCandidatesResponseDataCurrentCompany.

        Priority of the current company information.  # noqa: E501

        :param priority: The priority of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :type: float
        """

        self._priority = priority

    @property
    def transaction_id(self):
        """Gets the transaction_id of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501

        Transaction ID related to the current company.  # noqa: E501

        :return: The transaction_id of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this GetCandidatesResponseDataCurrentCompany.

        Transaction ID related to the current company.  # noqa: E501

        :param transaction_id: The transaction_id of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def field_id(self):
        """Gets the field_id of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501

        Field identifier for the current company information.  # noqa: E501

        :return: The field_id of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this GetCandidatesResponseDataCurrentCompany.

        Field identifier for the current company information.  # noqa: E501

        :param field_id: The field_id of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    @property
    def company(self):
        """Gets the company of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501

        Name of the current company.  # noqa: E501

        :return: The company of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this GetCandidatesResponseDataCurrentCompany.

        Name of the current company.  # noqa: E501

        :param company: The company of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def designation(self):
        """Gets the designation of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501

        Designation of the candidate in the current company.  # noqa: E501

        :return: The designation of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this GetCandidatesResponseDataCurrentCompany.

        Designation of the candidate in the current company.  # noqa: E501

        :param designation: The designation of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :type: str
        """

        self._designation = designation

    @property
    def standardized_date(self):
        """Gets the standardized_date of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501

        Standardized date.  # noqa: E501

        :return: The standardized_date of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :rtype: str
        """
        return self._standardized_date

    @standardized_date.setter
    def standardized_date(self, standardized_date):
        """Sets the standardized_date of this GetCandidatesResponseDataCurrentCompany.

        Standardized date.  # noqa: E501

        :param standardized_date: The standardized_date of this GetCandidatesResponseDataCurrentCompany.  # noqa: E501
        :type: str
        """

        self._standardized_date = standardized_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCandidatesResponseDataCurrentCompany, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCandidatesResponseDataCurrentCompany):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
