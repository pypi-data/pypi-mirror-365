# coding: utf-8

"""
    hrm-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetCandidatesResponseDataOnDemandInterviewScreening(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vis_priority': 'str',
        'interview_overall_avg_rating': 'float',
        'created_date': 'str',
        'updated_date': 'str',
        'validity_end_date_time_stamp': 'str',
        'current_status': 'str',
        'recruiter_user_id': 'str',
        'questionnaire_id': 'str',
        'video_screen_interview_id': 'str',
        'video_screen_id': 'str',
        'interview_title': 'str',
        'thumbnail_url': 'str'
    }

    attribute_map = {
        'vis_priority': 'visPriority',
        'interview_overall_avg_rating': 'interviewOverallAvgRating',
        'created_date': 'createdDate',
        'updated_date': 'updatedDate',
        'validity_end_date_time_stamp': 'validityEndDateTimeStamp',
        'current_status': 'currentStatus',
        'recruiter_user_id': 'recruiterUserId',
        'questionnaire_id': 'questionnaireId',
        'video_screen_interview_id': 'videoScreenInterviewId',
        'video_screen_id': 'videoScreenId',
        'interview_title': 'interviewTitle',
        'thumbnail_url': 'thumbnailUrl'
    }

    def __init__(self, vis_priority=None, interview_overall_avg_rating=None, created_date=None, updated_date=None, validity_end_date_time_stamp=None, current_status=None, recruiter_user_id=None, questionnaire_id=None, video_screen_interview_id=None, video_screen_id=None, interview_title=None, thumbnail_url=None):  # noqa: E501
        """GetCandidatesResponseDataOnDemandInterviewScreening - a model defined in Swagger"""  # noqa: E501
        self._vis_priority = None
        self._interview_overall_avg_rating = None
        self._created_date = None
        self._updated_date = None
        self._validity_end_date_time_stamp = None
        self._current_status = None
        self._recruiter_user_id = None
        self._questionnaire_id = None
        self._video_screen_interview_id = None
        self._video_screen_id = None
        self._interview_title = None
        self._thumbnail_url = None
        self.discriminator = None
        if vis_priority is not None:
            self.vis_priority = vis_priority
        if interview_overall_avg_rating is not None:
            self.interview_overall_avg_rating = interview_overall_avg_rating
        if created_date is not None:
            self.created_date = created_date
        if updated_date is not None:
            self.updated_date = updated_date
        if validity_end_date_time_stamp is not None:
            self.validity_end_date_time_stamp = validity_end_date_time_stamp
        if current_status is not None:
            self.current_status = current_status
        if recruiter_user_id is not None:
            self.recruiter_user_id = recruiter_user_id
        if questionnaire_id is not None:
            self.questionnaire_id = questionnaire_id
        if video_screen_interview_id is not None:
            self.video_screen_interview_id = video_screen_interview_id
        if video_screen_id is not None:
            self.video_screen_id = video_screen_id
        if interview_title is not None:
            self.interview_title = interview_title
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url

    @property
    def vis_priority(self):
        """Gets the vis_priority of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501

        Vis priorities.   # noqa: E501

        :return: The vis_priority of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :rtype: str
        """
        return self._vis_priority

    @vis_priority.setter
    def vis_priority(self, vis_priority):
        """Sets the vis_priority of this GetCandidatesResponseDataOnDemandInterviewScreening.

        Vis priorities.   # noqa: E501

        :param vis_priority: The vis_priority of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :type: str
        """

        self._vis_priority = vis_priority

    @property
    def interview_overall_avg_rating(self):
        """Gets the interview_overall_avg_rating of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501

        Overall rating of the candidate in this job.  # noqa: E501

        :return: The interview_overall_avg_rating of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :rtype: float
        """
        return self._interview_overall_avg_rating

    @interview_overall_avg_rating.setter
    def interview_overall_avg_rating(self, interview_overall_avg_rating):
        """Sets the interview_overall_avg_rating of this GetCandidatesResponseDataOnDemandInterviewScreening.

        Overall rating of the candidate in this job.  # noqa: E501

        :param interview_overall_avg_rating: The interview_overall_avg_rating of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :type: float
        """

        self._interview_overall_avg_rating = interview_overall_avg_rating

    @property
    def created_date(self):
        """Gets the created_date of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501

        Creation date of the evaluation.  # noqa: E501

        :return: The created_date of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GetCandidatesResponseDataOnDemandInterviewScreening.

        Creation date of the evaluation.  # noqa: E501

        :param created_date: The created_date of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def updated_date(self):
        """Gets the updated_date of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501

        Latest updated date of the evaluation.  # noqa: E501

        :return: The updated_date of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this GetCandidatesResponseDataOnDemandInterviewScreening.

        Latest updated date of the evaluation.  # noqa: E501

        :param updated_date: The updated_date of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    @property
    def validity_end_date_time_stamp(self):
        """Gets the validity_end_date_time_stamp of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501

        Validity end date of the evaluation.  # noqa: E501

        :return: The validity_end_date_time_stamp of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :rtype: str
        """
        return self._validity_end_date_time_stamp

    @validity_end_date_time_stamp.setter
    def validity_end_date_time_stamp(self, validity_end_date_time_stamp):
        """Sets the validity_end_date_time_stamp of this GetCandidatesResponseDataOnDemandInterviewScreening.

        Validity end date of the evaluation.  # noqa: E501

        :param validity_end_date_time_stamp: The validity_end_date_time_stamp of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :type: str
        """

        self._validity_end_date_time_stamp = validity_end_date_time_stamp

    @property
    def current_status(self):
        """Gets the current_status of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501

        Current status of the candidate with respect to this job and this evaluation.  # noqa: E501

        :return: The current_status of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this GetCandidatesResponseDataOnDemandInterviewScreening.

        Current status of the candidate with respect to this job and this evaluation.  # noqa: E501

        :param current_status: The current_status of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :type: str
        """

        self._current_status = current_status

    @property
    def recruiter_user_id(self):
        """Gets the recruiter_user_id of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501

        User ID of the recruiter associated with the evaluation.  # noqa: E501

        :return: The recruiter_user_id of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_user_id

    @recruiter_user_id.setter
    def recruiter_user_id(self, recruiter_user_id):
        """Sets the recruiter_user_id of this GetCandidatesResponseDataOnDemandInterviewScreening.

        User ID of the recruiter associated with the evaluation.  # noqa: E501

        :param recruiter_user_id: The recruiter_user_id of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :type: str
        """

        self._recruiter_user_id = recruiter_user_id

    @property
    def questionnaire_id(self):
        """Gets the questionnaire_id of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501

        Identifier of the questionnaire used in the evaluation.  # noqa: E501

        :return: The questionnaire_id of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_id

    @questionnaire_id.setter
    def questionnaire_id(self, questionnaire_id):
        """Sets the questionnaire_id of this GetCandidatesResponseDataOnDemandInterviewScreening.

        Identifier of the questionnaire used in the evaluation.  # noqa: E501

        :param questionnaire_id: The questionnaire_id of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :type: str
        """

        self._questionnaire_id = questionnaire_id

    @property
    def video_screen_interview_id(self):
        """Gets the video_screen_interview_id of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501

        Video screen interview Identifier.  # noqa: E501

        :return: The video_screen_interview_id of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :rtype: str
        """
        return self._video_screen_interview_id

    @video_screen_interview_id.setter
    def video_screen_interview_id(self, video_screen_interview_id):
        """Sets the video_screen_interview_id of this GetCandidatesResponseDataOnDemandInterviewScreening.

        Video screen interview Identifier.  # noqa: E501

        :param video_screen_interview_id: The video_screen_interview_id of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :type: str
        """

        self._video_screen_interview_id = video_screen_interview_id

    @property
    def video_screen_id(self):
        """Gets the video_screen_id of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501

        Video screen identifier  # noqa: E501

        :return: The video_screen_id of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :rtype: str
        """
        return self._video_screen_id

    @video_screen_id.setter
    def video_screen_id(self, video_screen_id):
        """Sets the video_screen_id of this GetCandidatesResponseDataOnDemandInterviewScreening.

        Video screen identifier  # noqa: E501

        :param video_screen_id: The video_screen_id of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :type: str
        """

        self._video_screen_id = video_screen_id

    @property
    def interview_title(self):
        """Gets the interview_title of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501

        Title of the interview.  # noqa: E501

        :return: The interview_title of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :rtype: str
        """
        return self._interview_title

    @interview_title.setter
    def interview_title(self, interview_title):
        """Sets the interview_title of this GetCandidatesResponseDataOnDemandInterviewScreening.

        Title of the interview.  # noqa: E501

        :param interview_title: The interview_title of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :type: str
        """

        self._interview_title = interview_title

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501

        Thumbnail URL associated with the evaluation.  # noqa: E501

        :return: The thumbnail_url of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this GetCandidatesResponseDataOnDemandInterviewScreening.

        Thumbnail URL associated with the evaluation.  # noqa: E501

        :param thumbnail_url: The thumbnail_url of this GetCandidatesResponseDataOnDemandInterviewScreening.  # noqa: E501
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCandidatesResponseDataOnDemandInterviewScreening, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCandidatesResponseDataOnDemandInterviewScreening):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
