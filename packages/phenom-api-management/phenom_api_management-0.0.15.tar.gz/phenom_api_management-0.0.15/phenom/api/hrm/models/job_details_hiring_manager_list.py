# coding: utf-8

"""
    hrm-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class JobDetailsHiringManagerList(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'manager_email': 'str',
        'manager_id': 'str',
        'source': 'str',
        'manager_name': 'str'
    }

    attribute_map = {
        'manager_email': 'managerEmail',
        'manager_id': 'managerId',
        'source': 'source',
        'manager_name': 'managerName'
    }

    def __init__(self, manager_email=None, manager_id=None, source=None, manager_name=None):  # noqa: E501
        """JobDetailsHiringManagerList - a model defined in Swagger"""  # noqa: E501
        self._manager_email = None
        self._manager_id = None
        self._source = None
        self._manager_name = None
        self.discriminator = None
        if manager_email is not None:
            self.manager_email = manager_email
        if manager_id is not None:
            self.manager_id = manager_id
        if source is not None:
            self.source = source
        if manager_name is not None:
            self.manager_name = manager_name

    @property
    def manager_email(self):
        """Gets the manager_email of this JobDetailsHiringManagerList.  # noqa: E501

        Email address of the manager.  # noqa: E501

        :return: The manager_email of this JobDetailsHiringManagerList.  # noqa: E501
        :rtype: str
        """
        return self._manager_email

    @manager_email.setter
    def manager_email(self, manager_email):
        """Sets the manager_email of this JobDetailsHiringManagerList.

        Email address of the manager.  # noqa: E501

        :param manager_email: The manager_email of this JobDetailsHiringManagerList.  # noqa: E501
        :type: str
        """

        self._manager_email = manager_email

    @property
    def manager_id(self):
        """Gets the manager_id of this JobDetailsHiringManagerList.  # noqa: E501

        Unique ID of the manager.  # noqa: E501

        :return: The manager_id of this JobDetailsHiringManagerList.  # noqa: E501
        :rtype: str
        """
        return self._manager_id

    @manager_id.setter
    def manager_id(self, manager_id):
        """Sets the manager_id of this JobDetailsHiringManagerList.

        Unique ID of the manager.  # noqa: E501

        :param manager_id: The manager_id of this JobDetailsHiringManagerList.  # noqa: E501
        :type: str
        """

        self._manager_id = manager_id

    @property
    def source(self):
        """Gets the source of this JobDetailsHiringManagerList.  # noqa: E501

        Source from which the manager was added to this job.  # noqa: E501

        :return: The source of this JobDetailsHiringManagerList.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this JobDetailsHiringManagerList.

        Source from which the manager was added to this job.  # noqa: E501

        :param source: The source of this JobDetailsHiringManagerList.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def manager_name(self):
        """Gets the manager_name of this JobDetailsHiringManagerList.  # noqa: E501

        Name of the manager.  # noqa: E501

        :return: The manager_name of this JobDetailsHiringManagerList.  # noqa: E501
        :rtype: str
        """
        return self._manager_name

    @manager_name.setter
    def manager_name(self, manager_name):
        """Sets the manager_name of this JobDetailsHiringManagerList.

        Name of the manager.  # noqa: E501

        :param manager_name: The manager_name of this JobDetailsHiringManagerList.  # noqa: E501
        :type: str
        """

        self._manager_name = manager_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobDetailsHiringManagerList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobDetailsHiringManagerList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
