# coding: utf-8

"""
    hrm-api

    Hiring Manager can view all the pending tasks and evaluate the interview if any pending interviews.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetCandidatesResponseDataHiringManagerReviewStatus(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reviewed_by_email': 'str',
        'crm_manager_approval': 'str',
        'reviewed_by_name': 'str',
        'current_status': 'str',
        'manager_approval': 'str',
        'latest_manager_comment': 'str',
        'comment': 'str',
        'updated_date': 'str',
        'previous_status': 'str',
        'interview_overall_avg_rating': 'str'
    }

    attribute_map = {
        'reviewed_by_email': 'reviewedByEmail',
        'crm_manager_approval': 'crmManagerApproval',
        'reviewed_by_name': 'reviewedByName',
        'current_status': 'currentStatus',
        'manager_approval': 'managerApproval',
        'latest_manager_comment': 'latestManagerComment',
        'comment': 'comment',
        'updated_date': 'updatedDate',
        'previous_status': 'previousStatus',
        'interview_overall_avg_rating': 'interviewOverallAvgRating'
    }

    def __init__(self, reviewed_by_email=None, crm_manager_approval=None, reviewed_by_name=None, current_status=None, manager_approval=None, latest_manager_comment=None, comment=None, updated_date=None, previous_status=None, interview_overall_avg_rating=None):  # noqa: E501
        """GetCandidatesResponseDataHiringManagerReviewStatus - a model defined in Swagger"""  # noqa: E501
        self._reviewed_by_email = None
        self._crm_manager_approval = None
        self._reviewed_by_name = None
        self._current_status = None
        self._manager_approval = None
        self._latest_manager_comment = None
        self._comment = None
        self._updated_date = None
        self._previous_status = None
        self._interview_overall_avg_rating = None
        self.discriminator = None
        if reviewed_by_email is not None:
            self.reviewed_by_email = reviewed_by_email
        if crm_manager_approval is not None:
            self.crm_manager_approval = crm_manager_approval
        if reviewed_by_name is not None:
            self.reviewed_by_name = reviewed_by_name
        if current_status is not None:
            self.current_status = current_status
        if manager_approval is not None:
            self.manager_approval = manager_approval
        if latest_manager_comment is not None:
            self.latest_manager_comment = latest_manager_comment
        if comment is not None:
            self.comment = comment
        if updated_date is not None:
            self.updated_date = updated_date
        if previous_status is not None:
            self.previous_status = previous_status
        if interview_overall_avg_rating is not None:
            self.interview_overall_avg_rating = interview_overall_avg_rating

    @property
    def reviewed_by_email(self):
        """Gets the reviewed_by_email of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501

        Email of the latest user who updated the review.  # noqa: E501

        :return: The reviewed_by_email of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :rtype: str
        """
        return self._reviewed_by_email

    @reviewed_by_email.setter
    def reviewed_by_email(self, reviewed_by_email):
        """Sets the reviewed_by_email of this GetCandidatesResponseDataHiringManagerReviewStatus.

        Email of the latest user who updated the review.  # noqa: E501

        :param reviewed_by_email: The reviewed_by_email of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :type: str
        """

        self._reviewed_by_email = reviewed_by_email

    @property
    def crm_manager_approval(self):
        """Gets the crm_manager_approval of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501

        Candidate's current status in relation to the job.  # noqa: E501

        :return: The crm_manager_approval of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :rtype: str
        """
        return self._crm_manager_approval

    @crm_manager_approval.setter
    def crm_manager_approval(self, crm_manager_approval):
        """Sets the crm_manager_approval of this GetCandidatesResponseDataHiringManagerReviewStatus.

        Candidate's current status in relation to the job.  # noqa: E501

        :param crm_manager_approval: The crm_manager_approval of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :type: str
        """

        self._crm_manager_approval = crm_manager_approval

    @property
    def reviewed_by_name(self):
        """Gets the reviewed_by_name of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501

        Name of the latest user who updated the review.  # noqa: E501

        :return: The reviewed_by_name of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :rtype: str
        """
        return self._reviewed_by_name

    @reviewed_by_name.setter
    def reviewed_by_name(self, reviewed_by_name):
        """Sets the reviewed_by_name of this GetCandidatesResponseDataHiringManagerReviewStatus.

        Name of the latest user who updated the review.  # noqa: E501

        :param reviewed_by_name: The reviewed_by_name of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :type: str
        """

        self._reviewed_by_name = reviewed_by_name

    @property
    def current_status(self):
        """Gets the current_status of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501

        Current hiring status of the candidate for this job.  # noqa: E501

        :return: The current_status of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this GetCandidatesResponseDataHiringManagerReviewStatus.

        Current hiring status of the candidate for this job.  # noqa: E501

        :param current_status: The current_status of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :type: str
        """

        self._current_status = current_status

    @property
    def manager_approval(self):
        """Gets the manager_approval of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501

        Indicates if the candidate is reviewed or in review pending by the candidate.  # noqa: E501

        :return: The manager_approval of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :rtype: str
        """
        return self._manager_approval

    @manager_approval.setter
    def manager_approval(self, manager_approval):
        """Sets the manager_approval of this GetCandidatesResponseDataHiringManagerReviewStatus.

        Indicates if the candidate is reviewed or in review pending by the candidate.  # noqa: E501

        :param manager_approval: The manager_approval of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :type: str
        """

        self._manager_approval = manager_approval

    @property
    def latest_manager_comment(self):
        """Gets the latest_manager_comment of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501

        Latest comment given by the hiring manager (encrypted).  # noqa: E501

        :return: The latest_manager_comment of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :rtype: str
        """
        return self._latest_manager_comment

    @latest_manager_comment.setter
    def latest_manager_comment(self, latest_manager_comment):
        """Sets the latest_manager_comment of this GetCandidatesResponseDataHiringManagerReviewStatus.

        Latest comment given by the hiring manager (encrypted).  # noqa: E501

        :param latest_manager_comment: The latest_manager_comment of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :type: str
        """

        self._latest_manager_comment = latest_manager_comment

    @property
    def comment(self):
        """Gets the comment of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501

        Comment provided on the candidate during the initial review.  # noqa: E501

        :return: The comment of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this GetCandidatesResponseDataHiringManagerReviewStatus.

        Comment provided on the candidate during the initial review.  # noqa: E501

        :param comment: The comment of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def updated_date(self):
        """Gets the updated_date of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501

        Latest updated date of the review.  # noqa: E501

        :return: The updated_date of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this GetCandidatesResponseDataHiringManagerReviewStatus.

        Latest updated date of the review.  # noqa: E501

        :param updated_date: The updated_date of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    @property
    def previous_status(self):
        """Gets the previous_status of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501

        Previous status of the candidate in relation to the current status.  # noqa: E501

        :return: The previous_status of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :rtype: str
        """
        return self._previous_status

    @previous_status.setter
    def previous_status(self, previous_status):
        """Sets the previous_status of this GetCandidatesResponseDataHiringManagerReviewStatus.

        Previous status of the candidate in relation to the current status.  # noqa: E501

        :param previous_status: The previous_status of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :type: str
        """

        self._previous_status = previous_status

    @property
    def interview_overall_avg_rating(self):
        """Gets the interview_overall_avg_rating of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501

        Overall interview evaluations rating on the candidate with respect to the job.  # noqa: E501

        :return: The interview_overall_avg_rating of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :rtype: str
        """
        return self._interview_overall_avg_rating

    @interview_overall_avg_rating.setter
    def interview_overall_avg_rating(self, interview_overall_avg_rating):
        """Sets the interview_overall_avg_rating of this GetCandidatesResponseDataHiringManagerReviewStatus.

        Overall interview evaluations rating on the candidate with respect to the job.  # noqa: E501

        :param interview_overall_avg_rating: The interview_overall_avg_rating of this GetCandidatesResponseDataHiringManagerReviewStatus.  # noqa: E501
        :type: str
        """

        self._interview_overall_avg_rating = interview_overall_avg_rating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCandidatesResponseDataHiringManagerReviewStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCandidatesResponseDataHiringManagerReviewStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
