# coding: utf-8

"""
    jobsync-api

    Job Sync enables the user to manage jobs (view, create, update and delete jobs) in the Phenom database directly from the ATS, with the updates reflected on the career site.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: shravan.malla@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class JobsListSuccessResponse(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'offset': 'int',
        'limit': 'int',
        'total_records_count': 'int',
        'data': 'list[JobResponseDTO]'
    }

    attribute_map = {
        'status': 'status',
        'offset': 'offset',
        'limit': 'limit',
        'total_records_count': 'totalRecordsCount',
        'data': 'data'
    }

    def __init__(self, status=None, offset=None, limit=None, total_records_count=None, data=None):  # noqa: E501
        """JobsListSuccessResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._offset = None
        self._limit = None
        self._total_records_count = None
        self._data = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit
        if total_records_count is not None:
            self.total_records_count = total_records_count
        if data is not None:
            self.data = data

    @property
    def status(self):
        """Gets the status of this JobsListSuccessResponse.  # noqa: E501

        Status of the response.  # noqa: E501

        :return: The status of this JobsListSuccessResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobsListSuccessResponse.

        Status of the response.  # noqa: E501

        :param status: The status of this JobsListSuccessResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def offset(self):
        """Gets the offset of this JobsListSuccessResponse.  # noqa: E501

        Parameter defines from which point to query for jobs.  # noqa: E501

        :return: The offset of this JobsListSuccessResponse.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this JobsListSuccessResponse.

        Parameter defines from which point to query for jobs.  # noqa: E501

        :param offset: The offset of this JobsListSuccessResponse.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this JobsListSuccessResponse.  # noqa: E501

        Parameter defines how many jobs to query.  # noqa: E501

        :return: The limit of this JobsListSuccessResponse.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this JobsListSuccessResponse.

        Parameter defines how many jobs to query.  # noqa: E501

        :param limit: The limit of this JobsListSuccessResponse.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def total_records_count(self):
        """Gets the total_records_count of this JobsListSuccessResponse.  # noqa: E501

        Total number of jobs for given query.  # noqa: E501

        :return: The total_records_count of this JobsListSuccessResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_records_count

    @total_records_count.setter
    def total_records_count(self, total_records_count):
        """Sets the total_records_count of this JobsListSuccessResponse.

        Total number of jobs for given query.  # noqa: E501

        :param total_records_count: The total_records_count of this JobsListSuccessResponse.  # noqa: E501
        :type: int
        """

        self._total_records_count = total_records_count

    @property
    def data(self):
        """Gets the data of this JobsListSuccessResponse.  # noqa: E501

        List of jobs.  # noqa: E501

        :return: The data of this JobsListSuccessResponse.  # noqa: E501
        :rtype: list[JobResponseDTO]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this JobsListSuccessResponse.

        List of jobs.  # noqa: E501

        :param data: The data of this JobsListSuccessResponse.  # noqa: E501
        :type: list[JobResponseDTO]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobsListSuccessResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsListSuccessResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
