# coding: utf-8

"""
    jobsync-api

    Job Sync enables the user to manage jobs (view, create, update and delete jobs) in the Phenom database directly from the ATS, with the updates reflected on the career site.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: shravan.malla@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CustomError(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_code': 'str',
        'error_desc': 'str'
    }

    attribute_map = {
        'error_code': 'errorCode',
        'error_desc': 'errorDesc'
    }

    def __init__(self, error_code=None, error_desc=None):  # noqa: E501
        """CustomError - a model defined in Swagger"""  # noqa: E501
        self._error_code = None
        self._error_desc = None
        self.discriminator = None
        if error_code is not None:
            self.error_code = error_code
        if error_desc is not None:
            self.error_desc = error_desc

    @property
    def error_code(self):
        """Gets the error_code of this CustomError.  # noqa: E501

        Error Code.  # noqa: E501

        :return: The error_code of this CustomError.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this CustomError.

        Error Code.  # noqa: E501

        :param error_code: The error_code of this CustomError.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_desc(self):
        """Gets the error_desc of this CustomError.  # noqa: E501

        Error Description.  # noqa: E501

        :return: The error_desc of this CustomError.  # noqa: E501
        :rtype: str
        """
        return self._error_desc

    @error_desc.setter
    def error_desc(self, error_desc):
        """Sets the error_desc of this CustomError.

        Error Description.  # noqa: E501

        :param error_desc: The error_desc of this CustomError.  # noqa: E501
        :type: str
        """

        self._error_desc = error_desc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
