# coding: utf-8

"""
    jobsync-api

    Job Sync enables the user to manage jobs (view, create, update and delete jobs) in the Phenom database directly from the ATS, with the updates reflected on the career site.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: shravan.malla@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class Recruiter(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recruiter_name': 'str',
        'recruiter_email': 'str'
    }

    attribute_map = {
        'recruiter_name': 'recruiterName',
        'recruiter_email': 'recruiterEmail'
    }

    def __init__(self, recruiter_name=None, recruiter_email=None):  # noqa: E501
        """Recruiter - a model defined in Swagger"""  # noqa: E501
        self._recruiter_name = None
        self._recruiter_email = None
        self.discriminator = None
        self.recruiter_name = recruiter_name
        self.recruiter_email = recruiter_email

    @property
    def recruiter_name(self):
        """Gets the recruiter_name of this Recruiter.  # noqa: E501

        Name of the recruiter assigned to the job.  # noqa: E501

        :return: The recruiter_name of this Recruiter.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_name

    @recruiter_name.setter
    def recruiter_name(self, recruiter_name):
        """Sets the recruiter_name of this Recruiter.

        Name of the recruiter assigned to the job.  # noqa: E501

        :param recruiter_name: The recruiter_name of this Recruiter.  # noqa: E501
        :type: str
        """
        if recruiter_name is None:
            raise ValueError("Invalid value for `recruiter_name`, must not be `None`")  # noqa: E501

        self._recruiter_name = recruiter_name

    @property
    def recruiter_email(self):
        """Gets the recruiter_email of this Recruiter.  # noqa: E501

        Email of the recruiter assigned to the job.  # noqa: E501

        :return: The recruiter_email of this Recruiter.  # noqa: E501
        :rtype: str
        """
        return self._recruiter_email

    @recruiter_email.setter
    def recruiter_email(self, recruiter_email):
        """Sets the recruiter_email of this Recruiter.

        Email of the recruiter assigned to the job.  # noqa: E501

        :param recruiter_email: The recruiter_email of this Recruiter.  # noqa: E501
        :type: str
        """
        if recruiter_email is None:
            raise ValueError("Invalid value for `recruiter_email`, must not be `None`")  # noqa: E501

        self._recruiter_email = recruiter_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Recruiter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recruiter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
