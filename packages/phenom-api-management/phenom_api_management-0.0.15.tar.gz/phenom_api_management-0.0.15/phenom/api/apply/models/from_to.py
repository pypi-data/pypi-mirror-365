# coding: utf-8

"""
    apply-api

    The Apply API allows for seamless integration of the Phenom systems, enabling partners to push applications directly. This API also enables partners to integrate the Phenom Quick application process into their own job boards, while still maintaining control over the candidate experience. As a result, candidates can submit their applications without needing to visit the customer career site.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class FromTo(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'currently_work_here': 'str'
    }

    attribute_map = {
        'format': 'format',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'currently_work_here': 'currentlyWorkHere'
    }

    def __init__(self, format=None, start_date=None, end_date=None, currently_work_here=None):  # noqa: E501
        """FromTo - a model defined in Swagger"""  # noqa: E501
        self._format = None
        self._start_date = None
        self._end_date = None
        self._currently_work_here = None
        self.discriminator = None
        self.format = format
        self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if currently_work_here is not None:
            self.currently_work_here = currently_work_here

    @property
    def format(self):
        """Gets the format of this FromTo.  # noqa: E501

        The date format for the date fields. It should follow the following formats: [MM-yyyy,MM,yyyy].  # noqa: E501

        :return: The format of this FromTo.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this FromTo.

        The date format for the date fields. It should follow the following formats: [MM-yyyy,MM,yyyy].  # noqa: E501

        :param format: The format of this FromTo.  # noqa: E501
        :type: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501

        self._format = format

    @property
    def start_date(self):
        """Gets the start_date of this FromTo.  # noqa: E501

        The start date of the experience.  # noqa: E501

        :return: The start_date of this FromTo.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this FromTo.

        The start date of the experience.  # noqa: E501

        :param start_date: The start_date of this FromTo.  # noqa: E501
        :type: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this FromTo.  # noqa: E501

        The end date of the experience. If the experience is ongoing, this field should be empty.  # noqa: E501

        :return: The end_date of this FromTo.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this FromTo.

        The end date of the experience. If the experience is ongoing, this field should be empty.  # noqa: E501

        :param end_date: The end_date of this FromTo.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def currently_work_here(self):
        """Gets the currently_work_here of this FromTo.  # noqa: E501

        The current status of the experience.  # noqa: E501

        :return: The currently_work_here of this FromTo.  # noqa: E501
        :rtype: str
        """
        return self._currently_work_here

    @currently_work_here.setter
    def currently_work_here(self, currently_work_here):
        """Sets the currently_work_here of this FromTo.

        The current status of the experience.  # noqa: E501

        :param currently_work_here: The currently_work_here of this FromTo.  # noqa: E501
        :type: str
        """

        self._currently_work_here = currently_work_here

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FromTo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FromTo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
