# coding: utf-8

"""
    apply-api

    The Apply API allows for seamless integration of the Phenom systems, enabling partners to push applications directly. This API also enables partners to integrate the Phenom Quick application process into their own job boards, while still maintaining control over the candidate experience. As a result, candidates can submit their applications without needing to visit the customer career site.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class AddressData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_line1': 'str',
        'address_line2': 'str',
        'region': 'str',
        'city': 'str',
        'country': 'str'
    }

    attribute_map = {
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'region': 'region',
        'city': 'city',
        'country': 'country'
    }

    def __init__(self, address_line1=None, address_line2=None, region=None, city=None, country=None):  # noqa: E501
        """AddressData - a model defined in Swagger"""  # noqa: E501
        self._address_line1 = None
        self._address_line2 = None
        self._region = None
        self._city = None
        self._country = None
        self.discriminator = None
        self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if region is not None:
            self.region = region
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country

    @property
    def address_line1(self):
        """Gets the address_line1 of this AddressData.  # noqa: E501

        Address Line 1.  # noqa: E501

        :return: The address_line1 of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this AddressData.

        Address Line 1.  # noqa: E501

        :param address_line1: The address_line1 of this AddressData.  # noqa: E501
        :type: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")  # noqa: E501

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this AddressData.  # noqa: E501

        Address Line 2.  # noqa: E501

        :return: The address_line2 of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this AddressData.

        Address Line 2.  # noqa: E501

        :param address_line2: The address_line2 of this AddressData.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def region(self):
        """Gets the region of this AddressData.  # noqa: E501

        Region/County/State of the address.  # noqa: E501

        :return: The region of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AddressData.

        Region/County/State of the address.  # noqa: E501

        :param region: The region of this AddressData.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def city(self):
        """Gets the city of this AddressData.  # noqa: E501

        City of the address.  # noqa: E501

        :return: The city of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressData.

        City of the address.  # noqa: E501

        :param city: The city of this AddressData.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this AddressData.  # noqa: E501

        Country of the address.  # noqa: E501

        :return: The country of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressData.

        Country of the address.  # noqa: E501

        :param country: The country of this AddressData.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
