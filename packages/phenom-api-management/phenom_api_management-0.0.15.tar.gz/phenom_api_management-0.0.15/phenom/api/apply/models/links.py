# coding: utf-8

"""
    apply-api

    The Apply API allows for seamless integration of the Phenom systems, enabling partners to push applications directly. This API also enables partners to integrate the Phenom Quick application process into their own job boards, while still maintaining control over the candidate experience. As a result, candidates can submit their applications without needing to visit the customer career site.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class Links(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'str',
        'prev': 'str',
        'next': 'str'
    }

    attribute_map = {
        '_self': 'self',
        'prev': 'prev',
        'next': 'next'
    }

    def __init__(self, _self=None, prev=None, next=None):  # noqa: E501
        """Links - a model defined in Swagger"""  # noqa: E501
        self.__self = None
        self._prev = None
        self._next = None
        self.discriminator = None
        if _self is not None:
            self._self = _self
        if prev is not None:
            self.prev = prev
        if next is not None:
            self.next = next

    @property
    def _self(self):
        """Gets the _self of this Links.  # noqa: E501

        The link to the current page.  # noqa: E501

        :return: The _self of this Links.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Links.

        The link to the current page.  # noqa: E501

        :param _self: The _self of this Links.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def prev(self):
        """Gets the prev of this Links.  # noqa: E501

        The link to the previous page.  # noqa: E501

        :return: The prev of this Links.  # noqa: E501
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this Links.

        The link to the previous page.  # noqa: E501

        :param prev: The prev of this Links.  # noqa: E501
        :type: str
        """

        self._prev = prev

    @property
    def next(self):
        """Gets the next of this Links.  # noqa: E501

        The link to the next page.  # noqa: E501

        :return: The next of this Links.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this Links.

        The link to the next page.  # noqa: E501

        :param next: The next of this Links.  # noqa: E501
        :type: str
        """

        self._next = next

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Links, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Links):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
