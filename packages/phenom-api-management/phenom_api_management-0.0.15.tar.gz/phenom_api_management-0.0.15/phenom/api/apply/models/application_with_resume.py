# coding: utf-8

"""
    apply-api

    The Apply API allows for seamless integration of the Phenom systems, enabling partners to push applications directly. This API also enables partners to integrate the Phenom Quick application process into their own job boards, while still maintaining control over the candidate experience. As a result, candidates can submit their applications without needing to visit the customer career site.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class ApplicationWithResume(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'candidate_data': 'Candidate',
        'job_application_data': 'Job',
        'custom_field_data': 'object',
        'resume_data': 'Resume'
    }

    attribute_map = {
        'candidate_data': 'candidateData',
        'job_application_data': 'jobApplicationData',
        'custom_field_data': 'customFieldData',
        'resume_data': 'resumeData'
    }

    def __init__(self, candidate_data=None, job_application_data=None, custom_field_data=None, resume_data=None):  # noqa: E501
        """ApplicationWithResume - a model defined in Swagger"""  # noqa: E501
        self._candidate_data = None
        self._job_application_data = None
        self._custom_field_data = None
        self._resume_data = None
        self.discriminator = None
        if candidate_data is not None:
            self.candidate_data = candidate_data
        if job_application_data is not None:
            self.job_application_data = job_application_data
        if custom_field_data is not None:
            self.custom_field_data = custom_field_data
        if resume_data is not None:
            self.resume_data = resume_data

    @property
    def candidate_data(self):
        """Gets the candidate_data of this ApplicationWithResume.  # noqa: E501


        :return: The candidate_data of this ApplicationWithResume.  # noqa: E501
        :rtype: Candidate
        """
        return self._candidate_data

    @candidate_data.setter
    def candidate_data(self, candidate_data):
        """Sets the candidate_data of this ApplicationWithResume.


        :param candidate_data: The candidate_data of this ApplicationWithResume.  # noqa: E501
        :type: Candidate
        """

        self._candidate_data = candidate_data

    @property
    def job_application_data(self):
        """Gets the job_application_data of this ApplicationWithResume.  # noqa: E501


        :return: The job_application_data of this ApplicationWithResume.  # noqa: E501
        :rtype: Job
        """
        return self._job_application_data

    @job_application_data.setter
    def job_application_data(self, job_application_data):
        """Sets the job_application_data of this ApplicationWithResume.


        :param job_application_data: The job_application_data of this ApplicationWithResume.  # noqa: E501
        :type: Job
        """

        self._job_application_data = job_application_data

    @property
    def custom_field_data(self):
        """Gets the custom_field_data of this ApplicationWithResume.  # noqa: E501


        :return: The custom_field_data of this ApplicationWithResume.  # noqa: E501
        :rtype: object
        """
        return self._custom_field_data

    @custom_field_data.setter
    def custom_field_data(self, custom_field_data):
        """Sets the custom_field_data of this ApplicationWithResume.


        :param custom_field_data: The custom_field_data of this ApplicationWithResume.  # noqa: E501
        :type: object
        """

        self._custom_field_data = custom_field_data

    @property
    def resume_data(self):
        """Gets the resume_data of this ApplicationWithResume.  # noqa: E501


        :return: The resume_data of this ApplicationWithResume.  # noqa: E501
        :rtype: Resume
        """
        return self._resume_data

    @resume_data.setter
    def resume_data(self, resume_data):
        """Sets the resume_data of this ApplicationWithResume.


        :param resume_data: The resume_data of this ApplicationWithResume.  # noqa: E501
        :type: Resume
        """

        self._resume_data = resume_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationWithResume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationWithResume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
