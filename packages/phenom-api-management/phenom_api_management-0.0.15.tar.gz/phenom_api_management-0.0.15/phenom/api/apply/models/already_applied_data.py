# coding: utf-8

"""
    apply-api

    The Apply API allows for seamless integration of the Phenom systems, enabling partners to push applications directly. This API also enables partners to integrate the Phenom Quick application process into their own job boards, while still maintaining control over the candidate experience. As a result, candidates can submit their applications without needing to visit the customer career site.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class AlreadyAppliedData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'already_applied': 'bool',
        'candidate_id': 'str',
        'application_id': 'str'
    }

    attribute_map = {
        'already_applied': 'alreadyApplied',
        'candidate_id': 'candidateId',
        'application_id': 'applicationId'
    }

    def __init__(self, already_applied=None, candidate_id=None, application_id=None):  # noqa: E501
        """AlreadyAppliedData - a model defined in Swagger"""  # noqa: E501
        self._already_applied = None
        self._candidate_id = None
        self._application_id = None
        self.discriminator = None
        if already_applied is not None:
            self.already_applied = already_applied
        if candidate_id is not None:
            self.candidate_id = candidate_id
        if application_id is not None:
            self.application_id = application_id

    @property
    def already_applied(self):
        """Gets the already_applied of this AlreadyAppliedData.  # noqa: E501

        It equals true if the application is already applied by the candidate.  # noqa: E501

        :return: The already_applied of this AlreadyAppliedData.  # noqa: E501
        :rtype: bool
        """
        return self._already_applied

    @already_applied.setter
    def already_applied(self, already_applied):
        """Sets the already_applied of this AlreadyAppliedData.

        It equals true if the application is already applied by the candidate.  # noqa: E501

        :param already_applied: The already_applied of this AlreadyAppliedData.  # noqa: E501
        :type: bool
        """

        self._already_applied = already_applied

    @property
    def candidate_id(self):
        """Gets the candidate_id of this AlreadyAppliedData.  # noqa: E501

        It is a 24-digit hexadecimal value that represents Applicant Id.  # noqa: E501

        :return: The candidate_id of this AlreadyAppliedData.  # noqa: E501
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this AlreadyAppliedData.

        It is a 24-digit hexadecimal value that represents Applicant Id.  # noqa: E501

        :param candidate_id: The candidate_id of this AlreadyAppliedData.  # noqa: E501
        :type: str
        """

        self._candidate_id = candidate_id

    @property
    def application_id(self):
        """Gets the application_id of this AlreadyAppliedData.  # noqa: E501

        It is a 24-digit hexadecimal value that represents Application Id.  # noqa: E501

        :return: The application_id of this AlreadyAppliedData.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this AlreadyAppliedData.

        It is a 24-digit hexadecimal value that represents Application Id.  # noqa: E501

        :param application_id: The application_id of this AlreadyAppliedData.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlreadyAppliedData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlreadyAppliedData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
