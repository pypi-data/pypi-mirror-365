# coding: utf-8

"""
    apply-api

    The Apply API allows for seamless integration of the Phenom systems, enabling partners to push applications directly. This API also enables partners to integrate the Phenom Quick application process into their own job boards, while still maintaining control over the candidate experience. As a result, candidates can submit their applications without needing to visit the customer career site.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetAttachmentsResponse(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'status_code': 'str',
        'status_message': 'str',
        'data': 'list[Resume]'
    }

    attribute_map = {
        'status': 'status',
        'status_code': 'statusCode',
        'status_message': 'statusMessage',
        'data': 'data'
    }

    def __init__(self, status=None, status_code=None, status_message=None, data=None):  # noqa: E501
        """GetAttachmentsResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._status_code = None
        self._status_message = None
        self._data = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if status_code is not None:
            self.status_code = status_code
        if status_message is not None:
            self.status_message = status_message
        if data is not None:
            self.data = data

    @property
    def status(self):
        """Gets the status of this GetAttachmentsResponse.  # noqa: E501

        Status of the response.  # noqa: E501

        :return: The status of this GetAttachmentsResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetAttachmentsResponse.

        Status of the response.  # noqa: E501

        :param status: The status of this GetAttachmentsResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_code(self):
        """Gets the status_code of this GetAttachmentsResponse.  # noqa: E501

        Status code of the response. This is to uniquely identify the status.  # noqa: E501

        :return: The status_code of this GetAttachmentsResponse.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this GetAttachmentsResponse.

        Status code of the response. This is to uniquely identify the status.  # noqa: E501

        :param status_code: The status_code of this GetAttachmentsResponse.  # noqa: E501
        :type: str
        """

        self._status_code = status_code

    @property
    def status_message(self):
        """Gets the status_message of this GetAttachmentsResponse.  # noqa: E501

        Status message of the response.  # noqa: E501

        :return: The status_message of this GetAttachmentsResponse.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this GetAttachmentsResponse.

        Status message of the response.  # noqa: E501

        :param status_message: The status_message of this GetAttachmentsResponse.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def data(self):
        """Gets the data of this GetAttachmentsResponse.  # noqa: E501


        :return: The data of this GetAttachmentsResponse.  # noqa: E501
        :rtype: list[Resume]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GetAttachmentsResponse.


        :param data: The data of this GetAttachmentsResponse.  # noqa: E501
        :type: list[Resume]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAttachmentsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAttachmentsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
