# coding: utf-8

"""
    employees-api-referral

    The employee referral APIs are used to refer, track and recommend jobs to external candidates.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class Questionnaire(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'questionnaire': 'object',
        'show_personal_message': 'bool',
        'message': 'str'
    }

    attribute_map = {
        'questionnaire': 'questionnaire',
        'show_personal_message': 'showPersonalMessage',
        'message': 'message'
    }

    def __init__(self, questionnaire=None, show_personal_message=True, message='Hello Friend! I hope this jobs suits your skill set'):  # noqa: E501
        """Questionnaire - a model defined in Swagger"""  # noqa: E501
        self._questionnaire = None
        self._show_personal_message = None
        self._message = None
        self.discriminator = None
        if questionnaire is not None:
            self.questionnaire = questionnaire
        if show_personal_message is not None:
            self.show_personal_message = show_personal_message
        if message is not None:
            self.message = message

    @property
    def questionnaire(self):
        """Gets the questionnaire of this Questionnaire.  # noqa: E501

        Questionnaire to the candidate which is used while making a referral.  # noqa: E501

        :return: The questionnaire of this Questionnaire.  # noqa: E501
        :rtype: object
        """
        return self._questionnaire

    @questionnaire.setter
    def questionnaire(self, questionnaire):
        """Sets the questionnaire of this Questionnaire.

        Questionnaire to the candidate which is used while making a referral.  # noqa: E501

        :param questionnaire: The questionnaire of this Questionnaire.  # noqa: E501
        :type: object
        """

        self._questionnaire = questionnaire

    @property
    def show_personal_message(self):
        """Gets the show_personal_message of this Questionnaire.  # noqa: E501

        Flag whether to give personal message field to employee or not while making a referral.  # noqa: E501

        :return: The show_personal_message of this Questionnaire.  # noqa: E501
        :rtype: bool
        """
        return self._show_personal_message

    @show_personal_message.setter
    def show_personal_message(self, show_personal_message):
        """Sets the show_personal_message of this Questionnaire.

        Flag whether to give personal message field to employee or not while making a referral.  # noqa: E501

        :param show_personal_message: The show_personal_message of this Questionnaire.  # noqa: E501
        :type: bool
        """

        self._show_personal_message = show_personal_message

    @property
    def message(self):
        """Gets the message of this Questionnaire.  # noqa: E501

        Default message to show when personal message flag is enabled.  # noqa: E501

        :return: The message of this Questionnaire.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Questionnaire.

        Default message to show when personal message flag is enabled.  # noqa: E501

        :param message: The message of this Questionnaire.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Questionnaire, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Questionnaire):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
