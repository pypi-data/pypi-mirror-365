# coding: utf-8

"""
    employees-api-careerpath

    The Employee upskill APIs are related to the career pathing that an employee can use them for upskilling in an organisation.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@phenompeople.com
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class CurrentJobProfile(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_title': 'str',
        'job_profile_id': 'str'
    }

    attribute_map = {
        'job_title': 'jobTitle',
        'job_profile_id': 'jobProfileId'
    }

    def __init__(self, job_title='Software Developer', job_profile_id='POS30003965'):  # noqa: E501
        """CurrentJobProfile - a model defined in Swagger"""  # noqa: E501
        self._job_title = None
        self._job_profile_id = None
        self.discriminator = None
        if job_title is not None:
            self.job_title = job_title
        if job_profile_id is not None:
            self.job_profile_id = job_profile_id

    @property
    def job_title(self):
        """Gets the job_title of this CurrentJobProfile.  # noqa: E501

        Job Title of the current job position.  # noqa: E501

        :return: The job_title of this CurrentJobProfile.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this CurrentJobProfile.

        Job Title of the current job position.  # noqa: E501

        :param job_title: The job_title of this CurrentJobProfile.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def job_profile_id(self):
        """Gets the job_profile_id of this CurrentJobProfile.  # noqa: E501

        JobProfileId- unique field to identify the job position.  # noqa: E501

        :return: The job_profile_id of this CurrentJobProfile.  # noqa: E501
        :rtype: str
        """
        return self._job_profile_id

    @job_profile_id.setter
    def job_profile_id(self, job_profile_id):
        """Sets the job_profile_id of this CurrentJobProfile.

        JobProfileId- unique field to identify the job position.  # noqa: E501

        :param job_profile_id: The job_profile_id of this CurrentJobProfile.  # noqa: E501
        :type: str
        """

        self._job_profile_id = job_profile_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentJobProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentJobProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
