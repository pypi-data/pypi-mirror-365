Metadata-Version: 2.4
Name: iso-financial-mcp
Version: 0.1.0
Summary: Open-source MCP server providing comprehensive financial market data endpoints for short squeeze detection and analysis
Project-URL: Homepage, https://github.com/Niels-8/isofinancial-mcp
Project-URL: Repository, https://github.com/Niels-8/isofinancial-mcp
Project-URL: Documentation, https://github.com/Niels-8/isofinancial-mcp#readme
Project-URL: Issues, https://github.com/Niels-8/isofinancial-mcp/issues
Project-URL: Bug Tracker, https://github.com/Niels-8/isofinancial-mcp/issues
Author-email: Niels-8 <niels-8@github.com>
License: MIT License
        
        Copyright (c) 2024 Trading Agents Team
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE. 
License-File: LICENSE
Keywords: finance,market-data,mcp,model-context-protocol,options,short-squeeze,stocks,trading
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Classifier: Topic :: Office/Business :: Financial
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.10
Requires-Dist: aiofiles>=24.1.0
Requires-Dist: aiohttp>=3.9.0
Requires-Dist: asyncio-throttle>=1.0.2
Requires-Dist: beautifulsoup4>=4.12.0
Requires-Dist: build>=1.2.2.post1
Requires-Dist: cachetools>=5.3.0
Requires-Dist: fastmcp>=0.2.0
Requires-Dist: httpx>=0.27.0
Requires-Dist: lxml>=5.2.0
Requires-Dist: numpy>=1.26.0
Requires-Dist: pandas>=2.2.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: uvicorn>=0.30.0
Requires-Dist: yfinance>=0.2.28
Provides-Extra: dev
Requires-Dist: black>=24.0.0; extra == 'dev'
Requires-Dist: mypy>=1.10.0; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.23.0; extra == 'dev'
Requires-Dist: pytest-mock>=3.12.0; extra == 'dev'
Requires-Dist: pytest>=8.0.0; extra == 'dev'
Requires-Dist: ruff>=0.4.0; extra == 'dev'
Description-Content-Type: text/markdown

# IsoFinancial-MCP

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)
[![PyPI version](https://badge.fury.io/py/iso-financial-mcp.svg)](https://badge.fury.io/py/iso-financial-mcp)

An open-source MCP (Model Context Protocol) server providing comprehensive financial market data endpoints for short squeeze detection and analysis. Uses free financial data APIs including Yahoo Finance and other public sources.

## üöÄ Features

- **Real-time Market Data**: Live stock prices, volume, and market statistics
- **Financial Statements**: Balance sheets, income statements, and cash flow data
- **Options Analysis**: Option chains, expiration dates, and options data
- **Corporate Actions**: Dividends, stock splits, and earnings calendars
- **Company Information**: Company profiles, major holders, and institutional investors
- **Analyst Recommendations**: Professional analyst ratings and recommendations

## üìã Requirements

- Python 3.10+
- uv (recommended package manager)
- Internet connection for API access

## üîß Installation

### Using uv (Recommended)

```bash
# Clone the repository
git clone https://github.com/Niels-8/isofinancial-mcp.git
cd isofinancial-mcp

# Create virtual environment and install dependencies
uv venv
uv pip install -e .
```

### Using pip

```bash
pip install iso-financial-mcp
```

## üöÄ Quick Start

### As MCP Server (for AI agents)

```python
from fastmcp.agent import StdioServerParams, mcp_server_tools

# Configure the MCP server
finance_server_params = StdioServerParams(
    command="python",
    args=["-m", "server"],
    cwd="./IsoFinancial-MCP"
)

# Get available tools
finance_tools = await mcp_server_tools(finance_server_params)
```

### As HTTP Server

```bash
# Start HTTP server
python main.py --mode http --port 8000

# Or with uvicorn directly
uvicorn server:app --host 0.0.0.0 --port 8000
```

## üìä Available Endpoints

### Market Data
- `get_info(ticker)` - Company profile and basic information
- `get_historical_prices(ticker, period, interval)` - Historical price data

### Financial Data
- `get_balance_sheet(ticker, freq)` - Balance sheet data
- `get_financials(ticker, freq)` - Income statement data
- `get_cash_flow(ticker, freq)` - Cash flow statement

### Options Analysis
- `get_options_expirations(ticker)` - Available expiration dates
- `get_option_chain(ticker, expiration_date)` - Complete option chain

### Corporate Actions
- `get_actions(ticker)` - Dividends and stock splits
- `get_earnings_dates(ticker)` - Earnings calendar

### Company Information
- `get_major_holders(ticker)` - Major shareholders
- `get_institutional_holders(ticker)` - Institutional holdings
- `get_recommendations(ticker)` - Analyst recommendations
- `get_isin(ticker)` - ISIN code

### Short Interest Analysis (COMING SOON)
- `get_short_interest(ticker)` - Current short interest data
- `get_short_interest_history(ticker, lookback)` - Historical short interest
- `get_days_to_cover(ticker)` - Days to cover calculation
- `get_cost_to_borrow(ticker)` - Current borrowing costs

### Volume Analysis (COMING SOON)
- `get_short_volume_daily(ticker, date)` - Daily short volume (FINRA)
- `get_short_volume_intraday(ticker, date)` - Intraday short volume
- `get_short_exempt_volume_daily(ticker, date)` - Short exempt volume

### Dark Pool & FTD Data (COMING SOON)
- `get_dark_pool_volume_daily(ticker, date)` - Daily dark pool volume
- `get_fail_to_deliver(ticker, from_date, to_date)` - Fail-to-deliver data

### Advanced Options Analysis (COMING SOON)
- `get_option_oi_by_strike(ticker, expiry)` - Open interest by strike
- `get_gamma_exposure(ticker, date)` - Gamma exposure calculation
- `get_max_pain(ticker, expiry)` - Max pain calculation

### Screening Tools (COMING SOON)
- `get_high_short_interest_tickers(threshold, limit)` - High SI tickers
- `get_latest_price(ticker)` - Current stock price
- `get_free_float(ticker)` - Free float data
- `get_company_profile(ticker)` - Detailed company profile
- `get_earnings_calendar(ticker, window)` - Earnings calendar
- `ping()` - Connectivity test

## üìñ Usage Examples

### Basic Market Data

```python
# Get company information
info = await get_info("AAPL")

# Get historical prices
prices = await get_historical_prices("TSLA", period="6mo", interval="1d")

# Get current price
price = await get_latest_price("GME")
```

### Financial Analysis

```python
# Get balance sheet
balance = await get_balance_sheet("AAPL", freq="yearly")

# Get income statement
income = await get_financials("TSLA", freq="quarterly")

# Get cash flow
cashflow = await get_cash_flow("MSFT", freq="yearly")
```

### Options Analysis

```python
# Get option expirations
expirations = await get_options_expirations("SPY")

# Get option chain
chain = await get_option_chain("SPY", "2024-01-19")
```

### Corporate Actions

```python
# Get dividends and splits
actions = await get_actions("AAPL")

# Get earnings dates
earnings = await get_earnings_dates("TSLA")
```

### Company Information

```python
# Get major shareholders
holders = await get_major_holders("GME")

# Get institutional investors
institutional = await get_institutional_holders("AAPL")

# Get analyst recommendations
recommendations = await get_recommendations("TSLA")
```

## üîß Configuration

The server uses free APIs by default (Yahoo Finance). No API keys are required for basic functionality.

```bash
# Copy environment template (optional)
cp .env.example .env

# No API keys needed for current features
# All data is sourced from Yahoo Finance (free)
```

## üß™ Testing

```bash
# Run tests
pytest

# Run with coverage
pytest --cov=datasources
```

## üì¶ Development

```bash
# Install development dependencies
uv pip install -e ".[dev]"

# Format code
black .
ruff check .

# Type checking
mypy .
```

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- [Yahoo Finance](https://finance.yahoo.com/) for market data
- [FastMCP](https://github.com/fastmcp/fastmcp) for the MCP framework

## üìû Support

- **Issues**: [GitHub Issues](https://github.com/Niels-8/isofinancial-mcp/issues)
- **Discussions**: [GitHub Discussions](https://github.com/Niels-8/isofinancial-mcp/discussions)

---

**Disclaimer**: This software is for educational and research purposes only. Always verify data independently before making investment decisions. 