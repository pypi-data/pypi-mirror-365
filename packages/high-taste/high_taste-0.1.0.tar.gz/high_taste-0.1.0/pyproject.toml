[project]
name = "high-taste"
version = "0.1.0"
description = "MCP server that enforces coding style decisions based on taste and convention"
authors = [{name = "Alex Dong", email = "alex@example.com"}]
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["mcp", "linter", "code-style", "taste", "python"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.13"
dependencies = [
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "mcp>=1.0.0",
    "loguru>=0.7.0",
    "importlib_resources>=5.0.0; python_version<'3.9'",
]

[project.scripts]
high-taste = "high_taste.cli:main"

[project.urls]
Homepage = "https://github.com/alexdong/high-taste"
Repository = "https://github.com/alexdong/high-taste"
Issues = "https://github.com/alexdong/high-taste/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["high_taste*"]
exclude = ["llms*"]

[tool.setuptools.package-data]
high_taste = ["data/rules/*.md"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.11.6",
    "ty>=0.0.1a14",
]


[tool.ruff]
exclude = [".venv", "**/*_test.py"]

[tool.ruff.lint]
extend-select = [
  "A",      # flake8-builtins - prevent shadowing of built-in names
  "ANN",    # flake8-annotations - enforce type annotations
  "ARG",    # flake8-unused-arguments - detect unused function arguments
  "B",      # flake8-bugbear - find likely bugs and design problems
  "COM",    # flake8-commas - enforce trailing commas
  "C4",     # flake8-comprehensions - improve list/dict/set comprehensions
  "C90",    # mccabe - cyclomatic complexity checks
  "DTZ",    # flake8-datetimez - prevent naive datetime usage
  "E",      # pycodestyle errors - PEP 8 error violations
  "EM",     # flake8-errmsg - enforce error message best practices
  "F",      # pyflakes - detect various Python errors
  "FBT",    # flake8-boolean-trap - prevent boolean trap anti-pattern
  "FURB",   # refurb - modernize Python code
  "I",      # isort - import sorting and organization
  "ISC",    # flake8-implicit-str-concat - prevent implicit string concatenation
  "LOG",    # flake8-logging - logging best practices
  "G",      # flake8-logging-format - logging format string issues
  "N",      # pep8-naming - enforce PEP 8 naming conventions
  "NPY",    # numpy-specific rules - NumPy best practices
  "PD",     # pandas-vet - pandas best practices
  "PERF",   # perflint - performance anti-patterns
  "PIE",    # flake8-pie - miscellaneous improvements
  "PL",     # pylint - comprehensive Python linting
  "PT",     # flake8-pytest-style - pytest best practices
  "PTH",    # flake8-use-pathlib - prefer pathlib over os.path
  "Q",      # flake8-quotes - enforce quote style consistency
  "RET",    # flake8-return - improve return statement usage
  "RUF",    # ruff-specific rules - ruff's own additional checks
  "SIM",    # flake8-simplify - simplify code constructs
  "SLF",    # flake8-self - private member access checks
  "SLOT",   # flake8-slots - enforce __slots__ usage
  "TID",    # flake8-tidy-imports - tidy import organization
  "TC",     # flake8-type-checking - optimize type checking imports
  "UP",     # pyupgrade - upgrade syntax for newer Python versions
  "W",      # pycodestyle warnings - PEP 8 warning violations
]
extend-ignore = [
    "COM812",   # flake8-commas - allow trailing commas in function calls
    "EM102",    # flake8-errmsg - allow exception message in f-string
    "E501",     # pycodestyle - ignore line too long (let formatter handle it)
    "PLR0913",  # pylint - allow more than 5 function arguments
    "PLW0603",  # pylint - allow global variable updates for MCP server state
    "C901",     # mccabe - allow complex analysis functions in parsers
    "TRY003",   # tryceratops - allow long exception messages
    "W293",     # pycodestyle - allow blank line with whitespace
]

[tool.ruff.lint.mccabe]
max-complexity = 5

[tool.pytest.ini_options]
testpaths = ["src", "tests"]
python_files = ["*_test.py"]
addopts = "-vv --tb=short"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["src"]
omit = ["*_test.py", "*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]