# .github/workflows/pytest.yml

name: Python Pytest CI

# Trigger this workflow on push or pull request to main branch
on:
  push

jobs:
    build:
        # Specify the runner environment
        runs-on: ${{ matrix.os }}

        # Test matrix for multiple operating systems
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest]
                python-version: ["3.11", "3.12", "3.13"]                
        env:
          GPMC_DIR: src/QuPRS/utils
        steps:
          # Step 1: Checkout repository code
          - name: Check out repository code
            uses: actions/checkout@v4
            with:
              submodules: true
              fetch-depth: 0

          # Step 2: Set up Python environment
          - name: Set up Python ${{ matrix.python-version }}
            uses: actions/setup-python@v5
            with:
              python-version: ${{ matrix.python-version }}
              cache: 'pip'
          # Step 3: Install system dependencies
          - name: Install system dependencies (Linux)
            if: matrix.os == 'ubuntu-latest'
            run: sudo apt-get update && sudo apt-get install -y cmake libgmp-dev libmpfr-dev
          - name: Install system dependencies (macOS)
            if: matrix.os == 'macos-latest'
            run: brew install cmake gmp mpfr zlib
          - name: Setup MSYS2 and install dependencies (Windows)
            if: matrix.os == 'windows-latest'
            uses: msys2/setup-msys2@v2
            with:
              msystem: MINGW64
              update: true
              path-type: inherit
              install: >-
                mingw-w64-x86_64-toolchain
                mingw-w64-x86_64-cmake
                mingw-w64-x86_64-gmp
                mingw-w64-x86_64-mpfr
                mingw-w64-x86_64-zlib

          # Step 4: Install Python dependencies and build binary (Now split by platform)
          - name: Install and build (Unix)
            if: matrix.os != 'windows-latest'
            run: python -m pip install --upgrade pip && pip install .[dev]
          - name: Install and build (Windows)
            if: matrix.os == 'windows-latest'
            shell: msys2 {0}
            run: python -m pip install --upgrade pip && pip install .[dev]

          # Step 7: Run pytest (Now split by platform)
          - name: Run tests (Unix)
            if: matrix.os != 'windows-latest'
            run: pytest -n auto -v --junitxml=pytest-results.xml --html=pytest-results.html --self-contained-html --cov=QuPRS --cov-report=xml --cov-report=html
          - name: Run tests (Windows)
            if: matrix.os == 'windows-latest'
            shell: msys2 {0}
            run: pytest -n auto -v --junitxml=pytest-results.xml --html=pytest-results.html --self-contained-html --cov=QuPRS --cov-report=xml --cov-report=html

          # Step 5: Upload pytest HTML results as artifact
          - name: Upload pytest HTML results
            if: always()
            uses: actions/upload-artifact@v4
            with:
              name: pytest-results-html-${{ matrix.os }}-${{ matrix.python-version }}
              path: pytest-results.html

          # Step 6: Upload pytest XML results as artifact
          - name: Upload pytest XML results
            if: always()
            uses: actions/upload-artifact@v4
            with:
              name: pytest-results-xml-${{ matrix.os }}-${{ matrix.python-version }}
              path: pytest-results.xml
          # Step 7: Upload coverage XML report  
          - name: Upload coverage XML report
            if: always()
            uses: actions/upload-artifact@v4
            with:
              name: coverage-report-xml-${{ matrix.os }}-${{ matrix.python-version }}
              path: coverage.xml

          # Step 8: Upload coverage HTML report  
          - name: Upload coverage HTML report
            if: always()
            uses: actions/upload-artifact@v4
            with:
              name: coverage-report-html-${{ matrix.os }}-${{ matrix.python-version }}
              path: htmlcov
            