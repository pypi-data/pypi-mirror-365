#!/usr/bin/env python3
"""
Simple repository statistics generator using GitHub API directly.
This version works without gh CLI and can run in GitHub Actions.
"""

import json
import requests
import os
from datetime import datetime
from pathlib import Path
from collections import defaultdict

class SimpleGitHubStats:
    def __init__(self, repo_owner="{{ github_username }}", repo_name="{{ repo_name }}"):
        self.repo_owner = repo_owner
        self.repo_name = repo_name
        self.repo = f"{repo_owner}/{repo_name}"
        self.token = os.environ.get('GITHUB_TOKEN', '')
        self.headers = {
            'Accept': 'application/vnd.github.v3+json',
            'Authorization': f'token {self.token}' if self.token else ''
        }
        self.base_url = 'https://api.github.com'
        self.stats_dir = Path("docs")
        self.stats_dir.mkdir(parents=True, exist_ok=True)
        
    def get_api_data(self, endpoint):
        """Fetch data from GitHub API."""
        url = f"{self.base_url}/{endpoint}"
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"Error fetching {endpoint}: {e}")
            return {}
    
    def generate_simple_stats(self):
        """Generate a simple statistics page."""
        print("Fetching repository information...")
        
        # Basic repository info
        repo_data = self.get_api_data(f"repos/{self.repo}")
        
        # Contributors
        contributors = self.get_api_data(f"repos/{self.repo}/contributors")
        
        # Languages
        languages = self.get_api_data(f"repos/{self.repo}/languages")
        
        # Recent commits
        commits = self.get_api_data(f"repos/{self.repo}/commits?per_page=10")
        
        # Releases
        releases = self.get_api_data(f"repos/{self.repo}/releases")
        
        # Generate markdown
        # Get update timestamp
        update_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
        
        content = f"""# Repository Statistics Dashboard

> **Last Updated:** {update_time}

## üìä Overview

**Repository:** [{self.repo}](https://github.com/{self.repo})

| Metric | Value |
|--------|-------|
| ‚≠ê Stars | {repo_data.get('stargazers_count', 'N/A'):,} |
| üç¥ Forks | {repo_data.get('forks_count', 'N/A'):,} |
| üëÅÔ∏è Watchers | {repo_data.get('watchers_count', 'N/A'):,} |
| üìù Open Issues | {repo_data.get('open_issues_count', 'N/A'):,} |
| üì¶ Repository Size | {repo_data.get('size', 0) / 1024:.2f} MB |
| üè∑Ô∏è Default Branch | `{repo_data.get('default_branch', 'main')}` |
| üìÖ Created | {repo_data.get('created_at', 'N/A')[:10]} |
| üîÑ Last Updated | {repo_data.get('updated_at', 'N/A')[:10]} |
| üîë License | {repo_data.get('license', {}).get('spdx_id', 'None')} |

## üë• Top Contributors

| Contributor | Contributions | Profile |
|-------------|---------------|---------|
"""
        
        # Add top 10 contributors
        for contributor in contributors[:10]:
            if isinstance(contributor, dict):
                content += f"| [{contributor.get('login', 'N/A')}]({contributor.get('html_url', '#')}) | {contributor.get('contributions', 0):,} | [Profile]({contributor.get('html_url', '#')}) |\n"
        
        # Programming languages
        if languages:
            content += "\n## üíª Languages\n\n"
            content += "| Language | Bytes | Percentage |\n"
            content += "|----------|-------|------------|\n"
            
            total_bytes = sum(languages.values())
            for lang, bytes_count in sorted(languages.items(), key=lambda x: x[1], reverse=True):
                percentage = (bytes_count / total_bytes * 100) if total_bytes > 0 else 0
                content += f"| {lang} | {bytes_count:,} | {percentage:.1f}% |\n"
        
        # Recent commits
        if commits and isinstance(commits, list):
            content += "\n## üìù Recent Commits\n\n"
            content += "| Author | Message | Date |\n"
            content += "|--------|---------|------|\n"
            
            for commit in commits[:10]:
                if isinstance(commit, dict):
                    commit_data = commit.get('commit', {})
                    author = commit_data.get('author', {}).get('name', 'Unknown')
                    message = commit_data.get('message', '').split('\n')[0][:60] + '...' if len(commit_data.get('message', '')) > 60 else commit_data.get('message', '').split('\n')[0]
                    date = commit_data.get('author', {}).get('date', 'N/A')[:10]
                    content += f"| {author} | {message} | {date} |\n"
        
        # Releases
        if releases and isinstance(releases, list):
            content += "\n## üì¶ Releases\n\n"
            content += f"**Total Releases:** {len(releases)}\n\n"
            
            if releases:
                content += "### Recent Releases\n\n"
                content += "| Release | Tag | Published | Downloads |\n"
                content += "|---------|-----|-----------|-----------||\n"
                
                for release in releases[:5]:
                    if isinstance(release, dict):
                        name = release.get('name') or release.get('tag_name', 'N/A')
                        tag = release.get('tag_name', 'N/A')
                        published = release.get('published_at', 'N/A')[:10]
                        
                        # Calculate total downloads
                        downloads = 0
                        for asset in release.get('assets', []):
                            downloads += asset.get('download_count', 0)
                        
                        content += f"| {name} | `{tag}` | {published} | {downloads:,} |\n"
        
        # Repository topics
        topics = repo_data.get('topics', [])
        if topics:
            content += f"\n## üè∑Ô∏è Topics\n\n"
            content += " ‚Ä¢ ".join([f"`{topic}`" for topic in topics])
            content += "\n"
        
        # Footer
        content += """
---

*This page is automatically generated using the GitHub API.*  
*Some statistics require appropriate permissions to access.*  
*Note: Traffic statistics (views, clones, popular files, referrers) require admin access and are only available through GitHub Actions with proper permissions.*
"""
        
        # Write the file
        stats_file = self.stats_dir / "repository_statistics.md"
        stats_file.write_text(content)
        print(f"‚úÖ Statistics page generated at: {stats_file}")

def main():
    """Main function."""
    stats = SimpleGitHubStats()
    stats.generate_simple_stats()

if __name__ == "__main__":
    main()
