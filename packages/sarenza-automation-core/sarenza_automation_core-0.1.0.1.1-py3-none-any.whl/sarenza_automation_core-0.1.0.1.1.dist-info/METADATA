Metadata-Version: 2.3
Name: sarenza-automation-core
Version: 0.1.0.1.1
Summary: Non regression test automation framework core
Author: QA Sarenza
Author-email: qa_srz@sarenza.com
Requires-Python: >=3.11,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: allure-behave (==2.13.2)
Requires-Dist: allure-python-commons (==2.13.2)
Requires-Dist: appium-python-client (>=4.5.1,<5.0.0)
Requires-Dist: faker (>=37.4.2,<38.0.0)
Requires-Dist: loguru (>=0.7.3,<0.8.0)
Requires-Dist: pydantic (==2.10.3)
Requires-Dist: python-dotenv (>=1.1.1,<2.0.0)
Requires-Dist: selenium (==4.26.0)
Requires-Dist: webdriver-manager (==4.0.2)
Description-Content-Type: text/markdown

# sarenza-automation-core

**sarenza-automation-core** est une bibliothÃ¨que Python rÃ©utilisable pour l'automatisation de tests web et mobile (Selenium / Appium), conÃ§ue pour les Ã©quipes QA de Sarenza.  
Elle fournit une base commune pour standardiser les drivers, les helpers, les interactions DOM, le support multi-navigateurs, et bien plus.

---

## FonctionnalitÃ©s principales

### Core modules

- `DriverFactory` : instancie les drivers locaux ou distants (Chrome, Firefox, Appium).
- `Logger` : wrapper autour de [Loguru](https://github.com/Delgan/loguru) pour des logs lisibles et uniformes.
- `ConfigReaderHelper` : lecture de fichiers de configuration INI ou JSON.
- `TranslationHelper` : lecture de clÃ©s de traduction depuis un fichier `languages.json`.
- `Exceptions` : gestion des exceptions spÃ©cifiques (`ClickInterceptedException`, etc).

---

### Helpers intÃ©grÃ©s

#### `BasePage` â€” la boÃ®te Ã  outils des pages web

```python
from sarenza_automation_core.base.base_page import BasePage
```
| MÃ©thode                                      | Description                                               |
| -------------------------------------------- | --------------------------------------------------------- |
| `get_element_by((By.ID, "my-id"))`           | Retourne un Ã©lÃ©ment avec un `By` donnÃ©                    |
| `get_element("_xpath", "//button")`          | Retourne un Ã©lÃ©ment via une chaÃ®ne `_xpath`, `_css`, etc. |
| `click_element((By.ID, "submit"))`           | Click + Retry avec gestion des erreurs                    |
| `type_into_element_by(by, text)`             | Envoie du texte dans un champ                             |
| `select_from_dropdown_by_value/visible_text` | SÃ©lectionne une valeur dans un `select`                   |
| `click_using_javascript(css_selector)`       | Force le clic JS si nÃ©cessaire                            |
| `scroll_down_until_element_by(locator)`      | Scrolling fluide jusqu'Ã  un Ã©lÃ©ment                       |
| `verify_page_title(expected_title)`          | VÃ©rifie que le titre contient un texte                    |
| `is_element_not_displayed(locator)`          | VÃ©rifie si un Ã©lÃ©ment est cachÃ© ou absent                 |
| `extract_pcid_from_url()`                    | Extrait un PCID de lâ€™URL                                  |
| `go_to_page("/mon/url")`                     | Va vers une URL relative Ã  `SUT_URL`                      |
| `sleep(5)`                                   | Pause utile pour les tests manuels                        |


### Module `BrowserConsoleInteractor`

| MÃ©thode                    | Description                                                                                      |
|---------------------------|--------------------------------------------------------------------------------------------------|
| `get_variable(variable_name: str)` | ExÃ©cute un script JavaScript pour rÃ©cupÃ©rer une variable globale du navigateur. Renvoie la valeur ou `None`. |
| `list_global_variables()` | Retourne la liste des variables globales disponibles dans `window` du navigateur.               |
| `execute_custom_script(script: str)` | ExÃ©cute un script JavaScript personnalisÃ© dans le contexte du navigateur. Renvoie le rÃ©sultat ou `None`.  |
### Exemple d'utilisation de `BrowserConsoleInteractor`

```python
from selenium import webdriver
from sarenza_automation_core.helpers.browser_console_interactor import BrowserConsoleInteractor

# Initialiser le navigateur (ex. Chrome)
driver = webdriver.Chrome()

# AccÃ©der Ã  une page contenant des variables globales
driver.get("https://sarenza.com")

# Initialiser l'interacteur console
console = BrowserConsoleInteractor(driver)

# 1. RÃ©cupÃ©rer la valeur d'une variable globale
tc_events = console.get_variable("tc_full_events")
print("tc_full_events:", tc_events)

# 2. Lister toutes les variables globales
globals_list = console.list_global_variables()
print("Variables globales:", globals_list)

# 3. ExÃ©cuter un script personnalisÃ©
result = console.execute_custom_script("return document.title;")
print("Titre de la page :", result)

# Fermer le navigateur
driver.quit()
```

 **Note** : Le navigateur doit Ãªtre lancÃ© avec les bons profils et autorisations pour permettre lâ€™accÃ¨s aux objets JavaScript globaux.
### Module : `LocalStorageHelper`

| MÃ©thode                  | Description                                                                                         |
|--------------------------|-----------------------------------------------------------------------------------------------------|
| `set_item(key: str, value)`   | Stocke une paire clÃ©/valeur dans le `localStorage` du navigateur (la valeur est sÃ©rialisÃ©e en JSON).     |
| `get_item(key: str)`          | RÃ©cupÃ¨re une valeur du `localStorage` par sa clÃ©. DÃ©sÃ©rialise automatiquement en objet Python.            |
| `remove_item(key: str)`       | Supprime une entrÃ©e du `localStorage` correspondant Ã  la clÃ© donnÃ©e.                                     |

### Exemple d'utilisation de `LocalStorageHelper`
```python
from selenium import webdriver
from sarenza_automation_core.helpers.local_storage_helper import LocalStorageHelper

# Initialiser le navigateur
driver = webdriver.Chrome()

# AccÃ©der Ã  une page qui utilise le localStorage
driver.get("https://sarenza.com")

# Initialiser le helper
storage = LocalStorageHelper(driver)

# 1. Stocker une valeur
storage.set_item("test_key", {"user": "Alice", "role": "admin"})

# 2. Lire la valeur
value = storage.get_item("test_key")
print("Valeur rÃ©cupÃ©rÃ©e :", value)

# 3. Supprimer la clÃ©
storage.remove_item("test_key")

# Fermer le navigateur
driver.quit()
```
###  Module : `translation_helper.py`


| Fonction                   | Description                                                                                       |
|----------------------------|---------------------------------------------------------------------------------------------------|
| `_load_translations()`     | Charge les traductions depuis un fichier JSON (dÃ©fini par `FILE_PATH` ou par dÃ©faut `languages/languages.json`). |
| `get_translation(lang, key)` | Retourne la traduction dâ€™un mot-clÃ© (`key`) dans une langue donnÃ©e (`lang`). Renvoie un message d'erreur si introuvable. |
| `get_translated_value(key)` | Retourne la traduction dâ€™un mot-clÃ© (`key`) dans la langue par dÃ©faut dÃ©finie via la variable dâ€™environnement `LANGUAGE`. |

### Exemple d'utilisation
```python 
import os
from sarenza_automation_core.helpers.translation_helper import get_translation, get_translated_value

# Facultatif : dÃ©finir manuellement la langue et le chemin du fichier
os.environ["LANGUAGE"] = "fr"
os.environ["FILE_PATH"] = "languages/languages.json"

# Traduction directe
print(get_translation("fr", "Mr"))  # Ex: "Monsieur"

# Traduction avec langue par dÃ©faut
print(get_translated_value("Mr"))   # Ex: "Monsieur"
```
### Module : `user_information_helper.py`

| Fonction                   | Description                                                                                       |
|----------------------------|---------------------------------------------------------------------------------------------------|
| `__init__(target_folder)`  | Initialise lâ€™instance avec un dossier cible (par dÃ©faut `user_info`) et crÃ©e un verrou pour les accÃ¨s concurrents. |
| `save_user_info(user_info)`| Sauvegarde un dictionnaire dâ€™informations utilisateur dans un fichier JSON (par date + thread). Supprime les fichiers anciens. |
| `fetch_user_info()`        | RÃ©cupÃ¨re les informations utilisateur sauvegardÃ©es pour la date et le thread en cours. Renvoie `None` si aucun fichier trouvÃ©. |
###  Exemple d'utilisation
```python 
from sarenza_automation_core.helpers.user_information_helper import UserInformationHelper

user_info_helper = UserInformationHelper()

# Sauvegarde d'information
user_info_helper.save_user_info({"username": "john_doe", "session_id": "abc123"})

# RÃ©cupÃ©ration
info = user_info_helper.fetch_user_info()
print(info)

```

## Installation

### PrÃ©-requis

-   Python 3.11 
    
-   Poetry installÃ©
    

### Ã‰tapes dâ€™installation

# 1. Cloner le repo si ce nâ€™est pas dÃ©jÃ  fait 
```bash 
git clone https://github.com/sarenza/sarenza-automation-core.git cd sarenza-automation-core  
```

# 2. CrÃ©er lâ€™environnement virtuel avec Poetry 
```bash
poetry install
```

# 3. Activer lâ€™environnement 
```bash
poetry shell
```

##  Lancer les tests



# Tous les tests unitaires
```bash 
 poetry run pytest -v
 ```

* * *

## Variables dâ€™environnement supportÃ©es

Variable

Description

Par dÃ©faut 5 secondes

`TIMEOUT`

Timeout global pour les Ã©lÃ©ments


`SUT_URL`

URL de base de lâ€™application testÃ©e


`FILE_PATH`

Fichier JSON de traduction

`languages.json`



## ðŸ“„ Licence

MIT â€“ Â© Sarenza QA Team


