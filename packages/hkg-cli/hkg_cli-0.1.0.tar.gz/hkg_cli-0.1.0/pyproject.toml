# NOTE: this repository uses the tool somesy to help you easily maintain
# and synchronize all the high-level project metadata across multiple files.
# To see which other metadata can be added, check out the somesy documentation
# https://materials-data-science-and-informatics.github.io/somesy/main/
[tool.somesy.project]
name = "hkg-cli"
version = "0.1.0"
description = "CLI app to set up micro services of Helmholtz Knowledge Graph locally"
license = "MIT"

keywords = ["typer", "hkg", "cli"]
repository = "https://codebase.helmholtz.cloud/hmc/hmc-public/unhide/development/hkg-cli.git"
homepage = "https://hmc.pages.hzdr.de/hmc-public/unhide/development/hkg-cli"
documentation = "https://hmc.pages.hzdr.de/hmc-public/unhide/development/hkg-cli"

[[tool.somesy.project.people]]
given-names = "Mustafa"
family-names = "Soylu"
email = "m.soylu@fz-juelich.de"
orcid = "https://orcid.org/0000-0003-2637-0432"
author = true
maintainer = true

# You also can add more authors, maintainers or contributors here:
# [[tool.somesy.project.people]]
# given-names = "Another"
# family-names = "Contributor"
# email = "contributor@email.com"
# orcid = "https://orcid.org/0123-4567-8910-1112"
# ...

[tool.somesy.config]
verbose = true

[tool.poetry]
# ---- DO NOT EDIT - core project metadata managed by somesy  ----
# to update, edit values in [tool.somesy.project] section
# and run somesy: poetry run somesy
name = "hkg-cli"
version = "0.1.0"
description = "CLI app to set up micro services of Helmholtz Knowledge Graph locally"
license = "MIT"

authors = [
    "Mustafa Soylu <m.soylu@fz-juelich.de>",
]
maintainers = [
    "Mustafa Soylu <m.soylu@fz-juelich.de>",
]

keywords = [
    "typer",
    "hkg",
    "cli",
]
repository = "https://codebase.helmholtz.cloud/hmc/hmc-public/unhide/development/hkg-cli.git"
homepage = "https://hmc.pages.hzdr.de/hmc-public/unhide/development/hkg-cli"
documentation = "https://hmc.pages.hzdr.de/hmc-public/unhide/development/hkg-cli"
# ----------------------------------------------------------------

# Python- and Poetry-specific metadata
# ------------------------------------
readme = "README.md"
classifiers = [
    # TODO: update the classifier strings
    # (see https://pypi.org/classifiers/)
    "Operating System :: POSIX :: Linux",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
]

# the Python packages that will be included in a built distribution:
packages = [{ include = "hkg_cli", from = "src" }]

# always include basic info for humans and core metadata in the distribution,
# include files related to test and documentation only in sdist:
include = [
    "*.md",
    "LICENSE",
    "LICENSES",
    "REUSE.toml",
    "CITATION.cff",
    "codemeta.json",
    { path = "mkdocs.yml", format = "sdist" },
    { path = "docs", format = "sdist" },
    { path = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = "^3.9"
typer = "^0.14.0"
importlib = "^1.0.4"
pydantic = "^2.10.3"
wrapt = "^1.17.0"
tomlkit = "^0.13.2"
importlib-metadata = "^8.5.0"
pyyaml = "^6.0.2"

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.27.0"
pre-commit = "^3.5.0"
pytest = "^8.3.2"
pytest-cov = "^5.0.0"
hypothesis = "^6.108.5"
licensecheck = "^2024.2"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.0"
mkdocstrings = { extras = ["python"], version = "^0.25.2" }
mkdocs-material = "^9.5.30"
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.1"
mkdocs-section-index = "^0.3.9"
mkdocs-macros-plugin = "^1.0.5"
markdown-include = "^0.8.1"
pymdown-extensions = "^10.9"
markdown-exec = { extras = ["ansi"], version = "^1.9.3" }
mkdocs-coverage = "^1.1.0"
mike = "^2.1.2"
anybadge = "^1.14.0"
interrogate = "^1.7.0"
black = "^24.4.2"

[tool.poetry.scripts]
# put your script entrypoints here
# some-script = 'module.submodule:some_object'
hkg-cli = 'hkg_cli.main:app'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# NOTE: You can run the following with "poetry poe TASK"
[tool.poe.tasks]
init-dev = "pre-commit install" # run once after clone to enable various tools
lint = "pre-commit run"         # pass --all-files to check everything
test = "pytest"                 # pass --cov to also collect coverage info
docs = "mkdocs build"           # run this to generate local documentation
licensecheck = "licensecheck"   # run this when you add new deps

# Tool Configurations
# -------------------
[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
addopts = "--cov-report=term-missing:skip-covered"
filterwarnings = [
    # Example:
    # "ignore::DeprecationWarning:importlib_metadata.*"
]

[tool.coverage.run]
source = ["hkg_cli"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
ignore = ["W503"]
max-line-length = 88

[tool.pydocstyle]
convention = "google"

[tool.bandit]
exclude_dirs = ["tests", "scripts"]

[tool.licensecheck]
using = "poetry"
