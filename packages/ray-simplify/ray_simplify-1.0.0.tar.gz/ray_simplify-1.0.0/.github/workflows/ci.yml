# GitHub Actions CI/CD Pipeline for Ray Simplify
# Comprehensive pipeline for building, testing, and publishing the ray_simplify Python package

name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  PACKAGE_NAME: ray_simplify

jobs:
  # Code Quality and Testing Job
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-
          ${{ runner.os }}-uv-

    - name: Install uv package manager
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv

    - name: Create virtual environment and install dependencies
      run: |
        uv venv .venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Check code formatting with Black
      run: |
        source .venv/bin/activate
        black --check --diff src tests

    - name: Lint code with Ruff
      run: |
        source .venv/bin/activate
        ruff check src tests

    - name: Run tests with coverage
      run: |
        source .venv/bin/activate
        pytest --cov=${{ env.PACKAGE_NAME }} --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=test-results-${{ matrix.python-version }}.xml

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results-${{ matrix.python-version }}.xml

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Security Scanning Job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv safety bandit

    - name: Install dependencies
      run: |
        uv venv .venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Run safety check for vulnerabilities
      run: |
        source .venv/bin/activate
        safety check --ignore 65189 --json --output safety-report.json || true

    - name: Run bandit security linter
      run: |
        bandit -r src -f json -o bandit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  # Build Package Job
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine

    - name: Install dependencies for version check
      run: |
        python -m pip install uv
        uv venv .venv
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Build package
      run: |
        python -m build --sdist --wheel

    - name: Verify package
      run: |
        twine check dist/*

    - name: List package contents
      run: |
        ls -la dist/
        echo "Package files created:"
        for file in dist/*; do
          echo "  - $(basename $file)"
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  # Publish to PyPI Job (only on tags)
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: release

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  # Create GitHub Release Job (only on tags)
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
