{"version":3,"file":"lib_index_js.6dc06a1c2b0193c50e6e.js","mappings":"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","sources":["webpack://jupyterlab-nbqueue/./src/common/types.ts","webpack://jupyterlab-nbqueue/./src/components/NBQueueComponent.tsx","webpack://jupyterlab-nbqueue/./src/handler.ts","webpack://jupyterlab-nbqueue/./src/index.ts","webpack://jupyterlab-nbqueue/./src/utils.ts","webpack://jupyterlab-nbqueue/./src/widgets/NBQueueWidget.tsx"],"sourcesContent":["/**\n * Job submission interfaces for API validation\n */\n\n/** File metadata for notebook submissions */\nexport interface NotebookFile {\n  /** Name of the notebook file */\n  name: string;\n  /** Full path to the notebook file */\n  path: string;\n}\n\n/** Job submission request payload */\nexport interface JobSubmissionRequest {\n  /** Notebook file metadata */\n  notebook_file: NotebookFile;\n  /** Container image to use for the job */\n  image: string;\n  /** Conda environment specification */\n  conda_env: string;\n  /** Output path for job results */\n  output_path: string;\n  /** CPU allocation for the job */\n  cpu: string | number;\n  /** Memory/RAM allocation for the job */\n  ram: string | number;\n}\n\n/** Job submission response from the API */\nexport interface JobSubmissionResponse {\n  /** Whether the job submission was successful */\n  success: boolean;\n  /** Unique identifier for the created job */\n  job_id: string;\n  /** Output from kubectl command */\n  kubectl_output: string;\n  /** Error message if submission failed */\n  error_message?: string;\n  /** Additional message field for compatibility */\n  message?: string;\n  /** Index signature for compatibility with ReadonlyJSONObject */\n  [key: string]: any;\n}\n\n/**\n * Workflow management interfaces\n */\n\n/** Individual workflow item */\nexport interface WorkflowItem {\n  /** Name/key of the workflow */\n  name: string;\n  /** Current status of the workflow */\n  status: string;\n}\n\n/** Response from workflows list endpoint */\nexport type WorkflowsResponse = WorkflowItem[];\n\n/** Generic API error response */\nexport interface ApiErrorResponse {\n  /** Error message describing what went wrong */\n  error: string;\n}\n\n/**\n * Existing monitoring/logging interfaces\n */\n\nexport interface Summary {\n  id: string;\n  podName: string;\n  usage: number;\n  cost: number;\n  project: string;\n  lastUpdate: string;\n  year: number;\n  month: number;\n  user_efs_cost: number;\n  user_efs_gb: number;\n  project_efs_cost: number;\n  project_efs_gb: number;\n}\n\nexport interface Detail {\n  id: string;\n  podName: string;\n  creationTimestamp: string;\n  deletionTimestamp: string;\n  cpuLimit: string;\n  memoryLimit: string;\n  gpuLimit: string;\n  volumes: string;\n  namespace: string;\n  notebook_duration: string;\n  session_cost: number;\n  instance_id: string;\n  instance_type: string;\n  region: string;\n  pricing_type: string;\n  cost: string;\n  instanceRAM: number;\n  instanceCPU: number;\n  instanceGPU: number;\n  instanceId: string;\n}\n\nexport interface Logs {\n  summary: Summary[];\n  details: Detail[];\n}\n\n/**\n * Validation utilities for API requests\n */\n\n/** Validates that a NotebookFile has the required fields */\nexport function validateNotebookFile(file: any): file is NotebookFile {\n  return file && \n         typeof file.name === 'string' && \n         typeof file.path === 'string' &&\n         file.name.endsWith('.ipynb');\n}\n\n/** Validates that a JobSubmissionRequest has all required fields */\nexport function validateJobSubmissionRequest(request: any): request is JobSubmissionRequest {\n  if (!request) return false;\n  \n  const requiredFields = ['notebook_file', 'output_path', 'cpu', 'ram'];\n  for (const field of requiredFields) {\n    if (!request[field]) return false;\n  }\n  \n  // Validate notebook_file structure\n  if (!validateNotebookFile(request.notebook_file)) return false;\n  \n  // Validate CPU is a valid number\n  const cpu = parseFloat(String(request.cpu));\n  if (isNaN(cpu) || cpu <= 0) return false;\n  \n  // Validate RAM format (number optionally followed by unit)\n  const ramPattern = /^\\d+(\\.\\d+)?(Gi|G|Mi|M)?$/;\n  if (!ramPattern.test(String(request.ram).trim())) return false;\n  \n  return true;\n}\n\n/** Type guard to check if response is a successful job submission */\nexport function isJobSubmissionSuccess(response: any): response is JobSubmissionResponse {\n  return response && \n         typeof response.success === 'boolean' &&\n         typeof response.job_id === 'string' &&\n         typeof response.kubectl_output === 'string';\n}\n","/**\n * NBQueue Job Submission Component\n * \n * React component that provides a dialog interface for submitting notebooks\n * to the execution queue with configurable parameters (CPU, RAM, container image, etc.).\n */\n\nimport {\n     Button,\n     Dialog,\n     DialogActions,\n     DialogContent,\n     DialogContentText,\n     DialogProps,\n     DialogTitle,\n     TextField,\n     Collapse\n} from '@mui/material';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport React, { useEffect, useState } from 'react';\nimport { requestAPI } from '../handler';\nimport { \n     JobSubmissionRequest, \n     JobSubmissionResponse, \n     NotebookFile,\n     validateJobSubmissionRequest,\n     isJobSubmissionSuccess\n} from '../common/types';\nimport { Notification } from '@jupyterlab/apputils';\n\n/** Props interface for the NBQueueComponent */\ninterface NBQueueComponentProps {\n     /** File object containing notebook information */\n     file: NotebookFile;\n     /** Output folder path for job results */\n     renderingFolder: string;\n}\n\n/**\n * Main component for job submission dialog\n * \n * Renders a Material-UI dialog with form fields for configuring\n * notebook execution parameters and submitting to the queue.\n */\nconst NBQueueComponent: React.FC<NBQueueComponentProps> = (\n     props\n): JSX.Element => {\n     // Dialog state management\n     const [open, setOpen] = React.useState(true);\n     const [file] = React.useState(props.file);\n     const [renderingFolder] = React.useState(props.renderingFolder);\n     const [fullWidth] = React.useState(true);\n     const [maxWidth] = React.useState<DialogProps['maxWidth']>('md');\n     const [selectedOutputPath, setSelectedOutputPath] = useState<string | null>(null);\n\n     // State for accessible directories\n     const [accessibleDirectories, setAccessibleDirectories] = useState<string[]>([]);\n     const [showAdvanced, setShowAdvanced] = useState(false);\n\n     // New state variables for container image and conda environment\n     const [containerImage, setContainerImage] = useState('');\n     const [condaEnv, setCondaEnv] = useState('');\n     const [condaEnvError, setCondaEnvError] = useState(false);\n\n     useEffect(() => {\n          // Fetch accessible directories from the handler\n          const fetchDirectories = async () => {\n               try {\n                    const response = await requestAPI<{ accessible_directories: { path: string }[] }>('accessible-directories', {\n                         method: 'POST',\n                         body: JSON.stringify({ root_path: renderingFolder }),\n                    });\n                    // Map response to extract paths as strings\n                    const directoryPaths = response.accessible_directories.map(dir => dir.path);\n                    setAccessibleDirectories(directoryPaths);\n               } catch (error) {\n                    console.error('Error fetching accessible directories:', error);\n               }\n          };\n\n          fetchDirectories();\n     }, [renderingFolder]);\n\n     /** Closes the dialog */\n     const handleClose = () => {\n          setOpen(false);\n     };\n\n     return (\n          <React.Fragment>\n               <Dialog\n                    open={open}\n                    onClose={handleClose}\n                    fullWidth={fullWidth}\n                    maxWidth={maxWidth}\n                    PaperProps={{\n                         component: 'form',\n                         onSubmit: async (event: React.FormEvent<HTMLFormElement>) => {\n                              event.preventDefault();\n                              const formData = new FormData(event.currentTarget);\n                              const formJson = Object.fromEntries((formData as any).entries());\n\n                              // Validación: si container-image tiene valor, conda-environment es obligatorio\n                              if (containerImage && !condaEnv) {\n                                   setCondaEnvError(true);\n                                   return;\n                              }\n\n                              // Build payload for API request\n                              const payload: JobSubmissionRequest = {\n                                   notebook_file: file,\n                                   image: containerImage || formJson['container-image'],\n                                   conda_env: condaEnv || formJson['conda-environment'],\n                                   output_path: selectedOutputPath ?? '',\n                                   cpu: formJson['cpu-number'],\n                                   ram: formJson['ram-number']\n                               };\n\n                              // Validate payload before sending\n                              if (!validateJobSubmissionRequest(payload)) {\n                                   console.error('Invalid job submission payload:', payload);\n                                   return;\n                              }\n\n                              // Submit job with progress notifications\n                              Notification.promise(\n                                   requestAPI<JobSubmissionResponse>('submit', {\n                                        method: 'POST',\n                                        body: JSON.stringify(payload),\n                                   }),\n                                   {\n                                        pending: {\n                                             message: 'Sending info to gRPC server',\n                                        },\n                                        success: {\n                                             message: (result: unknown) => {\n                                                  const response = result as JobSubmissionResponse;\n                                                  if (isJobSubmissionSuccess(response)) {\n                                                       return response.success ? \n                                                            (response.kubectl_output || 'Job submitted successfully') :\n                                                            (response.error_message || 'Job submission failed');\n                                                  }\n                                                  return 'Job submitted successfully';\n                                             },\n                                             options: { autoClose: 3000 },\n                                        },\n                                        error: {\n                                             message: (reason: any) =>\n                                                  `Error sending info. Reason: ${typeof reason === 'object' && reason.error ? reason.error : reason}`,\n                                             options: { autoClose: 3000 },\n                                        },\n                                   }\n                              );                              \n\n                              handleClose();\n                         }\n                    }}\n               >\n                    <DialogTitle>Parameters</DialogTitle>\n                    <DialogContent>\n                         <DialogContentText>\n                              Please fill the form with your parameters.\n                         </DialogContentText>\n                         \n                         {/* CPU Configuration */}\n                         <TextField\n                              required\n                              id=\"cpu-number\"\n                              name=\"cpu-number\"\n                              defaultValue=\"1\"\n                              label=\"CPU\"\n                              type=\"number\"\n                              variant=\"standard\"\n                              margin=\"dense\"\n                              fullWidth\n                              autoFocus\n                              inputProps={{ min: 1, max: 32, step: 1 }}\n                         />\n                         \n                         {/* RAM Configuration */}\n                         <TextField\n                              required\n                              id=\"ram-number\"\n                              name=\"ram-number\"\n                              defaultValue=\"1\"\n                              label=\"RAM\"\n                              type=\"number\"\n                              variant=\"standard\"\n                              margin=\"dense\"\n                              fullWidth\n                              inputProps={{ min: 1, max: 32, step: 1 }}\n                         />\n                         \n                         {/* Accessible Directories */}\n                         <Autocomplete\n                              id=\"output-path\"\n                              options={accessibleDirectories}\n                              value={selectedOutputPath}\n                              onChange={(_, newValue) => setSelectedOutputPath(newValue)}\n                              renderInput={(params) => (\n                                   <TextField\n                                        {...params}\n                                        label=\"Output Path\"\n                                        variant=\"standard\"\n                                        margin=\"dense\"\n                                        fullWidth\n                                        required\n                                   />\n                              )}\n                         />\n\n                         {/* Advanced Options Toggle */}\n                         <Button\n                              onClick={() => setShowAdvanced((prev) => !prev)}\n                              color=\"primary\"\n                              style={{ marginTop: 16, marginBottom: 8 }}\n                         >\n                              {showAdvanced ? 'Hide Advanced Options' : 'Show Advanced Options'}\n                         </Button>\n                         \n                         {/* Advanced Options Fields */}\n                         <Collapse in={showAdvanced}>\n                              <div>\n                                   {/* Container Image */}\n                                   <TextField\n                                        id=\"container-image\"\n                                        name=\"container-image\"\n                                        label=\"Container Image\"\n                                        variant=\"standard\"\n                                        margin=\"dense\"\n                                        fullWidth\n                                        style={{ marginTop: 8 }}\n                                        value={containerImage}\n                                        onChange={e => {\n                                             setContainerImage(e.target.value);\n                                             setCondaEnvError(false);\n                                        }}\n                                   />\n                                   \n                                   {/* Conda Environment */}\n                                   <TextField\n                                        id=\"conda-environment\"\n                                        name=\"conda-environment\"\n                                        label=\"Conda environment\"\n                                        variant=\"standard\"\n                                        margin=\"dense\"\n                                        fullWidth\n                                        style={{ marginTop: 8 }}\n                                        value={condaEnv}\n                                        onChange={e => {\n                                             setCondaEnv(e.target.value);\n                                             setCondaEnvError(false);\n                                        }}\n                                        error={condaEnvError}\n                                        helperText={condaEnvError ? 'Conda environment is required if container image is set.' : ''}\n                                   />\n                              </div>\n                         </Collapse>\n                    </DialogContent>\n                    <DialogActions>\n                         <Button onClick={handleClose}>Cancel</Button>\n                         <Button type=\"submit\">Send</Button>\n                    </DialogActions>\n               </Dialog>\n          </React.Fragment>\n     );\n};\n\nexport default NBQueueComponent;\n","/**\n * API Handler for NBQueue Extension\n * \n * Provides utility functions for making HTTP requests to the NBQueue backend API.\n * Handles authentication, error processing, and response formatting.\n */\n\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n\n/**\n * Makes authenticated requests to the NBQueue API extension\n * \n * @param endPoint - API REST endpoint for the extension (default: '')\n * @param init - Initial values for the request (headers, method, body, etc.)\n * @returns Promise resolving to the parsed response body\n * @throws {ServerConnection.NetworkError} When network request fails\n * @throws {ServerConnection.ResponseError} When server returns error response\n */\nexport async function requestAPI<T>(\n  endPoint = '',\n  init: RequestInit = {}\n): Promise<T> {\n  // Build request URL using Jupyter server settings\n  const settings = ServerConnection.makeSettings();\n  const requestUrl = URLExt.join(\n    settings.baseUrl,\n    'jupyterlab-nbqueue', // API namespace for this extension\n    endPoint\n  );\n\n  let response: Response;\n  try {\n    // Make authenticated request through Jupyter server connection\n    response = await ServerConnection.makeRequest(requestUrl, init, settings);\n  } catch (error) {\n    throw new ServerConnection.NetworkError(error as any);\n  }\n\n  // Parse response body as text first, then try JSON parsing\n  let data: any = await response.text();\n\n  if (data.length > 0) {\n    try {\n      data = JSON.parse(data);\n    } catch (error) {\n      console.log('Not a JSON response body.', response);\n    }\n  }\n\n  // Check for HTTP error status codes\n  if (!response.ok) {\n    throw new ServerConnection.ResponseError(response, data.message || data);\n  }\n\n  return data;\n}\n","/**\n * JupyterLab NBQueue Extension\n * \n * This extension provides functionality to queue notebook executions\n * in Kubernetes environments through a sidebar interface and context menu.\n */\n\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { runIcon } from '@jupyterlab/ui-components';\nimport { NBQueueWidget } from \"./widgets/NBQueueWidget\";\nimport { Widget } from '@lumino/widgets';\nimport { IDisposable, DisposableDelegate } from '@lumino/disposable';\nimport { ICommandPalette, Notification, ToolbarButton } from '@jupyterlab/apputils';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport {\n  NotebookPanel,\n  INotebookModel,\n} from '@jupyterlab/notebook';\n// import { NBQueueSideBarWidget } from './widgets/NBQueueSideBarWidget';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { loadSetting } from './utils';\nimport _ from 'lodash'\n\n/** Plugin identifier for settings and registration */\nconst PLUGIN_ID = 'jupyterlab-nbqueue:plugin'\n\n/**\n * Activates the NBQueue extension\n * @param app - The JupyterLab application instance\n * @param factory - File browser factory for file operations\n * @param palette - Command palette for registering commands\n * @param mainMenu - Main menu for adding menu items\n * @param settings - Settings registry for configuration\n */\nconst activate = async (app: JupyterFrontEnd, factory: IFileBrowserFactory, palette: ICommandPalette, mainMenu: IMainMenu, settings: ISettingRegistry) => {\n  console.log('JupyterLab extension jupyterlab-nbqueue is activated!');\n  \n  // Initialize user service and log user information for debugging\n  const user = app.serviceManager.user;\n  user.ready.then(() => {\n     console.debug(\"Identity:\", user.identity);\n     console.debug(\"Permissions:\", user.permissions);\n  });  \n  \n  // Load rendering folder configuration from settings\n  let renderingFolder = ''\n  await Promise.all([settings.load(PLUGIN_ID)])\n    .then(([setting]) => {\n      renderingFolder = loadSetting(setting);\n    }).catch((reason) => {\n      console.error(\n        `Something went wrong when getting the current rendering folder.\\n${reason}`\n      );\n    });\n\n  // Validate rendering folder configuration\n  if (_.isEqual(renderingFolder, \"\")) {\n    Notification.warning('Rendering Folder is not configured')\n    return;\n  }\n\n  // Create and configure the sidebar widget for job management\n  // const sideBarContent = new NBQueueSideBarWidget(renderingFolder);\n  // const sideBarWidget = new MainAreaWidget<NBQueueSideBarWidget>({\n  //   content: sideBarContent\n  // });\n  // // Configure sidebar widget appearance and add to shell\n  // sideBarWidget.toolbar.hide();\n  // sideBarWidget.title.icon = runIcon;\n  // sideBarWidget.title.caption = 'NBQueue job list';\n  // app.shell.add(sideBarWidget, 'right', { rank: 501 });\n\n  // Register command for sending notebooks to queue via context menu\n  app.commands.addCommand('jupyterlab-nbqueue:open', {\n    label: 'NBQueue: Send to queue',\n    caption: \"Send selected notebook to execution queue\",\n    icon: runIcon,\n    execute: async () => {\n      // Reload settings to ensure we have the latest configuration\n      await Promise.all([settings.load(PLUGIN_ID)])\n        .then(([setting]) => {\n          renderingFolder = loadSetting(setting);\n        }).catch((reason) => {\n          console.error(\n            `Something went wrong when getting the current rendering folder.\\n${reason}`\n          );\n        });\n\n      // Validate configuration before proceeding\n      if (_.isEqual(renderingFolder, \"\")) {\n        Notification.warning('Rendering Folder is not configured')\n        return;\n      }\n\n      // Get the currently selected file from file browser\n      const file = factory.tracker.currentWidget\n        ?.selectedItems()\n        .next().value;\n\n      if (file) {\n        // Create and display the job submission widget\n        const widget = new NBQueueWidget(file, renderingFolder);\n        widget.title.label = \"NBQueue metadata\";\n        Widget.attach(widget, document.body);\n      }\n    }\n  });\n\n  // Add context menu item for notebook files\n  app.contextMenu.addItem({\n    command: 'jupyterlab-nbqueue:open',\n    selector: \".jp-DirListing-item[data-file-type=\\\"notebook\\\"]\",\n    rank: 0\n  });\n\n  // Add toolbar button extension to notebook panels\n  app.docRegistry.addWidgetExtension('Notebook', new ButtonExtension(settings));\n}\n\n/**\n * Main plugin configuration object\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab-nbqueue:plugin',\n  description: 'A JupyterLab extension for queuing notebook executions in Kubernetes.',\n  autoStart: true,\n  requires: [IFileBrowserFactory, ICommandPalette, IMainMenu, ISettingRegistry],\n  activate\n};\n\n/**\n * Document registry extension that adds a toolbar button to notebook panels\n * for quick access to NBQueue functionality\n */\nexport class ButtonExtension\n  implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel> {\n\n  settings: ISettingRegistry\n  \n  constructor(settings: ISettingRegistry) {\n    this.settings = settings;\n  }\n\n  /**\n   * Creates a new toolbar button for the notebook panel\n   * @param panel - The notebook panel to extend\n   * @param context - The document context\n   * @returns Disposable for cleanup\n   */\n  createNew(\n    panel: NotebookPanel,\n    context: DocumentRegistry.IContext<INotebookModel>\n  ): IDisposable {\n    \n    /**\n     * Handler for sending the current notebook to queue\n     */\n    const sendToQueue = async () => {\n      let renderingFolder = ''\n      \n      // Load current settings\n      await Promise.all([this.settings.load(PLUGIN_ID)])\n        .then(([setting]) => {\n          renderingFolder = loadSetting(setting);\n          console.log(renderingFolder);\n        }).catch((reason) => {\n          console.error(\n            `Something went wrong when getting the current rendering folder.\\n${reason}`\n          );\n        });\n\n      // Validate configuration\n      if (_.isEqual(renderingFolder, \"\")) {\n        Notification.warning('Rendering Folder is not configured')\n        return;\n      }\n\n      // Create and show the job submission widget\n      const widget = new NBQueueWidget(context.contentsModel, renderingFolder);\n      widget.title.label = \"NBQueue metadata\";\n      Widget.attach(widget, document.body);\n    };\n    \n    // Create the toolbar button\n    const button = new ToolbarButton({\n      className: 'nbqueue-submit',\n      label: 'NBQueue: Send to queue',\n      onClick: sendToQueue,\n      tooltip: 'Send notebook to execution queue',\n    });\n\n    // Insert button into toolbar\n    panel.toolbar.insertItem(10, 'clearOutputs', button);\n    \n    // Return disposable for cleanup\n    return new DisposableDelegate(() => {\n      button.dispose();\n    });\n  }\n}\n\nexport default plugin;\n","/**\n * Utility Functions for NBQueue Extension\n * \n * Provides helper functions for loading and processing extension settings.\n */\n\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport _ from 'lodash';\n\n/**\n * Loads the rendering folder setting from the extension configuration\n * \n * @param setting - The loaded settings instance for this extension\n * @returns The configured rendering folder path as a string\n */\nexport function loadSetting(setting: ISettingRegistry.ISettings): string {\n  // Extract rendering folder from composite settings\n  let renderingFolder = setting.get('renderingFolder').composite as string;\n  console.log(`Rendering Folder Loading Settings = ${renderingFolder}`);\n  return renderingFolder;\n}\n","/**\n * NBQueue Widget\n * \n * A ReactWidget wrapper for the NBQueueComponent that provides\n * a styled container for the job submission dialog.\n */\n\nimport { ReactWidget } from \"@jupyterlab/apputils\";\nimport React from 'react';\nimport NBQueueComponent from \"../components/NBQueueComponent\";\n\n/**\n * Widget class for NBQueue job submission\n * \n * Wraps the NBQueueComponent in a JupyterLab ReactWidget\n * with appropriate styling and dimensions.\n */\nexport class NBQueueWidget extends ReactWidget {\n  file\n  renderingFolder\n  \n  /**\n   * Constructor for NBQueueWidget\n   * @param file - File object containing notebook information\n   * @param renderingFolder - Output folder path for job results\n   */\n  constructor(file: any, renderingFolder: string) {\n    super()\n    this.file = file\n    this.renderingFolder = renderingFolder\n  }\n\n  /**\n   * Renders the widget content\n   * @returns JSX element with styled container and NBQueueComponent\n   */\n  render(): JSX.Element {\n    return (\n      <div\n        style={{\n          width: '400px',\n          minWidth: '400px',\n          display: 'flex',\n          flexDirection: 'column',\n          background: 'var(--jp-layout-color1)'\n        }}\n      >\n        <NBQueueComponent file={this.file} renderingFolder={this.renderingFolder} />\n      </div>\n    )\n  }\n}"],"names":[],"sourceRoot":""}