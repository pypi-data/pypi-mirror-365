# This file was generated by liblab | https://liblab.com/

from typing import Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.environment.environment import Environment
from ..models.utils.sentinel import SENTINEL
from ..models.utils.cast_models import cast_models
from ..models import (
    ListChaptersOrdering,
    ListCommitteesOrdering,
    ListEventsOrdering,
    ListProjectsOrdering,
    PagedChapterSchema,
    PagedCommitteeSchema,
    PagedEventSchema,
    PagedProjectSchema,
    ProjectLevel,
)


class OwaspService(BaseService):

    @cast_models
    def list_chapters(
        self,
        country: Union[str, None] = SENTINEL,
        region: Union[str, None] = SENTINEL,
        ordering: Union[ListChaptersOrdering, None] = SENTINEL,
        page: int = SENTINEL,
        page_size: Union[int, None] = SENTINEL,
    ) -> PagedChapterSchema:
        """Retrieve a paginated list of OWASP chapters.

        :param country: Country of the chapter, defaults to None
        :type country: str, optional
        :param region: Region of the chapter, defaults to None
        :type region: str, optional
        :param ordering: Ordering field, defaults to None
        :type ordering: ListChaptersOrdering, optional
        :param page: page, defaults to None
        :type page: int, optional
        :param page_size: page_size, defaults to None
        :type page_size: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: PagedChapterSchema
        """

        Validator(str).is_optional().is_nullable().validate(country)
        Validator(str).is_optional().is_nullable().validate(region)
        Validator(ListChaptersOrdering).is_optional().is_nullable().validate(ordering)
        Validator(int).is_optional().min(1).validate(page)
        Validator(int).is_optional().is_nullable().min(1).validate(page_size)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/owasp/chapters/",
                [self.get_api_key()],
            )
            .add_query("country", country, nullable=True)
            .add_query("region", region, nullable=True)
            .add_query("ordering", ordering, nullable=True)
            .add_query("page", page)
            .add_query("page_size", page_size, nullable=True)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return PagedChapterSchema._unmap(response)

    @cast_models
    def list_committees(
        self,
        ordering: Union[ListCommitteesOrdering, None] = SENTINEL,
        page: int = SENTINEL,
        page_size: Union[int, None] = SENTINEL,
    ) -> PagedCommitteeSchema:
        """Retrieve a paginated list of OWASP committees.

        :param ordering: Ordering field, defaults to None
        :type ordering: ListCommitteesOrdering, optional
        :param page: page, defaults to None
        :type page: int, optional
        :param page_size: page_size, defaults to None
        :type page_size: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: PagedCommitteeSchema
        """

        Validator(ListCommitteesOrdering).is_optional().is_nullable().validate(ordering)
        Validator(int).is_optional().min(1).validate(page)
        Validator(int).is_optional().is_nullable().min(1).validate(page_size)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/owasp/committees/",
                [self.get_api_key()],
            )
            .add_query("ordering", ordering, nullable=True)
            .add_query("page", page)
            .add_query("page_size", page_size, nullable=True)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return PagedCommitteeSchema._unmap(response)

    @cast_models
    def list_events(
        self,
        ordering: Union[ListEventsOrdering, None] = SENTINEL,
        page: int = SENTINEL,
        page_size: Union[int, None] = SENTINEL,
    ) -> PagedEventSchema:
        """Retrieve a paginated list of OWASP events.

        :param ordering: Ordering field, defaults to None
        :type ordering: ListEventsOrdering, optional
        :param page: page, defaults to None
        :type page: int, optional
        :param page_size: page_size, defaults to None
        :type page_size: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: PagedEventSchema
        """

        Validator(ListEventsOrdering).is_optional().is_nullable().validate(ordering)
        Validator(int).is_optional().min(1).validate(page)
        Validator(int).is_optional().is_nullable().min(1).validate(page_size)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/owasp/events/",
                [self.get_api_key()],
            )
            .add_query("ordering", ordering, nullable=True)
            .add_query("page", page)
            .add_query("page_size", page_size, nullable=True)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return PagedEventSchema._unmap(response)

    @cast_models
    def list_projects(
        self,
        level: Union[ProjectLevel, None] = SENTINEL,
        ordering: Union[ListProjectsOrdering, None] = SENTINEL,
        page: int = SENTINEL,
        page_size: Union[int, None] = SENTINEL,
    ) -> PagedProjectSchema:
        """Retrieve a paginated list of OWASP project.

        :param level: Level of the project, defaults to None
        :type level: ProjectLevel, optional
        :param ordering: Ordering field, defaults to None
        :type ordering: ListProjectsOrdering, optional
        :param page: page, defaults to None
        :type page: int, optional
        :param page_size: page_size, defaults to None
        :type page_size: int, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: PagedProjectSchema
        """

        Validator(ProjectLevel).is_optional().is_nullable().validate(level)
        Validator(ListProjectsOrdering).is_optional().is_nullable().validate(ordering)
        Validator(int).is_optional().min(1).validate(page)
        Validator(int).is_optional().is_nullable().min(1).validate(page_size)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/api/v1/owasp/projects/",
                [self.get_api_key()],
            )
            .add_query("level", level, nullable=True)
            .add_query("ordering", ordering, nullable=True)
            .add_query("page", page)
            .add_query("page_size", page_size, nullable=True)
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return PagedProjectSchema._unmap(response)
