# This file was generated by liblab | https://liblab.com/

from typing import Awaitable, Union
from .utils.to_async import to_async
from ..git_hub import GitHubService
from ...models.utils.sentinel import SENTINEL
from ...models import (
    PagedIssueSchema,
    State,
    ListIssuesOrdering,
    PagedLabelSchema,
    ListLabelsOrdering,
    PagedOrganizationSchema,
    ListOrganizationsOrdering,
    PagedReleaseSchema,
    ListReleasesOrdering,
    PagedRepositorySchema,
    ListRepositoriesOrdering,
    PagedUserSchema,
    ListUsersOrdering,
    UserSchema,
)


class GitHubServiceAsync(GitHubService):
    """
    Async Wrapper for GitHubServiceAsync
    """

    def list_issues(
        self,
        state: Union[State, None] = SENTINEL,
        ordering: Union[ListIssuesOrdering, None] = SENTINEL,
        page: int = SENTINEL,
        page_size: Union[int, None] = SENTINEL,
    ) -> Awaitable[PagedIssueSchema]:
        return to_async(super().list_issues)(state, ordering, page, page_size)

    def list_labels(
        self,
        color: Union[str, None] = SENTINEL,
        ordering: Union[ListLabelsOrdering, None] = SENTINEL,
        page: int = SENTINEL,
        page_size: Union[int, None] = SENTINEL,
    ) -> Awaitable[PagedLabelSchema]:
        return to_async(super().list_labels)(color, ordering, page, page_size)

    def list_organizations(
        self,
        location: Union[str, None] = SENTINEL,
        ordering: Union[ListOrganizationsOrdering, None] = SENTINEL,
        page: int = SENTINEL,
        page_size: Union[int, None] = SENTINEL,
    ) -> Awaitable[PagedOrganizationSchema]:
        return to_async(super().list_organizations)(location, ordering, page, page_size)

    def list_releases(
        self,
        tag_name: Union[str, None] = SENTINEL,
        ordering: Union[ListReleasesOrdering, None] = SENTINEL,
        page: int = SENTINEL,
        page_size: Union[int, None] = SENTINEL,
    ) -> Awaitable[PagedReleaseSchema]:
        return to_async(super().list_releases)(tag_name, ordering, page, page_size)

    def list_repositories(
        self,
        ordering: Union[ListRepositoriesOrdering, None] = SENTINEL,
        page: int = SENTINEL,
        page_size: Union[int, None] = SENTINEL,
    ) -> Awaitable[PagedRepositorySchema]:
        return to_async(super().list_repositories)(ordering, page, page_size)

    def list_users(
        self,
        company: Union[str, None] = SENTINEL,
        location: Union[str, None] = SENTINEL,
        ordering: Union[ListUsersOrdering, None] = SENTINEL,
        page: int = SENTINEL,
        page_size: Union[int, None] = SENTINEL,
    ) -> Awaitable[PagedUserSchema]:
        return to_async(super().list_users)(
            company, location, ordering, page, page_size
        )

    def get_user(self, login: str) -> Awaitable[UserSchema]:
        return to_async(super().get_user)(login)
