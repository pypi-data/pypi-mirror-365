"""Production mode utilities for syft-widget"""
import os
import subprocess
from pathlib import Path
from typing import Optional


def check_integration(quiet: bool = False) -> bool:
    """Check if production mode is properly integrated
    
    Returns:
        True if properly integrated, False otherwise
    """
    cwd = Path.cwd()
    run_sh = cwd / "run.sh"
    run_widgets_sh = cwd / "run_widgets.sh"
    
    # If no run_widgets.sh, production mode not enabled
    if not run_widgets_sh.exists():
        return True  # Not an error, just not enabled
    
    # If run_widgets.sh exists but no run.sh, that's a problem
    if not run_sh.exists():
        if not quiet:
            print("\n" + "="*60)
            print("‚ö†Ô∏è  WARNING: run_widgets.sh exists but no run.sh found!")
            print("="*60)
            print("Create a run.sh file with:")
            print("  #!/bin/bash")
            print("  ./run_widgets.sh")
            print("="*60 + "\n")
        return False
    
    # Check if run.sh mentions run_widgets.sh
    content = run_sh.read_text()
    if "run_widgets.sh" not in content:
        if not quiet:
            print("\n" + "="*60)
            print("‚ö†Ô∏è  WARNING: SyftBox widget server not integrated!")
            print("="*60)
            print("Your run.sh exists but doesn't call run_widgets.sh")
            print("\nAdd this line to your run.sh:")
            print("  ./run_widgets.sh &")
            print("\nOr run: python -m syft_widget.fix_integration")
            print("="*60 + "\n")
        return False
    
    return True


def get_package_name() -> str:
    """Get the current package name"""
    # Try to get from setup.py or pyproject.toml
    cwd = Path.cwd()
    
    # Check for pyproject.toml
    pyproject = cwd / "pyproject.toml"
    if pyproject.exists():
        try:
            import tomllib
        except ImportError:
            import tomli as tomllib
        
        with open(pyproject, "rb") as f:
            data = tomllib.load(f)
            if "project" in data and "name" in data["project"]:
                return data["project"]["name"]
    
    # Check for setup.py
    setup_py = cwd / "setup.py"
    if setup_py.exists():
        # This is hacky but works for most cases
        content = setup_py.read_text()
        import re
        match = re.search(r'name\s*=\s*["\']([^"\']+)["\']', content)
        if match:
            return match.group(1)
    
    # Fallback to directory name
    return cwd.name


def get_git_remote() -> Optional[str]:
    """Get the git remote URL"""
    try:
        result = subprocess.run(
            ["git", "remote", "get-url", "origin"],
            capture_output=True,
            text=True,
            cwd=Path.cwd()
        )
        if result.returncode == 0:
            return result.stdout.strip()
    except Exception:
        pass
    return None


def enable_production_mode(check_git: bool = True) -> bool:
    """Enable SyftBox production mode for current package
    
    This will:
    1. Generate run_widgets.sh in the current directory
    2. Check/create run.sh if needed
    3. Verify git remote (for SyftBox cloning)
    
    Returns:
        True if successful, False if there were issues
    """
    cwd = Path.cwd()
    package_name = get_package_name()
    
    print(f"Enabling production mode for package: {package_name}")
    
    # 1. Generate run_widgets.sh
    run_widgets_sh = cwd / "run_widgets.sh"
    
    # Create the server startup script
    script_content = f"""#!/bin/bash
# Auto-generated by syft-widget - DO NOT EDIT
# This script starts the widget server for SyftBox integration

cd "$(dirname "$0")"

# Start the widget server
echo "Starting syft-widget server for {package_name}..."
python -m syft_widget.server \\
    --package-name "{package_name}" \\
    --package-dir "$(pwd)" \\
    --auto-discover
"""
    
    run_widgets_sh.write_text(script_content)
    run_widgets_sh.chmod(0o755)
    print(f"‚úÖ Created {run_widgets_sh.name}")
    
    # 2. Handle run.sh
    run_sh = cwd / "run.sh"
    if not run_sh.exists():
        # Create new run.sh
        run_sh_content = f"""#!/bin/bash
# Generated by syft-widget for {package_name}

# Start the widget server
./run_widgets.sh
"""
        run_sh.write_text(run_sh_content)
        run_sh.chmod(0o755)
        print(f"‚úÖ Created {run_sh.name}")
    else:
        # Check if run.sh mentions run_widgets.sh
        if not check_integration(quiet=True):
            print("\n" + "="*60)
            print("‚ö†Ô∏è  ACTION REQUIRED")
            print("="*60)
            print("Your run.sh exists but doesn't call run_widgets.sh")
            print("\nAdd this line to your run.sh:")
            print("  ./run_widgets.sh &")
            print("\nOr run: python -m syft_widget.fix_integration")
            print("="*60)
    
    # 3. Check git remote (for SyftBox cloning)
    if check_git:
        git_remote = get_git_remote()
        if git_remote:
            print(f"‚úÖ Will use git remote: {git_remote}")
        else:
            print("‚ö†Ô∏è  No git remote found - SyftBox cloning may fail")
            print("   Run 'git remote add origin <url>' to set up a remote")
    
    # 4. Create .gitignore entry if needed
    gitignore = cwd / ".gitignore"
    if gitignore.exists():
        content = gitignore.read_text()
        if "run_widgets.sh" not in content:
            # Don't add to gitignore - this should be committed
            pass
    
    print("\n‚úÖ Production mode enabled!")
    print("   Next steps:")
    print("   1. Ensure run.sh calls ./run_widgets.sh")
    print("   2. Commit run_widgets.sh to your repository")
    print("   3. Push to your git remote")
    
    return True


def fix_integration() -> bool:
    """Automatically fix common integration issues"""
    cwd = Path.cwd()
    run_sh = cwd / "run.sh"
    run_widgets_sh = cwd / "run_widgets.sh"
    
    if not run_widgets_sh.exists():
        print("‚ùå run_widgets.sh not found. Run enable_production_mode() first.")
        return False
    
    if not run_sh.exists():
        print("‚ùå run.sh not found. Cannot auto-fix.")
        return False
    
    # Check if already integrated
    content = run_sh.read_text()
    if "run_widgets.sh" in content:
        print("‚úÖ run_widgets.sh is already integrated in run.sh")
        return True
    
    # Add the line
    if not content.endswith("\n"):
        content += "\n"
    
    content += "\n# Start syft-widget server\n./run_widgets.sh &\n"
    
    # Backup the original
    backup = run_sh.with_suffix(".sh.backup")
    backup.write_text(run_sh.read_text())
    print(f"üìã Backed up original run.sh to {backup.name}")
    
    # Write the updated content
    run_sh.write_text(content)
    print("‚úÖ Added './run_widgets.sh &' to run.sh")
    
    return True


def disable_production_mode() -> bool:
    """Remove production mode files"""
    cwd = Path.cwd()
    run_widgets_sh = cwd / "run_widgets.sh"
    
    if run_widgets_sh.exists():
        run_widgets_sh.unlink()
        print("‚úÖ Removed run_widgets.sh")
        
        # Check if run.sh needs updating
        run_sh = cwd / "run.sh"
        if run_sh.exists():
            content = run_sh.read_text()
            if "run_widgets.sh" in content:
                print("‚ö†Ô∏è  Remember to remove './run_widgets.sh' from your run.sh")
        
        return True
    else:
        print("‚ÑπÔ∏è  Production mode not enabled (run_widgets.sh not found)")
        return False