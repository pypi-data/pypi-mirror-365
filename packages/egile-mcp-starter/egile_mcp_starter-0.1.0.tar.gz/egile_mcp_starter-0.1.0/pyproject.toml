[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "egile-mcp-starter"
version = "0.1.0"
description = "A comprehensive cookiecutter template for creating Model Context Protocol (MCP) servers using the FASTMCP framework"
authors = [{name = "Jean-Baptiste Poullet", email = "egile@gmail.com"}]
readme = "README.md"
requires-python = ">=3.10"
keywords = ["mcp", "model-context-protocol", "fastmcp", "cookiecutter", "template", "ai", "assistant"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
dependencies = [
    "cookiecutter>=2.1.1",
    "jinja2>=3.0.0",
    "click>=8.0.0",
    "pyyaml>=6.0",
]

[project.urls]
Homepage = "https://github.com/jpoullet2000/egile-mcp-starter"
Repository = "https://github.com/jpoullet2000/egile-mcp-starter"
Documentation = "https://github.com/jpoullet2000/egile-mcp-starter"

[project.scripts]
egile-mcp-starter = "egile_mcp_starter.cli:main"

[tool.poetry]
packages = [{include = "egile_mcp_starter"}]
include = [
    "egile_mcp_starter/template/**/*",
    "egile_mcp_starter/template/**/.*",
]

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
black = "^22.0.0"
flake8 = "^5.0.0"
mypy = "^1.0.0"
pre-commit = "^3.0.0"
isort = "^5.0.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^5.0.0"
sphinx-rtd-theme = "^1.0.0"
myst-parser = "^0.18.0"
sphinx-autodoc-typehints = "^1.12.0"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | egile_mcp_starter/template
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["egile_mcp_starter"]
skip_glob = ["egile_mcp_starter/template/**/*"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "egile_mcp_starter/template/",
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["egile_mcp_starter"]
omit = ["tests/*", "egile_mcp_starter/template/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
precision = 2
