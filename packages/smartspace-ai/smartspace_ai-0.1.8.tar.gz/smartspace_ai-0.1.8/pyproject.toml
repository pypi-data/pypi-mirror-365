[tool.pytest.ini_options]
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning"
]

[tool.poetry]
name = "smartspace-ai"
version = "0.1.8"
description = "Smartspace SDK"
readme = "README.md"
packages = [{ include = "smartspace" }]
authors = ["David Gentile <david.gentile@smartspace.ai>", "Denver Hayward <denver.hayward@smartspace.ai>"]


[tool.poetry.scripts]
smartspace = "smartspace.cli.app:cli"


[tool.poetry.dependencies]
python = ">=3.10,<3.12"
annotated-types = "0.5.0"
mypy = "^1.8.0"
mypy-extensions = "1.0.0"
numpy = "^1.26.0"
jsonschema = "^4.23.0"
typer = "0.16.0"
azure-identity = "^1.17.1"
msal = "^1.29.0"
pysignalr = "^1.0.0"
watchdog = "4.0.1"
more-itertools = "^10.3.0"
jsonpath-ng = "^1.6.1"
semantic-version = "^2.10.0"
pydantic = "2.8.0"
pydantic-extra-types = "2.0.0"
pydantic-settings = "2.0.3"
litellm = "^1.43.19"
llama-index = "^0.12.42"
httpx = "^0.27.0"
neo4j = "^5.24.0"
types-requests = "^2.32.0.20240914"
pyodbc = "^5.2.0"
sqlalchemy = "^2.0.36"
aioodbc = "^0.5.0"
pandoc = "^2.4"
pypandoc = "^1.14"
docxtpl = "^0.19.0"
python-docx = "^1.1.2"
aiomysql = "^0.2.0"
llama-index-embeddings-huggingface = "^0.5.4"
lark = "^1.2.2"

[tool.poetry.group.dev.dependencies]
pytest = "^8.1.0"
pytest-mock = "^3.12.0"
mypy = "^1.8.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.8"



[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.28"
mike = "^2.1.2"
mkdocs-macros-plugin = "^1.0.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
