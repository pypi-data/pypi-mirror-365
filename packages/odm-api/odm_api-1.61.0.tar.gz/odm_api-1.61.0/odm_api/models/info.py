# coding: utf-8

"""
    ODM API

    This swagger page describes the variantUser API endpoints for ODM. These are typically used to find and retrieve variant data and metadata.  Before carrying out any API calls you will need an API token. API tokens can be obtained under your profile within the Genestack software.  To try out calls in this swagger page:  1.  Click the 'Authorize' button below to enter your API token 2.  Scroll to the 'Parameters' section for the method you wish to try out and click the 'Try it out' button 3.  Enter parameter values that you wish to try 4.  Scroll to the bottom of the Parameters section and click the 'Execute' bar that appears    The server response will be in the section that follows.

    The version of the OpenAPI document: default-released
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Info(BaseModel):
    """
    job execution information
    """ # noqa: E501
    job_exec_id: StrictInt = Field(description="job execution id", alias="jobExecId")
    started_by: StrictStr = Field(description="user name who started the job", alias="startedBy")
    job_name: StrictStr = Field(description="actual job name", alias="jobName")
    status: StrictStr = Field(description="current job status")
    create_time: datetime = Field(alias="createTime")
    end_time: Optional[datetime] = Field(default=None, alias="endTime")
    __properties: ClassVar[List[str]] = ["jobExecId", "startedBy", "jobName", "status", "createTime", "endTime"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['COMPLETED', 'STARTING', 'RUNNING', 'STOPPING', 'STOPPED', 'FAILED', 'ABANDONED', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('COMPLETED', 'STARTING', 'RUNNING', 'STOPPING', 'STOPPED', 'FAILED', 'ABANDONED', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Info from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Info from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jobExecId": obj.get("jobExecId"),
            "startedBy": obj.get("startedBy"),
            "jobName": obj.get("jobName"),
            "status": obj.get("status"),
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime")
        })
        return _obj


