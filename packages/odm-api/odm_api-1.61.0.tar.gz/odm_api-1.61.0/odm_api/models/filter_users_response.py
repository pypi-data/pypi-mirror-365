# coding: utf-8

"""
    ODM API

    This swagger page describes the variantUser API endpoints for ODM. These are typically used to find and retrieve variant data and metadata.  Before carrying out any API calls you will need an API token. API tokens can be obtained under your profile within the Genestack software.  To try out calls in this swagger page:  1.  Click the 'Authorize' button below to enter your API token 2.  Scroll to the 'Parameters' section for the method you wish to try out and click the 'Try it out' button 3.  Enter parameter values that you wish to try 4.  Scroll to the bottom of the Parameters section and click the 'Execute' bar that appears    The server response will be in the section that follows.

    The version of the OpenAPI document: default-released
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from odm_api.models.create_user201_response import CreateUser201Response
from typing import Optional, Set
from typing_extensions import Self

class FilterUsersResponse(BaseModel):
    """
    FilterUsersResponse
    """ # noqa: E501
    resources: Optional[List[CreateUser201Response]] = Field(default=None, description="List of users", alias="Resources")
    items_per_page: Optional[StrictInt] = Field(default=None, alias="itemsPerPage")
    schemas: Optional[List[StrictStr]] = None
    start_index: Optional[StrictInt] = Field(default=None, alias="startIndex")
    total_results: Optional[StrictInt] = Field(default=None, alias="totalResults")
    __properties: ClassVar[List[str]] = ["Resources", "itemsPerPage", "schemas", "startIndex", "totalResults"]

    @field_validator('schemas')
    def schemas_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['urn:ietf:params:scim:api:messages:2.0:ListResponse']):
                raise ValueError("each list item must be one of ('urn:ietf:params:scim:api:messages:2.0:ListResponse')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterUsersResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['Resources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterUsersResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Resources": [CreateUser201Response.from_dict(_item) for _item in obj["Resources"]] if obj.get("Resources") is not None else None,
            "itemsPerPage": obj.get("itemsPerPage"),
            "schemas": obj.get("schemas"),
            "startIndex": obj.get("startIndex"),
            "totalResults": obj.get("totalResults")
        })
        return _obj


