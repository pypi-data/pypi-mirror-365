# coding: utf-8

"""
    ODM API

    This swagger page describes the variantUser API endpoints for ODM. These are typically used to find and retrieve variant data and metadata.  Before carrying out any API calls you will need an API token. API tokens can be obtained under your profile within the Genestack software.  To try out calls in this swagger page:  1.  Click the 'Authorize' button below to enter your API token 2.  Scroll to the 'Parameters' section for the method you wish to try out and click the 'Try it out' button 3.  Enter parameter values that you wish to try 4.  Scroll to the bottom of the Parameters section and click the 'Execute' bar that appears    The server response will be in the section that follows.

    The version of the OpenAPI document: default-released
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from odm_api.api.expression_integration_as_curator_api import ExpressionIntegrationAsCuratorApi


class TestExpressionIntegrationAsCuratorApi(unittest.TestCase):
    """ExpressionIntegrationAsCuratorApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ExpressionIntegrationAsCuratorApi()

    def tearDown(self) -> None:
        pass

    def test_create_expression_group_library_group_link_as_curator(self) -> None:
        """Test case for create_expression_group_library_group_link_as_curator

        Create a link between a group of expression objects and a group of library objects
        """
        pass

    def test_create_expression_group_preparation_group_link_as_curator(self) -> None:
        """Test case for create_expression_group_preparation_group_link_as_curator

        Create a link between a group of expression objects and a group of preparation objects
        """
        pass

    def test_create_expression_group_sample_group_link_as_curator(self) -> None:
        """Test case for create_expression_group_sample_group_link_as_curator

        Create a link between a group of expression objects and a group of sample objects
        """
        pass

    def test_create_expression_library_link_as_curator(self) -> None:
        """Test case for create_expression_library_link_as_curator

        Create a link between an expression object and a library
        """
        pass

    def test_create_expression_preparation_link_as_curator(self) -> None:
        """Test case for create_expression_preparation_link_as_curator

        Create a link between an expression object and a preparation
        """
        pass

    def test_create_expression_sample_link_as_curator(self) -> None:
        """Test case for create_expression_sample_link_as_curator

        Create a link between an expression object and a sample
        """
        pass

    def test_delete_expression_group_library_group_link_as_curator(self) -> None:
        """Test case for delete_expression_group_library_group_link_as_curator

        Delete link between a group of expression objects and a group of library objects
        """
        pass

    def test_delete_expression_group_preparation_group_link_as_curator(self) -> None:
        """Test case for delete_expression_group_preparation_group_link_as_curator

        Delete link between a group of expression objects and a group of preparation objects
        """
        pass

    def test_delete_expression_group_sample_group_link_as_curator(self) -> None:
        """Test case for delete_expression_group_sample_group_link_as_curator

        Delete link between a group of expression objects and a group of sample objects
        """
        pass

    def test_delete_expression_library_link_as_curator(self) -> None:
        """Test case for delete_expression_library_link_as_curator

        Delete link between an expression object and a library
        """
        pass

    def test_delete_expression_preparation_link_as_curator(self) -> None:
        """Test case for delete_expression_preparation_link_as_curator

        Delete link between an expression object and a preparation
        """
        pass

    def test_delete_expression_sample_link_as_curator(self) -> None:
        """Test case for delete_expression_sample_link_as_curator

        Delete link between an expression object and a sample
        """
        pass

    def test_get_expression_by_library_as_curator(self) -> None:
        """Test case for get_expression_by_library_as_curator

        Retrieve expression run-level data by querying related library ID (accession)
        """
        pass

    def test_get_expression_by_preparation(self) -> None:
        """Test case for get_expression_by_preparation

        Retrieve expression run-level data by querying related preparation ID (accession)
        """
        pass

    def test_get_expression_by_sample_as_curator(self) -> None:
        """Test case for get_expression_by_sample_as_curator

        Retrieve expression run-level data by querying related sample ID (accession)
        """
        pass

    def test_get_expression_groups_by_study_as_curator(self) -> None:
        """Test case for get_expression_groups_by_study_as_curator

        Retrieve group metadata by querying study ID (accession)
        """
        pass

    def test_get_expression_run_to_library_pairs_as_curator(self) -> None:
        """Test case for get_expression_run_to_library_pairs_as_curator

        Retrieve run-library pairs by group id. Pagination is based on unique runs, not unique pairs.
        """
        pass

    def test_get_expression_run_to_preparation_pairs_as_curator(self) -> None:
        """Test case for get_expression_run_to_preparation_pairs_as_curator

        Retrieve run-preparation pairs by group id. Pagination is based on unique runs, not unique pairs.
        """
        pass

    def test_get_expression_run_to_sample_pairs_as_curator(self) -> None:
        """Test case for get_expression_run_to_sample_pairs_as_curator

        Retrieve run-sample pairs by group id. Pagination is based on unique runs, not unique pairs.
        """
        pass


if __name__ == '__main__':
    unittest.main()
