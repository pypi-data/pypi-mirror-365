# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from .....core.pydantic_utilities import UniversalBaseModel
import typing
from ..smb.resources.smb.smb_pentest_config import SmbPentestConfig
from ..smb.resources.smb.smb_pentest_details import SmbPentestDetails
from ..smb.resources.smb.auth_statistics import (
    AuthStatistics as resources_pentest_resources_smb_resources_smb_auth_statistics_AuthStatistics,
)
from .....core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ..ssh.resources.ssh.ssh_pentest_config import SshPentestConfig
from ..ssh.resources.ssh.ssh_pentest_details import SshPentestDetails
from ..ssh.resources.ssh.auth_statistics import (
    AuthStatistics as resources_pentest_resources_ssh_resources_ssh_auth_statistics_AuthStatistics,
)
from ..telnet.resources.telnet.telnet_pentest_config import TelnetPentestConfig
from ..telnet.resources.telnet.telnet_pentest_details import TelnetPentestDetails
from ..telnet.resources.telnet.auth_statistics import (
    AuthStatistics as resources_pentest_resources_telnet_resources_telnet_auth_statistics_AuthStatistics,
)


class PentestServiceResult_Smb(UniversalBaseModel):
    type: typing.Literal["smb"] = "smb"
    config: SmbPentestConfig
    result: SmbPentestDetails
    statistics: typing.Optional[resources_pentest_resources_smb_resources_smb_auth_statistics_AuthStatistics] = None
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class PentestServiceResult_Ssh(UniversalBaseModel):
    type: typing.Literal["ssh"] = "ssh"
    config: SshPentestConfig
    result: SshPentestDetails
    statistics: typing.Optional[resources_pentest_resources_ssh_resources_ssh_auth_statistics_AuthStatistics] = None
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class PentestServiceResult_Telnet(UniversalBaseModel):
    type: typing.Literal["telnet"] = "telnet"
    config: TelnetPentestConfig
    result: TelnetPentestDetails
    statistics: typing.Optional[resources_pentest_resources_telnet_resources_telnet_auth_statistics_AuthStatistics] = (
        None
    )
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


PentestServiceResult = typing.Union[PentestServiceResult_Smb, PentestServiceResult_Ssh, PentestServiceResult_Telnet]
