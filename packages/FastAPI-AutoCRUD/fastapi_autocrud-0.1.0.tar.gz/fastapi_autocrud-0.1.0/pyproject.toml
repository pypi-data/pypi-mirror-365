[build-system]
requires = ["hatchling>=1.8.0"]
build-backend = "hatchling.build"

[project]
name = "FastAPI-AutoCRUD"
version = "0.1.0"
description = "A powerful, enterprise-level FastAPI CRUD router factory that automatically generates REST endpoints with advanced features like filtering, pagination, searching, sorting, bulk operations, and custom endpoint decorators."
readme = "readme.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["fastapi", "crud", "router", "rest", "api", "sqlalchemy", "pydantic"]
authors = [
    {name = "FastAPI-AutoCRUD Contributors", email = "support@autocrud.dev"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Framework :: FastAPI",
]
dependencies = [
    "fastapi[standard]>=0.115.14",
    "loguru>=0.7.3",
    "pydantic>=2.11.7",
    "sqlalchemy>=2.0.41",
    "tenacity>=9.1.2",
]

[project.optional-dependencies]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "aiosqlite>=0.19.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
]
markers = [
    "asyncio: marks tests as async",
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["auto_crud"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "I", "C", "B", "Q"]
ignore = ["E203", "B008", "C901", "B904", "E501", "B017"]
exclude = [".git", "__pycache__", "build", "dist", ".venv", "migrations"]

[tool.hatch.build.targets.wheel]
only-include = ["auto_crud"]
sources = ["."]

[tool.hatch.build.targets.sdist]
only-include = [
    "auto_crud",
    "readme.md",
    "README.md",
    "LICENSE",
    "pyproject.toml",
    "setup.py",
]

[tool.hatch.build]
exclude = [
    "sample/",
    "tests/",
    ".github/",
    "docs/",
    "*.sqlite",
    "*.log",
    "**/__pycache__/",
    "**/*.pyc",
    "**/*.pyo",
    ".pytest_cache/",
    ".ruff_cache/",
    ".mypy_cache/",
    ".venv/",
    "venv/",
    "build/",
    "dist/",
    ".git/",
]

[tool.ruff.lint.per-file-ignores]
"auto_crud/__init__.py" = ["F401"]
