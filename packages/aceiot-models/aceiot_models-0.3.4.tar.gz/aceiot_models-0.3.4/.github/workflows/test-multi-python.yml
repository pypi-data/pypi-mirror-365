name: Test Multiple Python Versions

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        exclude:
          # Exclude some combinations to reduce test time if needed
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "**/pyproject.toml"
    
    - name: Install dependencies
      run: |
        uv venv
        uv pip install --all-extras .
        uv pip install --group dev
    
    - name: Run linting
      run: |
        uv run ruff check .
        uv run ruff format --check .
    
    - name: Run type checking
      run: |
        uv run pyrefly
    
    - name: Run tests
      env:
        ACEIOT_API_URL: ${{ secrets.ACEIOT_API_URL }}
        ACEIOT_API_KEY: ${{ secrets.ACEIOT_API_KEY }}
      run: |
        uv run pytest -v --cov=aceiot_models --cov-report=xml --cov-report=term
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Separate job to build and check the package
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Build package
      run: |
        uv build
    
    - name: Check package
      run: |
        uv pip install twine
        uv run twine check dist/*
    
    - name: Test installation
      run: |
        cd /tmp
        uv venv test-env
        source test-env/bin/activate
        uv pip install $GITHUB_WORKSPACE/dist/*.whl
        python -c "import aceiot_models; print('Package installed successfully')"