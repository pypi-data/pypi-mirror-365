[project]
name = "aceiot-models"
version = "0.3.4"
description = "Pydantic models and API client for ACE IoT Aerodrome platform"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Andrew Rodgers", email = "andrew@aceiotsolutions.com"},
]
maintainers = [
    {name = "Andrew Rodgers", email = "andrew@aceiotsolutions.com"},
]
keywords = ["aceiot", "iot", "pydantic", "api", "sdk", "client"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pydantic>=2.11.7",
    "pytz>=2025.2",
    "pyyaml>=6.0.2",
    "toml>=0.10.2",
    "email-validator>=2.1.0",
    "requests>=2.31.0",
    "urllib3>=2.0.0",
    "python-dateutil>=2.8.0",
]

[project.optional-dependencies]
upload-progress = ["requests-toolbelt>=1.0.0"]

[project.urls]
Homepage = "https://github.com/ACE-IoT-Solutions/aceiot-models"  # Update with your repo URL
Repository = "https://github.com/ACE-IoT-Solutions/aceiot-models.git"  # Update with your repo URL
Issues = "https://github.com/ACE-IoT-Solutions/aceiot-models/issues"  # Update with your repo URL

[dependency-groups]
dev = [
    "pyrefly>=0.25.0",
    "pytest>=8.4.1",
    "ruff>=0.12.5",
    "pytest-cov>=6.2.1",
    "pre-commit>=3.6.0",
    "tox>=4.28.0",
    "tox-uv>=1.26.0",
    "aceiot-models",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
# Ruff configuration for linting
line-length = 100
target-version = "py310"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
# Enable specific rule categories
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # flake8-comprehensions
    "C4",
    # flake8-pie
    "PIE",
    # flake8-type-checking
    "TCH",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # Ruff-specific rules
    "RUF",
]

ignore = [
    # Allow non-lowercase variable names (for API compatibility)
    "N806",
    # Allow builtin attribute shadowing
    "A003",
    # Allow missing docstrings in magic methods
    "D105",
    # Allow missing docstrings in nested functions
    "D106",
    # Allow missing docstrings in __init__ methods
    "D107",
    # Line too long - let formatter handle this
    "E501",
    # Allow relative imports
    "TID252",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*.py" = [
    "D100", "D101", "D102", "D103", "D104",  # Missing docstrings in tests
    "S101",  # Use of assert in tests
    "PLR2004",  # Magic value used in comparison
    "ARG001", "ARG002",  # Unused function arguments in tests
]
# __init__.py files can have unused imports
"**/__init__.py" = [
    "F401",  # Unused import
    "D104",  # Missing docstring in public package
]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings
convention = "google"

[tool.ruff.lint.isort]
# Import sorting configuration
force-single-line = false
force-sort-within-sections = false
lines-after-imports = 2
known-first-party = ["aceiot_models"]
known-third-party = ["pydantic", "pytest"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.format]
# Enable auto-formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyrefly]
# Pyrefly configuration for type checking
project_includes = ["aceiot_models", "tests"]
project_excludes = [
    ".venv",
    ".tox",
    "**/__pycache__",
    "build",
    "dist"
]
python_version = "3.10"

[tool.pytest.ini_options]
# Pytest configuration
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=aceiot_models",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=40",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "requires_api: marks tests that require a live API endpoint",
]

[tool.coverage.run]
# Coverage configuration
source = ["aceiot_models"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "setup.py",
]

[tool.coverage.report]
# Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.uv.sources]
aceiot-models = { workspace = true }
