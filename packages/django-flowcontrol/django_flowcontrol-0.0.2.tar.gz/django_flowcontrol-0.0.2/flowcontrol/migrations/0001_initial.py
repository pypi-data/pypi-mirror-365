# Generated by Django 5.2.1 on 2025-07-11 10:17

import django.core.serializers.json
import django.db.models.deletion
import django.utils.timezone
import flowcontrol.models.core
import flowcontrol.utils
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='FlowAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('description', models.TextField(blank=True, help_text='Optional documentation for this action.', verbose_name='Description')),
                ('action', models.CharField(help_text='Name of the action to be performed', max_length=100, verbose_name='Action Name')),
            ],
            options={
                'verbose_name': 'Flow Action',
                'verbose_name_plural': 'Flow Actions',
            },
        ),
        migrations.CreateModel(
            name='Flow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the flow', max_length=100, verbose_name='Flow Name')),
                ('description', models.TextField(blank=True, help_text='Description of the flow', verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('active_at', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Active Since')),
                ('max_concurrent', models.PositiveIntegerField(default=0, verbose_name='Max Concurrent Runs')),
                ('max_per_object', models.PositiveIntegerField(default=0)),
                ('max_concurrent_per_object', models.PositiveIntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Flow',
                'verbose_name_plural': 'Flows',
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('flowaction_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='%(app_label)s_%(class)s', serialize=False, to='flowcontrol.flowaction')),
                ('condition', models.TextField(blank=True, default='', help_text='A Django template variable expression. Context contains `object` and flow run state.', validators=[flowcontrol.utils.validate_template_condition], verbose_name='Condition Expression')),
            ],
            options={
                'abstract': False,
            },
            bases=('flowcontrol.flowaction',),
        ),
        migrations.CreateModel(
            name='Delay',
            fields=[
                ('flowaction_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='%(app_label)s_%(class)s', serialize=False, to='flowcontrol.flowaction')),
                ('base_date_template', models.TextField(blank=True, default='', help_text='Template expression from which the delay will be calculated, defaults to time of invocation.', verbose_name='Base Date Template')),
                ('months', models.SmallIntegerField(blank=True, default=None, help_text='Number of months to delay before proceeding to the next action.', null=True, verbose_name='Delay for number of months')),
                ('seconds', models.DurationField(blank=True, default=None, help_text='Number of seconds before proceeding to the next action.', null=True, verbose_name='Wait Time (seconds)')),
                ('weekday', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], default=None, help_text='Only continue after reaching this time.', null=True, verbose_name='Delay Until this weekday')),
                ('time', models.TimeField(blank=True, default=None, help_text='Continue after reaching this time.', null=True, verbose_name='Delay Until this time')),
                ('action_if_past', models.PositiveSmallIntegerField(choices=[(5, 'Continue from now'), (2, 'Return to parent'), (3, "Break to next parent's sibling"), (4, 'Abort run')], default=0, help_text='What to do if the delay is already past when the action is executed.', verbose_name='Action if past delay')),
            ],
            options={
                'abstract': False,
            },
            bases=('flowcontrol.flowaction',),
        ),
        migrations.CreateModel(
            name='ForLoop',
            fields=[
                ('flowaction_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='%(app_label)s_%(class)s', serialize=False, to='flowcontrol.flowaction')),
                ('var_name', models.CharField(blank=True, default='', help_text='The name of the variable that will hold the current item in the loop.', max_length=100, verbose_name='Variable Name')),
                ('start', models.PositiveIntegerField(default=0, help_text='The index to start iterating from.', verbose_name='Start Index')),
                ('end', models.PositiveIntegerField(default=0, help_text='The index to stop iterating at (exclusive).', verbose_name='End Index')),
                ('step', models.PositiveIntegerField(default=1, help_text='The step size for each iteration.', verbose_name='Step')),
            ],
            options={
                'abstract': False,
            },
            bases=('flowcontrol.flowaction',),
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('flowaction_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='%(app_label)s_%(class)s', serialize=False, to='flowcontrol.flowaction')),
                ('state', models.JSONField(default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='A JSON object representing the state to set.', verbose_name='State')),
                ('evaluate', models.BooleanField(default=False, help_text='If checked, object string values will be evaluated as Django template expressions.', verbose_name='Evaluate as expressions')),
            ],
            options={
                'abstract': False,
            },
            bases=('flowcontrol.flowaction',),
        ),
        migrations.AddField(
            model_name='flowaction',
            name='flow',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='flowcontrol.flow', verbose_name='Flow'),
        ),
        migrations.CreateModel(
            name='Trigger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trigger', models.CharField(choices=flowcontrol.models.core.get_trigger_choices, help_text='Name of the trigger to listen for', max_length=100, verbose_name='Trigger Name')),
                ('active_at', models.DateTimeField(blank=True, help_text='The time when this trigger starts being active', null=True, verbose_name='Active Since')),
                ('flow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='triggers', to='flowcontrol.flow', verbose_name='Flow')),
            ],
            options={
                'verbose_name': 'Flow Trigger',
                'verbose_name_plural': 'Flow Triggers',
            },
        ),
        migrations.CreateModel(
            name='FlowRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repeat_action', models.BooleanField(default=False, verbose_name='Execute action again on resume')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('waiting', 'Waiting'), ('paused', 'Paused'), ('done', 'done')], default='pending', max_length=20, verbose_name='Status')),
                ('outcome', models.CharField(blank=True, choices=[('complete', 'Complete'), ('aborted', 'Aborted'), ('errored', 'Errored'), ('obsolete', 'Obsolete')], default='', max_length=20, verbose_name='Outcome')),
                ('log', models.TextField(blank=True, verbose_name='Log')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created At')),
                ('continue_after', models.DateTimeField(blank=True, null=True, verbose_name='Continue After')),
                ('done_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('object_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('state', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='State')),
                ('action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='runs', to='flowcontrol.flowaction', verbose_name='Action')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('flow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='flowcontrol.flow', verbose_name='Flow')),
                ('parent_run', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_runs', to='flowcontrol.flowrun', verbose_name='Parent Run')),
                ('trigger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='runs', to='flowcontrol.trigger', verbose_name='Created by trigger')),
            ],
            options={
                'verbose_name': 'Flow Run',
                'verbose_name_plural': 'Flow Runs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StartFlow',
            fields=[
                ('flowaction_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='%(app_label)s_%(class)s', serialize=False, to='flowcontrol.flowaction')),
                ('immediate', models.BooleanField(default=False, help_text='If checked, the flow will start running in this action.', verbose_name='Immediate Start')),
                ('pass_object', models.BooleanField(default=True, help_text='If checked, the object of the parent run will be used for this flow.', verbose_name='Pass object')),
                ('pass_state', models.BooleanField(default=False, help_text='If checked, the state of the parent flow run will be passed in.', verbose_name='Pass State')),
                ('start_flow', models.ForeignKey(help_text='The flow that will be started by this action.', on_delete=django.db.models.deletion.PROTECT, related_name='start_actions', to='flowcontrol.flow', verbose_name='Flow to Start')),
            ],
            options={
                'abstract': False,
            },
            bases=('flowcontrol.flowaction',),
        ),
        migrations.AddConstraint(
            model_name='trigger',
            constraint=models.UniqueConstraint(fields=('flow', 'trigger'), name='unique_flow_trigger'),
        ),
    ]
