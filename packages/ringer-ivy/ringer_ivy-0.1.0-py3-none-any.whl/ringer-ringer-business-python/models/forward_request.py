# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ringer-ringer-business-python.models.schemas_site_destination import SchemasSiteDestination
from typing import Optional, Set
from typing_extensions import Self

class ForwardRequest(BaseModel):
    """
    Data required to create a new call forward.
    """ # noqa: E501
    name: StrictStr = Field(description="A user-friendly name for the forward configuration.")
    destination_dial_string: StrictStr = Field(description="The external phone number (E.164 format recommended) to which calls will be forwarded.")
    timeout: StrictInt = Field(description="How long (in seconds) the forward will be attempted before failing over or disconnecting.")
    fail_over: SchemasSiteDestination
    inactive_destination: Optional[SchemasSiteDestination] = None
    active: Optional[StrictBool] = Field(default=True, description="Whether this call forward rule is currently active.")
    __properties: ClassVar[List[str]] = ["name", "destination_dial_string", "timeout", "fail_over", "inactive_destination", "active"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ForwardRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fail_over
        if self.fail_over:
            _dict['fail_over'] = self.fail_over.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inactive_destination
        if self.inactive_destination:
            _dict['inactive_destination'] = self.inactive_destination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ForwardRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "destination_dial_string": obj.get("destination_dial_string"),
            "timeout": obj.get("timeout") if obj.get("timeout") is not None else 20,
            "fail_over": SchemasSiteDestination.from_dict(obj["fail_over"]) if obj.get("fail_over") is not None else None,
            "inactive_destination": SchemasSiteDestination.from_dict(obj["inactive_destination"]) if obj.get("inactive_destination") is not None else None,
            "active": obj.get("active") if obj.get("active") is not None else True
        })
        return _obj


