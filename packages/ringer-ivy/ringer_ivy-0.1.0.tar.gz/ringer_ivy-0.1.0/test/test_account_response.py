# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ringer-ringer-business-python.models.account_response import AccountResponse

class TestAccountResponse(unittest.TestCase):
    """AccountResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccountResponse:
        """Test AccountResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccountResponse`
        """
        model = AccountResponse()
        if include_optional:
            return AccountResponse(
                id = 101,
                name = 'Innovatech Solutions Ltd.',
                status = 'active',
                plan = 'enterprise_annual_v2',
                email = 'billing@innovatech.com',
                phone = '+14155550100',
                created_at = '2023-01-15T10:30Z',
                locale = 'en-US',
                balance = '4276.85',
                balance_preference_in_dollars = '100.00',
                recharge_preference_in_dollars = '200.00',
                maximum_recharge_preference_in_dollars = '1000.00',
                international_enabled = True,
                current_user = ringer-ringer-business-python.models.user_summary.UserSummary(
                    id = 5, 
                    first_name = 'Jane', 
                    last_name = 'Doe', 
                    email = 'jane.doe@innovatech.com', 
                    role = 'administrator', ),
                address = None,
                links = [{"href":"/v2/account","rel":"self","method":"GET","title":"Customer"},{"href":"/v2/account","rel":"delete","method":"DELETE","title":"Delete Customer"},{"href":"/v2/account","rel":"edit","method":"PUT","title":"Edit Customer"},{"href":"/v2/address","rel":"edit","title":"Update Address","method":"PUT"}]
            )
        else:
            return AccountResponse(
                id = 101,
                name = 'Innovatech Solutions Ltd.',
                status = 'active',
                email = 'billing@innovatech.com',
                created_at = '2023-01-15T10:30Z',
                locale = 'en-US',
                balance = '4276.85',
        )
        """

    def testAccountResponse(self):
        """Test AccountResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
