# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreditCardCreateRequest(BaseModel):
    """
    Information required to add and tokenize a new credit card.
    """ # noqa: E501
    name: StrictStr
    active: StrictBool = Field(description="Inactive cards will not be charged when a payment is made.")
    priority: Annotated[int, Field(le=100, strict=True, ge=0)] = Field(description="When you make a payment, we will attempt to charge payment methods in order from highest priority (closest to 100) to lowest.")
    fname: StrictStr = Field(description="The card holder's first name.")
    lname: StrictStr = Field(description="The card holder's last name.")
    addr1: StrictStr = Field(description="Card holder\\'s street address.")
    addr2: Optional[StrictStr] = Field(default=None, description="Apartment or suite number, if applicable.")
    country: StrictStr = Field(description="Country where card holder resides.")
    state: Optional[StrictStr] = Field(default=None, description="State where card holder resides, if applicable.")
    city: StrictStr = Field(description="City where card holder resides.")
    postalcode: StrictStr = Field(description="Postal/ZIP code where card holder resides.")
    email: Optional[StrictStr] = Field(default=None, description="Contact email of card holder.")
    dayphone: Optional[StrictStr] = Field(default=None, description="Daytime phone number of card holder.")
    eveningphone: Optional[StrictStr] = Field(default=None, description="Evening phone number of card holder.")
    cardtype: StrictStr = Field(description="Type of credit card.")
    cardnumber: StrictStr = Field(description="Credit card number.")
    cardexpmonth: StrictStr = Field(description="Month of credit card's expiration date.")
    cardexpyear: StrictStr = Field(description="Year of credit card\\'s expiration date.")
    cvv: StrictStr = Field(description="CVV on back of credit card.")
    __properties: ClassVar[List[str]] = ["name", "active", "priority", "fname", "lname", "addr1", "addr2", "country", "state", "city", "postalcode", "email", "dayphone", "eveningphone", "cardtype", "cardnumber", "cardexpmonth", "cardexpyear", "cvv"]

    @field_validator('cardtype')
    def cardtype_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Visa', 'Mastercard', 'American Express', 'Discover']):
            raise ValueError("must be one of enum values ('Visa', 'Mastercard', 'American Express', 'Discover')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreditCardCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreditCardCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "active": obj.get("active"),
            "priority": obj.get("priority"),
            "fname": obj.get("fname"),
            "lname": obj.get("lname"),
            "addr1": obj.get("addr1"),
            "addr2": obj.get("addr2"),
            "country": obj.get("country"),
            "state": obj.get("state"),
            "city": obj.get("city"),
            "postalcode": obj.get("postalcode"),
            "email": obj.get("email"),
            "dayphone": obj.get("dayphone"),
            "eveningphone": obj.get("eveningphone"),
            "cardtype": obj.get("cardtype"),
            "cardnumber": obj.get("cardnumber"),
            "cardexpmonth": obj.get("cardexpmonth"),
            "cardexpyear": obj.get("cardexpyear"),
            "cvv": obj.get("cvv")
        })
        return _obj


