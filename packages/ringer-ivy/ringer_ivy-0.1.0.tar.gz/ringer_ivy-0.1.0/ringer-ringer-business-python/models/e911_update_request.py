# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class E911UpdateRequest(BaseModel):
    """
    Data for updating an existing E911 record. For PUT, all core fields are typically resubmitted.
    """ # noqa: E501
    name: StrictStr = Field(description="A descriptive name for this E911 record.")
    caller_id_name: StrictStr = Field(description="The name to be displayed to the PSAP for 911 calls from this address.")
    house_number: StrictStr = Field(description="Street number.")
    house_number_suffix: Optional[StrictStr] = Field(default=None, description="Street number suffix (e.g., \"A\", \"Unit 100\").")
    street: StrictStr = Field(description="Street name.")
    city: StrictStr = Field(description="City name.")
    state_province: StrictStr = Field(description="State or province code.")
    postal_code: StrictStr = Field(description="Postal or ZIP code.")
    country_code: StrictStr = Field(description="Two-letter ISO 3166-1 alpha-2 country code.")
    __properties: ClassVar[List[str]] = ["name", "caller_id_name", "house_number", "house_number_suffix", "street", "city", "state_province", "postal_code", "country_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of E911UpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if house_number_suffix (nullable) is None
        # and model_fields_set contains the field
        if self.house_number_suffix is None and "house_number_suffix" in self.model_fields_set:
            _dict['house_number_suffix'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of E911UpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "caller_id_name": obj.get("caller_id_name"),
            "house_number": obj.get("house_number"),
            "house_number_suffix": obj.get("house_number_suffix"),
            "street": obj.get("street"),
            "city": obj.get("city"),
            "state_province": obj.get("state_province"),
            "postal_code": obj.get("postal_code"),
            "country_code": obj.get("country_code")
        })
        return _obj


