# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ringer-ringer-business-python.models.link import Link
from typing import Optional, Set
from typing_extensions import Self

class ConferenceRoomResponse(BaseModel):
    """
    Detailed information about a conference room.
    """ # noqa: E501
    name: StrictStr = Field(description="A user-friendly name for the conference room.")
    pin: Optional[StrictStr] = Field(description="Numeric PIN required for participants to join the conference.")
    moderator_pin: Optional[StrictStr] = Field(description="Numeric PIN required for the moderator to join and control the conference.")
    profile: Optional[StrictStr] = Field(default=None, description="Conference profile or type (e.g., default, enhanced audio). Specific values depend on system configuration.")
    channel_limit: Optional[StrictInt] = Field(default=None, description="Maximum number of concurrent participants allowed in this conference room.")
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the conference room.")
    code: Optional[StrictStr] = Field(default=None, description="A system-usable code or identifier.")
    greeting: Optional[StrictStr] = Field(default=None, description="URL to the current greeting audio file.")
    music_on_hold: Optional[StrictStr] = Field(default=None, description="URL to the current music on hold audio file.")
    user_id: Optional[StrictInt] = Field(default=None, description="Identifier of the user primarily associated with this conference room, if any.")
    links: Optional[List[Link]] = Field(default=None, description="HATEOAS links related to this conference room.")
    __properties: ClassVar[List[str]] = ["name", "pin", "moderator_pin", "profile", "channel_limit", "id", "code", "greeting", "music_on_hold", "user_id", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConferenceRoomResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "code",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # set to None if pin (nullable) is None
        # and model_fields_set contains the field
        if self.pin is None and "pin" in self.model_fields_set:
            _dict['pin'] = None

        # set to None if moderator_pin (nullable) is None
        # and model_fields_set contains the field
        if self.moderator_pin is None and "moderator_pin" in self.model_fields_set:
            _dict['moderator_pin'] = None

        # set to None if profile (nullable) is None
        # and model_fields_set contains the field
        if self.profile is None and "profile" in self.model_fields_set:
            _dict['profile'] = None

        # set to None if greeting (nullable) is None
        # and model_fields_set contains the field
        if self.greeting is None and "greeting" in self.model_fields_set:
            _dict['greeting'] = None

        # set to None if music_on_hold (nullable) is None
        # and model_fields_set contains the field
        if self.music_on_hold is None and "music_on_hold" in self.model_fields_set:
            _dict['music_on_hold'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConferenceRoomResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "pin": obj.get("pin"),
            "moderator_pin": obj.get("moderator_pin"),
            "profile": obj.get("profile"),
            "channel_limit": obj.get("channel_limit"),
            "id": obj.get("id"),
            "code": obj.get("code"),
            "greeting": obj.get("greeting"),
            "music_on_hold": obj.get("music_on_hold"),
            "user_id": obj.get("user_id"),
            "links": [Link.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


