# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ringer-ringer-business-python.models.device_response_all_of_fail_over import DeviceResponseAllOfFailOver
from ringer-ringer-business-python.models.schemas_link import SchemasLink
from typing import Optional, Set
from typing_extensions import Self

class DeviceResponse(BaseModel):
    """
    DeviceResponse
    """ # noqa: E501
    name: StrictStr
    login: StrictStr
    channel_limit: StrictInt
    timeout: StrictInt
    caller_id_name: Optional[StrictStr]
    caller_id_number: Optional[StrictStr]
    acl: Optional[StrictStr]
    mobile_client: Optional[StrictBool] = Field(default=None, description="Indicates if the device is a mobile client")
    fail_over: Optional[DeviceResponseAllOfFailOver] = None
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the device.")
    site: Optional[StrictStr] = Field(default=None, description="The site this device belongs to.")
    active: Optional[StrictBool] = True
    password: Optional[StrictStr] = Field(default=None, description="(Returned on create only)")
    user_id: Optional[StrictInt] = None
    links: Optional[List[SchemasLink]] = None
    __properties: ClassVar[List[str]] = ["name", "login", "channel_limit", "timeout", "caller_id_name", "caller_id_number", "acl", "mobile_client", "fail_over", "id", "site", "active", "password", "user_id", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "site",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fail_over
        if self.fail_over:
            _dict['fail_over'] = self.fail_over.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # set to None if caller_id_name (nullable) is None
        # and model_fields_set contains the field
        if self.caller_id_name is None and "caller_id_name" in self.model_fields_set:
            _dict['caller_id_name'] = None

        # set to None if caller_id_number (nullable) is None
        # and model_fields_set contains the field
        if self.caller_id_number is None and "caller_id_number" in self.model_fields_set:
            _dict['caller_id_number'] = None

        # set to None if acl (nullable) is None
        # and model_fields_set contains the field
        if self.acl is None and "acl" in self.model_fields_set:
            _dict['acl'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "login": obj.get("login"),
            "channel_limit": obj.get("channel_limit") if obj.get("channel_limit") is not None else 2,
            "timeout": obj.get("timeout") if obj.get("timeout") is not None else 120,
            "caller_id_name": obj.get("caller_id_name"),
            "caller_id_number": obj.get("caller_id_number"),
            "acl": obj.get("acl") if obj.get("acl") is not None else '0.0.0.0/0',
            "mobile_client": obj.get("mobile_client"),
            "fail_over": DeviceResponseAllOfFailOver.from_dict(obj["fail_over"]) if obj.get("fail_over") is not None else None,
            "id": obj.get("id"),
            "site": obj.get("site"),
            "active": obj.get("active") if obj.get("active") is not None else True,
            "password": obj.get("password"),
            "user_id": obj.get("user_id"),
            "links": [SchemasLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


