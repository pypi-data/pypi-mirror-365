# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SiteCore(BaseModel):
    """
    SiteCore
    """ # noqa: E501
    dns_extension: StrictStr = Field(description="The DNS extension for the site, used to form part of its unique SIP domain.")
    active: StrictBool = Field(description="Indicates if the site is active. Inactive sites cannot place or receive calls.")
    caller_id_name: StrictStr = Field(description="Default Caller ID name for outbound calls originating from this site.")
    caller_id_number: StrictStr = Field(description="Default Caller ID number for outbound calls from this site (e.g., main business number).")
    thin_client_id: StrictInt = Field(description="Identifier of the thin client (call processing node) assigned to this site.")
    acl: StrictStr = Field(description="Access Control List (e.g., IP addresses or ranges) defining who can connect to this site's SIP services.")
    channel_limit: Annotated[int, Field(le=1000, strict=True, ge=0)] = Field(description="Maximum number of concurrent call channels allowed for this site.")
    permitted_country_codes: List[StrictStr] = Field(description="List of permitted outbound country codes or dialing zones for this site. Reference Country Codes API for available values.")
    __properties: ClassVar[List[str]] = ["dns_extension", "active", "caller_id_name", "caller_id_number", "thin_client_id", "acl", "channel_limit", "permitted_country_codes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SiteCore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SiteCore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dns_extension": obj.get("dns_extension"),
            "active": obj.get("active"),
            "caller_id_name": obj.get("caller_id_name"),
            "caller_id_number": obj.get("caller_id_number"),
            "thin_client_id": obj.get("thin_client_id"),
            "acl": obj.get("acl"),
            "channel_limit": obj.get("channel_limit"),
            "permitted_country_codes": obj.get("permitted_country_codes")
        })
        return _obj


