# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, SecretStr, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TokenRequest(BaseModel):
    """
    Parameters for requesting an OAuth 2.0 access token. Required fields vary by grant_type.
    """ # noqa: E501
    grant_type: StrictStr = Field(description="The OAuth 2.0 grant type.")
    username: Optional[StrictStr] = Field(default=None, description="User's email address (required for `password` grant).")
    password: Optional[SecretStr] = Field(default=None, description="User's password (required for `password` grant).")
    refresh_token: Optional[StrictStr] = Field(default=None, description="Refresh token (required for `refresh_token` grant).")
    client_id: StrictStr = Field(description="The application's client ID.")
    client_secret: StrictStr = Field(description="The application's client secret.")
    scope: Optional[StrictStr] = Field(default=None, description="(Optional) A space-separated list of requested scopes. The granted scopes may differ.")
    __properties: ClassVar[List[str]] = ["grant_type", "username", "password", "refresh_token", "client_id", "client_secret", "scope"]

    @field_validator('grant_type')
    def grant_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['password', 'client_credentials', 'refresh_token']):
            raise ValueError("must be one of enum values ('password', 'client_credentials', 'refresh_token')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if refresh_token (nullable) is None
        # and model_fields_set contains the field
        if self.refresh_token is None and "refresh_token" in self.model_fields_set:
            _dict['refresh_token'] = None

        # set to None if scope (nullable) is None
        # and model_fields_set contains the field
        if self.scope is None and "scope" in self.model_fields_set:
            _dict['scope'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "grant_type": obj.get("grant_type"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "refresh_token": obj.get("refresh_token"),
            "client_id": obj.get("client_id"),
            "client_secret": obj.get("client_secret"),
            "scope": obj.get("scope")
        })
        return _obj


