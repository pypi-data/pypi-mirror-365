# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ringer-ringer-business-python.models.address_registered import AddressRegistered
from ringer-ringer-business-python.models.sign_up_components_schemas_link import SignUpComponentsSchemasLink
from typing import Optional, Set
from typing_extensions import Self

class CustomerRegistrationResponse(BaseModel):
    """
    Details of the newly created customer account, including a confirmation token.
    """ # noqa: E501
    id: StrictInt = Field(description="Unique identifier for the newly created account.")
    name: StrictStr = Field(description="The name of the registered company.")
    active: StrictBool = Field(description="Indicates if the account is active. Typically false until confirmed.")
    locale: Optional[StrictStr] = Field(default=None, description="The locale preference for the account (e.g., \"en\" for English).")
    international_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if international services are enabled for this account.")
    balance_preference_in_dollars: Optional[StrictStr] = Field(default=None, description="Preferred account balance threshold (in dollars).")
    recharge_preference_in_dollars: Optional[StrictStr] = Field(default=None, description="Preferred auto-recharge amount (in dollars).")
    address: AddressRegistered
    confirmation_token: StrictStr = Field(description="A unique token required to confirm and activate the account.")
    links: Optional[List[SignUpComponentsSchemasLink]] = Field(default=None, description="HATEOAS links related to the new account.")
    __properties: ClassVar[List[str]] = ["id", "name", "active", "locale", "international_enabled", "balance_preference_in_dollars", "recharge_preference_in_dollars", "address", "confirmation_token", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerRegistrationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerRegistrationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "active": obj.get("active"),
            "locale": obj.get("locale"),
            "international_enabled": obj.get("international_enabled"),
            "balance_preference_in_dollars": obj.get("balance_preference_in_dollars"),
            "recharge_preference_in_dollars": obj.get("recharge_preference_in_dollars"),
            "address": AddressRegistered.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "confirmation_token": obj.get("confirmation_token"),
            "links": [SignUpComponentsSchemasLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


