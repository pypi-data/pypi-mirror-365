# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ScheduleUpdateRequestDataAttributes(BaseModel):
    """
    ScheduleUpdateRequestDataAttributes
    """ # noqa: E501
    name: Optional[StrictStr] = None
    time_zone: Optional[StrictStr] = None
    start_hour: Optional[StrictStr] = None
    start_minute: Optional[StrictStr] = None
    end_hour: Optional[StrictStr] = None
    end_minute: Optional[StrictStr] = None
    start_weekday: Optional[StrictStr] = None
    end_weekday: Optional[StrictStr] = None
    exceptions: Optional[StrictStr] = None
    positive_destination_code: Optional[StrictStr] = None
    negative_destination_code: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["name", "time_zone", "start_hour", "start_minute", "end_hour", "end_minute", "start_weekday", "end_weekday", "exceptions", "positive_destination_code", "negative_destination_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleUpdateRequestDataAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['time_zone'] = None

        # set to None if start_hour (nullable) is None
        # and model_fields_set contains the field
        if self.start_hour is None and "start_hour" in self.model_fields_set:
            _dict['start_hour'] = None

        # set to None if start_minute (nullable) is None
        # and model_fields_set contains the field
        if self.start_minute is None and "start_minute" in self.model_fields_set:
            _dict['start_minute'] = None

        # set to None if end_hour (nullable) is None
        # and model_fields_set contains the field
        if self.end_hour is None and "end_hour" in self.model_fields_set:
            _dict['end_hour'] = None

        # set to None if end_minute (nullable) is None
        # and model_fields_set contains the field
        if self.end_minute is None and "end_minute" in self.model_fields_set:
            _dict['end_minute'] = None

        # set to None if start_weekday (nullable) is None
        # and model_fields_set contains the field
        if self.start_weekday is None and "start_weekday" in self.model_fields_set:
            _dict['start_weekday'] = None

        # set to None if end_weekday (nullable) is None
        # and model_fields_set contains the field
        if self.end_weekday is None and "end_weekday" in self.model_fields_set:
            _dict['end_weekday'] = None

        # set to None if exceptions (nullable) is None
        # and model_fields_set contains the field
        if self.exceptions is None and "exceptions" in self.model_fields_set:
            _dict['exceptions'] = None

        # set to None if positive_destination_code (nullable) is None
        # and model_fields_set contains the field
        if self.positive_destination_code is None and "positive_destination_code" in self.model_fields_set:
            _dict['positive_destination_code'] = None

        # set to None if negative_destination_code (nullable) is None
        # and model_fields_set contains the field
        if self.negative_destination_code is None and "negative_destination_code" in self.model_fields_set:
            _dict['negative_destination_code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleUpdateRequestDataAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "time_zone": obj.get("time_zone"),
            "start_hour": obj.get("start_hour"),
            "start_minute": obj.get("start_minute"),
            "end_hour": obj.get("end_hour"),
            "end_minute": obj.get("end_minute"),
            "start_weekday": obj.get("start_weekday"),
            "end_weekday": obj.get("end_weekday"),
            "exceptions": obj.get("exceptions"),
            "positive_destination_code": obj.get("positive_destination_code"),
            "negative_destination_code": obj.get("negative_destination_code")
        })
        return _obj


