# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ringer-ringer-business-python.models.link import Link
from typing import Optional, Set
from typing_extensions import Self

class LocationResponse(BaseModel):
    """
    Detailed information about a site location.
    """ # noqa: E501
    name: StrictStr = Field(description="A user-friendly name for this location (e.g., \"Main Building\", \"Floor 2 Office\").")
    house_number: StrictStr = Field(description="The street number of the address.")
    house_number_suffix: Optional[StrictStr] = Field(default=None, description="Suffix for the street number, if any (e.g., \"A\", \"1/2\").")
    street: StrictStr = Field(description="The street name.")
    city: StrictStr = Field(description="The city name.")
    state_province: StrictStr = Field(description="The state or province code (e.g., \"CO\", \"ON\").")
    postal_code: StrictStr = Field(description="The postal or ZIP code.")
    country_code: StrictStr = Field(description="Two-letter ISO 3166-1 alpha-2 country code.")
    caller_id_name: Optional[StrictStr] = Field(default=None, description="Caller ID name to be used for E911 calls originating from this location.")
    e911_enabled: Optional[StrictBool] = Field(default=True, description="Indicates if E911 service is enabled for this location. Geocoding and validation occur upon setting this.")
    id: StrictInt = Field(description="Unique identifier for the location record.")
    site_id: StrictInt = Field(description="Identifier of the site this location belongs to.")
    e911_id: Optional[StrictInt] = Field(default=None, description="Identifier of the associated E911 record/validation, if e911_enabled is true.")
    updated_by: Optional[StrictStr] = Field(default=None, description="Identifier of the user who last updated this location.")
    latitude: Optional[StrictStr] = None
    longitude: Optional[StrictStr] = None
    links: Optional[List[Link]] = Field(default=None, description="HATEOAS links related to this location.")
    __properties: ClassVar[List[str]] = ["name", "house_number", "house_number_suffix", "street", "city", "state_province", "postal_code", "country_code", "caller_id_name", "e911_enabled", "id", "site_id", "e911_id", "updated_by", "latitude", "longitude", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "updated_by",
            "latitude",
            "longitude",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # set to None if house_number_suffix (nullable) is None
        # and model_fields_set contains the field
        if self.house_number_suffix is None and "house_number_suffix" in self.model_fields_set:
            _dict['house_number_suffix'] = None

        # set to None if caller_id_name (nullable) is None
        # and model_fields_set contains the field
        if self.caller_id_name is None and "caller_id_name" in self.model_fields_set:
            _dict['caller_id_name'] = None

        # set to None if e911_id (nullable) is None
        # and model_fields_set contains the field
        if self.e911_id is None and "e911_id" in self.model_fields_set:
            _dict['e911_id'] = None

        # set to None if updated_by (nullable) is None
        # and model_fields_set contains the field
        if self.updated_by is None and "updated_by" in self.model_fields_set:
            _dict['updated_by'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "house_number": obj.get("house_number"),
            "house_number_suffix": obj.get("house_number_suffix"),
            "street": obj.get("street"),
            "city": obj.get("city"),
            "state_province": obj.get("state_province"),
            "postal_code": obj.get("postal_code"),
            "country_code": obj.get("country_code"),
            "caller_id_name": obj.get("caller_id_name"),
            "e911_enabled": obj.get("e911_enabled") if obj.get("e911_enabled") is not None else True,
            "id": obj.get("id"),
            "site_id": obj.get("site_id"),
            "e911_id": obj.get("e911_id"),
            "updated_by": obj.get("updated_by"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "links": [Link.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


