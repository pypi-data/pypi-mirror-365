# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ringer-ringer-business-python.models.extension_core_destination import ExtensionCoreDestination
from ringer-ringer-business-python.models.index_components_schemas_link import IndexComponentsSchemasLink
from typing import Optional, Set
from typing_extensions import Self

class ExtensionResponse(BaseModel):
    """
    Detailed information about a site extension.
    """ # noqa: E501
    number: StrictStr = Field(description="Extension number (e.g., \"1001\", \"*123\"). Typically 2-12 digits.")
    name: StrictStr = Field(description="A user-friendly name for the extension (e.g., \"Sales Hotline\", \"John Doe\").")
    destination: ExtensionCoreDestination
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the extension.")
    site: Optional[StrictStr] = Field(default=None, description="Identifier of the site this extension belongs to.")
    user_id: Optional[StrictInt] = Field(default=None, description="Optional user ID associated with this extension.")
    code: Optional[StrictStr] = Field(default=None, description="The code of the response")
    links: Optional[List[IndexComponentsSchemasLink]] = None
    __properties: ClassVar[List[str]] = ["number", "name", "destination", "id", "site", "user_id", "code", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtensionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "site",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # set to None if site (nullable) is None
        # and model_fields_set contains the field
        if self.site is None and "site" in self.model_fields_set:
            _dict['site'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtensionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "number": obj.get("number"),
            "name": obj.get("name"),
            "destination": ExtensionCoreDestination.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "id": obj.get("id"),
            "site": obj.get("site"),
            "user_id": obj.get("user_id"),
            "code": obj.get("code"),
            "links": [IndexComponentsSchemasLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


