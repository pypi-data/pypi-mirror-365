# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ringer-ringer-business-python.models.link import Link
from ringer-ringer-business-python.models.schemas_site_destination import SchemasSiteDestination
from typing import Optional, Set
from typing_extensions import Self

class AvailableForward(BaseModel):
    """
    AvailableForward
    """ # noqa: E501
    name: StrictStr = Field(description="A user-friendly name for the forward configuration.")
    destination_dial_string: StrictStr = Field(description="The external phone number (E.164 format recommended) to which calls will be forwarded.")
    timeout: StrictInt = Field(description="How long (in seconds) the forward will be attempted before failing over or disconnecting.")
    fail_over: SchemasSiteDestination
    inactive_destination: Optional[SchemasSiteDestination] = None
    active: Optional[StrictBool] = Field(default=True, description="Whether this call forward rule is currently active.")
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the forward.")
    site: Optional[StrictStr] = Field(default=None, description="Identifier of the site this forward belongs to.")
    user_id: Optional[StrictInt] = Field(default=None, description="Optional. Identifier of the user primarily associated with this forward.")
    links: Optional[List[Link]] = None
    assigned: StrictBool = Field(description="Whether the forward is currently assigned (e.g., to the user specified in query).")
    assigned_to: Optional[StrictInt] = Field(default=None, description="ID of the user this forward is assigned to in this context, if any.")
    __properties: ClassVar[List[str]] = ["name", "destination_dial_string", "timeout", "fail_over", "inactive_destination", "active", "id", "site", "user_id", "links", "assigned", "assigned_to"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AvailableForward from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fail_over
        if self.fail_over:
            _dict['fail_over'] = self.fail_over.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inactive_destination
        if self.inactive_destination:
            _dict['inactive_destination'] = self.inactive_destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        # set to None if assigned_to (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_to is None and "assigned_to" in self.model_fields_set:
            _dict['assigned_to'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AvailableForward from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "destination_dial_string": obj.get("destination_dial_string"),
            "timeout": obj.get("timeout") if obj.get("timeout") is not None else 20,
            "fail_over": SchemasSiteDestination.from_dict(obj["fail_over"]) if obj.get("fail_over") is not None else None,
            "inactive_destination": SchemasSiteDestination.from_dict(obj["inactive_destination"]) if obj.get("inactive_destination") is not None else None,
            "active": obj.get("active") if obj.get("active") is not None else True,
            "id": obj.get("id"),
            "site": obj.get("site"),
            "user_id": obj.get("user_id"),
            "links": [Link.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "assigned": obj.get("assigned"),
            "assigned_to": obj.get("assigned_to")
        })
        return _obj


