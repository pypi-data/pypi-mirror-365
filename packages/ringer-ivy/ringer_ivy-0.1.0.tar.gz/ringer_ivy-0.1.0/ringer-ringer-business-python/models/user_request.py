# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ringer-ringer-business-python.models.user_feature_request_features import UserFeatureRequestFeatures
from typing import Optional, Set
from typing_extensions import Self

class UserRequest(BaseModel):
    """
    Information needed to create a new user.
    """ # noqa: E501
    first_name: StrictStr = Field(description="The user's first name.")
    last_name: StrictStr = Field(description="The user's last name.")
    email: StrictStr = Field(description="The user's unique email address, used for login and notifications.")
    role: StrictStr = Field(description="The role assigned to the user within the account (e.g., administrator, user).")
    active: StrictBool = Field(description="Indicates whether the user's account is active and can be used to log in.")
    locale: StrictStr = Field(description="The user's preferred language and regional settings (e.g., \"en-US\").")
    features: Optional[UserFeatureRequestFeatures] = None
    site_id: Optional[StrictInt] = Field(default=None, description="The identifier of the site to which this user belongs. If not specified, the user is created without a site association.")
    template_id: Optional[StrictInt] = Field(default=None, description="Optional identifier of a template to apply to this user. If not specified, the user is created without a template.")
    __properties: ClassVar[List[str]] = ["first_name", "last_name", "email", "role", "active", "locale", "features", "site_id", "template_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of features
        if self.features:
            _dict['features'] = self.features.to_dict()
        # set to None if site_id (nullable) is None
        # and model_fields_set contains the field
        if self.site_id is None and "site_id" in self.model_fields_set:
            _dict['site_id'] = None

        # set to None if template_id (nullable) is None
        # and model_fields_set contains the field
        if self.template_id is None and "template_id" in self.model_fields_set:
            _dict['template_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "role": obj.get("role"),
            "active": obj.get("active"),
            "locale": obj.get("locale"),
            "features": UserFeatureRequestFeatures.from_dict(obj["features"]) if obj.get("features") is not None else None,
            "site_id": obj.get("site_id"),
            "template_id": obj.get("template_id")
        })
        return _obj


