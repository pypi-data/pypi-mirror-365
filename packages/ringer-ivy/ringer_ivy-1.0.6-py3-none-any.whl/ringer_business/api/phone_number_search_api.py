# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites, phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.6
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from ringer_business.models.search_phone_numbers200_response import SearchPhoneNumbers200Response

from ringer_business.api_client import ApiClient, RequestSerialized
from ringer_business.api_response import ApiResponse
from ringer_business.rest import RESTResponseType


class PhoneNumberSearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def search_phone_numbers(
        self,
        search_category: Annotated[StrictStr, Field(description="Type of number international or US domestic number. Values - international | domestic")],
        country: Annotated[StrictStr, Field(description="The 3 digit country code. The alphanumeric country code for Australia is AUS. Required when you need a international number")],
        state_prov: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the 2 charcter state code for example city => IL. Please note this paramter is required only when searching US domestic numbers. Required if search category `domestic`.")] = None,
        city: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the city name for example city => Chicago")] = None,
        area_code: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the area code of the number you are looking for example 312")] = None,
        npanxx: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the npanxx of the number you are looking for example 312523. Also please keeo in mind the state_prov parameter is required for this search.")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the zip code you are looking for example 60601. Also please keep in mind the state_prov parameter is required for this search.")] = None,
        q: Annotated[Optional[StrictStr], Field(description="The country_code and city or area code")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchPhoneNumbers200Response:
        """Search Phone Numbers

        Searches for available phone numbers based on the provided criteria. This endpoint allows filtering by area code, country, and number type. 

        :param search_category: Type of number international or US domestic number. Values - international | domestic (required)
        :type search_category: str
        :param country: The 3 digit country code. The alphanumeric country code for Australia is AUS. Required when you need a international number (required)
        :type country: str
        :param state_prov: If you are looking for a US domestic number you can pass the 2 charcter state code for example city => IL. Please note this paramter is required only when searching US domestic numbers. Required if search category `domestic`.
        :type state_prov: str
        :param city: If you are looking for a US domestic number you can pass the city name for example city => Chicago
        :type city: str
        :param area_code: If you are looking for a US domestic number you can pass the area code of the number you are looking for example 312
        :type area_code: str
        :param npanxx: If you are looking for a US domestic number you can pass the npanxx of the number you are looking for example 312523. Also please keeo in mind the state_prov parameter is required for this search.
        :type npanxx: str
        :param zip: If you are looking for a US domestic number you can pass the zip code you are looking for example 60601. Also please keep in mind the state_prov parameter is required for this search.
        :type zip: str
        :param q: The country_code and city or area code
        :type q: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_phone_numbers_serialize(
            search_category=search_category,
            country=country,
            state_prov=state_prov,
            city=city,
            area_code=area_code,
            npanxx=npanxx,
            zip=zip,
            q=q,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchPhoneNumbers200Response",
            '400': "PhoneNumbersComponentsError",
            '401': "Error",
            '403': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_phone_numbers_with_http_info(
        self,
        search_category: Annotated[StrictStr, Field(description="Type of number international or US domestic number. Values - international | domestic")],
        country: Annotated[StrictStr, Field(description="The 3 digit country code. The alphanumeric country code for Australia is AUS. Required when you need a international number")],
        state_prov: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the 2 charcter state code for example city => IL. Please note this paramter is required only when searching US domestic numbers. Required if search category `domestic`.")] = None,
        city: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the city name for example city => Chicago")] = None,
        area_code: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the area code of the number you are looking for example 312")] = None,
        npanxx: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the npanxx of the number you are looking for example 312523. Also please keeo in mind the state_prov parameter is required for this search.")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the zip code you are looking for example 60601. Also please keep in mind the state_prov parameter is required for this search.")] = None,
        q: Annotated[Optional[StrictStr], Field(description="The country_code and city or area code")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchPhoneNumbers200Response]:
        """Search Phone Numbers

        Searches for available phone numbers based on the provided criteria. This endpoint allows filtering by area code, country, and number type. 

        :param search_category: Type of number international or US domestic number. Values - international | domestic (required)
        :type search_category: str
        :param country: The 3 digit country code. The alphanumeric country code for Australia is AUS. Required when you need a international number (required)
        :type country: str
        :param state_prov: If you are looking for a US domestic number you can pass the 2 charcter state code for example city => IL. Please note this paramter is required only when searching US domestic numbers. Required if search category `domestic`.
        :type state_prov: str
        :param city: If you are looking for a US domestic number you can pass the city name for example city => Chicago
        :type city: str
        :param area_code: If you are looking for a US domestic number you can pass the area code of the number you are looking for example 312
        :type area_code: str
        :param npanxx: If you are looking for a US domestic number you can pass the npanxx of the number you are looking for example 312523. Also please keeo in mind the state_prov parameter is required for this search.
        :type npanxx: str
        :param zip: If you are looking for a US domestic number you can pass the zip code you are looking for example 60601. Also please keep in mind the state_prov parameter is required for this search.
        :type zip: str
        :param q: The country_code and city or area code
        :type q: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_phone_numbers_serialize(
            search_category=search_category,
            country=country,
            state_prov=state_prov,
            city=city,
            area_code=area_code,
            npanxx=npanxx,
            zip=zip,
            q=q,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchPhoneNumbers200Response",
            '400': "PhoneNumbersComponentsError",
            '401': "Error",
            '403': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_phone_numbers_without_preload_content(
        self,
        search_category: Annotated[StrictStr, Field(description="Type of number international or US domestic number. Values - international | domestic")],
        country: Annotated[StrictStr, Field(description="The 3 digit country code. The alphanumeric country code for Australia is AUS. Required when you need a international number")],
        state_prov: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the 2 charcter state code for example city => IL. Please note this paramter is required only when searching US domestic numbers. Required if search category `domestic`.")] = None,
        city: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the city name for example city => Chicago")] = None,
        area_code: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the area code of the number you are looking for example 312")] = None,
        npanxx: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the npanxx of the number you are looking for example 312523. Also please keeo in mind the state_prov parameter is required for this search.")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="If you are looking for a US domestic number you can pass the zip code you are looking for example 60601. Also please keep in mind the state_prov parameter is required for this search.")] = None,
        q: Annotated[Optional[StrictStr], Field(description="The country_code and city or area code")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Phone Numbers

        Searches for available phone numbers based on the provided criteria. This endpoint allows filtering by area code, country, and number type. 

        :param search_category: Type of number international or US domestic number. Values - international | domestic (required)
        :type search_category: str
        :param country: The 3 digit country code. The alphanumeric country code for Australia is AUS. Required when you need a international number (required)
        :type country: str
        :param state_prov: If you are looking for a US domestic number you can pass the 2 charcter state code for example city => IL. Please note this paramter is required only when searching US domestic numbers. Required if search category `domestic`.
        :type state_prov: str
        :param city: If you are looking for a US domestic number you can pass the city name for example city => Chicago
        :type city: str
        :param area_code: If you are looking for a US domestic number you can pass the area code of the number you are looking for example 312
        :type area_code: str
        :param npanxx: If you are looking for a US domestic number you can pass the npanxx of the number you are looking for example 312523. Also please keeo in mind the state_prov parameter is required for this search.
        :type npanxx: str
        :param zip: If you are looking for a US domestic number you can pass the zip code you are looking for example 60601. Also please keep in mind the state_prov parameter is required for this search.
        :type zip: str
        :param q: The country_code and city or area code
        :type q: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_phone_numbers_serialize(
            search_category=search_category,
            country=country,
            state_prov=state_prov,
            city=city,
            area_code=area_code,
            npanxx=npanxx,
            zip=zip,
            q=q,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchPhoneNumbers200Response",
            '400': "PhoneNumbersComponentsError",
            '401': "Error",
            '403': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_phone_numbers_serialize(
        self,
        search_category,
        country,
        state_prov,
        city,
        area_code,
        npanxx,
        zip,
        q,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if search_category is not None:
            
            _query_params.append(('search_category', search_category))
            
        if country is not None:
            
            _query_params.append(('country', country))
            
        if state_prov is not None:
            
            _query_params.append(('state_prov', state_prov))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if area_code is not None:
            
            _query_params.append(('area_code', area_code))
            
        if npanxx is not None:
            
            _query_params.append(('npanxx', npanxx))
            
        if zip is not None:
            
            _query_params.append(('zip', zip))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'oAuth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/phone-numbers/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


