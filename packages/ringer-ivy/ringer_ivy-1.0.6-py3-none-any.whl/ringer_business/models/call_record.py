# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites,  phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.5
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ringer_business.models.call_record_item_summary import CallRecordItemSummary
from ringer_business.models.schemas_link import SchemasLink
from typing import Optional, Set
from typing_extensions import Self

class CallRecord(BaseModel):
    """
    Represents a Call Detail Record (CDR).
    """ # noqa: E501
    id: StrictInt
    item_type: StrictStr
    item_rules: Optional[StrictStr] = None
    item_options: Optional[Dict[str, Any]] = None
    item_summary: CallRecordItemSummary
    humanized_item_name: Optional[StrictStr]
    customer_balance_adjustment: Optional[StrictStr] = None
    links: Optional[List[SchemasLink]] = None
    __properties: ClassVar[List[str]] = ["id", "item_type", "item_rules", "item_options", "item_summary", "humanized_item_name", "customer_balance_adjustment", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CallRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of item_summary
        if self.item_summary:
            _dict['item_summary'] = self.item_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # set to None if item_rules (nullable) is None
        # and model_fields_set contains the field
        if self.item_rules is None and "item_rules" in self.model_fields_set:
            _dict['item_rules'] = None

        # set to None if item_options (nullable) is None
        # and model_fields_set contains the field
        if self.item_options is None and "item_options" in self.model_fields_set:
            _dict['item_options'] = None

        # set to None if humanized_item_name (nullable) is None
        # and model_fields_set contains the field
        if self.humanized_item_name is None and "humanized_item_name" in self.model_fields_set:
            _dict['humanized_item_name'] = None

        # set to None if customer_balance_adjustment (nullable) is None
        # and model_fields_set contains the field
        if self.customer_balance_adjustment is None and "customer_balance_adjustment" in self.model_fields_set:
            _dict['customer_balance_adjustment'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CallRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "item_type": obj.get("item_type"),
            "item_rules": obj.get("item_rules"),
            "item_options": obj.get("item_options"),
            "item_summary": CallRecordItemSummary.from_dict(obj["item_summary"]) if obj.get("item_summary") is not None else None,
            "humanized_item_name": obj.get("humanized_item_name"),
            "customer_balance_adjustment": obj.get("customer_balance_adjustment"),
            "links": [SchemasLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


