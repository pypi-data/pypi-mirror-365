# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites,  phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.5
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from ringer_business.models.pagination_links import PaginationLinks
from ringer_business.models.schedule_response_data import ScheduleResponseData
from typing import Optional, Set
from typing_extensions import Self

class PaginatedScheduleListResponse(BaseModel):
    """
    A paginated list of schedules.
    """ # noqa: E501
    schedules: List[ScheduleResponseData]
    total_items: StrictInt
    total_pages: StrictInt
    current_page: StrictInt
    per_page: StrictInt
    links: Optional[PaginationLinks] = None
    __properties: ClassVar[List[str]] = ["schedules", "total_items", "total_pages", "current_page", "per_page", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaginatedScheduleListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in schedules (list)
        _items = []
        if self.schedules:
            for _item_schedules in self.schedules:
                if _item_schedules:
                    _items.append(_item_schedules.to_dict())
            _dict['schedules'] = _items
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaginatedScheduleListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schedules": [ScheduleResponseData.from_dict(_item) for _item in obj["schedules"]] if obj.get("schedules") is not None else None,
            "total_items": obj.get("total_items"),
            "total_pages": obj.get("total_pages"),
            "current_page": obj.get("current_page"),
            "per_page": obj.get("per_page"),
            "links": PaginationLinks.from_dict(obj["links"]) if obj.get("links") is not None else None
        })
        return _obj


