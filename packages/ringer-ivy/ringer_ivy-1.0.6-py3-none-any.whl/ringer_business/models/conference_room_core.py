# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites,  phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.5
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConferenceRoomCore(BaseModel):
    """
    ConferenceRoomCore
    """ # noqa: E501
    name: StrictStr = Field(description="A user-friendly name for the conference room.")
    pin: Optional[StrictStr] = Field(description="Numeric PIN required for participants to join the conference.")
    moderator_pin: Optional[StrictStr] = Field(description="Numeric PIN required for the moderator to join and control the conference.")
    profile: Optional[StrictStr] = Field(default=None, description="Conference profile or type (e.g., default, enhanced audio). Specific values depend on system configuration.")
    user_id: Optional[StrictInt] = Field(default=None, description="Identifier of the user primarily associated with this conference room, if any.")
    __properties: ClassVar[List[str]] = ["name", "pin", "moderator_pin", "profile", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConferenceRoomCore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if pin (nullable) is None
        # and model_fields_set contains the field
        if self.pin is None and "pin" in self.model_fields_set:
            _dict['pin'] = None

        # set to None if moderator_pin (nullable) is None
        # and model_fields_set contains the field
        if self.moderator_pin is None and "moderator_pin" in self.model_fields_set:
            _dict['moderator_pin'] = None

        # set to None if profile (nullable) is None
        # and model_fields_set contains the field
        if self.profile is None and "profile" in self.model_fields_set:
            _dict['profile'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConferenceRoomCore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "pin": obj.get("pin"),
            "moderator_pin": obj.get("moderator_pin"),
            "profile": obj.get("profile"),
            "user_id": obj.get("user_id")
        })
        return _obj


