# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites,  phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.5
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ringer_business.models.schemas_link import SchemasLink
from typing import Optional, Set
from typing_extensions import Self

class ItemResponse(BaseModel):
    """
    Detailed information about a billable item or feature.
    """ # noqa: E501
    id: StrictInt = Field(description="Unique identifier for the item.")
    name: StrictStr = Field(description="The human-readable name of the item or feature.")
    item_type: StrictStr = Field(description="The general category or type of the item (e.g., cdr, service_fee, feature_license).")
    item_rules: Optional[StrictStr] = Field(default=None, description="Specific rules or sub-classification for the item type that might affect rating or behavior.")
    item_price: StrictStr = Field(description="The price of this individual item (e.g., per unit, per month).")
    currency: StrictStr = Field(description="Three-letter ISO currency code for the item price.")
    price_deck_id: Optional[StrictInt] = Field(default=None, description="Identifier of the price deck this item pricing might belong to.")
    tax_category: Optional[StrictInt] = Field(default=None, description="Identifier for the tax category applicable to this item.")
    tax_code: Optional[StrictInt] = Field(default=None, description="Specific tax code applicable to this item.")
    links: Optional[List[SchemasLink]] = Field(default=None, description="HATEOAS links related to this item.")
    __properties: ClassVar[List[str]] = ["id", "name", "item_type", "item_rules", "item_price", "currency", "price_deck_id", "tax_category", "tax_code", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # set to None if item_rules (nullable) is None
        # and model_fields_set contains the field
        if self.item_rules is None and "item_rules" in self.model_fields_set:
            _dict['item_rules'] = None

        # set to None if price_deck_id (nullable) is None
        # and model_fields_set contains the field
        if self.price_deck_id is None and "price_deck_id" in self.model_fields_set:
            _dict['price_deck_id'] = None

        # set to None if tax_category (nullable) is None
        # and model_fields_set contains the field
        if self.tax_category is None and "tax_category" in self.model_fields_set:
            _dict['tax_category'] = None

        # set to None if tax_code (nullable) is None
        # and model_fields_set contains the field
        if self.tax_code is None and "tax_code" in self.model_fields_set:
            _dict['tax_code'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "item_type": obj.get("item_type"),
            "item_rules": obj.get("item_rules"),
            "item_price": obj.get("item_price"),
            "currency": obj.get("currency") if obj.get("currency") is not None else 'USD',
            "price_deck_id": obj.get("price_deck_id"),
            "tax_category": obj.get("tax_category"),
            "tax_code": obj.get("tax_code"),
            "links": [SchemasLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


