# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites,  phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.5
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ringer_business.models.link import Link
from ringer_business.models.phone_number_response_all_of_destination import PhoneNumberResponseAllOfDestination
from ringer_business.models.phone_number_response_all_of_fail_over_destination import PhoneNumberResponseAllOfFailOverDestination
from typing import Optional, Set
from typing_extensions import Self

class PhoneNumberResponse(BaseModel):
    """
    PhoneNumberResponse
    """ # noqa: E501
    id: StrictInt = Field(description="Unique identifier for the phone number record/assignment.")
    name: StrictStr = Field(description="A user-friendly name or label for the phone number (e.g., \"Main Line\", \"Sales Dept\").")
    number: StrictStr = Field(description="The actual phone number in E.164 format (e.g., +13035551212).")
    site_id: StrictInt = Field(description="Identifier of the site this phone number is assigned to.")
    destination_code: Optional[StrictStr] = Field(description="System code for the destination where calls to this number are routed (e.g., \"device:dev_xyz\", \"menu:ivr_main\").")
    destination: Optional[PhoneNumberResponseAllOfDestination] = None
    fail_over_destination: Optional[PhoneNumberResponseAllOfFailOverDestination] = None
    links: Optional[Dict[str, Link]] = Field(default=None, description="An object containing various HATEOAS links, where each key is the link relation type.")
    __properties: ClassVar[List[str]] = ["id", "name", "number", "site_id", "destination_code", "destination", "fail_over_destination", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhoneNumberResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fail_over_destination
        if self.fail_over_destination:
            _dict['fail_over_destination'] = self.fail_over_destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['links'] = _field_dict
        # set to None if destination_code (nullable) is None
        # and model_fields_set contains the field
        if self.destination_code is None and "destination_code" in self.model_fields_set:
            _dict['destination_code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhoneNumberResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "number": obj.get("number"),
            "site_id": obj.get("site_id"),
            "destination_code": obj.get("destination_code"),
            "destination": PhoneNumberResponseAllOfDestination.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "fail_over_destination": PhoneNumberResponseAllOfFailOverDestination.from_dict(obj["fail_over_destination"]) if obj.get("fail_over_destination") is not None else None,
            "links": dict(
                (_k, Link.from_dict(_v))
                for _k, _v in obj["links"].items()
            )
            if obj.get("links") is not None
            else None
        })
        return _obj


