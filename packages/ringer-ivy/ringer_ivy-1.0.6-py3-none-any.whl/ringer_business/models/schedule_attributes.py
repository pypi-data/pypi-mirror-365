# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites,  phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.5
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ScheduleAttributes(BaseModel):
    """
    ScheduleAttributes
    """ # noqa: E501
    name: StrictStr = Field(description="A user-friendly name for the schedule.")
    time_zone: StrictStr = Field(description="IANA Timezone Database name (e.g., America/New_York).")
    start_hour: StrictStr = Field(description="Start hour (00-23) for the schedule active period.")
    start_minute: StrictStr = Field(description="Start minute (00-59).")
    end_hour: StrictStr = Field(description="End hour (00-23).")
    end_minute: StrictStr = Field(description="End minute (00-59).")
    start_weekday: StrictStr = Field(description="Weekday when the schedule active period starts.")
    end_weekday: StrictStr = Field(description="Weekday when the schedule active period ends.")
    exceptions: Optional[StrictStr] = Field(default=None, description="Space-separated list of dates (MM/DD format) when this schedule is inactive.")
    positive_destination_code: StrictStr = Field(description="System code for the destination if the current time falls within the schedule.")
    negative_destination_code: StrictStr = Field(description="System code for the destination if the current time falls outside the schedule.")
    __properties: ClassVar[List[str]] = ["name", "time_zone", "start_hour", "start_minute", "end_hour", "end_minute", "start_weekday", "end_weekday", "exceptions", "positive_destination_code", "negative_destination_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if exceptions (nullable) is None
        # and model_fields_set contains the field
        if self.exceptions is None and "exceptions" in self.model_fields_set:
            _dict['exceptions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "time_zone": obj.get("time_zone"),
            "start_hour": obj.get("start_hour"),
            "start_minute": obj.get("start_minute"),
            "end_hour": obj.get("end_hour"),
            "end_minute": obj.get("end_minute"),
            "start_weekday": obj.get("start_weekday"),
            "end_weekday": obj.get("end_weekday"),
            "exceptions": obj.get("exceptions"),
            "positive_destination_code": obj.get("positive_destination_code"),
            "negative_destination_code": obj.get("negative_destination_code")
        })
        return _obj


