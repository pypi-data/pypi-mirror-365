# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites,  phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.5
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SiteUpdateRequest(BaseModel):
    """
    Data for updating an existing site. Provide only fields to be changed.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A user-friendly name for the site.")
    dns_extension: Optional[StrictStr] = Field(default=None, description="The DNS extension for the site.")
    active: Optional[StrictBool] = Field(default=None, description="Indicates if the site is active.")
    caller_id_name: Optional[StrictStr] = Field(default=None, description="Default Caller ID name for outbound calls.")
    caller_id_number: Optional[StrictStr] = Field(default=None, description="Default Caller ID number for outbound calls.")
    thin_client_id: Optional[StrictInt] = Field(default=None, description="Identifier of the thin client.")
    acl: Optional[StrictStr] = Field(default=None, description="Access Control List.")
    channel_limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]] = Field(default=None, description="Maximum number of concurrent call channels.")
    permitted_country_codes: Optional[List[StrictStr]] = Field(default=None, description="List of permitted outbound country codes.")
    music_on_hold_url: Optional[StrictStr] = Field(default=None, description="URL to the music on hold audio file.")
    __properties: ClassVar[List[str]] = ["name", "dns_extension", "active", "caller_id_name", "caller_id_number", "thin_client_id", "acl", "channel_limit", "permitted_country_codes", "music_on_hold_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SiteUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if music_on_hold_url (nullable) is None
        # and model_fields_set contains the field
        if self.music_on_hold_url is None and "music_on_hold_url" in self.model_fields_set:
            _dict['music_on_hold_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SiteUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "dns_extension": obj.get("dns_extension"),
            "active": obj.get("active"),
            "caller_id_name": obj.get("caller_id_name"),
            "caller_id_number": obj.get("caller_id_number"),
            "thin_client_id": obj.get("thin_client_id"),
            "acl": obj.get("acl"),
            "channel_limit": obj.get("channel_limit"),
            "permitted_country_codes": obj.get("permitted_country_codes"),
            "music_on_hold_url": obj.get("music_on_hold_url")
        })
        return _obj


