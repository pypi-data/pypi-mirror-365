# coding: utf-8

"""
    Ringer Business API

    This API provides comprehensive endpoints for the Ringer Business system. It includes functionality for managing customer accounts, addresses, sites,  phone numbers, payments, users, and other business resources.  Operations typically require authentication and appropriate permissions. 

    The version of the OpenAPI document: 1.0.5
    Contact: support@ringer.tel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ringer_business.models.schemas_link import SchemasLink
from typing import Optional, Set
from typing_extensions import Self

class AddressResponse(BaseModel):
    """
    Detailed information about an address record, including its unique ID.
    """ # noqa: E501
    email: StrictStr = Field(description="Contact email address associated with this address record.")
    street_address: StrictStr = Field(description="Full street address, including building number, street name, and suite/apartment if applicable.")
    country: StrictStr = Field(description="Two-letter ISO 3166-1 alpha-2 country code (e.g., US, GB, CA).")
    city: StrictStr = Field(description="City name.")
    state_province: Optional[StrictStr] = Field(default=None, description="State, province, or region, as applicable for the country.")
    postal_code: StrictStr = Field(description="Postal or ZIP code.")
    contact_number: StrictStr = Field(description="A contact phone number associated with this address, preferably in E.164 format.")
    id: StrictInt = Field(description="Unique identifier for the address record.")
    links: Optional[List[SchemasLink]] = Field(default=None, description="HATEOAS links related to this address.")
    __properties: ClassVar[List[str]] = ["email", "street_address", "country", "city", "state_province", "postal_code", "contact_number", "id", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddressResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddressResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "street_address": obj.get("street_address"),
            "country": obj.get("country"),
            "city": obj.get("city"),
            "state_province": obj.get("state_province"),
            "postal_code": obj.get("postal_code"),
            "contact_number": obj.get("contact_number"),
            "id": obj.get("id"),
            "links": [SchemasLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


