"""
API key generation utilities for langchain-deepai package.

This module provides utilities for generating test API keys that match
the exact format and structure used by DeepAI's tryit functionality.
"""

import random
import math
import hashlib
import urllib.parse


def generate_test_key() -> str:
    """
    Generate a test API key using the exact same algorithm as DeepAI's makeTryItKey function.
    
    This function replicates the JavaScript makeTryItKey() function that generates
    keys in the format: tryit-{random_number}-{complex_hash}
    
    The implementation includes:
    - Random number generation (0-100000000000)
    - Reversed MD5 hash function
    - Triple-nested hashing with user agent simulation
    - Security by obscurity pattern matching the original
    
    Returns:
        str: A test API key in the format: tryit-{random_number}-{hash}
        
    Example:
        >>> from langchain_deepai.keys import generate_test_key
        >>> test_key = generate_test_key()
        >>> print(test_key)
        tryit-12345678901-a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0
    """
    # Generate random string (0 to 100000000000) like the JavaScript version
    myrandomstr = str(round(random.random() * 100000000000))
    
    # Simulate a user agent for the hash calculation
    simulated_user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
    
    # MD5 hash function implementation (reversed like in JavaScript)
    def myhashfunction(input_str):
        # Standard MD5 hash
        md5_hash = hashlib.md5(input_str.encode('utf-8')).hexdigest()
        # Reverse the hash string like in the JavaScript version
        return md5_hash[::-1]
    
    # Triple-nested hashing like the JavaScript version
    # myhashfunction(navigator.userAgent + myhashfunction(navigator.userAgent + myhashfunction(navigator.userAgent + myrandomstr+'hackers_become_a_little_stinkier_every_time_they_hack')))
    
    # First hash: userAgent + randomstr + secret string
    first_input = simulated_user_agent + myrandomstr + 'hackers_become_a_little_stinkier_every_time_they_hack'
    first_hash = myhashfunction(first_input)
    
    # Second hash: userAgent + first_hash
    second_input = simulated_user_agent + first_hash
    second_hash = myhashfunction(second_input)
    
    # Third hash: userAgent + second_hash
    third_input = simulated_user_agent + second_hash
    final_hash = myhashfunction(third_input)
    
    # Construct the tryit API key in the exact format
    tryit_api_key = f'tryit-{myrandomstr}-{final_hash}'
    
    return tryit_api_key


def generate_multiple_test_keys(count: int = 5) -> list[str]:
    """
    Generate multiple test API keys at once.
    
    Args:
        count (int, optional): Number of keys to generate. Defaults to 5.
        
    Returns:
        list[str]: List of test API keys in tryit format.
        
    Example:
        >>> from langchain_deepai.keys import generate_multiple_test_keys
        >>> test_keys = generate_multiple_test_keys(count=3)
        >>> for key in test_keys:
        ...     print(key)
        tryit-12345678901-a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0
        tryit-98765432109-z9y8x7w6v5u4t3s2r1q0p9o8n7m6l5k4j3i2h1g0
        tryit-55555555555-m5n6o7p8q9r0s1t2u3v4w5x6y7z8a9b0c1d2e3f4
    """
    return [generate_test_key() for _ in range(count)]


def is_test_key(api_key: str) -> bool:
    """
    Check if an API key appears to be a test key generated by this module.
    
    Args:
        api_key (str): The API key to check.
        
    Returns:
        bool: True if the key appears to be a test key, False otherwise.
        
    Example:
        >>> from langchain_deepai.keys import generate_test_key, is_test_key
        >>> test_key = generate_test_key()
        >>> print(is_test_key(test_key))
        True
        >>> print(is_test_key("real-api-key-from-deepai"))
        False
    """
    if not api_key or not isinstance(api_key, str):
        return False
    
    # Check if it starts with tryit- prefix
    return api_key.startswith("tryit-")


def validate_test_key_format(api_key: str) -> bool:
    """
    Validate that a test key follows the correct tryit format.
    
    Args:
        api_key (str): The API key to validate.
        
    Returns:
        bool: True if the key follows the tryit-{number}-{hash} format.
        
    Example:
        >>> from langchain_deepai.keys import validate_test_key_format
        >>> print(validate_test_key_format("tryit-12345678901-abcdef123456"))
        True
        >>> print(validate_test_key_format("invalid-key-format"))
        False
    """
    if not api_key or not isinstance(api_key, str):
        return False
    
    parts = api_key.split('-')
    if len(parts) != 3:
        return False
    
    prefix, random_num, hash_part = parts
    
    # Check prefix
    if prefix != "tryit":
        return False
    
    # Check if random part is numeric
    try:
        int(random_num)
    except ValueError:
        return False
    
    # Check if hash part is hexadecimal and reasonable length
    try:
        int(hash_part, 16)
        return len(hash_part) == 32  # MD5 hash length
    except ValueError:
        return False


# Convenience functions for quick access
def quick_test_key() -> str:
    """
    Quick function to generate a test API key.
    
    Returns:
        str: A test API key ready for use.
    """
    return generate_test_key()


def mock_deepai_key() -> str:
    """
    Generate a mock DeepAI API key for testing.
    
    Returns:
        str: A mock API key that matches DeepAI's tryit format.
    """
    return generate_test_key()


# Example usage and testing
if __name__ == "__main__":
    print("ğŸ”‘ LangChain-DeepAI Test Key Generator")
    print("=" * 40)
    
    # Generate test key
    print("\n1. Generate Test Key:")
    test_key = generate_test_key()
    print(f"   {test_key}")
    
    # Generate multiple keys
    print("\n2. Multiple Test Keys:")
    multiple_keys = generate_multiple_test_keys(count=3)
    for i, key in enumerate(multiple_keys, 1):
        print(f"   {i}. {key}")
    
    # Test key validation
    print("\n3. Key Validation:")
    print(f"   Is '{test_key}' a test key? {is_test_key(test_key)}")
    print(f"   Is 'real-api-key' a test key? {is_test_key('real-api-key')}")
    print(f"   Is '{test_key}' valid format? {validate_test_key_format(test_key)}")
    
    # Show key structure
    print("\n4. Key Structure Analysis:")
    parts = test_key.split('-')
    if len(parts) == 3:
        print(f"   Prefix: {parts[0]}")
        print(f"   Random Number: {parts[1]}")
        print(f"   Hash: {parts[2]}")
        print(f"   Total Length: {len(test_key)}")
    
    print("\nâœ… Test key generation complete!")
    print(f"\nğŸ“‹ Usage:")
    print(f"   from langchain_deepai.keys import generate_test_key")
    print(f"   test_key = generate_test_key()")
    print(f"   # Key format: tryit-{{random_number}}-{{md5_hash}}")
