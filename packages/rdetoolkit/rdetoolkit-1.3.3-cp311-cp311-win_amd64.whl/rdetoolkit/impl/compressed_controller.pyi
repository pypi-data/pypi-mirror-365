import pandas as pd
from _typeshed import Incomplete as Incomplete
from pathlib import Path
from rdetoolkit.interfaces.filechecker import IArtifactPackageCompressor as IArtifactPackageCompressor, ICompressedFileStructParser as ICompressedFileStructParser

logger: Incomplete

class CompressedFlatFileParser(ICompressedFileStructParser):
    xlsx_invoice: Incomplete
    def __init__(self, xlsx_invoice: pd.DataFrame) -> None: ...
    def read(self, zipfile: Path, target_path: Path) -> list[tuple[Path, ...]]: ...

class CompressedFolderParser(ICompressedFileStructParser):
    xlsx_invoice: Incomplete
    def __init__(self, xlsx_invoice: pd.DataFrame) -> None: ...
    def read(self, zipfile: Path, target_path: Path) -> list[tuple[Path, ...]]: ...
    def validation_uniq_fspath(self, target_path: str | Path, exclude_names: list[str]) -> dict[str, list[Path]]: ...

def parse_compressedfile_mode(xlsx_invoice: pd.DataFrame) -> ICompressedFileStructParser: ...

class ZipArtifactPackageCompressor(IArtifactPackageCompressor):
    source_dir: Incomplete
    exclude_patterns: Incomplete
    def __init__(self, source_dir: str | Path, exclude_patterns: list[str]) -> None: ...
    def archive(self, output_zip: str | Path) -> list[Path]: ...

class TarGzArtifactPackageCompressor(IArtifactPackageCompressor):
    source_dir: Incomplete
    exclude_patterns: Incomplete
    def __init__(self, source_dir: str | Path, exclude_patterns: list[str]) -> None: ...
    def archive(self, output_tar: str | Path) -> list[Path]: ...

def get_artifact_archiver(fmt: str, source_dir: str | Path, exclude_patterns: list[str]) -> IArtifactPackageCompressor: ...
