[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "aws-bedrock-token-generator"
version = "1.1.0"
description = "A lightweight library for generating short-term bearer tokens for AWS Bedrock API authentication"
readme = {file = "README.md", content-type = "text/markdown"}
license = {text = "Apache-2.0"}
authors = [
    {name = "Amazon Web Services"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.7"
dependencies = [
    "botocore>=1.33.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.800",
]

[project.urls]
Homepage = "https://github.com/aws/aws-bedrock-token-generator-python"
Repository = "https://github.com/aws/aws-bedrock-token-generator-python"
Documentation = "https://github.com/aws/aws-bedrock-token-generator-python#readme"
Issues = "https://github.com/aws/aws-bedrock-token-generator-python/issues"

[tool.setuptools.packages.find]
include = ["aws_bedrock_token_generator*"]

[tool.black]
line-length = 100
target-version = ['py37']

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.7"
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.coverage.run]
source = ["aws_bedrock_token_generator"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
