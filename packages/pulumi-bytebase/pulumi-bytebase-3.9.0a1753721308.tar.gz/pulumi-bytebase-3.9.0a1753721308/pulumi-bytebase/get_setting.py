# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSettingResult',
    'AwaitableGetSettingResult',
    'get_setting',
    'get_setting_output',
]

@pulumi.output_type
class GetSettingResult:
    """
    A collection of values returned by getSetting.
    """
    def __init__(__self__, approval_flows=None, classification=None, environment_settings=None, id=None, name=None, password_restriction=None, semantic_types=None, sql_query_restriction=None, workspace_profile=None):
        if approval_flows and not isinstance(approval_flows, list):
            raise TypeError("Expected argument 'approval_flows' to be a list")
        pulumi.set(__self__, "approval_flows", approval_flows)
        if classification and not isinstance(classification, dict):
            raise TypeError("Expected argument 'classification' to be a dict")
        pulumi.set(__self__, "classification", classification)
        if environment_settings and not isinstance(environment_settings, list):
            raise TypeError("Expected argument 'environment_settings' to be a list")
        pulumi.set(__self__, "environment_settings", environment_settings)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password_restriction and not isinstance(password_restriction, dict):
            raise TypeError("Expected argument 'password_restriction' to be a dict")
        pulumi.set(__self__, "password_restriction", password_restriction)
        if semantic_types and not isinstance(semantic_types, list):
            raise TypeError("Expected argument 'semantic_types' to be a list")
        pulumi.set(__self__, "semantic_types", semantic_types)
        if sql_query_restriction and not isinstance(sql_query_restriction, dict):
            raise TypeError("Expected argument 'sql_query_restriction' to be a dict")
        pulumi.set(__self__, "sql_query_restriction", sql_query_restriction)
        if workspace_profile and not isinstance(workspace_profile, dict):
            raise TypeError("Expected argument 'workspace_profile' to be a dict")
        pulumi.set(__self__, "workspace_profile", workspace_profile)

    @property
    @pulumi.getter(name="approvalFlows")
    def approval_flows(self) -> Sequence['outputs.GetSettingApprovalFlowResult']:
        """
        Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
        """
        return pulumi.get(self, "approval_flows")

    @property
    @pulumi.getter
    def classification(self) -> 'outputs.GetSettingClassificationResult':
        """
        Classification for data masking. Require ENTERPRISE subscription.
        """
        return pulumi.get(self, "classification")

    @property
    @pulumi.getter(name="environmentSettings")
    def environment_settings(self) -> Sequence['outputs.GetSettingEnvironmentSettingResult']:
        """
        The environment
        """
        return pulumi.get(self, "environment_settings")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwordRestriction")
    def password_restriction(self) -> 'outputs.GetSettingPasswordRestrictionResult':
        """
        Restrict for login password
        """
        return pulumi.get(self, "password_restriction")

    @property
    @pulumi.getter(name="semanticTypes")
    def semantic_types(self) -> Sequence['outputs.GetSettingSemanticTypeResult']:
        """
        Semantic types for data masking. Require ENTERPRISE subscription.
        """
        return pulumi.get(self, "semantic_types")

    @property
    @pulumi.getter(name="sqlQueryRestriction")
    def sql_query_restriction(self) -> 'outputs.GetSettingSqlQueryRestrictionResult':
        """
        Restrict for SQL query result
        """
        return pulumi.get(self, "sql_query_restriction")

    @property
    @pulumi.getter(name="workspaceProfile")
    def workspace_profile(self) -> 'outputs.GetSettingWorkspaceProfileResult':
        return pulumi.get(self, "workspace_profile")


class AwaitableGetSettingResult(GetSettingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSettingResult(
            approval_flows=self.approval_flows,
            classification=self.classification,
            environment_settings=self.environment_settings,
            id=self.id,
            name=self.name,
            password_restriction=self.password_restriction,
            semantic_types=self.semantic_types,
            sql_query_restriction=self.sql_query_restriction,
            workspace_profile=self.workspace_profile)


def get_setting(approval_flows: Optional[Sequence[Union['GetSettingApprovalFlowArgs', 'GetSettingApprovalFlowArgsDict']]] = None,
                classification: Optional[Union['GetSettingClassificationArgs', 'GetSettingClassificationArgsDict']] = None,
                environment_settings: Optional[Sequence[Union['GetSettingEnvironmentSettingArgs', 'GetSettingEnvironmentSettingArgsDict']]] = None,
                name: Optional[builtins.str] = None,
                password_restriction: Optional[Union['GetSettingPasswordRestrictionArgs', 'GetSettingPasswordRestrictionArgsDict']] = None,
                semantic_types: Optional[Sequence[Union['GetSettingSemanticTypeArgs', 'GetSettingSemanticTypeArgsDict']]] = None,
                sql_query_restriction: Optional[Union['GetSettingSqlQueryRestrictionArgs', 'GetSettingSqlQueryRestrictionArgsDict']] = None,
                workspace_profile: Optional[Union['GetSettingWorkspaceProfileArgs', 'GetSettingWorkspaceProfileArgsDict']] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSettingResult:
    """
    The setting data source.


    :param Sequence[Union['GetSettingApprovalFlowArgs', 'GetSettingApprovalFlowArgsDict']] approval_flows: Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
    :param Union['GetSettingClassificationArgs', 'GetSettingClassificationArgsDict'] classification: Classification for data masking. Require ENTERPRISE subscription.
    :param Sequence[Union['GetSettingEnvironmentSettingArgs', 'GetSettingEnvironmentSettingArgsDict']] environment_settings: The environment
    :param builtins.str name: The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
    :param Union['GetSettingPasswordRestrictionArgs', 'GetSettingPasswordRestrictionArgsDict'] password_restriction: Restrict for login password
    :param Sequence[Union['GetSettingSemanticTypeArgs', 'GetSettingSemanticTypeArgsDict']] semantic_types: Semantic types for data masking. Require ENTERPRISE subscription.
    :param Union['GetSettingSqlQueryRestrictionArgs', 'GetSettingSqlQueryRestrictionArgsDict'] sql_query_restriction: Restrict for SQL query result
    """
    __args__ = dict()
    __args__['approvalFlows'] = approval_flows
    __args__['classification'] = classification
    __args__['environmentSettings'] = environment_settings
    __args__['name'] = name
    __args__['passwordRestriction'] = password_restriction
    __args__['semanticTypes'] = semantic_types
    __args__['sqlQueryRestriction'] = sql_query_restriction
    __args__['workspaceProfile'] = workspace_profile
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:index/getSetting:getSetting', __args__, opts=opts, typ=GetSettingResult).value

    return AwaitableGetSettingResult(
        approval_flows=pulumi.get(__ret__, 'approval_flows'),
        classification=pulumi.get(__ret__, 'classification'),
        environment_settings=pulumi.get(__ret__, 'environment_settings'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        password_restriction=pulumi.get(__ret__, 'password_restriction'),
        semantic_types=pulumi.get(__ret__, 'semantic_types'),
        sql_query_restriction=pulumi.get(__ret__, 'sql_query_restriction'),
        workspace_profile=pulumi.get(__ret__, 'workspace_profile'))
def get_setting_output(approval_flows: Optional[pulumi.Input[Optional[Sequence[Union['GetSettingApprovalFlowArgs', 'GetSettingApprovalFlowArgsDict']]]]] = None,
                       classification: Optional[pulumi.Input[Optional[Union['GetSettingClassificationArgs', 'GetSettingClassificationArgsDict']]]] = None,
                       environment_settings: Optional[pulumi.Input[Optional[Sequence[Union['GetSettingEnvironmentSettingArgs', 'GetSettingEnvironmentSettingArgsDict']]]]] = None,
                       name: Optional[pulumi.Input[builtins.str]] = None,
                       password_restriction: Optional[pulumi.Input[Optional[Union['GetSettingPasswordRestrictionArgs', 'GetSettingPasswordRestrictionArgsDict']]]] = None,
                       semantic_types: Optional[pulumi.Input[Optional[Sequence[Union['GetSettingSemanticTypeArgs', 'GetSettingSemanticTypeArgsDict']]]]] = None,
                       sql_query_restriction: Optional[pulumi.Input[Optional[Union['GetSettingSqlQueryRestrictionArgs', 'GetSettingSqlQueryRestrictionArgsDict']]]] = None,
                       workspace_profile: Optional[pulumi.Input[Optional[Union['GetSettingWorkspaceProfileArgs', 'GetSettingWorkspaceProfileArgsDict']]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSettingResult]:
    """
    The setting data source.


    :param Sequence[Union['GetSettingApprovalFlowArgs', 'GetSettingApprovalFlowArgsDict']] approval_flows: Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
    :param Union['GetSettingClassificationArgs', 'GetSettingClassificationArgsDict'] classification: Classification for data masking. Require ENTERPRISE subscription.
    :param Sequence[Union['GetSettingEnvironmentSettingArgs', 'GetSettingEnvironmentSettingArgsDict']] environment_settings: The environment
    :param builtins.str name: The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
    :param Union['GetSettingPasswordRestrictionArgs', 'GetSettingPasswordRestrictionArgsDict'] password_restriction: Restrict for login password
    :param Sequence[Union['GetSettingSemanticTypeArgs', 'GetSettingSemanticTypeArgsDict']] semantic_types: Semantic types for data masking. Require ENTERPRISE subscription.
    :param Union['GetSettingSqlQueryRestrictionArgs', 'GetSettingSqlQueryRestrictionArgsDict'] sql_query_restriction: Restrict for SQL query result
    """
    __args__ = dict()
    __args__['approvalFlows'] = approval_flows
    __args__['classification'] = classification
    __args__['environmentSettings'] = environment_settings
    __args__['name'] = name
    __args__['passwordRestriction'] = password_restriction
    __args__['semanticTypes'] = semantic_types
    __args__['sqlQueryRestriction'] = sql_query_restriction
    __args__['workspaceProfile'] = workspace_profile
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:index/getSetting:getSetting', __args__, opts=opts, typ=GetSettingResult)
    return __ret__.apply(lambda __response__: GetSettingResult(
        approval_flows=pulumi.get(__response__, 'approval_flows'),
        classification=pulumi.get(__response__, 'classification'),
        environment_settings=pulumi.get(__response__, 'environment_settings'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        password_restriction=pulumi.get(__response__, 'password_restriction'),
        semantic_types=pulumi.get(__response__, 'semantic_types'),
        sql_query_restriction=pulumi.get(__response__, 'sql_query_restriction'),
        workspace_profile=pulumi.get(__response__, 'workspace_profile')))
