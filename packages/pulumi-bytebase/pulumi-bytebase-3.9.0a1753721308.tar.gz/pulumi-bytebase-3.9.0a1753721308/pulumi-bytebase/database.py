# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DatabaseArgs', 'Database']

@pulumi.input_type
class DatabaseArgs:
    def __init__(__self__, *,
                 project: pulumi.Input[builtins.str],
                 catalog: Optional[pulumi.Input['DatabaseCatalogArgs']] = None,
                 environment: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Database resource.
        :param pulumi.Input[builtins.str] project: The project full name for the database in projects/{project} format.
        :param pulumi.Input['DatabaseCatalogArgs'] catalog: The databases catalog.
        :param pulumi.Input[builtins.str] environment: The database environment, will follow the instance environment by default
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: The deployment and policy control labels.
        :param pulumi.Input[builtins.str] name: The database full name in instances/{instance}/databases/{database} format
        """
        pulumi.set(__self__, "project", project)
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[builtins.str]:
        """
        The project full name for the database in projects/{project} format.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input['DatabaseCatalogArgs']]:
        """
        The databases catalog.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input['DatabaseCatalogArgs']]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The database environment, will follow the instance environment by default
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The deployment and policy control labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The database full name in instances/{instance}/databases/{database} format
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DatabaseState:
    def __init__(__self__, *,
                 catalog: Optional[pulumi.Input['DatabaseCatalogArgs']] = None,
                 environment: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 project: Optional[pulumi.Input[builtins.str]] = None,
                 schema_version: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 successful_sync_time: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Database resources.
        :param pulumi.Input['DatabaseCatalogArgs'] catalog: The databases catalog.
        :param pulumi.Input[builtins.str] environment: The database environment, will follow the instance environment by default
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: The deployment and policy control labels.
        :param pulumi.Input[builtins.str] name: The database full name in instances/{instance}/databases/{database} format
        :param pulumi.Input[builtins.str] project: The project full name for the database in projects/{project} format.
        :param pulumi.Input[builtins.str] schema_version: The version of database schema.
        :param pulumi.Input[builtins.str] state: The existence of a database.
        :param pulumi.Input[builtins.str] successful_sync_time: The latest synchronization time.
        """
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if schema_version is not None:
            pulumi.set(__self__, "schema_version", schema_version)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if successful_sync_time is not None:
            pulumi.set(__self__, "successful_sync_time", successful_sync_time)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input['DatabaseCatalogArgs']]:
        """
        The databases catalog.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input['DatabaseCatalogArgs']]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The database environment, will follow the instance environment by default
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The deployment and policy control labels.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The database full name in instances/{instance}/databases/{database} format
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The project full name for the database in projects/{project} format.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The version of database schema.
        """
        return pulumi.get(self, "schema_version")

    @schema_version.setter
    def schema_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "schema_version", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The existence of a database.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="successfulSyncTime")
    def successful_sync_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The latest synchronization time.
        """
        return pulumi.get(self, "successful_sync_time")

    @successful_sync_time.setter
    def successful_sync_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "successful_sync_time", value)


@pulumi.type_token("bytebase:index/database:Database")
class Database(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog: Optional[pulumi.Input[Union['DatabaseCatalogArgs', 'DatabaseCatalogArgsDict']]] = None,
                 environment: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 project: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        The database resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DatabaseCatalogArgs', 'DatabaseCatalogArgsDict']] catalog: The databases catalog.
        :param pulumi.Input[builtins.str] environment: The database environment, will follow the instance environment by default
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: The deployment and policy control labels.
        :param pulumi.Input[builtins.str] name: The database full name in instances/{instance}/databases/{database} format
        :param pulumi.Input[builtins.str] project: The project full name for the database in projects/{project} format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The database resource.

        :param str resource_name: The name of the resource.
        :param DatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog: Optional[pulumi.Input[Union['DatabaseCatalogArgs', 'DatabaseCatalogArgsDict']]] = None,
                 environment: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 project: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabaseArgs.__new__(DatabaseArgs)

            __props__.__dict__["catalog"] = catalog
            __props__.__dict__["environment"] = environment
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["schema_version"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["successful_sync_time"] = None
        super(Database, __self__).__init__(
            'bytebase:index/database:Database',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            catalog: Optional[pulumi.Input[Union['DatabaseCatalogArgs', 'DatabaseCatalogArgsDict']]] = None,
            environment: Optional[pulumi.Input[builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            project: Optional[pulumi.Input[builtins.str]] = None,
            schema_version: Optional[pulumi.Input[builtins.str]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            successful_sync_time: Optional[pulumi.Input[builtins.str]] = None) -> 'Database':
        """
        Get an existing Database resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DatabaseCatalogArgs', 'DatabaseCatalogArgsDict']] catalog: The databases catalog.
        :param pulumi.Input[builtins.str] environment: The database environment, will follow the instance environment by default
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: The deployment and policy control labels.
        :param pulumi.Input[builtins.str] name: The database full name in instances/{instance}/databases/{database} format
        :param pulumi.Input[builtins.str] project: The project full name for the database in projects/{project} format.
        :param pulumi.Input[builtins.str] schema_version: The version of database schema.
        :param pulumi.Input[builtins.str] state: The existence of a database.
        :param pulumi.Input[builtins.str] successful_sync_time: The latest synchronization time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatabaseState.__new__(_DatabaseState)

        __props__.__dict__["catalog"] = catalog
        __props__.__dict__["environment"] = environment
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["schema_version"] = schema_version
        __props__.__dict__["state"] = state
        __props__.__dict__["successful_sync_time"] = successful_sync_time
        return Database(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Output['outputs.DatabaseCatalog']:
        """
        The databases catalog.
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[builtins.str]:
        """
        The database environment, will follow the instance environment by default
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        """
        The deployment and policy control labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The database full name in instances/{instance}/databases/{database} format
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[builtins.str]:
        """
        The project full name for the database in projects/{project} format.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> pulumi.Output[builtins.str]:
        """
        The version of database schema.
        """
        return pulumi.get(self, "schema_version")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        The existence of a database.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="successfulSyncTime")
    def successful_sync_time(self) -> pulumi.Output[builtins.str]:
        """
        The latest synchronization time.
        """
        return pulumi.get(self, "successful_sync_time")

