# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDatabaseResult',
    'AwaitableGetDatabaseResult',
    'get_database',
    'get_database_output',
]

@pulumi.output_type
class GetDatabaseResult:
    """
    A collection of values returned by getDatabase.
    """
    def __init__(__self__, catalogs=None, environment=None, id=None, labels=None, name=None, project=None, schema_version=None, state=None, successful_sync_time=None):
        if catalogs and not isinstance(catalogs, list):
            raise TypeError("Expected argument 'catalogs' to be a list")
        pulumi.set(__self__, "catalogs", catalogs)
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if schema_version and not isinstance(schema_version, str):
            raise TypeError("Expected argument 'schema_version' to be a str")
        pulumi.set(__self__, "schema_version", schema_version)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if successful_sync_time and not isinstance(successful_sync_time, str):
            raise TypeError("Expected argument 'successful_sync_time' to be a str")
        pulumi.set(__self__, "successful_sync_time", successful_sync_time)

    @property
    @pulumi.getter
    def catalogs(self) -> Sequence['outputs.GetDatabaseCatalogResult']:
        """
        The databases catalog.
        """
        return pulumi.get(self, "catalogs")

    @property
    @pulumi.getter
    def environment(self) -> builtins.str:
        """
        The database environment, will follow the instance environment by default
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, builtins.str]:
        """
        The deployment and policy control labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The database full name in instances/{instance}/databases/{database} format
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> builtins.str:
        """
        The project full name for the database in projects/{project} format.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> builtins.str:
        """
        The version of database schema.
        """
        return pulumi.get(self, "schema_version")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The existence of a database.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="successfulSyncTime")
    def successful_sync_time(self) -> builtins.str:
        """
        The latest synchronization time.
        """
        return pulumi.get(self, "successful_sync_time")


class AwaitableGetDatabaseResult(GetDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseResult(
            catalogs=self.catalogs,
            environment=self.environment,
            id=self.id,
            labels=self.labels,
            name=self.name,
            project=self.project,
            schema_version=self.schema_version,
            state=self.state,
            successful_sync_time=self.successful_sync_time)


def get_database(name: Optional[builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseResult:
    """
    The database data source.


    :param builtins.str name: The database full name in instances/{instance}/databases/{database} format
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:index/getDatabase:getDatabase', __args__, opts=opts, typ=GetDatabaseResult).value

    return AwaitableGetDatabaseResult(
        catalogs=pulumi.get(__ret__, 'catalogs'),
        environment=pulumi.get(__ret__, 'environment'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        project=pulumi.get(__ret__, 'project'),
        schema_version=pulumi.get(__ret__, 'schema_version'),
        state=pulumi.get(__ret__, 'state'),
        successful_sync_time=pulumi.get(__ret__, 'successful_sync_time'))
def get_database_output(name: Optional[pulumi.Input[builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabaseResult]:
    """
    The database data source.


    :param builtins.str name: The database full name in instances/{instance}/databases/{database} format
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:index/getDatabase:getDatabase', __args__, opts=opts, typ=GetDatabaseResult)
    return __ret__.apply(lambda __response__: GetDatabaseResult(
        catalogs=pulumi.get(__response__, 'catalogs'),
        environment=pulumi.get(__response__, 'environment'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        name=pulumi.get(__response__, 'name'),
        project=pulumi.get(__response__, 'project'),
        schema_version=pulumi.get(__response__, 'schema_version'),
        state=pulumi.get(__response__, 'state'),
        successful_sync_time=pulumi.get(__response__, 'successful_sync_time')))
