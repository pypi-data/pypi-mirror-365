# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingArgs', 'Setting']

@pulumi.input_type
class SettingArgs:
    def __init__(__self__, *,
                 approval_flows: Optional[pulumi.Input[Sequence[pulumi.Input['SettingApprovalFlowArgs']]]] = None,
                 classification: Optional[pulumi.Input['SettingClassificationArgs']] = None,
                 environment_settings: Optional[pulumi.Input[Sequence[pulumi.Input['SettingEnvironmentSettingArgs']]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 password_restriction: Optional[pulumi.Input['SettingPasswordRestrictionArgs']] = None,
                 semantic_types: Optional[pulumi.Input[Sequence[pulumi.Input['SettingSemanticTypeArgs']]]] = None,
                 sql_query_restriction: Optional[pulumi.Input['SettingSqlQueryRestrictionArgs']] = None,
                 workspace_profile: Optional[pulumi.Input['SettingWorkspaceProfileArgs']] = None):
        """
        The set of arguments for constructing a Setting resource.
        :param pulumi.Input[Sequence[pulumi.Input['SettingApprovalFlowArgs']]] approval_flows: Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
        :param pulumi.Input['SettingClassificationArgs'] classification: Classification for data masking. Require ENTERPRISE subscription.
        :param pulumi.Input[Sequence[pulumi.Input['SettingEnvironmentSettingArgs']]] environment_settings: The environment
        :param pulumi.Input[builtins.str] name: The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
        :param pulumi.Input['SettingPasswordRestrictionArgs'] password_restriction: Restrict for login password
        :param pulumi.Input[Sequence[pulumi.Input['SettingSemanticTypeArgs']]] semantic_types: Semantic types for data masking. Require ENTERPRISE subscription.
        :param pulumi.Input['SettingSqlQueryRestrictionArgs'] sql_query_restriction: Restrict for SQL query result
        """
        if approval_flows is not None:
            pulumi.set(__self__, "approval_flows", approval_flows)
        if classification is not None:
            pulumi.set(__self__, "classification", classification)
        if environment_settings is not None:
            pulumi.set(__self__, "environment_settings", environment_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password_restriction is not None:
            pulumi.set(__self__, "password_restriction", password_restriction)
        if semantic_types is not None:
            pulumi.set(__self__, "semantic_types", semantic_types)
        if sql_query_restriction is not None:
            pulumi.set(__self__, "sql_query_restriction", sql_query_restriction)
        if workspace_profile is not None:
            pulumi.set(__self__, "workspace_profile", workspace_profile)

    @property
    @pulumi.getter(name="approvalFlows")
    def approval_flows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingApprovalFlowArgs']]]]:
        """
        Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
        """
        return pulumi.get(self, "approval_flows")

    @approval_flows.setter
    def approval_flows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingApprovalFlowArgs']]]]):
        pulumi.set(self, "approval_flows", value)

    @property
    @pulumi.getter
    def classification(self) -> Optional[pulumi.Input['SettingClassificationArgs']]:
        """
        Classification for data masking. Require ENTERPRISE subscription.
        """
        return pulumi.get(self, "classification")

    @classification.setter
    def classification(self, value: Optional[pulumi.Input['SettingClassificationArgs']]):
        pulumi.set(self, "classification", value)

    @property
    @pulumi.getter(name="environmentSettings")
    def environment_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingEnvironmentSettingArgs']]]]:
        """
        The environment
        """
        return pulumi.get(self, "environment_settings")

    @environment_settings.setter
    def environment_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingEnvironmentSettingArgs']]]]):
        pulumi.set(self, "environment_settings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwordRestriction")
    def password_restriction(self) -> Optional[pulumi.Input['SettingPasswordRestrictionArgs']]:
        """
        Restrict for login password
        """
        return pulumi.get(self, "password_restriction")

    @password_restriction.setter
    def password_restriction(self, value: Optional[pulumi.Input['SettingPasswordRestrictionArgs']]):
        pulumi.set(self, "password_restriction", value)

    @property
    @pulumi.getter(name="semanticTypes")
    def semantic_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingSemanticTypeArgs']]]]:
        """
        Semantic types for data masking. Require ENTERPRISE subscription.
        """
        return pulumi.get(self, "semantic_types")

    @semantic_types.setter
    def semantic_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingSemanticTypeArgs']]]]):
        pulumi.set(self, "semantic_types", value)

    @property
    @pulumi.getter(name="sqlQueryRestriction")
    def sql_query_restriction(self) -> Optional[pulumi.Input['SettingSqlQueryRestrictionArgs']]:
        """
        Restrict for SQL query result
        """
        return pulumi.get(self, "sql_query_restriction")

    @sql_query_restriction.setter
    def sql_query_restriction(self, value: Optional[pulumi.Input['SettingSqlQueryRestrictionArgs']]):
        pulumi.set(self, "sql_query_restriction", value)

    @property
    @pulumi.getter(name="workspaceProfile")
    def workspace_profile(self) -> Optional[pulumi.Input['SettingWorkspaceProfileArgs']]:
        return pulumi.get(self, "workspace_profile")

    @workspace_profile.setter
    def workspace_profile(self, value: Optional[pulumi.Input['SettingWorkspaceProfileArgs']]):
        pulumi.set(self, "workspace_profile", value)


@pulumi.input_type
class _SettingState:
    def __init__(__self__, *,
                 approval_flows: Optional[pulumi.Input[Sequence[pulumi.Input['SettingApprovalFlowArgs']]]] = None,
                 classification: Optional[pulumi.Input['SettingClassificationArgs']] = None,
                 environment_settings: Optional[pulumi.Input[Sequence[pulumi.Input['SettingEnvironmentSettingArgs']]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 password_restriction: Optional[pulumi.Input['SettingPasswordRestrictionArgs']] = None,
                 semantic_types: Optional[pulumi.Input[Sequence[pulumi.Input['SettingSemanticTypeArgs']]]] = None,
                 sql_query_restriction: Optional[pulumi.Input['SettingSqlQueryRestrictionArgs']] = None,
                 workspace_profile: Optional[pulumi.Input['SettingWorkspaceProfileArgs']] = None):
        """
        Input properties used for looking up and filtering Setting resources.
        :param pulumi.Input[Sequence[pulumi.Input['SettingApprovalFlowArgs']]] approval_flows: Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
        :param pulumi.Input['SettingClassificationArgs'] classification: Classification for data masking. Require ENTERPRISE subscription.
        :param pulumi.Input[Sequence[pulumi.Input['SettingEnvironmentSettingArgs']]] environment_settings: The environment
        :param pulumi.Input[builtins.str] name: The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
        :param pulumi.Input['SettingPasswordRestrictionArgs'] password_restriction: Restrict for login password
        :param pulumi.Input[Sequence[pulumi.Input['SettingSemanticTypeArgs']]] semantic_types: Semantic types for data masking. Require ENTERPRISE subscription.
        :param pulumi.Input['SettingSqlQueryRestrictionArgs'] sql_query_restriction: Restrict for SQL query result
        """
        if approval_flows is not None:
            pulumi.set(__self__, "approval_flows", approval_flows)
        if classification is not None:
            pulumi.set(__self__, "classification", classification)
        if environment_settings is not None:
            pulumi.set(__self__, "environment_settings", environment_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password_restriction is not None:
            pulumi.set(__self__, "password_restriction", password_restriction)
        if semantic_types is not None:
            pulumi.set(__self__, "semantic_types", semantic_types)
        if sql_query_restriction is not None:
            pulumi.set(__self__, "sql_query_restriction", sql_query_restriction)
        if workspace_profile is not None:
            pulumi.set(__self__, "workspace_profile", workspace_profile)

    @property
    @pulumi.getter(name="approvalFlows")
    def approval_flows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingApprovalFlowArgs']]]]:
        """
        Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
        """
        return pulumi.get(self, "approval_flows")

    @approval_flows.setter
    def approval_flows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingApprovalFlowArgs']]]]):
        pulumi.set(self, "approval_flows", value)

    @property
    @pulumi.getter
    def classification(self) -> Optional[pulumi.Input['SettingClassificationArgs']]:
        """
        Classification for data masking. Require ENTERPRISE subscription.
        """
        return pulumi.get(self, "classification")

    @classification.setter
    def classification(self, value: Optional[pulumi.Input['SettingClassificationArgs']]):
        pulumi.set(self, "classification", value)

    @property
    @pulumi.getter(name="environmentSettings")
    def environment_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingEnvironmentSettingArgs']]]]:
        """
        The environment
        """
        return pulumi.get(self, "environment_settings")

    @environment_settings.setter
    def environment_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingEnvironmentSettingArgs']]]]):
        pulumi.set(self, "environment_settings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwordRestriction")
    def password_restriction(self) -> Optional[pulumi.Input['SettingPasswordRestrictionArgs']]:
        """
        Restrict for login password
        """
        return pulumi.get(self, "password_restriction")

    @password_restriction.setter
    def password_restriction(self, value: Optional[pulumi.Input['SettingPasswordRestrictionArgs']]):
        pulumi.set(self, "password_restriction", value)

    @property
    @pulumi.getter(name="semanticTypes")
    def semantic_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingSemanticTypeArgs']]]]:
        """
        Semantic types for data masking. Require ENTERPRISE subscription.
        """
        return pulumi.get(self, "semantic_types")

    @semantic_types.setter
    def semantic_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingSemanticTypeArgs']]]]):
        pulumi.set(self, "semantic_types", value)

    @property
    @pulumi.getter(name="sqlQueryRestriction")
    def sql_query_restriction(self) -> Optional[pulumi.Input['SettingSqlQueryRestrictionArgs']]:
        """
        Restrict for SQL query result
        """
        return pulumi.get(self, "sql_query_restriction")

    @sql_query_restriction.setter
    def sql_query_restriction(self, value: Optional[pulumi.Input['SettingSqlQueryRestrictionArgs']]):
        pulumi.set(self, "sql_query_restriction", value)

    @property
    @pulumi.getter(name="workspaceProfile")
    def workspace_profile(self) -> Optional[pulumi.Input['SettingWorkspaceProfileArgs']]:
        return pulumi.get(self, "workspace_profile")

    @workspace_profile.setter
    def workspace_profile(self, value: Optional[pulumi.Input['SettingWorkspaceProfileArgs']]):
        pulumi.set(self, "workspace_profile", value)


@pulumi.type_token("bytebase:index/setting:Setting")
class Setting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approval_flows: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingApprovalFlowArgs', 'SettingApprovalFlowArgsDict']]]]] = None,
                 classification: Optional[pulumi.Input[Union['SettingClassificationArgs', 'SettingClassificationArgsDict']]] = None,
                 environment_settings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingEnvironmentSettingArgs', 'SettingEnvironmentSettingArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 password_restriction: Optional[pulumi.Input[Union['SettingPasswordRestrictionArgs', 'SettingPasswordRestrictionArgsDict']]] = None,
                 semantic_types: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingSemanticTypeArgs', 'SettingSemanticTypeArgsDict']]]]] = None,
                 sql_query_restriction: Optional[pulumi.Input[Union['SettingSqlQueryRestrictionArgs', 'SettingSqlQueryRestrictionArgsDict']]] = None,
                 workspace_profile: Optional[pulumi.Input[Union['SettingWorkspaceProfileArgs', 'SettingWorkspaceProfileArgsDict']]] = None,
                 __props__=None):
        """
        The setting resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SettingApprovalFlowArgs', 'SettingApprovalFlowArgsDict']]]] approval_flows: Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
        :param pulumi.Input[Union['SettingClassificationArgs', 'SettingClassificationArgsDict']] classification: Classification for data masking. Require ENTERPRISE subscription.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SettingEnvironmentSettingArgs', 'SettingEnvironmentSettingArgsDict']]]] environment_settings: The environment
        :param pulumi.Input[builtins.str] name: The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
        :param pulumi.Input[Union['SettingPasswordRestrictionArgs', 'SettingPasswordRestrictionArgsDict']] password_restriction: Restrict for login password
        :param pulumi.Input[Sequence[pulumi.Input[Union['SettingSemanticTypeArgs', 'SettingSemanticTypeArgsDict']]]] semantic_types: Semantic types for data masking. Require ENTERPRISE subscription.
        :param pulumi.Input[Union['SettingSqlQueryRestrictionArgs', 'SettingSqlQueryRestrictionArgsDict']] sql_query_restriction: Restrict for SQL query result
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The setting resource.

        :param str resource_name: The name of the resource.
        :param SettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approval_flows: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingApprovalFlowArgs', 'SettingApprovalFlowArgsDict']]]]] = None,
                 classification: Optional[pulumi.Input[Union['SettingClassificationArgs', 'SettingClassificationArgsDict']]] = None,
                 environment_settings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingEnvironmentSettingArgs', 'SettingEnvironmentSettingArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 password_restriction: Optional[pulumi.Input[Union['SettingPasswordRestrictionArgs', 'SettingPasswordRestrictionArgsDict']]] = None,
                 semantic_types: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingSemanticTypeArgs', 'SettingSemanticTypeArgsDict']]]]] = None,
                 sql_query_restriction: Optional[pulumi.Input[Union['SettingSqlQueryRestrictionArgs', 'SettingSqlQueryRestrictionArgsDict']]] = None,
                 workspace_profile: Optional[pulumi.Input[Union['SettingWorkspaceProfileArgs', 'SettingWorkspaceProfileArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingArgs.__new__(SettingArgs)

            __props__.__dict__["approval_flows"] = approval_flows
            __props__.__dict__["classification"] = classification
            __props__.__dict__["environment_settings"] = environment_settings
            __props__.__dict__["name"] = name
            __props__.__dict__["password_restriction"] = password_restriction
            __props__.__dict__["semantic_types"] = semantic_types
            __props__.__dict__["sql_query_restriction"] = sql_query_restriction
            __props__.__dict__["workspace_profile"] = workspace_profile
        super(Setting, __self__).__init__(
            'bytebase:index/setting:Setting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            approval_flows: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingApprovalFlowArgs', 'SettingApprovalFlowArgsDict']]]]] = None,
            classification: Optional[pulumi.Input[Union['SettingClassificationArgs', 'SettingClassificationArgsDict']]] = None,
            environment_settings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingEnvironmentSettingArgs', 'SettingEnvironmentSettingArgsDict']]]]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            password_restriction: Optional[pulumi.Input[Union['SettingPasswordRestrictionArgs', 'SettingPasswordRestrictionArgsDict']]] = None,
            semantic_types: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SettingSemanticTypeArgs', 'SettingSemanticTypeArgsDict']]]]] = None,
            sql_query_restriction: Optional[pulumi.Input[Union['SettingSqlQueryRestrictionArgs', 'SettingSqlQueryRestrictionArgsDict']]] = None,
            workspace_profile: Optional[pulumi.Input[Union['SettingWorkspaceProfileArgs', 'SettingWorkspaceProfileArgsDict']]] = None) -> 'Setting':
        """
        Get an existing Setting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SettingApprovalFlowArgs', 'SettingApprovalFlowArgsDict']]]] approval_flows: Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
        :param pulumi.Input[Union['SettingClassificationArgs', 'SettingClassificationArgsDict']] classification: Classification for data masking. Require ENTERPRISE subscription.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SettingEnvironmentSettingArgs', 'SettingEnvironmentSettingArgsDict']]]] environment_settings: The environment
        :param pulumi.Input[builtins.str] name: The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
        :param pulumi.Input[Union['SettingPasswordRestrictionArgs', 'SettingPasswordRestrictionArgsDict']] password_restriction: Restrict for login password
        :param pulumi.Input[Sequence[pulumi.Input[Union['SettingSemanticTypeArgs', 'SettingSemanticTypeArgsDict']]]] semantic_types: Semantic types for data masking. Require ENTERPRISE subscription.
        :param pulumi.Input[Union['SettingSqlQueryRestrictionArgs', 'SettingSqlQueryRestrictionArgsDict']] sql_query_restriction: Restrict for SQL query result
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingState.__new__(_SettingState)

        __props__.__dict__["approval_flows"] = approval_flows
        __props__.__dict__["classification"] = classification
        __props__.__dict__["environment_settings"] = environment_settings
        __props__.__dict__["name"] = name
        __props__.__dict__["password_restriction"] = password_restriction
        __props__.__dict__["semantic_types"] = semantic_types
        __props__.__dict__["sql_query_restriction"] = sql_query_restriction
        __props__.__dict__["workspace_profile"] = workspace_profile
        return Setting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="approvalFlows")
    def approval_flows(self) -> pulumi.Output[Optional[Sequence['outputs.SettingApprovalFlow']]]:
        """
        Configure risk level and approval flow for different tasks. Require ENTERPRISE subscription.
        """
        return pulumi.get(self, "approval_flows")

    @property
    @pulumi.getter
    def classification(self) -> pulumi.Output[Optional['outputs.SettingClassification']]:
        """
        Classification for data masking. Require ENTERPRISE subscription.
        """
        return pulumi.get(self, "classification")

    @property
    @pulumi.getter(name="environmentSettings")
    def environment_settings(self) -> pulumi.Output[Optional[Sequence['outputs.SettingEnvironmentSetting']]]:
        """
        The environment
        """
        return pulumi.get(self, "environment_settings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The setting name in settings/{name} format. The name support "WORKSPACE*APPROVAL", "WORKSPACE*PROFILE", "DATA*CLASSIFICATION", "SEMANTIC*TYPES", "ENVIRONMENT", "PASSWORD*RESTRICTION", "SQL*RESULT*SIZE*LIMIT". Check the proto https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/setting_service.proto#L109 for details
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwordRestriction")
    def password_restriction(self) -> pulumi.Output[Optional['outputs.SettingPasswordRestriction']]:
        """
        Restrict for login password
        """
        return pulumi.get(self, "password_restriction")

    @property
    @pulumi.getter(name="semanticTypes")
    def semantic_types(self) -> pulumi.Output[Optional[Sequence['outputs.SettingSemanticType']]]:
        """
        Semantic types for data masking. Require ENTERPRISE subscription.
        """
        return pulumi.get(self, "semantic_types")

    @property
    @pulumi.getter(name="sqlQueryRestriction")
    def sql_query_restriction(self) -> pulumi.Output[Optional['outputs.SettingSqlQueryRestriction']]:
        """
        Restrict for SQL query result
        """
        return pulumi.get(self, "sql_query_restriction")

    @property
    @pulumi.getter(name="workspaceProfile")
    def workspace_profile(self) -> pulumi.Output[Optional['outputs.SettingWorkspaceProfile']]:
        return pulumi.get(self, "workspace_profile")

