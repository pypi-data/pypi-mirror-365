# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetListPolicyResult',
    'GetListPolicyGlobalMaskingPolicyResult',
    'GetListPolicyGlobalMaskingPolicyRuleResult',
    'GetListPolicyMaskingExceptionPolicyResult',
    'GetListPolicyMaskingExceptionPolicyExceptionResult',
]

@pulumi.output_type
class GetListPolicyResult(dict):
    def __init__(__self__, *,
                 enforce: builtins.bool,
                 global_masking_policy: 'outputs.GetListPolicyGlobalMaskingPolicyResult',
                 inherit_from_parent: builtins.bool,
                 masking_exception_policy: 'outputs.GetListPolicyMaskingExceptionPolicyResult',
                 name: builtins.str,
                 type: builtins.str):
        """
        :param builtins.bool enforce: Decide if the policy is enforced.
        :param builtins.bool inherit_from_parent: Decide if the policy should inherit from the parent.
        :param builtins.str name: The policy full name
        :param builtins.str type: The policy type.
        """
        pulumi.set(__self__, "enforce", enforce)
        pulumi.set(__self__, "global_masking_policy", global_masking_policy)
        pulumi.set(__self__, "inherit_from_parent", inherit_from_parent)
        pulumi.set(__self__, "masking_exception_policy", masking_exception_policy)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def enforce(self) -> builtins.bool:
        """
        Decide if the policy is enforced.
        """
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="globalMaskingPolicy")
    def global_masking_policy(self) -> 'outputs.GetListPolicyGlobalMaskingPolicyResult':
        return pulumi.get(self, "global_masking_policy")

    @property
    @pulumi.getter(name="inheritFromParent")
    def inherit_from_parent(self) -> builtins.bool:
        """
        Decide if the policy should inherit from the parent.
        """
        return pulumi.get(self, "inherit_from_parent")

    @property
    @pulumi.getter(name="maskingExceptionPolicy")
    def masking_exception_policy(self) -> 'outputs.GetListPolicyMaskingExceptionPolicyResult':
        return pulumi.get(self, "masking_exception_policy")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The policy full name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The policy type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetListPolicyGlobalMaskingPolicyResult(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.GetListPolicyGlobalMaskingPolicyRuleResult']):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetListPolicyGlobalMaskingPolicyRuleResult']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetListPolicyGlobalMaskingPolicyRuleResult(dict):
    def __init__(__self__, *,
                 condition: builtins.str,
                 id: builtins.str,
                 semantic_type: builtins.str,
                 title: Optional[builtins.str] = None):
        """
        :param builtins.str condition: The condition expression
        :param builtins.str id: The unique rule id
        :param builtins.str semantic_type: The semantic type id
        :param builtins.str title: The title for the rule
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "semantic_type", semantic_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def condition(self) -> builtins.str:
        """
        The condition expression
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique rule id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="semanticType")
    def semantic_type(self) -> builtins.str:
        """
        The semantic type id
        """
        return pulumi.get(self, "semantic_type")

    @property
    @pulumi.getter
    def title(self) -> Optional[builtins.str]:
        """
        The title for the rule
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetListPolicyMaskingExceptionPolicyResult(dict):
    def __init__(__self__, *,
                 exceptions: Sequence['outputs.GetListPolicyMaskingExceptionPolicyExceptionResult']):
        pulumi.set(__self__, "exceptions", exceptions)

    @property
    @pulumi.getter
    def exceptions(self) -> Sequence['outputs.GetListPolicyMaskingExceptionPolicyExceptionResult']:
        return pulumi.get(self, "exceptions")


@pulumi.output_type
class GetListPolicyMaskingExceptionPolicyExceptionResult(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 column: builtins.str,
                 database: builtins.str,
                 expire_timestamp: builtins.str,
                 member: builtins.str,
                 schema: builtins.str,
                 table: builtins.str,
                 reason: Optional[builtins.str] = None):
        """
        :param builtins.str database: The database full name in instances/{instance resource id}/databases/{database name} format
        :param builtins.str expire_timestamp: The expiration timestamp in YYYY-MM-DDThh:mm:ss.000Z format
        :param builtins.str member: The member in user:{email} or group:{email} format.
        :param builtins.str reason: The reason for the masking exemption
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "expire_timestamp", expire_timestamp)
        pulumi.set(__self__, "member", member)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "table", table)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def column(self) -> builtins.str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter
    def database(self) -> builtins.str:
        """
        The database full name in instances/{instance resource id}/databases/{database name} format
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="expireTimestamp")
    def expire_timestamp(self) -> builtins.str:
        """
        The expiration timestamp in YYYY-MM-DDThh:mm:ss.000Z format
        """
        return pulumi.get(self, "expire_timestamp")

    @property
    @pulumi.getter
    def member(self) -> builtins.str:
        """
        The member in user:{email} or group:{email} format.
        """
        return pulumi.get(self, "member")

    @property
    @pulumi.getter
    def schema(self) -> builtins.str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def table(self) -> builtins.str:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def reason(self) -> Optional[builtins.str]:
        """
        The reason for the masking exemption
        """
        return pulumi.get(self, "reason")


