# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetListResult',
    'AwaitableGetListResult',
    'get_list',
    'get_list_output',
]

@pulumi.output_type
class GetListResult:
    """
    A collection of values returned by getList.
    """
    def __init__(__self__, engines=None, environment=None, host=None, id=None, instances=None, port=None, project=None, query=None, state=None):
        if engines and not isinstance(engines, list):
            raise TypeError("Expected argument 'engines' to be a list")
        pulumi.set(__self__, "engines", engines)
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if port and not isinstance(port, str):
            raise TypeError("Expected argument 'port' to be a str")
        pulumi.set(__self__, "port", port)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if query and not isinstance(query, str):
            raise TypeError("Expected argument 'query' to be a str")
        pulumi.set(__self__, "query", query)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def engines(self) -> Optional[Sequence[builtins.str]]:
        """
        Filter instances by engines.
        """
        return pulumi.get(self, "engines")

    @property
    @pulumi.getter
    def environment(self) -> Optional[builtins.str]:
        """
        The environment full name. Filter instances by environment.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def host(self) -> Optional[builtins.str]:
        """
        Filter instances by host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetListInstanceResult']:
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def port(self) -> Optional[builtins.str]:
        """
        Filter instances by port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def project(self) -> Optional[builtins.str]:
        """
        The project full name. Filter instances by project.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def query(self) -> Optional[builtins.str]:
        """
        Filter instances by name or resource id with wildcard
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def state(self) -> Optional[builtins.str]:
        """
        Filter instances by state. Default ACTIVE.
        """
        return pulumi.get(self, "state")


class AwaitableGetListResult(GetListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetListResult(
            engines=self.engines,
            environment=self.environment,
            host=self.host,
            id=self.id,
            instances=self.instances,
            port=self.port,
            project=self.project,
            query=self.query,
            state=self.state)


def get_list(engines: Optional[Sequence[builtins.str]] = None,
             environment: Optional[builtins.str] = None,
             host: Optional[builtins.str] = None,
             port: Optional[builtins.str] = None,
             project: Optional[builtins.str] = None,
             query: Optional[builtins.str] = None,
             state: Optional[builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetListResult:
    """
    The instance data source list.


    :param Sequence[builtins.str] engines: Filter instances by engines.
    :param builtins.str environment: The environment full name. Filter instances by environment.
    :param builtins.str host: Filter instances by host.
    :param builtins.str port: Filter instances by port.
    :param builtins.str project: The project full name. Filter instances by project.
    :param builtins.str query: Filter instances by name or resource id with wildcard
    :param builtins.str state: Filter instances by state. Default ACTIVE.
    """
    __args__ = dict()
    __args__['engines'] = engines
    __args__['environment'] = environment
    __args__['host'] = host
    __args__['port'] = port
    __args__['project'] = project
    __args__['query'] = query
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:Instance/getList:getList', __args__, opts=opts, typ=GetListResult).value

    return AwaitableGetListResult(
        engines=pulumi.get(__ret__, 'engines'),
        environment=pulumi.get(__ret__, 'environment'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        port=pulumi.get(__ret__, 'port'),
        project=pulumi.get(__ret__, 'project'),
        query=pulumi.get(__ret__, 'query'),
        state=pulumi.get(__ret__, 'state'))
def get_list_output(engines: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                    environment: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    host: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    port: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    project: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    query: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    state: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetListResult]:
    """
    The instance data source list.


    :param Sequence[builtins.str] engines: Filter instances by engines.
    :param builtins.str environment: The environment full name. Filter instances by environment.
    :param builtins.str host: Filter instances by host.
    :param builtins.str port: Filter instances by port.
    :param builtins.str project: The project full name. Filter instances by project.
    :param builtins.str query: Filter instances by name or resource id with wildcard
    :param builtins.str state: Filter instances by state. Default ACTIVE.
    """
    __args__ = dict()
    __args__['engines'] = engines
    __args__['environment'] = environment
    __args__['host'] = host
    __args__['port'] = port
    __args__['project'] = project
    __args__['query'] = query
    __args__['state'] = state
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:Instance/getList:getList', __args__, opts=opts, typ=GetListResult)
    return __ret__.apply(lambda __response__: GetListResult(
        engines=pulumi.get(__response__, 'engines'),
        environment=pulumi.get(__response__, 'environment'),
        host=pulumi.get(__response__, 'host'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        port=pulumi.get(__response__, 'port'),
        project=pulumi.get(__response__, 'project'),
        query=pulumi.get(__response__, 'query'),
        state=pulumi.get(__response__, 'state')))
