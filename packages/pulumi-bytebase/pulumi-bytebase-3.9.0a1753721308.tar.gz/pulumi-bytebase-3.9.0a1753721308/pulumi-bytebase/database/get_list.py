# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetListResult',
    'AwaitableGetListResult',
    'get_list',
    'get_list_output',
]

@pulumi.output_type
class GetListResult:
    """
    A collection of values returned by getList.
    """
    def __init__(__self__, databases=None, engines=None, environment=None, exclude_unassigned=None, id=None, instance=None, labels=None, parent=None, project=None, query=None):
        if databases and not isinstance(databases, list):
            raise TypeError("Expected argument 'databases' to be a list")
        pulumi.set(__self__, "databases", databases)
        if engines and not isinstance(engines, list):
            raise TypeError("Expected argument 'engines' to be a list")
        pulumi.set(__self__, "engines", engines)
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if exclude_unassigned and not isinstance(exclude_unassigned, bool):
            raise TypeError("Expected argument 'exclude_unassigned' to be a bool")
        pulumi.set(__self__, "exclude_unassigned", exclude_unassigned)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance and not isinstance(instance, str):
            raise TypeError("Expected argument 'instance' to be a str")
        pulumi.set(__self__, "instance", instance)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if parent and not isinstance(parent, str):
            raise TypeError("Expected argument 'parent' to be a str")
        pulumi.set(__self__, "parent", parent)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if query and not isinstance(query, str):
            raise TypeError("Expected argument 'query' to be a str")
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetListDatabaseResult']:
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def engines(self) -> Optional[Sequence[builtins.str]]:
        """
        Filter databases by engines.
        """
        return pulumi.get(self, "engines")

    @property
    @pulumi.getter
    def environment(self) -> Optional[builtins.str]:
        """
        The environment full name. Filter databases by environment.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="excludeUnassigned")
    def exclude_unassigned(self) -> Optional[builtins.bool]:
        """
        If not include unassigned databases in the response.
        """
        return pulumi.get(self, "exclude_unassigned")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def instance(self) -> Optional[builtins.str]:
        """
        The instance full name. Filter databases by instance.
        """
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Filter databases by labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def parent(self) -> builtins.str:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter
    def project(self) -> Optional[builtins.str]:
        """
        The project full name. Filter databases by project.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def query(self) -> Optional[builtins.str]:
        """
        Filter databases by name with wildcard
        """
        return pulumi.get(self, "query")


class AwaitableGetListResult(GetListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetListResult(
            databases=self.databases,
            engines=self.engines,
            environment=self.environment,
            exclude_unassigned=self.exclude_unassigned,
            id=self.id,
            instance=self.instance,
            labels=self.labels,
            parent=self.parent,
            project=self.project,
            query=self.query)


def get_list(engines: Optional[Sequence[builtins.str]] = None,
             environment: Optional[builtins.str] = None,
             exclude_unassigned: Optional[builtins.bool] = None,
             instance: Optional[builtins.str] = None,
             labels: Optional[Mapping[str, builtins.str]] = None,
             parent: Optional[builtins.str] = None,
             project: Optional[builtins.str] = None,
             query: Optional[builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetListResult:
    """
    The database data source list.


    :param Sequence[builtins.str] engines: Filter databases by engines.
    :param builtins.str environment: The environment full name. Filter databases by environment.
    :param builtins.bool exclude_unassigned: If not include unassigned databases in the response.
    :param builtins.str instance: The instance full name. Filter databases by instance.
    :param Mapping[str, builtins.str] labels: Filter databases by labels
    :param builtins.str project: The project full name. Filter databases by project.
    :param builtins.str query: Filter databases by name with wildcard
    """
    __args__ = dict()
    __args__['engines'] = engines
    __args__['environment'] = environment
    __args__['excludeUnassigned'] = exclude_unassigned
    __args__['instance'] = instance
    __args__['labels'] = labels
    __args__['parent'] = parent
    __args__['project'] = project
    __args__['query'] = query
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:Database/getList:getList', __args__, opts=opts, typ=GetListResult).value

    return AwaitableGetListResult(
        databases=pulumi.get(__ret__, 'databases'),
        engines=pulumi.get(__ret__, 'engines'),
        environment=pulumi.get(__ret__, 'environment'),
        exclude_unassigned=pulumi.get(__ret__, 'exclude_unassigned'),
        id=pulumi.get(__ret__, 'id'),
        instance=pulumi.get(__ret__, 'instance'),
        labels=pulumi.get(__ret__, 'labels'),
        parent=pulumi.get(__ret__, 'parent'),
        project=pulumi.get(__ret__, 'project'),
        query=pulumi.get(__ret__, 'query'))
def get_list_output(engines: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                    environment: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    exclude_unassigned: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                    instance: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    labels: Optional[pulumi.Input[Optional[Mapping[str, builtins.str]]]] = None,
                    parent: Optional[pulumi.Input[builtins.str]] = None,
                    project: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    query: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetListResult]:
    """
    The database data source list.


    :param Sequence[builtins.str] engines: Filter databases by engines.
    :param builtins.str environment: The environment full name. Filter databases by environment.
    :param builtins.bool exclude_unassigned: If not include unassigned databases in the response.
    :param builtins.str instance: The instance full name. Filter databases by instance.
    :param Mapping[str, builtins.str] labels: Filter databases by labels
    :param builtins.str project: The project full name. Filter databases by project.
    :param builtins.str query: Filter databases by name with wildcard
    """
    __args__ = dict()
    __args__['engines'] = engines
    __args__['environment'] = environment
    __args__['excludeUnassigned'] = exclude_unassigned
    __args__['instance'] = instance
    __args__['labels'] = labels
    __args__['parent'] = parent
    __args__['project'] = project
    __args__['query'] = query
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:Database/getList:getList', __args__, opts=opts, typ=GetListResult)
    return __ret__.apply(lambda __response__: GetListResult(
        databases=pulumi.get(__response__, 'databases'),
        engines=pulumi.get(__response__, 'engines'),
        environment=pulumi.get(__response__, 'environment'),
        exclude_unassigned=pulumi.get(__response__, 'exclude_unassigned'),
        id=pulumi.get(__response__, 'id'),
        instance=pulumi.get(__response__, 'instance'),
        labels=pulumi.get(__response__, 'labels'),
        parent=pulumi.get(__response__, 'parent'),
        project=pulumi.get(__response__, 'project'),
        query=pulumi.get(__response__, 'query')))
