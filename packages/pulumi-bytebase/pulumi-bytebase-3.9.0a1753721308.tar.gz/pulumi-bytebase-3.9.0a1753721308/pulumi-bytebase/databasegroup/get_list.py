# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetListResult',
    'AwaitableGetListResult',
    'get_list',
    'get_list_output',
]

@pulumi.output_type
class GetListResult:
    """
    A collection of values returned by getList.
    """
    def __init__(__self__, database_groups=None, id=None, project=None):
        if database_groups and not isinstance(database_groups, list):
            raise TypeError("Expected argument 'database_groups' to be a list")
        pulumi.set(__self__, "database_groups", database_groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="databaseGroups")
    def database_groups(self) -> Sequence['outputs.GetListDatabaseGroupResult']:
        return pulumi.get(self, "database_groups")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def project(self) -> builtins.str:
        """
        The project fullname in projects/{id} format.
        """
        return pulumi.get(self, "project")


class AwaitableGetListResult(GetListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetListResult(
            database_groups=self.database_groups,
            id=self.id,
            project=self.project)


def get_list(project: Optional[builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetListResult:
    """
    The database group data source list.


    :param builtins.str project: The project fullname in projects/{id} format.
    """
    __args__ = dict()
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:DatabaseGroup/getList:getList', __args__, opts=opts, typ=GetListResult).value

    return AwaitableGetListResult(
        database_groups=pulumi.get(__ret__, 'database_groups'),
        id=pulumi.get(__ret__, 'id'),
        project=pulumi.get(__ret__, 'project'))
def get_list_output(project: Optional[pulumi.Input[builtins.str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetListResult]:
    """
    The database group data source list.


    :param builtins.str project: The project fullname in projects/{id} format.
    """
    __args__ = dict()
    __args__['project'] = project
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:DatabaseGroup/getList:getList', __args__, opts=opts, typ=GetListResult)
    return __ret__.apply(lambda __response__: GetListResult(
        database_groups=pulumi.get(__response__, 'database_groups'),
        id=pulumi.get(__response__, 'id'),
        project=pulumi.get(__response__, 'project')))
