# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPolicyResult',
    'AwaitableGetPolicyResult',
    'get_policy',
    'get_policy_output',
]

@pulumi.output_type
class GetPolicyResult:
    """
    A collection of values returned by getPolicy.
    """
    def __init__(__self__, iam_policy=None, id=None, parent=None):
        if iam_policy and not isinstance(iam_policy, dict):
            raise TypeError("Expected argument 'iam_policy' to be a dict")
        pulumi.set(__self__, "iam_policy", iam_policy)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if parent and not isinstance(parent, str):
            raise TypeError("Expected argument 'parent' to be a str")
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter(name="iamPolicy")
    def iam_policy(self) -> 'outputs.GetPolicyIamPolicyResult':
        return pulumi.get(self, "iam_policy")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def parent(self) -> builtins.str:
        """
        The IAM policy parent name for the policy, support "projects/{resource id}" or "workspaces/-"
        """
        return pulumi.get(self, "parent")


class AwaitableGetPolicyResult(GetPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyResult(
            iam_policy=self.iam_policy,
            id=self.id,
            parent=self.parent)


def get_policy(iam_policy: Optional[Union['GetPolicyIamPolicyArgs', 'GetPolicyIamPolicyArgsDict']] = None,
               parent: Optional[builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyResult:
    """
    The IAM policy data source.


    :param builtins.str parent: The IAM policy parent name for the policy, support "projects/{resource id}" or "workspaces/-"
    """
    __args__ = dict()
    __args__['iamPolicy'] = iam_policy
    __args__['parent'] = parent
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:Iam/getPolicy:getPolicy', __args__, opts=opts, typ=GetPolicyResult).value

    return AwaitableGetPolicyResult(
        iam_policy=pulumi.get(__ret__, 'iam_policy'),
        id=pulumi.get(__ret__, 'id'),
        parent=pulumi.get(__ret__, 'parent'))
def get_policy_output(iam_policy: Optional[pulumi.Input[Optional[Union['GetPolicyIamPolicyArgs', 'GetPolicyIamPolicyArgsDict']]]] = None,
                      parent: Optional[pulumi.Input[builtins.str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyResult]:
    """
    The IAM policy data source.


    :param builtins.str parent: The IAM policy parent name for the policy, support "projects/{resource id}" or "workspaces/-"
    """
    __args__ = dict()
    __args__['iamPolicy'] = iam_policy
    __args__['parent'] = parent
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:Iam/getPolicy:getPolicy', __args__, opts=opts, typ=GetPolicyResult)
    return __ret__.apply(lambda __response__: GetPolicyResult(
        iam_policy=pulumi.get(__response__, 'iam_policy'),
        id=pulumi.get(__response__, 'id'),
        parent=pulumi.get(__response__, 'parent')))
