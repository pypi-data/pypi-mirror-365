# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 data_sources: pulumi.Input[Sequence[pulumi.Input['InstanceDataSourceArgs']]],
                 engine: pulumi.Input[builtins.str],
                 environment: pulumi.Input[builtins.str],
                 resource_id: pulumi.Input[builtins.str],
                 title: pulumi.Input[builtins.str],
                 activation: Optional[pulumi.Input[builtins.bool]] = None,
                 external_link: Optional[pulumi.Input[builtins.str]] = None,
                 list_all_databases: Optional[pulumi.Input[builtins.bool]] = None,
                 maximum_connections: Optional[pulumi.Input[builtins.int]] = None,
                 sync_interval: Optional[pulumi.Input[builtins.int]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceDataSourceArgs']]] data_sources: The connection for the instance. You can configure read-only or admin connection account here.
        :param pulumi.Input[builtins.str] engine: The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
        :param pulumi.Input[builtins.str] environment: The environment full name for the instance in environments/{environment id} format.
        :param pulumi.Input[builtins.str] resource_id: The instance unique resource id.
        :param pulumi.Input[builtins.str] title: The instance title.
        :param pulumi.Input[builtins.bool] activation: Whether assign license for this instance or not.
        :param pulumi.Input[builtins.str] external_link: The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
        :param pulumi.Input[builtins.bool] list_all_databases: List all databases in this instance. If false, will only list 500 databases.
        :param pulumi.Input[builtins.int] maximum_connections: The maximum number of connections.
        :param pulumi.Input[builtins.int] sync_interval: How often the instance is synced in seconds. Default 0, means never sync.
        """
        pulumi.set(__self__, "data_sources", data_sources)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "title", title)
        if activation is not None:
            pulumi.set(__self__, "activation", activation)
        if external_link is not None:
            pulumi.set(__self__, "external_link", external_link)
        if list_all_databases is not None:
            pulumi.set(__self__, "list_all_databases", list_all_databases)
        if maximum_connections is not None:
            pulumi.set(__self__, "maximum_connections", maximum_connections)
        if sync_interval is not None:
            pulumi.set(__self__, "sync_interval", sync_interval)

    @property
    @pulumi.getter(name="dataSources")
    def data_sources(self) -> pulumi.Input[Sequence[pulumi.Input['InstanceDataSourceArgs']]]:
        """
        The connection for the instance. You can configure read-only or admin connection account here.
        """
        return pulumi.get(self, "data_sources")

    @data_sources.setter
    def data_sources(self, value: pulumi.Input[Sequence[pulumi.Input['InstanceDataSourceArgs']]]):
        pulumi.set(self, "data_sources", value)

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Input[builtins.str]:
        """
        The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[builtins.str]:
        """
        The environment full name for the instance in environments/{environment id} format.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[builtins.str]:
        """
        The instance unique resource id.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[builtins.str]:
        """
        The instance title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def activation(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether assign license for this instance or not.
        """
        return pulumi.get(self, "activation")

    @activation.setter
    def activation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "activation", value)

    @property
    @pulumi.getter(name="externalLink")
    def external_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
        """
        return pulumi.get(self, "external_link")

    @external_link.setter
    def external_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "external_link", value)

    @property
    @pulumi.getter(name="listAllDatabases")
    def list_all_databases(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        List all databases in this instance. If false, will only list 500 databases.
        """
        return pulumi.get(self, "list_all_databases")

    @list_all_databases.setter
    def list_all_databases(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "list_all_databases", value)

    @property
    @pulumi.getter(name="maximumConnections")
    def maximum_connections(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum number of connections.
        """
        return pulumi.get(self, "maximum_connections")

    @maximum_connections.setter
    def maximum_connections(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "maximum_connections", value)

    @property
    @pulumi.getter(name="syncInterval")
    def sync_interval(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        How often the instance is synced in seconds. Default 0, means never sync.
        """
        return pulumi.get(self, "sync_interval")

    @sync_interval.setter
    def sync_interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "sync_interval", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 activation: Optional[pulumi.Input[builtins.bool]] = None,
                 data_sources: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataSourceArgs']]]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 engine: Optional[pulumi.Input[builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[builtins.str]] = None,
                 environment: Optional[pulumi.Input[builtins.str]] = None,
                 external_link: Optional[pulumi.Input[builtins.str]] = None,
                 list_all_databases: Optional[pulumi.Input[builtins.bool]] = None,
                 maximum_connections: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 sync_interval: Optional[pulumi.Input[builtins.int]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[builtins.bool] activation: Whether assign license for this instance or not.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceDataSourceArgs']]] data_sources: The connection for the instance. You can configure read-only or admin connection account here.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] databases: The databases full name in the resource.
        :param pulumi.Input[builtins.str] engine: The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
        :param pulumi.Input[builtins.str] engine_version: The engine version.
        :param pulumi.Input[builtins.str] environment: The environment full name for the instance in environments/{environment id} format.
        :param pulumi.Input[builtins.str] external_link: The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
        :param pulumi.Input[builtins.bool] list_all_databases: List all databases in this instance. If false, will only list 500 databases.
        :param pulumi.Input[builtins.int] maximum_connections: The maximum number of connections.
        :param pulumi.Input[builtins.str] name: The instance full name in instances/{resource id} format.
        :param pulumi.Input[builtins.str] resource_id: The instance unique resource id.
        :param pulumi.Input[builtins.int] sync_interval: How often the instance is synced in seconds. Default 0, means never sync.
        :param pulumi.Input[builtins.str] title: The instance title.
        """
        if activation is not None:
            pulumi.set(__self__, "activation", activation)
        if data_sources is not None:
            pulumi.set(__self__, "data_sources", data_sources)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if external_link is not None:
            pulumi.set(__self__, "external_link", external_link)
        if list_all_databases is not None:
            pulumi.set(__self__, "list_all_databases", list_all_databases)
        if maximum_connections is not None:
            pulumi.set(__self__, "maximum_connections", maximum_connections)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if sync_interval is not None:
            pulumi.set(__self__, "sync_interval", sync_interval)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def activation(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether assign license for this instance or not.
        """
        return pulumi.get(self, "activation")

    @activation.setter
    def activation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "activation", value)

    @property
    @pulumi.getter(name="dataSources")
    def data_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataSourceArgs']]]]:
        """
        The connection for the instance. You can configure read-only or admin connection account here.
        """
        return pulumi.get(self, "data_sources")

    @data_sources.setter
    def data_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataSourceArgs']]]]):
        pulumi.set(self, "data_sources", value)

    @property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The databases full name in the resource.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The engine version.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The environment full name for the instance in environments/{environment id} format.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="externalLink")
    def external_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
        """
        return pulumi.get(self, "external_link")

    @external_link.setter
    def external_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "external_link", value)

    @property
    @pulumi.getter(name="listAllDatabases")
    def list_all_databases(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        List all databases in this instance. If false, will only list 500 databases.
        """
        return pulumi.get(self, "list_all_databases")

    @list_all_databases.setter
    def list_all_databases(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "list_all_databases", value)

    @property
    @pulumi.getter(name="maximumConnections")
    def maximum_connections(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum number of connections.
        """
        return pulumi.get(self, "maximum_connections")

    @maximum_connections.setter
    def maximum_connections(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "maximum_connections", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The instance full name in instances/{resource id} format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The instance unique resource id.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="syncInterval")
    def sync_interval(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        How often the instance is synced in seconds. Default 0, means never sync.
        """
        return pulumi.get(self, "sync_interval")

    @sync_interval.setter
    def sync_interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "sync_interval", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The instance title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "title", value)


@pulumi.type_token("bytebase:index/instance:Instance")
class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activation: Optional[pulumi.Input[builtins.bool]] = None,
                 data_sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceDataSourceArgs', 'InstanceDataSourceArgsDict']]]]] = None,
                 engine: Optional[pulumi.Input[builtins.str]] = None,
                 environment: Optional[pulumi.Input[builtins.str]] = None,
                 external_link: Optional[pulumi.Input[builtins.str]] = None,
                 list_all_databases: Optional[pulumi.Input[builtins.bool]] = None,
                 maximum_connections: Optional[pulumi.Input[builtins.int]] = None,
                 resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 sync_interval: Optional[pulumi.Input[builtins.int]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        The instance resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] activation: Whether assign license for this instance or not.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InstanceDataSourceArgs', 'InstanceDataSourceArgsDict']]]] data_sources: The connection for the instance. You can configure read-only or admin connection account here.
        :param pulumi.Input[builtins.str] engine: The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
        :param pulumi.Input[builtins.str] environment: The environment full name for the instance in environments/{environment id} format.
        :param pulumi.Input[builtins.str] external_link: The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
        :param pulumi.Input[builtins.bool] list_all_databases: List all databases in this instance. If false, will only list 500 databases.
        :param pulumi.Input[builtins.int] maximum_connections: The maximum number of connections.
        :param pulumi.Input[builtins.str] resource_id: The instance unique resource id.
        :param pulumi.Input[builtins.int] sync_interval: How often the instance is synced in seconds. Default 0, means never sync.
        :param pulumi.Input[builtins.str] title: The instance title.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The instance resource.

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activation: Optional[pulumi.Input[builtins.bool]] = None,
                 data_sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceDataSourceArgs', 'InstanceDataSourceArgsDict']]]]] = None,
                 engine: Optional[pulumi.Input[builtins.str]] = None,
                 environment: Optional[pulumi.Input[builtins.str]] = None,
                 external_link: Optional[pulumi.Input[builtins.str]] = None,
                 list_all_databases: Optional[pulumi.Input[builtins.bool]] = None,
                 maximum_connections: Optional[pulumi.Input[builtins.int]] = None,
                 resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 sync_interval: Optional[pulumi.Input[builtins.int]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["activation"] = activation
            if data_sources is None and not opts.urn:
                raise TypeError("Missing required property 'data_sources'")
            __props__.__dict__["data_sources"] = data_sources
            if engine is None and not opts.urn:
                raise TypeError("Missing required property 'engine'")
            __props__.__dict__["engine"] = engine
            if environment is None and not opts.urn:
                raise TypeError("Missing required property 'environment'")
            __props__.__dict__["environment"] = environment
            __props__.__dict__["external_link"] = external_link
            __props__.__dict__["list_all_databases"] = list_all_databases
            __props__.__dict__["maximum_connections"] = maximum_connections
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            __props__.__dict__["sync_interval"] = sync_interval
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            __props__.__dict__["databases"] = None
            __props__.__dict__["engine_version"] = None
            __props__.__dict__["name"] = None
        super(Instance, __self__).__init__(
            'bytebase:index/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activation: Optional[pulumi.Input[builtins.bool]] = None,
            data_sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceDataSourceArgs', 'InstanceDataSourceArgsDict']]]]] = None,
            databases: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            engine: Optional[pulumi.Input[builtins.str]] = None,
            engine_version: Optional[pulumi.Input[builtins.str]] = None,
            environment: Optional[pulumi.Input[builtins.str]] = None,
            external_link: Optional[pulumi.Input[builtins.str]] = None,
            list_all_databases: Optional[pulumi.Input[builtins.bool]] = None,
            maximum_connections: Optional[pulumi.Input[builtins.int]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            resource_id: Optional[pulumi.Input[builtins.str]] = None,
            sync_interval: Optional[pulumi.Input[builtins.int]] = None,
            title: Optional[pulumi.Input[builtins.str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] activation: Whether assign license for this instance or not.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InstanceDataSourceArgs', 'InstanceDataSourceArgsDict']]]] data_sources: The connection for the instance. You can configure read-only or admin connection account here.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] databases: The databases full name in the resource.
        :param pulumi.Input[builtins.str] engine: The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
        :param pulumi.Input[builtins.str] engine_version: The engine version.
        :param pulumi.Input[builtins.str] environment: The environment full name for the instance in environments/{environment id} format.
        :param pulumi.Input[builtins.str] external_link: The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
        :param pulumi.Input[builtins.bool] list_all_databases: List all databases in this instance. If false, will only list 500 databases.
        :param pulumi.Input[builtins.int] maximum_connections: The maximum number of connections.
        :param pulumi.Input[builtins.str] name: The instance full name in instances/{resource id} format.
        :param pulumi.Input[builtins.str] resource_id: The instance unique resource id.
        :param pulumi.Input[builtins.int] sync_interval: How often the instance is synced in seconds. Default 0, means never sync.
        :param pulumi.Input[builtins.str] title: The instance title.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["activation"] = activation
        __props__.__dict__["data_sources"] = data_sources
        __props__.__dict__["databases"] = databases
        __props__.__dict__["engine"] = engine
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["environment"] = environment
        __props__.__dict__["external_link"] = external_link
        __props__.__dict__["list_all_databases"] = list_all_databases
        __props__.__dict__["maximum_connections"] = maximum_connections
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["sync_interval"] = sync_interval
        __props__.__dict__["title"] = title
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def activation(self) -> pulumi.Output[builtins.bool]:
        """
        Whether assign license for this instance or not.
        """
        return pulumi.get(self, "activation")

    @property
    @pulumi.getter(name="dataSources")
    def data_sources(self) -> pulumi.Output[Sequence['outputs.InstanceDataSource']]:
        """
        The connection for the instance. You can configure read-only or admin connection account here.
        """
        return pulumi.get(self, "data_sources")

    @property
    @pulumi.getter
    def databases(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The databases full name in the resource.
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Output[builtins.str]:
        """
        The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[builtins.str]:
        """
        The engine version.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[builtins.str]:
        """
        The environment full name for the instance in environments/{environment id} format.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="externalLink")
    def external_link(self) -> pulumi.Output[builtins.str]:
        """
        The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
        """
        return pulumi.get(self, "external_link")

    @property
    @pulumi.getter(name="listAllDatabases")
    def list_all_databases(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        List all databases in this instance. If false, will only list 500 databases.
        """
        return pulumi.get(self, "list_all_databases")

    @property
    @pulumi.getter(name="maximumConnections")
    def maximum_connections(self) -> pulumi.Output[builtins.int]:
        """
        The maximum number of connections.
        """
        return pulumi.get(self, "maximum_connections")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The instance full name in instances/{resource id} format.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[builtins.str]:
        """
        The instance unique resource id.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="syncInterval")
    def sync_interval(self) -> pulumi.Output[builtins.int]:
        """
        How often the instance is synced in seconds. Default 0, means never sync.
        """
        return pulumi.get(self, "sync_interval")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[builtins.str]:
        """
        The instance title.
        """
        return pulumi.get(self, "title")

