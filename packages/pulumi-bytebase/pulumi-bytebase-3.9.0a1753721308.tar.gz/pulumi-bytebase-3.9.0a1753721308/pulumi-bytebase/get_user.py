# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, email=None, id=None, last_change_password_time=None, last_login_time=None, mfa_enabled=None, name=None, phone=None, source=None, state=None, title=None, type=None):
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_change_password_time and not isinstance(last_change_password_time, str):
            raise TypeError("Expected argument 'last_change_password_time' to be a str")
        pulumi.set(__self__, "last_change_password_time", last_change_password_time)
        if last_login_time and not isinstance(last_login_time, str):
            raise TypeError("Expected argument 'last_login_time' to be a str")
        pulumi.set(__self__, "last_login_time", last_login_time)
        if mfa_enabled and not isinstance(mfa_enabled, bool):
            raise TypeError("Expected argument 'mfa_enabled' to be a bool")
        pulumi.set(__self__, "mfa_enabled", mfa_enabled)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if phone and not isinstance(phone, str):
            raise TypeError("Expected argument 'phone' to be a str")
        pulumi.set(__self__, "phone", phone)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> builtins.str:
        """
        The user email.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastChangePasswordTime")
    def last_change_password_time(self) -> builtins.str:
        """
        The user last change password time.
        """
        return pulumi.get(self, "last_change_password_time")

    @property
    @pulumi.getter(name="lastLoginTime")
    def last_login_time(self) -> builtins.str:
        """
        The user last login time.
        """
        return pulumi.get(self, "last_login_time")

    @property
    @pulumi.getter(name="mfaEnabled")
    def mfa_enabled(self) -> builtins.bool:
        """
        The mfa_enabled flag means if the user has enabled MFA.
        """
        return pulumi.get(self, "mfa_enabled")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The user name in users/{user id or email} format.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> builtins.str:
        """
        The user phone.
        """
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter
    def source(self) -> builtins.str:
        """
        Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The user is deleted or not.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        The user title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The user type.
        """
        return pulumi.get(self, "type")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            email=self.email,
            id=self.id,
            last_change_password_time=self.last_change_password_time,
            last_login_time=self.last_login_time,
            mfa_enabled=self.mfa_enabled,
            name=self.name,
            phone=self.phone,
            source=self.source,
            state=self.state,
            title=self.title,
            type=self.type)


def get_user(name: Optional[builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    The user data source.


    :param builtins.str name: The user name in users/{user id or email} format.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult).value

    return AwaitableGetUserResult(
        email=pulumi.get(__ret__, 'email'),
        id=pulumi.get(__ret__, 'id'),
        last_change_password_time=pulumi.get(__ret__, 'last_change_password_time'),
        last_login_time=pulumi.get(__ret__, 'last_login_time'),
        mfa_enabled=pulumi.get(__ret__, 'mfa_enabled'),
        name=pulumi.get(__ret__, 'name'),
        phone=pulumi.get(__ret__, 'phone'),
        source=pulumi.get(__ret__, 'source'),
        state=pulumi.get(__ret__, 'state'),
        title=pulumi.get(__ret__, 'title'),
        type=pulumi.get(__ret__, 'type'))
def get_user_output(name: Optional[pulumi.Input[builtins.str]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserResult]:
    """
    The user data source.


    :param builtins.str name: The user name in users/{user id or email} format.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult)
    return __ret__.apply(lambda __response__: GetUserResult(
        email=pulumi.get(__response__, 'email'),
        id=pulumi.get(__response__, 'id'),
        last_change_password_time=pulumi.get(__response__, 'last_change_password_time'),
        last_login_time=pulumi.get(__response__, 'last_login_time'),
        mfa_enabled=pulumi.get(__response__, 'mfa_enabled'),
        name=pulumi.get(__response__, 'name'),
        phone=pulumi.get(__response__, 'phone'),
        source=pulumi.get(__response__, 'source'),
        state=pulumi.get(__response__, 'state'),
        title=pulumi.get(__response__, 'title'),
        type=pulumi.get(__response__, 'type')))
