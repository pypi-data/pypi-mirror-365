# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetListInstanceResult',
    'GetListInstanceDataSourceResult',
    'GetListInstanceDataSourceExternalSecretResult',
    'GetListInstanceDataSourceExternalSecretAwsSecretsManagerResult',
    'GetListInstanceDataSourceExternalSecretGcpSecretManagerResult',
    'GetListInstanceDataSourceExternalSecretVaultResult',
    'GetListInstanceDataSourceExternalSecretVaultAppRoleResult',
]

@pulumi.output_type
class GetListInstanceResult(dict):
    def __init__(__self__, *,
                 activation: builtins.bool,
                 data_sources: Sequence['outputs.GetListInstanceDataSourceResult'],
                 engine: builtins.str,
                 engine_version: builtins.str,
                 environment: builtins.str,
                 external_link: builtins.str,
                 maximum_connections: builtins.int,
                 name: builtins.str,
                 resource_id: builtins.str,
                 sync_interval: builtins.int,
                 title: builtins.str):
        """
        :param builtins.bool activation: Whether assign license for this instance or not.
        :param builtins.str engine: The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
        :param builtins.str engine_version: The engine version.
        :param builtins.str environment: The environment name for your instance in "environments/{resource id}" format.
        :param builtins.str external_link: The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
        :param builtins.int maximum_connections: The maximum number of connections. The default value is 10.
        :param builtins.str name: The instance full name in instances/{resource id} format.
        :param builtins.str resource_id: The instance unique resource id.
        :param builtins.int sync_interval: How often the instance is synced in seconds. Default 0, means never sync.
        :param builtins.str title: The instance title.
        """
        pulumi.set(__self__, "activation", activation)
        pulumi.set(__self__, "data_sources", data_sources)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "external_link", external_link)
        pulumi.set(__self__, "maximum_connections", maximum_connections)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "sync_interval", sync_interval)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def activation(self) -> builtins.bool:
        """
        Whether assign license for this instance or not.
        """
        return pulumi.get(self, "activation")

    @property
    @pulumi.getter(name="dataSources")
    def data_sources(self) -> Sequence['outputs.GetListInstanceDataSourceResult']:
        return pulumi.get(self, "data_sources")

    @property
    @pulumi.getter
    def engine(self) -> builtins.str:
        """
        The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> builtins.str:
        """
        The engine version.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def environment(self) -> builtins.str:
        """
        The environment name for your instance in "environments/{resource id}" format.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="externalLink")
    def external_link(self) -> builtins.str:
        """
        The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
        """
        return pulumi.get(self, "external_link")

    @property
    @pulumi.getter(name="maximumConnections")
    def maximum_connections(self) -> builtins.int:
        """
        The maximum number of connections. The default value is 10.
        """
        return pulumi.get(self, "maximum_connections")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The instance full name in instances/{resource id} format.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The instance unique resource id.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="syncInterval")
    def sync_interval(self) -> builtins.int:
        """
        How often the instance is synced in seconds. Default 0, means never sync.
        """
        return pulumi.get(self, "sync_interval")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        The instance title.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetListInstanceDataSourceResult(dict):
    def __init__(__self__, *,
                 database: builtins.str,
                 external_secrets: Sequence['outputs.GetListInstanceDataSourceExternalSecretResult'],
                 host: builtins.str,
                 id: builtins.str,
                 password: builtins.str,
                 port: builtins.str,
                 ssl_ca: builtins.str,
                 ssl_cert: builtins.str,
                 ssl_key: builtins.str,
                 type: builtins.str,
                 use_ssl: builtins.bool,
                 username: builtins.str):
        """
        :param builtins.str database: The database for the instance, you can set this if the engine type is POSTGRES.
        :param Sequence['GetListInstanceDataSourceExternalSecretArgs'] external_secrets: The external secret to get the database password. Learn more: https://www.bytebase.com/docs/get-started/instance/#use-external-secret-manager
        :param builtins.str host: Host or socket for your instance, or the account name if the instance type is Snowflake.
        :param builtins.str id: The unique data source id in this instance.
        :param builtins.str password: The connection user password used by Bytebase to perform DDL and DML operations.
        :param builtins.str port: The port for your instance.
        :param builtins.str ssl_ca: The CA certificate. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB, CLICKHOUSE or COCKROACHDB.
        :param builtins.str ssl_cert: The client certificate. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB, CLICKHOUSE or COCKROACHDB.
        :param builtins.str ssl_key: The client key. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB, CLICKHOUSE or COCKROACHDB.
        :param builtins.str type: The data source type. Should be ADMIN or READ_ONLY.
        :param builtins.bool use_ssl: Enable SSL connection. Required to use SSL certificates.
        :param builtins.str username: The connection user name used by Bytebase to perform DDL and DML operations.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "external_secrets", external_secrets)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "ssl_ca", ssl_ca)
        pulumi.set(__self__, "ssl_cert", ssl_cert)
        pulumi.set(__self__, "ssl_key", ssl_key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "use_ssl", use_ssl)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> builtins.str:
        """
        The database for the instance, you can set this if the engine type is POSTGRES.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="externalSecrets")
    def external_secrets(self) -> Sequence['outputs.GetListInstanceDataSourceExternalSecretResult']:
        """
        The external secret to get the database password. Learn more: https://www.bytebase.com/docs/get-started/instance/#use-external-secret-manager
        """
        return pulumi.get(self, "external_secrets")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        Host or socket for your instance, or the account name if the instance type is Snowflake.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique data source id in this instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        """
        The connection user password used by Bytebase to perform DDL and DML operations.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> builtins.str:
        """
        The port for your instance.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sslCa")
    def ssl_ca(self) -> builtins.str:
        """
        The CA certificate. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB, CLICKHOUSE or COCKROACHDB.
        """
        return pulumi.get(self, "ssl_ca")

    @property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> builtins.str:
        """
        The client certificate. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB, CLICKHOUSE or COCKROACHDB.
        """
        return pulumi.get(self, "ssl_cert")

    @property
    @pulumi.getter(name="sslKey")
    def ssl_key(self) -> builtins.str:
        """
        The client key. Optional, you can set this if the engine type is MYSQL, POSTGRES, TIDB, CLICKHOUSE or COCKROACHDB.
        """
        return pulumi.get(self, "ssl_key")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The data source type. Should be ADMIN or READ_ONLY.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useSsl")
    def use_ssl(self) -> builtins.bool:
        """
        Enable SSL connection. Required to use SSL certificates.
        """
        return pulumi.get(self, "use_ssl")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        The connection user name used by Bytebase to perform DDL and DML operations.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetListInstanceDataSourceExternalSecretResult(dict):
    def __init__(__self__, *,
                 aws_secrets_managers: Sequence['outputs.GetListInstanceDataSourceExternalSecretAwsSecretsManagerResult'],
                 gcp_secret_managers: Sequence['outputs.GetListInstanceDataSourceExternalSecretGcpSecretManagerResult'],
                 vaults: Sequence['outputs.GetListInstanceDataSourceExternalSecretVaultResult']):
        """
        :param Sequence['GetListInstanceDataSourceExternalSecretAwsSecretsManagerArgs'] aws_secrets_managers: The AWS Secrets Manager to get the database password. Reference doc https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html
        :param Sequence['GetListInstanceDataSourceExternalSecretGcpSecretManagerArgs'] gcp_secret_managers: The GCP Secret Manager to get the database password. Reference doc https://cloud.google.com/secret-manager/docs
        """
        pulumi.set(__self__, "aws_secrets_managers", aws_secrets_managers)
        pulumi.set(__self__, "gcp_secret_managers", gcp_secret_managers)
        pulumi.set(__self__, "vaults", vaults)

    @property
    @pulumi.getter(name="awsSecretsManagers")
    def aws_secrets_managers(self) -> Sequence['outputs.GetListInstanceDataSourceExternalSecretAwsSecretsManagerResult']:
        """
        The AWS Secrets Manager to get the database password. Reference doc https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html
        """
        return pulumi.get(self, "aws_secrets_managers")

    @property
    @pulumi.getter(name="gcpSecretManagers")
    def gcp_secret_managers(self) -> Sequence['outputs.GetListInstanceDataSourceExternalSecretGcpSecretManagerResult']:
        """
        The GCP Secret Manager to get the database password. Reference doc https://cloud.google.com/secret-manager/docs
        """
        return pulumi.get(self, "gcp_secret_managers")

    @property
    @pulumi.getter
    def vaults(self) -> Sequence['outputs.GetListInstanceDataSourceExternalSecretVaultResult']:
        return pulumi.get(self, "vaults")


@pulumi.output_type
class GetListInstanceDataSourceExternalSecretAwsSecretsManagerResult(dict):
    def __init__(__self__, *,
                 password_key_name: builtins.str,
                 secret_name: builtins.str):
        """
        :param builtins.str password_key_name: The key name for the password.
        :param builtins.str secret_name: The secret name to store the password.
        """
        pulumi.set(__self__, "password_key_name", password_key_name)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="passwordKeyName")
    def password_key_name(self) -> builtins.str:
        """
        The key name for the password.
        """
        return pulumi.get(self, "password_key_name")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> builtins.str:
        """
        The secret name to store the password.
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class GetListInstanceDataSourceExternalSecretGcpSecretManagerResult(dict):
    def __init__(__self__, *,
                 secret_name: builtins.str):
        """
        :param builtins.str secret_name: The secret name should be like "projects/{project-id}/secrets/{secret-id}".
        """
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> builtins.str:
        """
        The secret name should be like "projects/{project-id}/secrets/{secret-id}".
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class GetListInstanceDataSourceExternalSecretVaultResult(dict):
    def __init__(__self__, *,
                 app_roles: Sequence['outputs.GetListInstanceDataSourceExternalSecretVaultAppRoleResult'],
                 engine_name: builtins.str,
                 password_key_name: builtins.str,
                 secret_name: builtins.str,
                 token: builtins.str,
                 url: builtins.str):
        """
        :param Sequence['GetListInstanceDataSourceExternalSecretVaultAppRoleArgs'] app_roles: The Vault app role to get the password.
        :param builtins.str engine_name: The name for secret engine.
        :param builtins.str password_key_name: The key name for the password.
        :param builtins.str secret_name: The secret name in the engine to store the password.
        :param builtins.str url: The Vault URL.
        """
        pulumi.set(__self__, "app_roles", app_roles)
        pulumi.set(__self__, "engine_name", engine_name)
        pulumi.set(__self__, "password_key_name", password_key_name)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="appRoles")
    def app_roles(self) -> Sequence['outputs.GetListInstanceDataSourceExternalSecretVaultAppRoleResult']:
        """
        The Vault app role to get the password.
        """
        return pulumi.get(self, "app_roles")

    @property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> builtins.str:
        """
        The name for secret engine.
        """
        return pulumi.get(self, "engine_name")

    @property
    @pulumi.getter(name="passwordKeyName")
    def password_key_name(self) -> builtins.str:
        """
        The key name for the password.
        """
        return pulumi.get(self, "password_key_name")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> builtins.str:
        """
        The secret name in the engine to store the password.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def token(self) -> builtins.str:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        The Vault URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetListInstanceDataSourceExternalSecretVaultAppRoleResult(dict):
    def __init__(__self__, *,
                 role_id: builtins.str,
                 secret: builtins.str,
                 secret_type: builtins.str):
        """
        :param builtins.str role_id: The app role id.
        :param builtins.str secret: The secret id for the role without ttl.
        :param builtins.str secret_type: The secret id type, can be PLAIN (plain text for the secret) or ENVIRONMENT (envirionment name for the secret).
        """
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "secret_type", secret_type)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> builtins.str:
        """
        The app role id.
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter
    def secret(self) -> builtins.str:
        """
        The secret id for the role without ttl.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> builtins.str:
        """
        The secret id type, can be PLAIN (plain text for the secret) or ENVIRONMENT (envirionment name for the secret).
        """
        return pulumi.get(self, "secret_type")


