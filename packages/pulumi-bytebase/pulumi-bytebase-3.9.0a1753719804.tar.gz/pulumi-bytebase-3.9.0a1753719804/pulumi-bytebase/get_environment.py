# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEnvironmentResult',
    'AwaitableGetEnvironmentResult',
    'get_environment',
    'get_environment_output',
]

@pulumi.output_type
class GetEnvironmentResult:
    """
    A collection of values returned by getEnvironment.
    """
    def __init__(__self__, color=None, id=None, name=None, order=None, protected=None, resource_id=None, title=None):
        if color and not isinstance(color, str):
            raise TypeError("Expected argument 'color' to be a str")
        pulumi.set(__self__, "color", color)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if order and not isinstance(order, int):
            raise TypeError("Expected argument 'order' to be a int")
        pulumi.set(__self__, "order", order)
        if protected and not isinstance(protected, bool):
            raise TypeError("Expected argument 'protected' to be a bool")
        pulumi.set(__self__, "protected", protected)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def color(self) -> Optional[builtins.str]:
        """
        The environment color.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The environment full name in environments/{resource id} format.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> builtins.int:
        """
        The environment sorting order.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def protected(self) -> Optional[builtins.bool]:
        """
        The environment is protected or not.
        """
        return pulumi.get(self, "protected")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The environment unique resource id.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        The environment unique name.
        """
        return pulumi.get(self, "title")


class AwaitableGetEnvironmentResult(GetEnvironmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnvironmentResult(
            color=self.color,
            id=self.id,
            name=self.name,
            order=self.order,
            protected=self.protected,
            resource_id=self.resource_id,
            title=self.title)


def get_environment(color: Optional[builtins.str] = None,
                    protected: Optional[builtins.bool] = None,
                    resource_id: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnvironmentResult:
    """
    The environment data source.


    :param builtins.str color: The environment color.
    :param builtins.bool protected: The environment is protected or not.
    :param builtins.str resource_id: The environment unique resource id.
    """
    __args__ = dict()
    __args__['color'] = color
    __args__['protected'] = protected
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:index/getEnvironment:getEnvironment', __args__, opts=opts, typ=GetEnvironmentResult).value

    return AwaitableGetEnvironmentResult(
        color=pulumi.get(__ret__, 'color'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        order=pulumi.get(__ret__, 'order'),
        protected=pulumi.get(__ret__, 'protected'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        title=pulumi.get(__ret__, 'title'))
def get_environment_output(color: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           protected: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                           resource_id: Optional[pulumi.Input[builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnvironmentResult]:
    """
    The environment data source.


    :param builtins.str color: The environment color.
    :param builtins.bool protected: The environment is protected or not.
    :param builtins.str resource_id: The environment unique resource id.
    """
    __args__ = dict()
    __args__['color'] = color
    __args__['protected'] = protected
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:index/getEnvironment:getEnvironment', __args__, opts=opts, typ=GetEnvironmentResult)
    return __ret__.apply(lambda __response__: GetEnvironmentResult(
        color=pulumi.get(__response__, 'color'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        order=pulumi.get(__response__, 'order'),
        protected=pulumi.get(__response__, 'protected'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        title=pulumi.get(__response__, 'title')))
