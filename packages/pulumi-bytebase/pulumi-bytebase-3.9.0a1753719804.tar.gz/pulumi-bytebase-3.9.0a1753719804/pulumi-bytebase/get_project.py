# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetProjectResult',
    'AwaitableGetProjectResult',
    'get_project',
    'get_project_output',
]

@pulumi.output_type
class GetProjectResult:
    """
    A collection of values returned by getProject.
    """
    def __init__(__self__, allow_modify_statement=None, allow_self_approval=None, auto_enable_backup=None, auto_resolve_issue=None, databases=None, enforce_issue_title=None, id=None, name=None, postgres_database_tenant_mode=None, resource_id=None, skip_backup_errors=None, title=None, webhooks=None):
        if allow_modify_statement and not isinstance(allow_modify_statement, bool):
            raise TypeError("Expected argument 'allow_modify_statement' to be a bool")
        pulumi.set(__self__, "allow_modify_statement", allow_modify_statement)
        if allow_self_approval and not isinstance(allow_self_approval, bool):
            raise TypeError("Expected argument 'allow_self_approval' to be a bool")
        pulumi.set(__self__, "allow_self_approval", allow_self_approval)
        if auto_enable_backup and not isinstance(auto_enable_backup, bool):
            raise TypeError("Expected argument 'auto_enable_backup' to be a bool")
        pulumi.set(__self__, "auto_enable_backup", auto_enable_backup)
        if auto_resolve_issue and not isinstance(auto_resolve_issue, bool):
            raise TypeError("Expected argument 'auto_resolve_issue' to be a bool")
        pulumi.set(__self__, "auto_resolve_issue", auto_resolve_issue)
        if databases and not isinstance(databases, list):
            raise TypeError("Expected argument 'databases' to be a list")
        pulumi.set(__self__, "databases", databases)
        if enforce_issue_title and not isinstance(enforce_issue_title, bool):
            raise TypeError("Expected argument 'enforce_issue_title' to be a bool")
        pulumi.set(__self__, "enforce_issue_title", enforce_issue_title)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if postgres_database_tenant_mode and not isinstance(postgres_database_tenant_mode, bool):
            raise TypeError("Expected argument 'postgres_database_tenant_mode' to be a bool")
        pulumi.set(__self__, "postgres_database_tenant_mode", postgres_database_tenant_mode)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if skip_backup_errors and not isinstance(skip_backup_errors, bool):
            raise TypeError("Expected argument 'skip_backup_errors' to be a bool")
        pulumi.set(__self__, "skip_backup_errors", skip_backup_errors)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)
        if webhooks and not isinstance(webhooks, list):
            raise TypeError("Expected argument 'webhooks' to be a list")
        pulumi.set(__self__, "webhooks", webhooks)

    @property
    @pulumi.getter(name="allowModifyStatement")
    def allow_modify_statement(self) -> builtins.bool:
        """
        Allow modifying statement after issue is created.
        """
        return pulumi.get(self, "allow_modify_statement")

    @property
    @pulumi.getter(name="allowSelfApproval")
    def allow_self_approval(self) -> builtins.bool:
        """
        Whether to allow the issue creator to self-approve the issue.
        """
        return pulumi.get(self, "allow_self_approval")

    @property
    @pulumi.getter(name="autoEnableBackup")
    def auto_enable_backup(self) -> builtins.bool:
        """
        Whether to automatically enable backup.
        """
        return pulumi.get(self, "auto_enable_backup")

    @property
    @pulumi.getter(name="autoResolveIssue")
    def auto_resolve_issue(self) -> builtins.bool:
        """
        Enable auto resolve issue.
        """
        return pulumi.get(self, "auto_resolve_issue")

    @property
    @pulumi.getter
    def databases(self) -> Sequence[builtins.str]:
        """
        The databases full name in the resource.
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="enforceIssueTitle")
    def enforce_issue_title(self) -> builtins.bool:
        """
        Enforce issue title created by user instead of generated by Bytebase.
        """
        return pulumi.get(self, "enforce_issue_title")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The project full name in projects/{resource id} format.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="postgresDatabaseTenantMode")
    def postgres_database_tenant_mode(self) -> builtins.bool:
        """
        Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \\n\\n" statement.
        """
        return pulumi.get(self, "postgres_database_tenant_mode")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The project unique resource id.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="skipBackupErrors")
    def skip_backup_errors(self) -> builtins.bool:
        """
        Whether to skip backup errors and continue the data migration.
        """
        return pulumi.get(self, "skip_backup_errors")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        The project title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def webhooks(self) -> Sequence['outputs.GetProjectWebhookResult']:
        """
        The webhooks in the project.
        """
        return pulumi.get(self, "webhooks")


class AwaitableGetProjectResult(GetProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectResult(
            allow_modify_statement=self.allow_modify_statement,
            allow_self_approval=self.allow_self_approval,
            auto_enable_backup=self.auto_enable_backup,
            auto_resolve_issue=self.auto_resolve_issue,
            databases=self.databases,
            enforce_issue_title=self.enforce_issue_title,
            id=self.id,
            name=self.name,
            postgres_database_tenant_mode=self.postgres_database_tenant_mode,
            resource_id=self.resource_id,
            skip_backup_errors=self.skip_backup_errors,
            title=self.title,
            webhooks=self.webhooks)


def get_project(resource_id: Optional[builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectResult:
    """
    The project data source.


    :param builtins.str resource_id: The project unique resource id.
    """
    __args__ = dict()
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:index/getProject:getProject', __args__, opts=opts, typ=GetProjectResult).value

    return AwaitableGetProjectResult(
        allow_modify_statement=pulumi.get(__ret__, 'allow_modify_statement'),
        allow_self_approval=pulumi.get(__ret__, 'allow_self_approval'),
        auto_enable_backup=pulumi.get(__ret__, 'auto_enable_backup'),
        auto_resolve_issue=pulumi.get(__ret__, 'auto_resolve_issue'),
        databases=pulumi.get(__ret__, 'databases'),
        enforce_issue_title=pulumi.get(__ret__, 'enforce_issue_title'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        postgres_database_tenant_mode=pulumi.get(__ret__, 'postgres_database_tenant_mode'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        skip_backup_errors=pulumi.get(__ret__, 'skip_backup_errors'),
        title=pulumi.get(__ret__, 'title'),
        webhooks=pulumi.get(__ret__, 'webhooks'))
def get_project_output(resource_id: Optional[pulumi.Input[builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProjectResult]:
    """
    The project data source.


    :param builtins.str resource_id: The project unique resource id.
    """
    __args__ = dict()
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:index/getProject:getProject', __args__, opts=opts, typ=GetProjectResult)
    return __ret__.apply(lambda __response__: GetProjectResult(
        allow_modify_statement=pulumi.get(__response__, 'allow_modify_statement'),
        allow_self_approval=pulumi.get(__response__, 'allow_self_approval'),
        auto_enable_backup=pulumi.get(__response__, 'auto_enable_backup'),
        auto_resolve_issue=pulumi.get(__response__, 'auto_resolve_issue'),
        databases=pulumi.get(__response__, 'databases'),
        enforce_issue_title=pulumi.get(__response__, 'enforce_issue_title'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        postgres_database_tenant_mode=pulumi.get(__response__, 'postgres_database_tenant_mode'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        skip_backup_errors=pulumi.get(__response__, 'skip_backup_errors'),
        title=pulumi.get(__response__, 'title'),
        webhooks=pulumi.get(__response__, 'webhooks')))
