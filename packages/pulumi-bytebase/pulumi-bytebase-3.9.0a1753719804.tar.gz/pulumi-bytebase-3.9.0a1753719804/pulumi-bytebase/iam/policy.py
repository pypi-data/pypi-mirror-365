# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PolicyArgs', 'Policy']

@pulumi.input_type
class PolicyArgs:
    def __init__(__self__, *,
                 parent: pulumi.Input[builtins.str],
                 iam_policy: Optional[pulumi.Input['PolicyIamPolicyArgs']] = None):
        """
        The set of arguments for constructing a Policy resource.
        :param pulumi.Input[builtins.str] parent: The IAM policy parent name for the policy, support "projects/{resource id}" or "workspaces/-"
        """
        pulumi.set(__self__, "parent", parent)
        if iam_policy is not None:
            pulumi.set(__self__, "iam_policy", iam_policy)

    @property
    @pulumi.getter
    def parent(self) -> pulumi.Input[builtins.str]:
        """
        The IAM policy parent name for the policy, support "projects/{resource id}" or "workspaces/-"
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="iamPolicy")
    def iam_policy(self) -> Optional[pulumi.Input['PolicyIamPolicyArgs']]:
        return pulumi.get(self, "iam_policy")

    @iam_policy.setter
    def iam_policy(self, value: Optional[pulumi.Input['PolicyIamPolicyArgs']]):
        pulumi.set(self, "iam_policy", value)


@pulumi.input_type
class _PolicyState:
    def __init__(__self__, *,
                 iam_policy: Optional[pulumi.Input['PolicyIamPolicyArgs']] = None,
                 parent: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Policy resources.
        :param pulumi.Input[builtins.str] parent: The IAM policy parent name for the policy, support "projects/{resource id}" or "workspaces/-"
        """
        if iam_policy is not None:
            pulumi.set(__self__, "iam_policy", iam_policy)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter(name="iamPolicy")
    def iam_policy(self) -> Optional[pulumi.Input['PolicyIamPolicyArgs']]:
        return pulumi.get(self, "iam_policy")

    @iam_policy.setter
    def iam_policy(self, value: Optional[pulumi.Input['PolicyIamPolicyArgs']]):
        pulumi.set(self, "iam_policy", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The IAM policy parent name for the policy, support "projects/{resource id}" or "workspaces/-"
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "parent", value)


@pulumi.type_token("bytebase:Iam/policy:Policy")
class Policy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iam_policy: Optional[pulumi.Input[Union['PolicyIamPolicyArgs', 'PolicyIamPolicyArgsDict']]] = None,
                 parent: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        The IAM policy resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] parent: The IAM policy parent name for the policy, support "projects/{resource id}" or "workspaces/-"
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The IAM policy resource.

        :param str resource_name: The name of the resource.
        :param PolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iam_policy: Optional[pulumi.Input[Union['PolicyIamPolicyArgs', 'PolicyIamPolicyArgsDict']]] = None,
                 parent: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyArgs.__new__(PolicyArgs)

            __props__.__dict__["iam_policy"] = iam_policy
            if parent is None and not opts.urn:
                raise TypeError("Missing required property 'parent'")
            __props__.__dict__["parent"] = parent
        super(Policy, __self__).__init__(
            'bytebase:Iam/policy:Policy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            iam_policy: Optional[pulumi.Input[Union['PolicyIamPolicyArgs', 'PolicyIamPolicyArgsDict']]] = None,
            parent: Optional[pulumi.Input[builtins.str]] = None) -> 'Policy':
        """
        Get an existing Policy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] parent: The IAM policy parent name for the policy, support "projects/{resource id}" or "workspaces/-"
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyState.__new__(_PolicyState)

        __props__.__dict__["iam_policy"] = iam_policy
        __props__.__dict__["parent"] = parent
        return Policy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="iamPolicy")
    def iam_policy(self) -> pulumi.Output[Optional['outputs.PolicyIamPolicy']]:
        return pulumi.get(self, "iam_policy")

    @property
    @pulumi.getter
    def parent(self) -> pulumi.Output[builtins.str]:
        """
        The IAM policy parent name for the policy, support "projects/{resource id}" or "workspaces/-"
        """
        return pulumi.get(self, "parent")

