# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'PolicyIamPolicy',
    'PolicyIamPolicyBinding',
    'PolicyIamPolicyBindingCondition',
    'GetPolicyIamPolicyResult',
    'GetPolicyIamPolicyBindingResult',
    'GetPolicyIamPolicyBindingConditionResult',
]

@pulumi.output_type
class PolicyIamPolicy(dict):
    def __init__(__self__, *,
                 bindings: Optional[Sequence['outputs.PolicyIamPolicyBinding']] = None):
        """
        :param Sequence['PolicyIamPolicyBindingArgs'] bindings: The binding in the IAM policy.
        """
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[Sequence['outputs.PolicyIamPolicyBinding']]:
        """
        The binding in the IAM policy.
        """
        return pulumi.get(self, "bindings")


@pulumi.output_type
class PolicyIamPolicyBinding(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.PolicyIamPolicyBindingCondition']] = None,
                 members: Optional[Sequence[builtins.str]] = None,
                 role: Optional[builtins.str] = None):
        """
        :param Sequence['PolicyIamPolicyBindingConditionArgs'] conditions: Match the condition limit.
        :param Sequence[builtins.str] members: A set of memebers. The value can be "allUsers", "user:{email}" or "group:{email}".
        :param builtins.str role: The role full name in roles/{id} format.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.PolicyIamPolicyBindingCondition']]:
        """
        Match the condition limit.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence[builtins.str]]:
        """
        A set of memebers. The value can be "allUsers", "user:{email}" or "group:{email}".
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def role(self) -> Optional[builtins.str]:
        """
        The role full name in roles/{id} format.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class PolicyIamPolicyBindingCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expireTimestamp":
            suggest = "expire_timestamp"
        elif key == "rowLimit":
            suggest = "row_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyIamPolicyBindingCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyIamPolicyBindingCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyIamPolicyBindingCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: Optional[builtins.str] = None,
                 expire_timestamp: Optional[builtins.str] = None,
                 row_limit: Optional[builtins.int] = None,
                 schema: Optional[builtins.str] = None,
                 tables: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str database: The accessible database full name in instances/{instance resource id}/databases/{database name} format
        :param builtins.str expire_timestamp: The expiration timestamp in YYYY-MM-DDThh:mm:ssZ format
        :param builtins.int row_limit: The export row limit for exporter role
        :param builtins.str schema: The accessible schema in the database
        :param Sequence[builtins.str] tables: The accessible table list
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if expire_timestamp is not None:
            pulumi.set(__self__, "expire_timestamp", expire_timestamp)
        if row_limit is not None:
            pulumi.set(__self__, "row_limit", row_limit)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def database(self) -> Optional[builtins.str]:
        """
        The accessible database full name in instances/{instance resource id}/databases/{database name} format
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="expireTimestamp")
    def expire_timestamp(self) -> Optional[builtins.str]:
        """
        The expiration timestamp in YYYY-MM-DDThh:mm:ssZ format
        """
        return pulumi.get(self, "expire_timestamp")

    @property
    @pulumi.getter(name="rowLimit")
    def row_limit(self) -> Optional[builtins.int]:
        """
        The export row limit for exporter role
        """
        return pulumi.get(self, "row_limit")

    @property
    @pulumi.getter
    def schema(self) -> Optional[builtins.str]:
        """
        The accessible schema in the database
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def tables(self) -> Optional[Sequence[builtins.str]]:
        """
        The accessible table list
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class GetPolicyIamPolicyResult(dict):
    def __init__(__self__, *,
                 bindings: Optional[Sequence['outputs.GetPolicyIamPolicyBindingResult']] = None):
        """
        :param Sequence['GetPolicyIamPolicyBindingArgs'] bindings: The binding in the IAM policy.
        """
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[Sequence['outputs.GetPolicyIamPolicyBindingResult']]:
        """
        The binding in the IAM policy.
        """
        return pulumi.get(self, "bindings")


@pulumi.output_type
class GetPolicyIamPolicyBindingResult(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.GetPolicyIamPolicyBindingConditionResult']] = None,
                 members: Optional[Sequence[builtins.str]] = None,
                 role: Optional[builtins.str] = None):
        """
        :param Sequence['GetPolicyIamPolicyBindingConditionArgs'] conditions: Match the condition limit.
        :param Sequence[builtins.str] members: A set of memebers. The value can be "allUsers", "user:{email}" or "group:{email}".
        :param builtins.str role: The role full name in roles/{id} format.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.GetPolicyIamPolicyBindingConditionResult']]:
        """
        Match the condition limit.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence[builtins.str]]:
        """
        A set of memebers. The value can be "allUsers", "user:{email}" or "group:{email}".
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def role(self) -> Optional[builtins.str]:
        """
        The role full name in roles/{id} format.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetPolicyIamPolicyBindingConditionResult(dict):
    def __init__(__self__, *,
                 database: Optional[builtins.str] = None,
                 expire_timestamp: Optional[builtins.str] = None,
                 row_limit: Optional[builtins.int] = None,
                 schema: Optional[builtins.str] = None,
                 tables: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str database: The accessible database full name in instances/{instance resource id}/databases/{database name} format
        :param builtins.str expire_timestamp: The expiration timestamp in YYYY-MM-DDThh:mm:ssZ format
        :param builtins.int row_limit: The export row limit for exporter role
        :param builtins.str schema: The accessible schema in the database
        :param Sequence[builtins.str] tables: The accessible table list
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if expire_timestamp is not None:
            pulumi.set(__self__, "expire_timestamp", expire_timestamp)
        if row_limit is not None:
            pulumi.set(__self__, "row_limit", row_limit)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def database(self) -> Optional[builtins.str]:
        """
        The accessible database full name in instances/{instance resource id}/databases/{database name} format
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="expireTimestamp")
    def expire_timestamp(self) -> Optional[builtins.str]:
        """
        The expiration timestamp in YYYY-MM-DDThh:mm:ssZ format
        """
        return pulumi.get(self, "expire_timestamp")

    @property
    @pulumi.getter(name="rowLimit")
    def row_limit(self) -> Optional[builtins.int]:
        """
        The export row limit for exporter role
        """
        return pulumi.get(self, "row_limit")

    @property
    @pulumi.getter
    def schema(self) -> Optional[builtins.str]:
        """
        The accessible schema in the database
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def tables(self) -> Optional[Sequence[builtins.str]]:
        """
        The accessible table list
        """
        return pulumi.get(self, "tables")


