# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPolicyResult',
    'AwaitableGetPolicyResult',
    'get_policy',
    'get_policy_output',
]

@pulumi.output_type
class GetPolicyResult:
    """
    A collection of values returned by getPolicy.
    """
    def __init__(__self__, data_source_query_policy=None, disable_copy_data_policy=None, enforce=None, global_masking_policy=None, id=None, inherit_from_parent=None, masking_exception_policy=None, name=None, parent=None, rollout_policy=None, type=None):
        if data_source_query_policy and not isinstance(data_source_query_policy, dict):
            raise TypeError("Expected argument 'data_source_query_policy' to be a dict")
        pulumi.set(__self__, "data_source_query_policy", data_source_query_policy)
        if disable_copy_data_policy and not isinstance(disable_copy_data_policy, dict):
            raise TypeError("Expected argument 'disable_copy_data_policy' to be a dict")
        pulumi.set(__self__, "disable_copy_data_policy", disable_copy_data_policy)
        if enforce and not isinstance(enforce, bool):
            raise TypeError("Expected argument 'enforce' to be a bool")
        pulumi.set(__self__, "enforce", enforce)
        if global_masking_policy and not isinstance(global_masking_policy, dict):
            raise TypeError("Expected argument 'global_masking_policy' to be a dict")
        pulumi.set(__self__, "global_masking_policy", global_masking_policy)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inherit_from_parent and not isinstance(inherit_from_parent, bool):
            raise TypeError("Expected argument 'inherit_from_parent' to be a bool")
        pulumi.set(__self__, "inherit_from_parent", inherit_from_parent)
        if masking_exception_policy and not isinstance(masking_exception_policy, dict):
            raise TypeError("Expected argument 'masking_exception_policy' to be a dict")
        pulumi.set(__self__, "masking_exception_policy", masking_exception_policy)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent and not isinstance(parent, str):
            raise TypeError("Expected argument 'parent' to be a str")
        pulumi.set(__self__, "parent", parent)
        if rollout_policy and not isinstance(rollout_policy, dict):
            raise TypeError("Expected argument 'rollout_policy' to be a dict")
        pulumi.set(__self__, "rollout_policy", rollout_policy)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dataSourceQueryPolicy")
    def data_source_query_policy(self) -> 'outputs.GetPolicyDataSourceQueryPolicyResult':
        """
        Restrict querying admin data sources
        """
        return pulumi.get(self, "data_source_query_policy")

    @property
    @pulumi.getter(name="disableCopyDataPolicy")
    def disable_copy_data_policy(self) -> 'outputs.GetPolicyDisableCopyDataPolicyResult':
        """
        Restrict data copying in SQL Editor (Admins/DBAs allowed)
        """
        return pulumi.get(self, "disable_copy_data_policy")

    @property
    @pulumi.getter
    def enforce(self) -> builtins.bool:
        """
        Decide if the policy is enforced.
        """
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="globalMaskingPolicy")
    def global_masking_policy(self) -> 'outputs.GetPolicyGlobalMaskingPolicyResult':
        return pulumi.get(self, "global_masking_policy")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inheritFromParent")
    def inherit_from_parent(self) -> builtins.bool:
        """
        Decide if the policy should inherit from the parent.
        """
        return pulumi.get(self, "inherit_from_parent")

    @property
    @pulumi.getter(name="maskingExceptionPolicy")
    def masking_exception_policy(self) -> 'outputs.GetPolicyMaskingExceptionPolicyResult':
        return pulumi.get(self, "masking_exception_policy")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The policy full name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parent(self) -> builtins.str:
        """
        The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rolloutPolicy")
    def rollout_policy(self) -> 'outputs.GetPolicyRolloutPolicyResult':
        """
        Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
        """
        return pulumi.get(self, "rollout_policy")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The policy type.
        """
        return pulumi.get(self, "type")


class AwaitableGetPolicyResult(GetPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyResult(
            data_source_query_policy=self.data_source_query_policy,
            disable_copy_data_policy=self.disable_copy_data_policy,
            enforce=self.enforce,
            global_masking_policy=self.global_masking_policy,
            id=self.id,
            inherit_from_parent=self.inherit_from_parent,
            masking_exception_policy=self.masking_exception_policy,
            name=self.name,
            parent=self.parent,
            rollout_policy=self.rollout_policy,
            type=self.type)


def get_policy(data_source_query_policy: Optional[Union['GetPolicyDataSourceQueryPolicyArgs', 'GetPolicyDataSourceQueryPolicyArgsDict']] = None,
               disable_copy_data_policy: Optional[Union['GetPolicyDisableCopyDataPolicyArgs', 'GetPolicyDisableCopyDataPolicyArgsDict']] = None,
               global_masking_policy: Optional[Union['GetPolicyGlobalMaskingPolicyArgs', 'GetPolicyGlobalMaskingPolicyArgsDict']] = None,
               masking_exception_policy: Optional[Union['GetPolicyMaskingExceptionPolicyArgs', 'GetPolicyMaskingExceptionPolicyArgsDict']] = None,
               parent: Optional[builtins.str] = None,
               rollout_policy: Optional[Union['GetPolicyRolloutPolicyArgs', 'GetPolicyRolloutPolicyArgsDict']] = None,
               type: Optional[builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyResult:
    """
    The policy data source.


    :param Union['GetPolicyDataSourceQueryPolicyArgs', 'GetPolicyDataSourceQueryPolicyArgsDict'] data_source_query_policy: Restrict querying admin data sources
    :param Union['GetPolicyDisableCopyDataPolicyArgs', 'GetPolicyDisableCopyDataPolicyArgsDict'] disable_copy_data_policy: Restrict data copying in SQL Editor (Admins/DBAs allowed)
    :param builtins.str parent: The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
    :param Union['GetPolicyRolloutPolicyArgs', 'GetPolicyRolloutPolicyArgsDict'] rollout_policy: Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
    :param builtins.str type: The policy type.
    """
    __args__ = dict()
    __args__['dataSourceQueryPolicy'] = data_source_query_policy
    __args__['disableCopyDataPolicy'] = disable_copy_data_policy
    __args__['globalMaskingPolicy'] = global_masking_policy
    __args__['maskingExceptionPolicy'] = masking_exception_policy
    __args__['parent'] = parent
    __args__['rolloutPolicy'] = rollout_policy
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:index/getPolicy:getPolicy', __args__, opts=opts, typ=GetPolicyResult).value

    return AwaitableGetPolicyResult(
        data_source_query_policy=pulumi.get(__ret__, 'data_source_query_policy'),
        disable_copy_data_policy=pulumi.get(__ret__, 'disable_copy_data_policy'),
        enforce=pulumi.get(__ret__, 'enforce'),
        global_masking_policy=pulumi.get(__ret__, 'global_masking_policy'),
        id=pulumi.get(__ret__, 'id'),
        inherit_from_parent=pulumi.get(__ret__, 'inherit_from_parent'),
        masking_exception_policy=pulumi.get(__ret__, 'masking_exception_policy'),
        name=pulumi.get(__ret__, 'name'),
        parent=pulumi.get(__ret__, 'parent'),
        rollout_policy=pulumi.get(__ret__, 'rollout_policy'),
        type=pulumi.get(__ret__, 'type'))
def get_policy_output(data_source_query_policy: Optional[pulumi.Input[Optional[Union['GetPolicyDataSourceQueryPolicyArgs', 'GetPolicyDataSourceQueryPolicyArgsDict']]]] = None,
                      disable_copy_data_policy: Optional[pulumi.Input[Optional[Union['GetPolicyDisableCopyDataPolicyArgs', 'GetPolicyDisableCopyDataPolicyArgsDict']]]] = None,
                      global_masking_policy: Optional[pulumi.Input[Optional[Union['GetPolicyGlobalMaskingPolicyArgs', 'GetPolicyGlobalMaskingPolicyArgsDict']]]] = None,
                      masking_exception_policy: Optional[pulumi.Input[Optional[Union['GetPolicyMaskingExceptionPolicyArgs', 'GetPolicyMaskingExceptionPolicyArgsDict']]]] = None,
                      parent: Optional[pulumi.Input[builtins.str]] = None,
                      rollout_policy: Optional[pulumi.Input[Optional[Union['GetPolicyRolloutPolicyArgs', 'GetPolicyRolloutPolicyArgsDict']]]] = None,
                      type: Optional[pulumi.Input[builtins.str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyResult]:
    """
    The policy data source.


    :param Union['GetPolicyDataSourceQueryPolicyArgs', 'GetPolicyDataSourceQueryPolicyArgsDict'] data_source_query_policy: Restrict querying admin data sources
    :param Union['GetPolicyDisableCopyDataPolicyArgs', 'GetPolicyDisableCopyDataPolicyArgsDict'] disable_copy_data_policy: Restrict data copying in SQL Editor (Admins/DBAs allowed)
    :param builtins.str parent: The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
    :param Union['GetPolicyRolloutPolicyArgs', 'GetPolicyRolloutPolicyArgsDict'] rollout_policy: Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
    :param builtins.str type: The policy type.
    """
    __args__ = dict()
    __args__['dataSourceQueryPolicy'] = data_source_query_policy
    __args__['disableCopyDataPolicy'] = disable_copy_data_policy
    __args__['globalMaskingPolicy'] = global_masking_policy
    __args__['maskingExceptionPolicy'] = masking_exception_policy
    __args__['parent'] = parent
    __args__['rolloutPolicy'] = rollout_policy
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:index/getPolicy:getPolicy', __args__, opts=opts, typ=GetPolicyResult)
    return __ret__.apply(lambda __response__: GetPolicyResult(
        data_source_query_policy=pulumi.get(__response__, 'data_source_query_policy'),
        disable_copy_data_policy=pulumi.get(__response__, 'disable_copy_data_policy'),
        enforce=pulumi.get(__response__, 'enforce'),
        global_masking_policy=pulumi.get(__response__, 'global_masking_policy'),
        id=pulumi.get(__response__, 'id'),
        inherit_from_parent=pulumi.get(__response__, 'inherit_from_parent'),
        masking_exception_policy=pulumi.get(__response__, 'masking_exception_policy'),
        name=pulumi.get(__response__, 'name'),
        parent=pulumi.get(__response__, 'parent'),
        rollout_policy=pulumi.get(__response__, 'rollout_policy'),
        type=pulumi.get(__response__, 'type')))
