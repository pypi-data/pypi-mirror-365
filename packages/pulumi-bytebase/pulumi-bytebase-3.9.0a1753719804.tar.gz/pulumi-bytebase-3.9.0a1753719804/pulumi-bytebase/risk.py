# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['RiskArgs', 'Risk']

@pulumi.input_type
class RiskArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[builtins.str],
                 level: pulumi.Input[builtins.int],
                 source: pulumi.Input[builtins.str],
                 title: pulumi.Input[builtins.str],
                 active: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a Risk resource.
        :param pulumi.Input[builtins.str] condition: The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
        :param pulumi.Input[builtins.int] level: The risk level, should be 300, 200 or 100. Higher number means higher level.
        :param pulumi.Input[builtins.str] source: The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
        :param pulumi.Input[builtins.str] title: The risk title.
        :param pulumi.Input[builtins.bool] active: If the risk is active.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "title", title)
        if active is not None:
            pulumi.set(__self__, "active", active)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[builtins.str]:
        """
        The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[builtins.int]:
        """
        The risk level, should be 300, 200 or 100. Higher number means higher level.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[builtins.str]:
        """
        The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[builtins.str]:
        """
        The risk title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If the risk is active.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "active", value)


@pulumi.input_type
class _RiskState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[builtins.bool]] = None,
                 condition: Optional[pulumi.Input[builtins.str]] = None,
                 level: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 source: Optional[pulumi.Input[builtins.str]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Risk resources.
        :param pulumi.Input[builtins.bool] active: If the risk is active.
        :param pulumi.Input[builtins.str] condition: The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
        :param pulumi.Input[builtins.int] level: The risk level, should be 300, 200 or 100. Higher number means higher level.
        :param pulumi.Input[builtins.str] name: The risk full name in risks/{uid} format.
        :param pulumi.Input[builtins.str] source: The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
        :param pulumi.Input[builtins.str] title: The risk title.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If the risk is active.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The risk level, should be 300, 200 or 100. Higher number means higher level.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The risk full name in risks/{uid} format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The risk title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "title", value)


@pulumi.type_token("bytebase:index/risk:Risk")
class Risk(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[builtins.bool]] = None,
                 condition: Optional[pulumi.Input[builtins.str]] = None,
                 level: Optional[pulumi.Input[builtins.int]] = None,
                 source: Optional[pulumi.Input[builtins.str]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a Risk resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] active: If the risk is active.
        :param pulumi.Input[builtins.str] condition: The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
        :param pulumi.Input[builtins.int] level: The risk level, should be 300, 200 or 100. Higher number means higher level.
        :param pulumi.Input[builtins.str] source: The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
        :param pulumi.Input[builtins.str] title: The risk title.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RiskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Risk resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RiskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RiskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[builtins.bool]] = None,
                 condition: Optional[pulumi.Input[builtins.str]] = None,
                 level: Optional[pulumi.Input[builtins.int]] = None,
                 source: Optional[pulumi.Input[builtins.str]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RiskArgs.__new__(RiskArgs)

            __props__.__dict__["active"] = active
            if condition is None and not opts.urn:
                raise TypeError("Missing required property 'condition'")
            __props__.__dict__["condition"] = condition
            if level is None and not opts.urn:
                raise TypeError("Missing required property 'level'")
            __props__.__dict__["level"] = level
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            __props__.__dict__["name"] = None
        super(Risk, __self__).__init__(
            'bytebase:index/risk:Risk',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[builtins.bool]] = None,
            condition: Optional[pulumi.Input[builtins.str]] = None,
            level: Optional[pulumi.Input[builtins.int]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            source: Optional[pulumi.Input[builtins.str]] = None,
            title: Optional[pulumi.Input[builtins.str]] = None) -> 'Risk':
        """
        Get an existing Risk resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] active: If the risk is active.
        :param pulumi.Input[builtins.str] condition: The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
        :param pulumi.Input[builtins.int] level: The risk level, should be 300, 200 or 100. Higher number means higher level.
        :param pulumi.Input[builtins.str] name: The risk full name in risks/{uid} format.
        :param pulumi.Input[builtins.str] source: The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
        :param pulumi.Input[builtins.str] title: The risk title.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RiskState.__new__(_RiskState)

        __props__.__dict__["active"] = active
        __props__.__dict__["condition"] = condition
        __props__.__dict__["level"] = level
        __props__.__dict__["name"] = name
        __props__.__dict__["source"] = source
        __props__.__dict__["title"] = title
        return Risk(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        If the risk is active.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Output[builtins.str]:
        """
        The risk condition. Check the proto message https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L210 for details.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> pulumi.Output[builtins.int]:
        """
        The risk level, should be 300, 200 or 100. Higher number means higher level.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The risk full name in risks/{uid} format.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[builtins.str]:
        """
        The risk source. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/risk_service.proto#L138 for details
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[builtins.str]:
        """
        The risk title.
        """
        return pulumi.get(self, "title")

