# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetGroupResult',
    'AwaitableGetGroupResult',
    'get_group',
    'get_group_output',
]

@pulumi.output_type
class GetGroupResult:
    """
    A collection of values returned by getGroup.
    """
    def __init__(__self__, condition=None, id=None, matched_databases=None, project=None, resource_id=None, title=None):
        if condition and not isinstance(condition, str):
            raise TypeError("Expected argument 'condition' to be a str")
        pulumi.set(__self__, "condition", condition)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if matched_databases and not isinstance(matched_databases, list):
            raise TypeError("Expected argument 'matched_databases' to be a list")
        pulumi.set(__self__, "matched_databases", matched_databases)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def condition(self) -> builtins.str:
        """
        The database group condition.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchedDatabases")
    def matched_databases(self) -> Sequence[builtins.str]:
        """
        The matched databases in the group.
        """
        return pulumi.get(self, "matched_databases")

    @property
    @pulumi.getter
    def project(self) -> builtins.str:
        """
        The project fullname in projects/{id} format.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The database group unique resource id.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        The database group title.
        """
        return pulumi.get(self, "title")


class AwaitableGetGroupResult(GetGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupResult(
            condition=self.condition,
            id=self.id,
            matched_databases=self.matched_databases,
            project=self.project,
            resource_id=self.resource_id,
            title=self.title)


def get_group(project: Optional[builtins.str] = None,
              resource_id: Optional[builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupResult:
    """
    The database group data source.


    :param builtins.str project: The project fullname in projects/{id} format.
    :param builtins.str resource_id: The database group unique resource id.
    """
    __args__ = dict()
    __args__['project'] = project
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:Database/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult).value

    return AwaitableGetGroupResult(
        condition=pulumi.get(__ret__, 'condition'),
        id=pulumi.get(__ret__, 'id'),
        matched_databases=pulumi.get(__ret__, 'matched_databases'),
        project=pulumi.get(__ret__, 'project'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        title=pulumi.get(__ret__, 'title'))
def get_group_output(project: Optional[pulumi.Input[builtins.str]] = None,
                     resource_id: Optional[pulumi.Input[builtins.str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGroupResult]:
    """
    The database group data source.


    :param builtins.str project: The project fullname in projects/{id} format.
    :param builtins.str resource_id: The database group unique resource id.
    """
    __args__ = dict()
    __args__['project'] = project
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:Database/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult)
    return __ret__.apply(lambda __response__: GetGroupResult(
        condition=pulumi.get(__response__, 'condition'),
        id=pulumi.get(__response__, 'id'),
        matched_databases=pulumi.get(__response__, 'matched_databases'),
        project=pulumi.get(__response__, 'project'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        title=pulumi.get(__response__, 'title')))
