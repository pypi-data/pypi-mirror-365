# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[builtins.str],
                 title: pulumi.Input[builtins.str],
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 phone: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[builtins.str] email: The user email.
        :param pulumi.Input[builtins.str] title: The user title.
        :param pulumi.Input[builtins.str] password: The user login password.
        :param pulumi.Input[builtins.str] phone: The user phone.
        :param pulumi.Input[builtins.str] type: The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "title", title)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[builtins.str]:
        """
        The user email.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[builtins.str]:
        """
        The user title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user login password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def phone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user phone.
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 last_change_password_time: Optional[pulumi.Input[builtins.str]] = None,
                 last_login_time: Optional[pulumi.Input[builtins.str]] = None,
                 mfa_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 phone: Optional[pulumi.Input[builtins.str]] = None,
                 service_key: Optional[pulumi.Input[builtins.str]] = None,
                 source: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[builtins.str] email: The user email.
        :param pulumi.Input[builtins.str] last_change_password_time: The user last change password time.
        :param pulumi.Input[builtins.str] last_login_time: The user last login time.
        :param pulumi.Input[builtins.bool] mfa_enabled: The mfa_enabled flag means if the user has enabled MFA.
        :param pulumi.Input[builtins.str] name: The user name in users/{user id or email} format.
        :param pulumi.Input[builtins.str] password: The user login password.
        :param pulumi.Input[builtins.str] phone: The user phone.
        :param pulumi.Input[builtins.str] service_key: The service key for service account.
        :param pulumi.Input[builtins.str] source: Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
        :param pulumi.Input[builtins.str] state: The user is deleted or not.
        :param pulumi.Input[builtins.str] title: The user title.
        :param pulumi.Input[builtins.str] type: The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if last_change_password_time is not None:
            pulumi.set(__self__, "last_change_password_time", last_change_password_time)
        if last_login_time is not None:
            pulumi.set(__self__, "last_login_time", last_login_time)
        if mfa_enabled is not None:
            pulumi.set(__self__, "mfa_enabled", mfa_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if service_key is not None:
            pulumi.set(__self__, "service_key", service_key)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user email.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="lastChangePasswordTime")
    def last_change_password_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user last change password time.
        """
        return pulumi.get(self, "last_change_password_time")

    @last_change_password_time.setter
    def last_change_password_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_change_password_time", value)

    @property
    @pulumi.getter(name="lastLoginTime")
    def last_login_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user last login time.
        """
        return pulumi.get(self, "last_login_time")

    @last_login_time.setter
    def last_login_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_login_time", value)

    @property
    @pulumi.getter(name="mfaEnabled")
    def mfa_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        The mfa_enabled flag means if the user has enabled MFA.
        """
        return pulumi.get(self, "mfa_enabled")

    @mfa_enabled.setter
    def mfa_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "mfa_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user name in users/{user id or email} format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user login password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def phone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user phone.
        """
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="serviceKey")
    def service_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The service key for service account.
        """
        return pulumi.get(self, "service_key")

    @service_key.setter
    def service_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_key", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user is deleted or not.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("bytebase:index/user:User")
class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 phone: Optional[pulumi.Input[builtins.str]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        The user resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] email: The user email.
        :param pulumi.Input[builtins.str] password: The user login password.
        :param pulumi.Input[builtins.str] phone: The user phone.
        :param pulumi.Input[builtins.str] title: The user title.
        :param pulumi.Input[builtins.str] type: The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The user resource.

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 phone: Optional[pulumi.Input[builtins.str]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["phone"] = phone
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            __props__.__dict__["type"] = type
            __props__.__dict__["last_change_password_time"] = None
            __props__.__dict__["last_login_time"] = None
            __props__.__dict__["mfa_enabled"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["service_key"] = None
            __props__.__dict__["source"] = None
            __props__.__dict__["state"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(User, __self__).__init__(
            'bytebase:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            email: Optional[pulumi.Input[builtins.str]] = None,
            last_change_password_time: Optional[pulumi.Input[builtins.str]] = None,
            last_login_time: Optional[pulumi.Input[builtins.str]] = None,
            mfa_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            password: Optional[pulumi.Input[builtins.str]] = None,
            phone: Optional[pulumi.Input[builtins.str]] = None,
            service_key: Optional[pulumi.Input[builtins.str]] = None,
            source: Optional[pulumi.Input[builtins.str]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            title: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] email: The user email.
        :param pulumi.Input[builtins.str] last_change_password_time: The user last change password time.
        :param pulumi.Input[builtins.str] last_login_time: The user last login time.
        :param pulumi.Input[builtins.bool] mfa_enabled: The mfa_enabled flag means if the user has enabled MFA.
        :param pulumi.Input[builtins.str] name: The user name in users/{user id or email} format.
        :param pulumi.Input[builtins.str] password: The user login password.
        :param pulumi.Input[builtins.str] phone: The user phone.
        :param pulumi.Input[builtins.str] service_key: The service key for service account.
        :param pulumi.Input[builtins.str] source: Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
        :param pulumi.Input[builtins.str] state: The user is deleted or not.
        :param pulumi.Input[builtins.str] title: The user title.
        :param pulumi.Input[builtins.str] type: The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["email"] = email
        __props__.__dict__["last_change_password_time"] = last_change_password_time
        __props__.__dict__["last_login_time"] = last_login_time
        __props__.__dict__["mfa_enabled"] = mfa_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["phone"] = phone
        __props__.__dict__["service_key"] = service_key
        __props__.__dict__["source"] = source
        __props__.__dict__["state"] = state
        __props__.__dict__["title"] = title
        __props__.__dict__["type"] = type
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[builtins.str]:
        """
        The user email.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="lastChangePasswordTime")
    def last_change_password_time(self) -> pulumi.Output[builtins.str]:
        """
        The user last change password time.
        """
        return pulumi.get(self, "last_change_password_time")

    @property
    @pulumi.getter(name="lastLoginTime")
    def last_login_time(self) -> pulumi.Output[builtins.str]:
        """
        The user last login time.
        """
        return pulumi.get(self, "last_login_time")

    @property
    @pulumi.getter(name="mfaEnabled")
    def mfa_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        The mfa_enabled flag means if the user has enabled MFA.
        """
        return pulumi.get(self, "mfa_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The user name in users/{user id or email} format.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The user login password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def phone(self) -> pulumi.Output[builtins.str]:
        """
        The user phone.
        """
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="serviceKey")
    def service_key(self) -> pulumi.Output[builtins.str]:
        """
        The service key for service account.
        """
        return pulumi.get(self, "service_key")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[builtins.str]:
        """
        Source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        The user is deleted or not.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[builtins.str]:
        """
        The user title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The user type, should be USER or SERVICE_ACCOUNT. Cannot change after creation.
        """
        return pulumi.get(self, "type")

