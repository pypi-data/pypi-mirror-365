# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PolicyArgs', 'Policy']

@pulumi.input_type
class PolicyArgs:
    def __init__(__self__, *,
                 parent: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 data_source_query_policy: Optional[pulumi.Input['PolicyDataSourceQueryPolicyArgs']] = None,
                 disable_copy_data_policy: Optional[pulumi.Input['PolicyDisableCopyDataPolicyArgs']] = None,
                 enforce: Optional[pulumi.Input[builtins.bool]] = None,
                 global_masking_policy: Optional[pulumi.Input['PolicyGlobalMaskingPolicyArgs']] = None,
                 inherit_from_parent: Optional[pulumi.Input[builtins.bool]] = None,
                 masking_exception_policy: Optional[pulumi.Input['PolicyMaskingExceptionPolicyArgs']] = None,
                 rollout_policy: Optional[pulumi.Input['PolicyRolloutPolicyArgs']] = None):
        """
        The set of arguments for constructing a Policy resource.
        :param pulumi.Input[builtins.str] parent: The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
        :param pulumi.Input[builtins.str] type: The policy type.
        :param pulumi.Input['PolicyDataSourceQueryPolicyArgs'] data_source_query_policy: Restrict querying admin data sources
        :param pulumi.Input['PolicyDisableCopyDataPolicyArgs'] disable_copy_data_policy: Restrict data copying in SQL Editor (Admins/DBAs allowed)
        :param pulumi.Input[builtins.bool] enforce: Decide if the policy is enforced.
        :param pulumi.Input[builtins.bool] inherit_from_parent: Decide if the policy should inherit from the parent.
        :param pulumi.Input['PolicyRolloutPolicyArgs'] rollout_policy: Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
        """
        pulumi.set(__self__, "parent", parent)
        pulumi.set(__self__, "type", type)
        if data_source_query_policy is not None:
            pulumi.set(__self__, "data_source_query_policy", data_source_query_policy)
        if disable_copy_data_policy is not None:
            pulumi.set(__self__, "disable_copy_data_policy", disable_copy_data_policy)
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if global_masking_policy is not None:
            pulumi.set(__self__, "global_masking_policy", global_masking_policy)
        if inherit_from_parent is not None:
            pulumi.set(__self__, "inherit_from_parent", inherit_from_parent)
        if masking_exception_policy is not None:
            pulumi.set(__self__, "masking_exception_policy", masking_exception_policy)
        if rollout_policy is not None:
            pulumi.set(__self__, "rollout_policy", rollout_policy)

    @property
    @pulumi.getter
    def parent(self) -> pulumi.Input[builtins.str]:
        """
        The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        The policy type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="dataSourceQueryPolicy")
    def data_source_query_policy(self) -> Optional[pulumi.Input['PolicyDataSourceQueryPolicyArgs']]:
        """
        Restrict querying admin data sources
        """
        return pulumi.get(self, "data_source_query_policy")

    @data_source_query_policy.setter
    def data_source_query_policy(self, value: Optional[pulumi.Input['PolicyDataSourceQueryPolicyArgs']]):
        pulumi.set(self, "data_source_query_policy", value)

    @property
    @pulumi.getter(name="disableCopyDataPolicy")
    def disable_copy_data_policy(self) -> Optional[pulumi.Input['PolicyDisableCopyDataPolicyArgs']]:
        """
        Restrict data copying in SQL Editor (Admins/DBAs allowed)
        """
        return pulumi.get(self, "disable_copy_data_policy")

    @disable_copy_data_policy.setter
    def disable_copy_data_policy(self, value: Optional[pulumi.Input['PolicyDisableCopyDataPolicyArgs']]):
        pulumi.set(self, "disable_copy_data_policy", value)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Decide if the policy is enforced.
        """
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enforce", value)

    @property
    @pulumi.getter(name="globalMaskingPolicy")
    def global_masking_policy(self) -> Optional[pulumi.Input['PolicyGlobalMaskingPolicyArgs']]:
        return pulumi.get(self, "global_masking_policy")

    @global_masking_policy.setter
    def global_masking_policy(self, value: Optional[pulumi.Input['PolicyGlobalMaskingPolicyArgs']]):
        pulumi.set(self, "global_masking_policy", value)

    @property
    @pulumi.getter(name="inheritFromParent")
    def inherit_from_parent(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Decide if the policy should inherit from the parent.
        """
        return pulumi.get(self, "inherit_from_parent")

    @inherit_from_parent.setter
    def inherit_from_parent(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inherit_from_parent", value)

    @property
    @pulumi.getter(name="maskingExceptionPolicy")
    def masking_exception_policy(self) -> Optional[pulumi.Input['PolicyMaskingExceptionPolicyArgs']]:
        return pulumi.get(self, "masking_exception_policy")

    @masking_exception_policy.setter
    def masking_exception_policy(self, value: Optional[pulumi.Input['PolicyMaskingExceptionPolicyArgs']]):
        pulumi.set(self, "masking_exception_policy", value)

    @property
    @pulumi.getter(name="rolloutPolicy")
    def rollout_policy(self) -> Optional[pulumi.Input['PolicyRolloutPolicyArgs']]:
        """
        Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
        """
        return pulumi.get(self, "rollout_policy")

    @rollout_policy.setter
    def rollout_policy(self, value: Optional[pulumi.Input['PolicyRolloutPolicyArgs']]):
        pulumi.set(self, "rollout_policy", value)


@pulumi.input_type
class _PolicyState:
    def __init__(__self__, *,
                 data_source_query_policy: Optional[pulumi.Input['PolicyDataSourceQueryPolicyArgs']] = None,
                 disable_copy_data_policy: Optional[pulumi.Input['PolicyDisableCopyDataPolicyArgs']] = None,
                 enforce: Optional[pulumi.Input[builtins.bool]] = None,
                 global_masking_policy: Optional[pulumi.Input['PolicyGlobalMaskingPolicyArgs']] = None,
                 inherit_from_parent: Optional[pulumi.Input[builtins.bool]] = None,
                 masking_exception_policy: Optional[pulumi.Input['PolicyMaskingExceptionPolicyArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 parent: Optional[pulumi.Input[builtins.str]] = None,
                 rollout_policy: Optional[pulumi.Input['PolicyRolloutPolicyArgs']] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Policy resources.
        :param pulumi.Input['PolicyDataSourceQueryPolicyArgs'] data_source_query_policy: Restrict querying admin data sources
        :param pulumi.Input['PolicyDisableCopyDataPolicyArgs'] disable_copy_data_policy: Restrict data copying in SQL Editor (Admins/DBAs allowed)
        :param pulumi.Input[builtins.bool] enforce: Decide if the policy is enforced.
        :param pulumi.Input[builtins.bool] inherit_from_parent: Decide if the policy should inherit from the parent.
        :param pulumi.Input[builtins.str] name: The policy full name
        :param pulumi.Input[builtins.str] parent: The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
        :param pulumi.Input['PolicyRolloutPolicyArgs'] rollout_policy: Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
        :param pulumi.Input[builtins.str] type: The policy type.
        """
        if data_source_query_policy is not None:
            pulumi.set(__self__, "data_source_query_policy", data_source_query_policy)
        if disable_copy_data_policy is not None:
            pulumi.set(__self__, "disable_copy_data_policy", disable_copy_data_policy)
        if enforce is not None:
            pulumi.set(__self__, "enforce", enforce)
        if global_masking_policy is not None:
            pulumi.set(__self__, "global_masking_policy", global_masking_policy)
        if inherit_from_parent is not None:
            pulumi.set(__self__, "inherit_from_parent", inherit_from_parent)
        if masking_exception_policy is not None:
            pulumi.set(__self__, "masking_exception_policy", masking_exception_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if rollout_policy is not None:
            pulumi.set(__self__, "rollout_policy", rollout_policy)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dataSourceQueryPolicy")
    def data_source_query_policy(self) -> Optional[pulumi.Input['PolicyDataSourceQueryPolicyArgs']]:
        """
        Restrict querying admin data sources
        """
        return pulumi.get(self, "data_source_query_policy")

    @data_source_query_policy.setter
    def data_source_query_policy(self, value: Optional[pulumi.Input['PolicyDataSourceQueryPolicyArgs']]):
        pulumi.set(self, "data_source_query_policy", value)

    @property
    @pulumi.getter(name="disableCopyDataPolicy")
    def disable_copy_data_policy(self) -> Optional[pulumi.Input['PolicyDisableCopyDataPolicyArgs']]:
        """
        Restrict data copying in SQL Editor (Admins/DBAs allowed)
        """
        return pulumi.get(self, "disable_copy_data_policy")

    @disable_copy_data_policy.setter
    def disable_copy_data_policy(self, value: Optional[pulumi.Input['PolicyDisableCopyDataPolicyArgs']]):
        pulumi.set(self, "disable_copy_data_policy", value)

    @property
    @pulumi.getter
    def enforce(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Decide if the policy is enforced.
        """
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enforce", value)

    @property
    @pulumi.getter(name="globalMaskingPolicy")
    def global_masking_policy(self) -> Optional[pulumi.Input['PolicyGlobalMaskingPolicyArgs']]:
        return pulumi.get(self, "global_masking_policy")

    @global_masking_policy.setter
    def global_masking_policy(self, value: Optional[pulumi.Input['PolicyGlobalMaskingPolicyArgs']]):
        pulumi.set(self, "global_masking_policy", value)

    @property
    @pulumi.getter(name="inheritFromParent")
    def inherit_from_parent(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Decide if the policy should inherit from the parent.
        """
        return pulumi.get(self, "inherit_from_parent")

    @inherit_from_parent.setter
    def inherit_from_parent(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inherit_from_parent", value)

    @property
    @pulumi.getter(name="maskingExceptionPolicy")
    def masking_exception_policy(self) -> Optional[pulumi.Input['PolicyMaskingExceptionPolicyArgs']]:
        return pulumi.get(self, "masking_exception_policy")

    @masking_exception_policy.setter
    def masking_exception_policy(self, value: Optional[pulumi.Input['PolicyMaskingExceptionPolicyArgs']]):
        pulumi.set(self, "masking_exception_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The policy full name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rolloutPolicy")
    def rollout_policy(self) -> Optional[pulumi.Input['PolicyRolloutPolicyArgs']]:
        """
        Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
        """
        return pulumi.get(self, "rollout_policy")

    @rollout_policy.setter
    def rollout_policy(self, value: Optional[pulumi.Input['PolicyRolloutPolicyArgs']]):
        pulumi.set(self, "rollout_policy", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The policy type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("bytebase:index/policy:Policy")
class Policy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_source_query_policy: Optional[pulumi.Input[Union['PolicyDataSourceQueryPolicyArgs', 'PolicyDataSourceQueryPolicyArgsDict']]] = None,
                 disable_copy_data_policy: Optional[pulumi.Input[Union['PolicyDisableCopyDataPolicyArgs', 'PolicyDisableCopyDataPolicyArgsDict']]] = None,
                 enforce: Optional[pulumi.Input[builtins.bool]] = None,
                 global_masking_policy: Optional[pulumi.Input[Union['PolicyGlobalMaskingPolicyArgs', 'PolicyGlobalMaskingPolicyArgsDict']]] = None,
                 inherit_from_parent: Optional[pulumi.Input[builtins.bool]] = None,
                 masking_exception_policy: Optional[pulumi.Input[Union['PolicyMaskingExceptionPolicyArgs', 'PolicyMaskingExceptionPolicyArgsDict']]] = None,
                 parent: Optional[pulumi.Input[builtins.str]] = None,
                 rollout_policy: Optional[pulumi.Input[Union['PolicyRolloutPolicyArgs', 'PolicyRolloutPolicyArgsDict']]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        The policy resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['PolicyDataSourceQueryPolicyArgs', 'PolicyDataSourceQueryPolicyArgsDict']] data_source_query_policy: Restrict querying admin data sources
        :param pulumi.Input[Union['PolicyDisableCopyDataPolicyArgs', 'PolicyDisableCopyDataPolicyArgsDict']] disable_copy_data_policy: Restrict data copying in SQL Editor (Admins/DBAs allowed)
        :param pulumi.Input[builtins.bool] enforce: Decide if the policy is enforced.
        :param pulumi.Input[builtins.bool] inherit_from_parent: Decide if the policy should inherit from the parent.
        :param pulumi.Input[builtins.str] parent: The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
        :param pulumi.Input[Union['PolicyRolloutPolicyArgs', 'PolicyRolloutPolicyArgsDict']] rollout_policy: Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
        :param pulumi.Input[builtins.str] type: The policy type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The policy resource.

        :param str resource_name: The name of the resource.
        :param PolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_source_query_policy: Optional[pulumi.Input[Union['PolicyDataSourceQueryPolicyArgs', 'PolicyDataSourceQueryPolicyArgsDict']]] = None,
                 disable_copy_data_policy: Optional[pulumi.Input[Union['PolicyDisableCopyDataPolicyArgs', 'PolicyDisableCopyDataPolicyArgsDict']]] = None,
                 enforce: Optional[pulumi.Input[builtins.bool]] = None,
                 global_masking_policy: Optional[pulumi.Input[Union['PolicyGlobalMaskingPolicyArgs', 'PolicyGlobalMaskingPolicyArgsDict']]] = None,
                 inherit_from_parent: Optional[pulumi.Input[builtins.bool]] = None,
                 masking_exception_policy: Optional[pulumi.Input[Union['PolicyMaskingExceptionPolicyArgs', 'PolicyMaskingExceptionPolicyArgsDict']]] = None,
                 parent: Optional[pulumi.Input[builtins.str]] = None,
                 rollout_policy: Optional[pulumi.Input[Union['PolicyRolloutPolicyArgs', 'PolicyRolloutPolicyArgsDict']]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyArgs.__new__(PolicyArgs)

            __props__.__dict__["data_source_query_policy"] = data_source_query_policy
            __props__.__dict__["disable_copy_data_policy"] = disable_copy_data_policy
            __props__.__dict__["enforce"] = enforce
            __props__.__dict__["global_masking_policy"] = global_masking_policy
            __props__.__dict__["inherit_from_parent"] = inherit_from_parent
            __props__.__dict__["masking_exception_policy"] = masking_exception_policy
            if parent is None and not opts.urn:
                raise TypeError("Missing required property 'parent'")
            __props__.__dict__["parent"] = parent
            __props__.__dict__["rollout_policy"] = rollout_policy
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["name"] = None
        super(Policy, __self__).__init__(
            'bytebase:index/policy:Policy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            data_source_query_policy: Optional[pulumi.Input[Union['PolicyDataSourceQueryPolicyArgs', 'PolicyDataSourceQueryPolicyArgsDict']]] = None,
            disable_copy_data_policy: Optional[pulumi.Input[Union['PolicyDisableCopyDataPolicyArgs', 'PolicyDisableCopyDataPolicyArgsDict']]] = None,
            enforce: Optional[pulumi.Input[builtins.bool]] = None,
            global_masking_policy: Optional[pulumi.Input[Union['PolicyGlobalMaskingPolicyArgs', 'PolicyGlobalMaskingPolicyArgsDict']]] = None,
            inherit_from_parent: Optional[pulumi.Input[builtins.bool]] = None,
            masking_exception_policy: Optional[pulumi.Input[Union['PolicyMaskingExceptionPolicyArgs', 'PolicyMaskingExceptionPolicyArgsDict']]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            parent: Optional[pulumi.Input[builtins.str]] = None,
            rollout_policy: Optional[pulumi.Input[Union['PolicyRolloutPolicyArgs', 'PolicyRolloutPolicyArgsDict']]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None) -> 'Policy':
        """
        Get an existing Policy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['PolicyDataSourceQueryPolicyArgs', 'PolicyDataSourceQueryPolicyArgsDict']] data_source_query_policy: Restrict querying admin data sources
        :param pulumi.Input[Union['PolicyDisableCopyDataPolicyArgs', 'PolicyDisableCopyDataPolicyArgsDict']] disable_copy_data_policy: Restrict data copying in SQL Editor (Admins/DBAs allowed)
        :param pulumi.Input[builtins.bool] enforce: Decide if the policy is enforced.
        :param pulumi.Input[builtins.bool] inherit_from_parent: Decide if the policy should inherit from the parent.
        :param pulumi.Input[builtins.str] name: The policy full name
        :param pulumi.Input[builtins.str] parent: The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
        :param pulumi.Input[Union['PolicyRolloutPolicyArgs', 'PolicyRolloutPolicyArgsDict']] rollout_policy: Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
        :param pulumi.Input[builtins.str] type: The policy type.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyState.__new__(_PolicyState)

        __props__.__dict__["data_source_query_policy"] = data_source_query_policy
        __props__.__dict__["disable_copy_data_policy"] = disable_copy_data_policy
        __props__.__dict__["enforce"] = enforce
        __props__.__dict__["global_masking_policy"] = global_masking_policy
        __props__.__dict__["inherit_from_parent"] = inherit_from_parent
        __props__.__dict__["masking_exception_policy"] = masking_exception_policy
        __props__.__dict__["name"] = name
        __props__.__dict__["parent"] = parent
        __props__.__dict__["rollout_policy"] = rollout_policy
        __props__.__dict__["type"] = type
        return Policy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dataSourceQueryPolicy")
    def data_source_query_policy(self) -> pulumi.Output[Optional['outputs.PolicyDataSourceQueryPolicy']]:
        """
        Restrict querying admin data sources
        """
        return pulumi.get(self, "data_source_query_policy")

    @property
    @pulumi.getter(name="disableCopyDataPolicy")
    def disable_copy_data_policy(self) -> pulumi.Output[Optional['outputs.PolicyDisableCopyDataPolicy']]:
        """
        Restrict data copying in SQL Editor (Admins/DBAs allowed)
        """
        return pulumi.get(self, "disable_copy_data_policy")

    @property
    @pulumi.getter
    def enforce(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Decide if the policy is enforced.
        """
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="globalMaskingPolicy")
    def global_masking_policy(self) -> pulumi.Output[Optional['outputs.PolicyGlobalMaskingPolicy']]:
        return pulumi.get(self, "global_masking_policy")

    @property
    @pulumi.getter(name="inheritFromParent")
    def inherit_from_parent(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Decide if the policy should inherit from the parent.
        """
        return pulumi.get(self, "inherit_from_parent")

    @property
    @pulumi.getter(name="maskingExceptionPolicy")
    def masking_exception_policy(self) -> pulumi.Output[Optional['outputs.PolicyMaskingExceptionPolicy']]:
        return pulumi.get(self, "masking_exception_policy")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The policy full name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parent(self) -> pulumi.Output[builtins.str]:
        """
        The policy parent name for the policy, support projects/{resource id}, environments/{resource id}, instances/{resource id}, or instances/{resource id}/databases/{database name}
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rolloutPolicy")
    def rollout_policy(self) -> pulumi.Output[Optional['outputs.PolicyRolloutPolicy']]:
        """
        Control issue rollout. Learn more: https://docs.bytebase.com/administration/environment-policy/rollout-policy
        """
        return pulumi.get(self, "rollout_policy")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The policy type.
        """
        return pulumi.get(self, "type")

