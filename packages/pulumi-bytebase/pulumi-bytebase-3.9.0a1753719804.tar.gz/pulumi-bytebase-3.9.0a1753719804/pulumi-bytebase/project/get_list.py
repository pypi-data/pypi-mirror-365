# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetListResult',
    'AwaitableGetListResult',
    'get_list',
    'get_list_output',
]

@pulumi.output_type
class GetListResult:
    """
    A collection of values returned by getList.
    """
    def __init__(__self__, exclude_default=None, id=None, projects=None, query=None, state=None):
        if exclude_default and not isinstance(exclude_default, bool):
            raise TypeError("Expected argument 'exclude_default' to be a bool")
        pulumi.set(__self__, "exclude_default", exclude_default)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if projects and not isinstance(projects, list):
            raise TypeError("Expected argument 'projects' to be a list")
        pulumi.set(__self__, "projects", projects)
        if query and not isinstance(query, str):
            raise TypeError("Expected argument 'query' to be a str")
        pulumi.set(__self__, "query", query)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="excludeDefault")
    def exclude_default(self) -> Optional[builtins.bool]:
        """
        If not include the default project in the response.
        """
        return pulumi.get(self, "exclude_default")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def projects(self) -> Sequence['outputs.GetListProjectResult']:
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter
    def query(self) -> Optional[builtins.str]:
        """
        Filter projects by name or resource id with wildcard.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def state(self) -> Optional[builtins.str]:
        """
        Filter projects by state. Default ACTIVE.
        """
        return pulumi.get(self, "state")


class AwaitableGetListResult(GetListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetListResult(
            exclude_default=self.exclude_default,
            id=self.id,
            projects=self.projects,
            query=self.query,
            state=self.state)


def get_list(exclude_default: Optional[builtins.bool] = None,
             query: Optional[builtins.str] = None,
             state: Optional[builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetListResult:
    """
    The project data source list.


    :param builtins.bool exclude_default: If not include the default project in the response.
    :param builtins.str query: Filter projects by name or resource id with wildcard.
    :param builtins.str state: Filter projects by state. Default ACTIVE.
    """
    __args__ = dict()
    __args__['excludeDefault'] = exclude_default
    __args__['query'] = query
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:Project/getList:getList', __args__, opts=opts, typ=GetListResult).value

    return AwaitableGetListResult(
        exclude_default=pulumi.get(__ret__, 'exclude_default'),
        id=pulumi.get(__ret__, 'id'),
        projects=pulumi.get(__ret__, 'projects'),
        query=pulumi.get(__ret__, 'query'),
        state=pulumi.get(__ret__, 'state'))
def get_list_output(exclude_default: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                    query: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    state: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetListResult]:
    """
    The project data source list.


    :param builtins.bool exclude_default: If not include the default project in the response.
    :param builtins.str query: Filter projects by name or resource id with wildcard.
    :param builtins.str state: Filter projects by state. Default ACTIVE.
    """
    __args__ = dict()
    __args__['excludeDefault'] = exclude_default
    __args__['query'] = query
    __args__['state'] = state
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:Project/getList:getList', __args__, opts=opts, typ=GetListResult)
    return __ret__.apply(lambda __response__: GetListResult(
        exclude_default=pulumi.get(__response__, 'exclude_default'),
        id=pulumi.get(__response__, 'id'),
        projects=pulumi.get(__response__, 'projects'),
        query=pulumi.get(__response__, 'query'),
        state=pulumi.get(__response__, 'state')))
