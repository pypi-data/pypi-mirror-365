# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProjectArgs', 'Project']

@pulumi.input_type
class ProjectArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[builtins.str],
                 title: pulumi.Input[builtins.str],
                 allow_modify_statement: Optional[pulumi.Input[builtins.bool]] = None,
                 allow_self_approval: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_enable_backup: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_resolve_issue: Optional[pulumi.Input[builtins.bool]] = None,
                 ci_sampling_size: Optional[pulumi.Input[builtins.int]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enforce_issue_title: Optional[pulumi.Input[builtins.bool]] = None,
                 execution_retry_policy: Optional[pulumi.Input[builtins.int]] = None,
                 parallel_tasks_per_rollout: Optional[pulumi.Input[builtins.int]] = None,
                 postgres_database_tenant_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 skip_backup_errors: Optional[pulumi.Input[builtins.bool]] = None,
                 webhooks: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectWebhookArgs']]]] = None):
        """
        The set of arguments for constructing a Project resource.
        :param pulumi.Input[builtins.str] resource_id: The project unique resource id. Cannot change this after created.
        :param pulumi.Input[builtins.str] title: The project title.
        :param pulumi.Input[builtins.bool] allow_modify_statement: Allow modifying statement after issue is created.
        :param pulumi.Input[builtins.bool] allow_self_approval: Whether to allow the issue creator to self-approve the issue.
        :param pulumi.Input[builtins.bool] auto_enable_backup: Whether to automatically enable backup.
        :param pulumi.Input[builtins.bool] auto_resolve_issue: Enable auto resolve issue.
        :param pulumi.Input[builtins.int] ci_sampling_size: The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] databases: The databases full name in the resource.
        :param pulumi.Input[builtins.bool] enforce_issue_title: Enforce issue title created by user instead of generated by Bytebase.
        :param pulumi.Input[builtins.int] execution_retry_policy: The maximum number of retries for the lock timeout issue.
        :param pulumi.Input[builtins.int] parallel_tasks_per_rollout: The maximum number of parallel tasks to run during the rollout.
        :param pulumi.Input[builtins.bool] postgres_database_tenant_mode: Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \\n\\n" statement.
        :param pulumi.Input[builtins.bool] skip_backup_errors: Whether to skip backup errors and continue the data migration.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectWebhookArgs']]] webhooks: The webhooks in the project.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "title", title)
        if allow_modify_statement is not None:
            pulumi.set(__self__, "allow_modify_statement", allow_modify_statement)
        if allow_self_approval is not None:
            pulumi.set(__self__, "allow_self_approval", allow_self_approval)
        if auto_enable_backup is not None:
            pulumi.set(__self__, "auto_enable_backup", auto_enable_backup)
        if auto_resolve_issue is not None:
            pulumi.set(__self__, "auto_resolve_issue", auto_resolve_issue)
        if ci_sampling_size is not None:
            pulumi.set(__self__, "ci_sampling_size", ci_sampling_size)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if enforce_issue_title is not None:
            pulumi.set(__self__, "enforce_issue_title", enforce_issue_title)
        if execution_retry_policy is not None:
            pulumi.set(__self__, "execution_retry_policy", execution_retry_policy)
        if parallel_tasks_per_rollout is not None:
            pulumi.set(__self__, "parallel_tasks_per_rollout", parallel_tasks_per_rollout)
        if postgres_database_tenant_mode is not None:
            pulumi.set(__self__, "postgres_database_tenant_mode", postgres_database_tenant_mode)
        if skip_backup_errors is not None:
            pulumi.set(__self__, "skip_backup_errors", skip_backup_errors)
        if webhooks is not None:
            pulumi.set(__self__, "webhooks", webhooks)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[builtins.str]:
        """
        The project unique resource id. Cannot change this after created.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[builtins.str]:
        """
        The project title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="allowModifyStatement")
    def allow_modify_statement(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Allow modifying statement after issue is created.
        """
        return pulumi.get(self, "allow_modify_statement")

    @allow_modify_statement.setter
    def allow_modify_statement(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_modify_statement", value)

    @property
    @pulumi.getter(name="allowSelfApproval")
    def allow_self_approval(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to allow the issue creator to self-approve the issue.
        """
        return pulumi.get(self, "allow_self_approval")

    @allow_self_approval.setter
    def allow_self_approval(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_self_approval", value)

    @property
    @pulumi.getter(name="autoEnableBackup")
    def auto_enable_backup(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to automatically enable backup.
        """
        return pulumi.get(self, "auto_enable_backup")

    @auto_enable_backup.setter
    def auto_enable_backup(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auto_enable_backup", value)

    @property
    @pulumi.getter(name="autoResolveIssue")
    def auto_resolve_issue(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable auto resolve issue.
        """
        return pulumi.get(self, "auto_resolve_issue")

    @auto_resolve_issue.setter
    def auto_resolve_issue(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auto_resolve_issue", value)

    @property
    @pulumi.getter(name="ciSamplingSize")
    def ci_sampling_size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
        """
        return pulumi.get(self, "ci_sampling_size")

    @ci_sampling_size.setter
    def ci_sampling_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ci_sampling_size", value)

    @property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The databases full name in the resource.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter(name="enforceIssueTitle")
    def enforce_issue_title(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enforce issue title created by user instead of generated by Bytebase.
        """
        return pulumi.get(self, "enforce_issue_title")

    @enforce_issue_title.setter
    def enforce_issue_title(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enforce_issue_title", value)

    @property
    @pulumi.getter(name="executionRetryPolicy")
    def execution_retry_policy(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum number of retries for the lock timeout issue.
        """
        return pulumi.get(self, "execution_retry_policy")

    @execution_retry_policy.setter
    def execution_retry_policy(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "execution_retry_policy", value)

    @property
    @pulumi.getter(name="parallelTasksPerRollout")
    def parallel_tasks_per_rollout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum number of parallel tasks to run during the rollout.
        """
        return pulumi.get(self, "parallel_tasks_per_rollout")

    @parallel_tasks_per_rollout.setter
    def parallel_tasks_per_rollout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "parallel_tasks_per_rollout", value)

    @property
    @pulumi.getter(name="postgresDatabaseTenantMode")
    def postgres_database_tenant_mode(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \\n\\n" statement.
        """
        return pulumi.get(self, "postgres_database_tenant_mode")

    @postgres_database_tenant_mode.setter
    def postgres_database_tenant_mode(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "postgres_database_tenant_mode", value)

    @property
    @pulumi.getter(name="skipBackupErrors")
    def skip_backup_errors(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to skip backup errors and continue the data migration.
        """
        return pulumi.get(self, "skip_backup_errors")

    @skip_backup_errors.setter
    def skip_backup_errors(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "skip_backup_errors", value)

    @property
    @pulumi.getter
    def webhooks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectWebhookArgs']]]]:
        """
        The webhooks in the project.
        """
        return pulumi.get(self, "webhooks")

    @webhooks.setter
    def webhooks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectWebhookArgs']]]]):
        pulumi.set(self, "webhooks", value)


@pulumi.input_type
class _ProjectState:
    def __init__(__self__, *,
                 allow_modify_statement: Optional[pulumi.Input[builtins.bool]] = None,
                 allow_self_approval: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_enable_backup: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_resolve_issue: Optional[pulumi.Input[builtins.bool]] = None,
                 ci_sampling_size: Optional[pulumi.Input[builtins.int]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enforce_issue_title: Optional[pulumi.Input[builtins.bool]] = None,
                 execution_retry_policy: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 parallel_tasks_per_rollout: Optional[pulumi.Input[builtins.int]] = None,
                 postgres_database_tenant_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 skip_backup_errors: Optional[pulumi.Input[builtins.bool]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 webhooks: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectWebhookArgs']]]] = None):
        """
        Input properties used for looking up and filtering Project resources.
        :param pulumi.Input[builtins.bool] allow_modify_statement: Allow modifying statement after issue is created.
        :param pulumi.Input[builtins.bool] allow_self_approval: Whether to allow the issue creator to self-approve the issue.
        :param pulumi.Input[builtins.bool] auto_enable_backup: Whether to automatically enable backup.
        :param pulumi.Input[builtins.bool] auto_resolve_issue: Enable auto resolve issue.
        :param pulumi.Input[builtins.int] ci_sampling_size: The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] databases: The databases full name in the resource.
        :param pulumi.Input[builtins.bool] enforce_issue_title: Enforce issue title created by user instead of generated by Bytebase.
        :param pulumi.Input[builtins.int] execution_retry_policy: The maximum number of retries for the lock timeout issue.
        :param pulumi.Input[builtins.str] name: The project full name in projects/{resource id} format.
        :param pulumi.Input[builtins.int] parallel_tasks_per_rollout: The maximum number of parallel tasks to run during the rollout.
        :param pulumi.Input[builtins.bool] postgres_database_tenant_mode: Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \\n\\n" statement.
        :param pulumi.Input[builtins.str] resource_id: The project unique resource id. Cannot change this after created.
        :param pulumi.Input[builtins.bool] skip_backup_errors: Whether to skip backup errors and continue the data migration.
        :param pulumi.Input[builtins.str] title: The project title.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectWebhookArgs']]] webhooks: The webhooks in the project.
        """
        if allow_modify_statement is not None:
            pulumi.set(__self__, "allow_modify_statement", allow_modify_statement)
        if allow_self_approval is not None:
            pulumi.set(__self__, "allow_self_approval", allow_self_approval)
        if auto_enable_backup is not None:
            pulumi.set(__self__, "auto_enable_backup", auto_enable_backup)
        if auto_resolve_issue is not None:
            pulumi.set(__self__, "auto_resolve_issue", auto_resolve_issue)
        if ci_sampling_size is not None:
            pulumi.set(__self__, "ci_sampling_size", ci_sampling_size)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if enforce_issue_title is not None:
            pulumi.set(__self__, "enforce_issue_title", enforce_issue_title)
        if execution_retry_policy is not None:
            pulumi.set(__self__, "execution_retry_policy", execution_retry_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parallel_tasks_per_rollout is not None:
            pulumi.set(__self__, "parallel_tasks_per_rollout", parallel_tasks_per_rollout)
        if postgres_database_tenant_mode is not None:
            pulumi.set(__self__, "postgres_database_tenant_mode", postgres_database_tenant_mode)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if skip_backup_errors is not None:
            pulumi.set(__self__, "skip_backup_errors", skip_backup_errors)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if webhooks is not None:
            pulumi.set(__self__, "webhooks", webhooks)

    @property
    @pulumi.getter(name="allowModifyStatement")
    def allow_modify_statement(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Allow modifying statement after issue is created.
        """
        return pulumi.get(self, "allow_modify_statement")

    @allow_modify_statement.setter
    def allow_modify_statement(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_modify_statement", value)

    @property
    @pulumi.getter(name="allowSelfApproval")
    def allow_self_approval(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to allow the issue creator to self-approve the issue.
        """
        return pulumi.get(self, "allow_self_approval")

    @allow_self_approval.setter
    def allow_self_approval(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_self_approval", value)

    @property
    @pulumi.getter(name="autoEnableBackup")
    def auto_enable_backup(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to automatically enable backup.
        """
        return pulumi.get(self, "auto_enable_backup")

    @auto_enable_backup.setter
    def auto_enable_backup(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auto_enable_backup", value)

    @property
    @pulumi.getter(name="autoResolveIssue")
    def auto_resolve_issue(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable auto resolve issue.
        """
        return pulumi.get(self, "auto_resolve_issue")

    @auto_resolve_issue.setter
    def auto_resolve_issue(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auto_resolve_issue", value)

    @property
    @pulumi.getter(name="ciSamplingSize")
    def ci_sampling_size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
        """
        return pulumi.get(self, "ci_sampling_size")

    @ci_sampling_size.setter
    def ci_sampling_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ci_sampling_size", value)

    @property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The databases full name in the resource.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter(name="enforceIssueTitle")
    def enforce_issue_title(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enforce issue title created by user instead of generated by Bytebase.
        """
        return pulumi.get(self, "enforce_issue_title")

    @enforce_issue_title.setter
    def enforce_issue_title(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enforce_issue_title", value)

    @property
    @pulumi.getter(name="executionRetryPolicy")
    def execution_retry_policy(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum number of retries for the lock timeout issue.
        """
        return pulumi.get(self, "execution_retry_policy")

    @execution_retry_policy.setter
    def execution_retry_policy(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "execution_retry_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The project full name in projects/{resource id} format.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parallelTasksPerRollout")
    def parallel_tasks_per_rollout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum number of parallel tasks to run during the rollout.
        """
        return pulumi.get(self, "parallel_tasks_per_rollout")

    @parallel_tasks_per_rollout.setter
    def parallel_tasks_per_rollout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "parallel_tasks_per_rollout", value)

    @property
    @pulumi.getter(name="postgresDatabaseTenantMode")
    def postgres_database_tenant_mode(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \\n\\n" statement.
        """
        return pulumi.get(self, "postgres_database_tenant_mode")

    @postgres_database_tenant_mode.setter
    def postgres_database_tenant_mode(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "postgres_database_tenant_mode", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The project unique resource id. Cannot change this after created.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="skipBackupErrors")
    def skip_backup_errors(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to skip backup errors and continue the data migration.
        """
        return pulumi.get(self, "skip_backup_errors")

    @skip_backup_errors.setter
    def skip_backup_errors(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "skip_backup_errors", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The project title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def webhooks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectWebhookArgs']]]]:
        """
        The webhooks in the project.
        """
        return pulumi.get(self, "webhooks")

    @webhooks.setter
    def webhooks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectWebhookArgs']]]]):
        pulumi.set(self, "webhooks", value)


@pulumi.type_token("bytebase:index/project:Project")
class Project(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_modify_statement: Optional[pulumi.Input[builtins.bool]] = None,
                 allow_self_approval: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_enable_backup: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_resolve_issue: Optional[pulumi.Input[builtins.bool]] = None,
                 ci_sampling_size: Optional[pulumi.Input[builtins.int]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enforce_issue_title: Optional[pulumi.Input[builtins.bool]] = None,
                 execution_retry_policy: Optional[pulumi.Input[builtins.int]] = None,
                 parallel_tasks_per_rollout: Optional[pulumi.Input[builtins.int]] = None,
                 postgres_database_tenant_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 skip_backup_errors: Optional[pulumi.Input[builtins.bool]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 webhooks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectWebhookArgs', 'ProjectWebhookArgsDict']]]]] = None,
                 __props__=None):
        """
        The project resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] allow_modify_statement: Allow modifying statement after issue is created.
        :param pulumi.Input[builtins.bool] allow_self_approval: Whether to allow the issue creator to self-approve the issue.
        :param pulumi.Input[builtins.bool] auto_enable_backup: Whether to automatically enable backup.
        :param pulumi.Input[builtins.bool] auto_resolve_issue: Enable auto resolve issue.
        :param pulumi.Input[builtins.int] ci_sampling_size: The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] databases: The databases full name in the resource.
        :param pulumi.Input[builtins.bool] enforce_issue_title: Enforce issue title created by user instead of generated by Bytebase.
        :param pulumi.Input[builtins.int] execution_retry_policy: The maximum number of retries for the lock timeout issue.
        :param pulumi.Input[builtins.int] parallel_tasks_per_rollout: The maximum number of parallel tasks to run during the rollout.
        :param pulumi.Input[builtins.bool] postgres_database_tenant_mode: Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \\n\\n" statement.
        :param pulumi.Input[builtins.str] resource_id: The project unique resource id. Cannot change this after created.
        :param pulumi.Input[builtins.bool] skip_backup_errors: Whether to skip backup errors and continue the data migration.
        :param pulumi.Input[builtins.str] title: The project title.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectWebhookArgs', 'ProjectWebhookArgsDict']]]] webhooks: The webhooks in the project.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The project resource.

        :param str resource_name: The name of the resource.
        :param ProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_modify_statement: Optional[pulumi.Input[builtins.bool]] = None,
                 allow_self_approval: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_enable_backup: Optional[pulumi.Input[builtins.bool]] = None,
                 auto_resolve_issue: Optional[pulumi.Input[builtins.bool]] = None,
                 ci_sampling_size: Optional[pulumi.Input[builtins.int]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enforce_issue_title: Optional[pulumi.Input[builtins.bool]] = None,
                 execution_retry_policy: Optional[pulumi.Input[builtins.int]] = None,
                 parallel_tasks_per_rollout: Optional[pulumi.Input[builtins.int]] = None,
                 postgres_database_tenant_mode: Optional[pulumi.Input[builtins.bool]] = None,
                 resource_id: Optional[pulumi.Input[builtins.str]] = None,
                 skip_backup_errors: Optional[pulumi.Input[builtins.bool]] = None,
                 title: Optional[pulumi.Input[builtins.str]] = None,
                 webhooks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectWebhookArgs', 'ProjectWebhookArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectArgs.__new__(ProjectArgs)

            __props__.__dict__["allow_modify_statement"] = allow_modify_statement
            __props__.__dict__["allow_self_approval"] = allow_self_approval
            __props__.__dict__["auto_enable_backup"] = auto_enable_backup
            __props__.__dict__["auto_resolve_issue"] = auto_resolve_issue
            __props__.__dict__["ci_sampling_size"] = ci_sampling_size
            __props__.__dict__["databases"] = databases
            __props__.__dict__["enforce_issue_title"] = enforce_issue_title
            __props__.__dict__["execution_retry_policy"] = execution_retry_policy
            __props__.__dict__["parallel_tasks_per_rollout"] = parallel_tasks_per_rollout
            __props__.__dict__["postgres_database_tenant_mode"] = postgres_database_tenant_mode
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            __props__.__dict__["skip_backup_errors"] = skip_backup_errors
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            __props__.__dict__["webhooks"] = webhooks
            __props__.__dict__["name"] = None
        super(Project, __self__).__init__(
            'bytebase:index/project:Project',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_modify_statement: Optional[pulumi.Input[builtins.bool]] = None,
            allow_self_approval: Optional[pulumi.Input[builtins.bool]] = None,
            auto_enable_backup: Optional[pulumi.Input[builtins.bool]] = None,
            auto_resolve_issue: Optional[pulumi.Input[builtins.bool]] = None,
            ci_sampling_size: Optional[pulumi.Input[builtins.int]] = None,
            databases: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            enforce_issue_title: Optional[pulumi.Input[builtins.bool]] = None,
            execution_retry_policy: Optional[pulumi.Input[builtins.int]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            parallel_tasks_per_rollout: Optional[pulumi.Input[builtins.int]] = None,
            postgres_database_tenant_mode: Optional[pulumi.Input[builtins.bool]] = None,
            resource_id: Optional[pulumi.Input[builtins.str]] = None,
            skip_backup_errors: Optional[pulumi.Input[builtins.bool]] = None,
            title: Optional[pulumi.Input[builtins.str]] = None,
            webhooks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectWebhookArgs', 'ProjectWebhookArgsDict']]]]] = None) -> 'Project':
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] allow_modify_statement: Allow modifying statement after issue is created.
        :param pulumi.Input[builtins.bool] allow_self_approval: Whether to allow the issue creator to self-approve the issue.
        :param pulumi.Input[builtins.bool] auto_enable_backup: Whether to automatically enable backup.
        :param pulumi.Input[builtins.bool] auto_resolve_issue: Enable auto resolve issue.
        :param pulumi.Input[builtins.int] ci_sampling_size: The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] databases: The databases full name in the resource.
        :param pulumi.Input[builtins.bool] enforce_issue_title: Enforce issue title created by user instead of generated by Bytebase.
        :param pulumi.Input[builtins.int] execution_retry_policy: The maximum number of retries for the lock timeout issue.
        :param pulumi.Input[builtins.str] name: The project full name in projects/{resource id} format.
        :param pulumi.Input[builtins.int] parallel_tasks_per_rollout: The maximum number of parallel tasks to run during the rollout.
        :param pulumi.Input[builtins.bool] postgres_database_tenant_mode: Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \\n\\n" statement.
        :param pulumi.Input[builtins.str] resource_id: The project unique resource id. Cannot change this after created.
        :param pulumi.Input[builtins.bool] skip_backup_errors: Whether to skip backup errors and continue the data migration.
        :param pulumi.Input[builtins.str] title: The project title.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectWebhookArgs', 'ProjectWebhookArgsDict']]]] webhooks: The webhooks in the project.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectState.__new__(_ProjectState)

        __props__.__dict__["allow_modify_statement"] = allow_modify_statement
        __props__.__dict__["allow_self_approval"] = allow_self_approval
        __props__.__dict__["auto_enable_backup"] = auto_enable_backup
        __props__.__dict__["auto_resolve_issue"] = auto_resolve_issue
        __props__.__dict__["ci_sampling_size"] = ci_sampling_size
        __props__.__dict__["databases"] = databases
        __props__.__dict__["enforce_issue_title"] = enforce_issue_title
        __props__.__dict__["execution_retry_policy"] = execution_retry_policy
        __props__.__dict__["name"] = name
        __props__.__dict__["parallel_tasks_per_rollout"] = parallel_tasks_per_rollout
        __props__.__dict__["postgres_database_tenant_mode"] = postgres_database_tenant_mode
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["skip_backup_errors"] = skip_backup_errors
        __props__.__dict__["title"] = title
        __props__.__dict__["webhooks"] = webhooks
        return Project(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowModifyStatement")
    def allow_modify_statement(self) -> pulumi.Output[builtins.bool]:
        """
        Allow modifying statement after issue is created.
        """
        return pulumi.get(self, "allow_modify_statement")

    @property
    @pulumi.getter(name="allowSelfApproval")
    def allow_self_approval(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to allow the issue creator to self-approve the issue.
        """
        return pulumi.get(self, "allow_self_approval")

    @property
    @pulumi.getter(name="autoEnableBackup")
    def auto_enable_backup(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to automatically enable backup.
        """
        return pulumi.get(self, "auto_enable_backup")

    @property
    @pulumi.getter(name="autoResolveIssue")
    def auto_resolve_issue(self) -> pulumi.Output[builtins.bool]:
        """
        Enable auto resolve issue.
        """
        return pulumi.get(self, "auto_resolve_issue")

    @property
    @pulumi.getter(name="ciSamplingSize")
    def ci_sampling_size(self) -> pulumi.Output[builtins.int]:
        """
        The maximum databases of rows to sample during CI data validation. Without specification, sampling is disabled, resulting in a full validation.
        """
        return pulumi.get(self, "ci_sampling_size")

    @property
    @pulumi.getter
    def databases(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        The databases full name in the resource.
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="enforceIssueTitle")
    def enforce_issue_title(self) -> pulumi.Output[builtins.bool]:
        """
        Enforce issue title created by user instead of generated by Bytebase.
        """
        return pulumi.get(self, "enforce_issue_title")

    @property
    @pulumi.getter(name="executionRetryPolicy")
    def execution_retry_policy(self) -> pulumi.Output[builtins.int]:
        """
        The maximum number of retries for the lock timeout issue.
        """
        return pulumi.get(self, "execution_retry_policy")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The project full name in projects/{resource id} format.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parallelTasksPerRollout")
    def parallel_tasks_per_rollout(self) -> pulumi.Output[builtins.int]:
        """
        The maximum number of parallel tasks to run during the rollout.
        """
        return pulumi.get(self, "parallel_tasks_per_rollout")

    @property
    @pulumi.getter(name="postgresDatabaseTenantMode")
    def postgres_database_tenant_mode(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the database tenant mode for PostgreSQL. If enabled, the issue will be created with the pre-appended "set role \\n\\n" statement.
        """
        return pulumi.get(self, "postgres_database_tenant_mode")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[builtins.str]:
        """
        The project unique resource id. Cannot change this after created.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="skipBackupErrors")
    def skip_backup_errors(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to skip backup errors and continue the data migration.
        """
        return pulumi.get(self, "skip_backup_errors")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[builtins.str]:
        """
        The project title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def webhooks(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectWebhook']]]:
        """
        The webhooks in the project.
        """
        return pulumi.get(self, "webhooks")

