# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    """
    A collection of values returned by getInstance.
    """
    def __init__(__self__, activation=None, data_sources=None, databases=None, engine=None, engine_version=None, environment=None, external_link=None, id=None, list_all_databases=None, maximum_connections=None, name=None, resource_id=None, sync_interval=None, title=None):
        if activation and not isinstance(activation, bool):
            raise TypeError("Expected argument 'activation' to be a bool")
        pulumi.set(__self__, "activation", activation)
        if data_sources and not isinstance(data_sources, list):
            raise TypeError("Expected argument 'data_sources' to be a list")
        pulumi.set(__self__, "data_sources", data_sources)
        if databases and not isinstance(databases, list):
            raise TypeError("Expected argument 'databases' to be a list")
        pulumi.set(__self__, "databases", databases)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if external_link and not isinstance(external_link, str):
            raise TypeError("Expected argument 'external_link' to be a str")
        pulumi.set(__self__, "external_link", external_link)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if list_all_databases and not isinstance(list_all_databases, bool):
            raise TypeError("Expected argument 'list_all_databases' to be a bool")
        pulumi.set(__self__, "list_all_databases", list_all_databases)
        if maximum_connections and not isinstance(maximum_connections, int):
            raise TypeError("Expected argument 'maximum_connections' to be a int")
        pulumi.set(__self__, "maximum_connections", maximum_connections)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if sync_interval and not isinstance(sync_interval, int):
            raise TypeError("Expected argument 'sync_interval' to be a int")
        pulumi.set(__self__, "sync_interval", sync_interval)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def activation(self) -> builtins.bool:
        """
        Whether assign license for this instance or not.
        """
        return pulumi.get(self, "activation")

    @property
    @pulumi.getter(name="dataSources")
    def data_sources(self) -> Sequence['outputs.GetInstanceDataSourceResult']:
        return pulumi.get(self, "data_sources")

    @property
    @pulumi.getter
    def databases(self) -> Sequence[builtins.str]:
        """
        The databases full name in the resource.
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def engine(self) -> builtins.str:
        """
        The instance engine. Support MYSQL, POSTGRES, TIDB, SNOWFLAKE, CLICKHOUSE, MONGODB, SQLITE, REDIS, ORACLE, SPANNER, MSSQL, REDSHIFT, MARIADB, OCEANBASE, COCKROACHDB.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> builtins.str:
        """
        The engine version.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def environment(self) -> builtins.str:
        """
        The environment name for your instance in "environments/{resource id}" format.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="externalLink")
    def external_link(self) -> builtins.str:
        """
        The external console URL managing this instance (e.g. AWS RDS console, your in-house DB instance console)
        """
        return pulumi.get(self, "external_link")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listAllDatabases")
    def list_all_databases(self) -> Optional[builtins.bool]:
        """
        List all databases in this instance. If false, will only list 500 databases.
        """
        return pulumi.get(self, "list_all_databases")

    @property
    @pulumi.getter(name="maximumConnections")
    def maximum_connections(self) -> builtins.int:
        """
        The maximum number of connections. The default value is 10.
        """
        return pulumi.get(self, "maximum_connections")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The instance full name in instances/{resource id} format.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The instance unique resource id.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="syncInterval")
    def sync_interval(self) -> builtins.int:
        """
        How often the instance is synced in seconds. Default 0, means never sync.
        """
        return pulumi.get(self, "sync_interval")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        The instance title.
        """
        return pulumi.get(self, "title")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            activation=self.activation,
            data_sources=self.data_sources,
            databases=self.databases,
            engine=self.engine,
            engine_version=self.engine_version,
            environment=self.environment,
            external_link=self.external_link,
            id=self.id,
            list_all_databases=self.list_all_databases,
            maximum_connections=self.maximum_connections,
            name=self.name,
            resource_id=self.resource_id,
            sync_interval=self.sync_interval,
            title=self.title)


def get_instance(list_all_databases: Optional[builtins.bool] = None,
                 resource_id: Optional[builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    The instance data source.


    :param builtins.bool list_all_databases: List all databases in this instance. If false, will only list 500 databases.
    :param builtins.str resource_id: The instance unique resource id.
    """
    __args__ = dict()
    __args__['listAllDatabases'] = list_all_databases
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:index/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        activation=pulumi.get(__ret__, 'activation'),
        data_sources=pulumi.get(__ret__, 'data_sources'),
        databases=pulumi.get(__ret__, 'databases'),
        engine=pulumi.get(__ret__, 'engine'),
        engine_version=pulumi.get(__ret__, 'engine_version'),
        environment=pulumi.get(__ret__, 'environment'),
        external_link=pulumi.get(__ret__, 'external_link'),
        id=pulumi.get(__ret__, 'id'),
        list_all_databases=pulumi.get(__ret__, 'list_all_databases'),
        maximum_connections=pulumi.get(__ret__, 'maximum_connections'),
        name=pulumi.get(__ret__, 'name'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        sync_interval=pulumi.get(__ret__, 'sync_interval'),
        title=pulumi.get(__ret__, 'title'))
def get_instance_output(list_all_databases: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                        resource_id: Optional[pulumi.Input[builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstanceResult]:
    """
    The instance data source.


    :param builtins.bool list_all_databases: List all databases in this instance. If false, will only list 500 databases.
    :param builtins.str resource_id: The instance unique resource id.
    """
    __args__ = dict()
    __args__['listAllDatabases'] = list_all_databases
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:index/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult)
    return __ret__.apply(lambda __response__: GetInstanceResult(
        activation=pulumi.get(__response__, 'activation'),
        data_sources=pulumi.get(__response__, 'data_sources'),
        databases=pulumi.get(__response__, 'databases'),
        engine=pulumi.get(__response__, 'engine'),
        engine_version=pulumi.get(__response__, 'engine_version'),
        environment=pulumi.get(__response__, 'environment'),
        external_link=pulumi.get(__response__, 'external_link'),
        id=pulumi.get(__response__, 'id'),
        list_all_databases=pulumi.get(__response__, 'list_all_databases'),
        maximum_connections=pulumi.get(__response__, 'maximum_connections'),
        name=pulumi.get(__response__, 'name'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        sync_interval=pulumi.get(__response__, 'sync_interval'),
        title=pulumi.get(__response__, 'title')))
