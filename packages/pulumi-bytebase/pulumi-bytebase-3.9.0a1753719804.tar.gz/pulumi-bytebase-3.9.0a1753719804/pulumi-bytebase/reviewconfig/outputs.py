# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetListReviewConfigResult',
    'GetListReviewConfigRuleResult',
]

@pulumi.output_type
class GetListReviewConfigResult(dict):
    def __init__(__self__, *,
                 enabled: builtins.bool,
                 resource_id: builtins.str,
                 resources: Sequence[builtins.str],
                 rules: Sequence['outputs.GetListReviewConfigRuleResult'],
                 title: builtins.str):
        """
        :param builtins.bool enabled: Enable the SQL review config
        :param builtins.str resource_id: The unique resource id for the review config.
        :param Sequence[builtins.str] resources: Resources using the config. We support attach the review config for environments or projects with format {resurce}/{resource id}. For example, environments/test, projects/sample.
        :param Sequence['GetListReviewConfigRuleArgs'] rules: The SQL review rules.
        :param builtins.str title: The title for the review config.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Enable the SQL review config
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The unique resource id for the review config.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def resources(self) -> Sequence[builtins.str]:
        """
        Resources using the config. We support attach the review config for environments or projects with format {resurce}/{resource id}. For example, environments/test, projects/sample.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetListReviewConfigRuleResult']:
        """
        The SQL review rules.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def title(self) -> builtins.str:
        """
        The title for the review config.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetListReviewConfigRuleResult(dict):
    def __init__(__self__, *,
                 comment: builtins.str,
                 engine: builtins.str,
                 level: builtins.str,
                 payload: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str comment: The comment for the rule.
        :param builtins.str engine: The rule for the database engine.
        :param builtins.str level: The rule level.
        :param builtins.str payload: The payload for the rule.
        :param builtins.str type: The rule unique type. Check https://www.bytebase.com/docs/sql-review/review-rules for all rules
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "payload", payload)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comment(self) -> builtins.str:
        """
        The comment for the rule.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def engine(self) -> builtins.str:
        """
        The rule for the database engine.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def level(self) -> builtins.str:
        """
        The rule level.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def payload(self) -> builtins.str:
        """
        The payload for the rule.
        """
        return pulumi.get(self, "payload")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The rule unique type. Check https://www.bytebase.com/docs/sql-review/review-rules for all rules
        """
        return pulumi.get(self, "type")


