# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetListResult',
    'AwaitableGetListResult',
    'get_list',
    'get_list_output',
]

@pulumi.output_type
class GetListResult:
    """
    A collection of values returned by getList.
    """
    def __init__(__self__, email=None, id=None, name=None, project=None, state=None, user_types=None, users=None):
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if user_types and not isinstance(user_types, list):
            raise TypeError("Expected argument 'user_types' to be a list")
        pulumi.set(__self__, "user_types", user_types)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def email(self) -> Optional[builtins.str]:
        """
        Filter users by email with wildcard
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Filter users by name with wildcard
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> Optional[builtins.str]:
        """
        The project full name. Filter users by project.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def state(self) -> Optional[builtins.str]:
        """
        Filter users by state. Default ACTIVE.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userTypes")
    def user_types(self) -> Optional[Sequence[builtins.str]]:
        """
        Filter users by types.
        """
        return pulumi.get(self, "user_types")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetListUserResult']:
        return pulumi.get(self, "users")


class AwaitableGetListResult(GetListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetListResult(
            email=self.email,
            id=self.id,
            name=self.name,
            project=self.project,
            state=self.state,
            user_types=self.user_types,
            users=self.users)


def get_list(email: Optional[builtins.str] = None,
             name: Optional[builtins.str] = None,
             project: Optional[builtins.str] = None,
             state: Optional[builtins.str] = None,
             user_types: Optional[Sequence[builtins.str]] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetListResult:
    """
    The user data source list.


    :param builtins.str email: Filter users by email with wildcard
    :param builtins.str name: Filter users by name with wildcard
    :param builtins.str project: The project full name. Filter users by project.
    :param builtins.str state: Filter users by state. Default ACTIVE.
    :param Sequence[builtins.str] user_types: Filter users by types.
    """
    __args__ = dict()
    __args__['email'] = email
    __args__['name'] = name
    __args__['project'] = project
    __args__['state'] = state
    __args__['userTypes'] = user_types
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bytebase:User/getList:getList', __args__, opts=opts, typ=GetListResult).value

    return AwaitableGetListResult(
        email=pulumi.get(__ret__, 'email'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        project=pulumi.get(__ret__, 'project'),
        state=pulumi.get(__ret__, 'state'),
        user_types=pulumi.get(__ret__, 'user_types'),
        users=pulumi.get(__ret__, 'users'))
def get_list_output(email: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    project: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    state: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    user_types: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetListResult]:
    """
    The user data source list.


    :param builtins.str email: Filter users by email with wildcard
    :param builtins.str name: Filter users by name with wildcard
    :param builtins.str project: The project full name. Filter users by project.
    :param builtins.str state: Filter users by state. Default ACTIVE.
    :param Sequence[builtins.str] user_types: Filter users by types.
    """
    __args__ = dict()
    __args__['email'] = email
    __args__['name'] = name
    __args__['project'] = project
    __args__['state'] = state
    __args__['userTypes'] = user_types
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bytebase:User/getList:getList', __args__, opts=opts, typ=GetListResult)
    return __ret__.apply(lambda __response__: GetListResult(
        email=pulumi.get(__response__, 'email'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        project=pulumi.get(__response__, 'project'),
        state=pulumi.get(__response__, 'state'),
        user_types=pulumi.get(__response__, 'user_types'),
        users=pulumi.get(__response__, 'users')))
