# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ConfigRuleArgs',
    'ConfigRuleArgsDict',
]

MYPY = False

if not MYPY:
    class ConfigRuleArgsDict(TypedDict):
        engine: pulumi.Input[builtins.str]
        """
        The rule for the database engine.
        """
        level: pulumi.Input[builtins.str]
        """
        The rule level.
        """
        type: pulumi.Input[builtins.str]
        """
        The rule unique type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/SQL*REVIEW*RULES_DOCUMENTATION.md#rule-categories for all rules
        """
        comment: NotRequired[pulumi.Input[builtins.str]]
        """
        The comment for the rule.
        """
        payload: NotRequired[pulumi.Input[builtins.str]]
        """
        The payload is a JSON string that varies by rule type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/SQL*REVIEW*RULES_DOCUMENTATION.md#payload-structure-types for all details
        """
elif False:
    ConfigRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigRuleArgs:
    def __init__(__self__, *,
                 engine: pulumi.Input[builtins.str],
                 level: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 comment: Optional[pulumi.Input[builtins.str]] = None,
                 payload: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] engine: The rule for the database engine.
        :param pulumi.Input[builtins.str] level: The rule level.
        :param pulumi.Input[builtins.str] type: The rule unique type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/SQL*REVIEW*RULES_DOCUMENTATION.md#rule-categories for all rules
        :param pulumi.Input[builtins.str] comment: The comment for the rule.
        :param pulumi.Input[builtins.str] payload: The payload is a JSON string that varies by rule type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/SQL*REVIEW*RULES_DOCUMENTATION.md#payload-structure-types for all details
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "type", type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Input[builtins.str]:
        """
        The rule for the database engine.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[builtins.str]:
        """
        The rule level.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        The rule unique type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/SQL*REVIEW*RULES_DOCUMENTATION.md#rule-categories for all rules
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The comment for the rule.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The payload is a JSON string that varies by rule type. Check https://github.com/bytebase/bytebase/blob/main/proto/v1/v1/SQL*REVIEW*RULES_DOCUMENTATION.md#payload-structure-types for all details
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "payload", value)


