[build-system]
build-backend = "hatchling.build"
requires = [ "hatch-docstring-description", "hatch-vcs", "hatchling" ]

[project]
name = "hv-anndata"
readme = "README.md"
license = "BSD-3-Clause"
authors = [ { name = "Philipp A.", email = "flying-sheep@web.de" } ]
requires-python = ">=3.11"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dynamic = [ "description", "version" ]
dependencies = [
  "anndata",
  "bokeh",
  "datashader",
  "holoviews>=1.21.0rc0",
  "numpy",
  "pandas",
  "panel",
  "panel-material-ui>=0.4.0rc1",
  "param",
]

[tool.hatch.metadata.hooks.docstring-description]
[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.default]
extra-dependencies = [ "ipykernel" ]
installer = "uv"
[tool.hatch.envs.hatch-test]
extra-dependencies = [ "ipykernel", "scanpy" ]
[tool.hatch.envs.docs]
scripts.build = "sphinx-build -W --keep-going -b html docs docs/_build/html {args}"
scripts.install-kernel = "python -m ipykernel install --user --name=hv-anndata --display-name=hv-anndata"
extra-dependencies = [
  "ipykernel",
  "ipywidgets",
  "scanpy",
  "pooch",
  "plotly",
  "sphinx",
  "furo",
  "sphinx-autodoc-typehints",
  "myst-nb",
]

[tool.ruff]
lint.select = [ "ALL" ]
lint.ignore = [
  "B019",    # functools.cache is fine to use
  "C408",    # dict(...) calls are good
  "COM812",  # Incompatible with formatter
  "D105",    # magic methods are usually self-explanatory
  "D203",    # 0 instead of 1 blank lines before class docstring
  "D213",    # Multi-line docstring summary should start at the first instead of second line
  "ERA001",
  "FIX002",  # TODOs are fine
  "ISC001",  # Incompatible with formatter
  "N",       # pep8-naming
  "PD901",   # Deprecated
  "PLR0124",
  "PLR0913", # Too many arguments in function definition
  "S603",    # We don’t want to use `subprocess.run(shell=True)`
  "S607",    # We don’t run commands with untrusted input
  "SLF",
  "TD002",   # No need to assign TODOs to some person
  "TRY",
]
lint.per-file-ignores."**/*.ipynb" = [
  "ANN001",
  "ANN201",
  "D103",
  "I002",   # Missing `from __future__ import annotations` is fine
  "T201",   # print is fine
]
lint.per-file-ignores."docs/conf.py" = [
  "INP001", # __init__.py
]
lint.per-file-ignores."src/hv_anndata/__main__.py" = [
  "T201", # print is fine
]
lint.per-file-ignores."tests/*" = [
  "D102",    # Missing docstring in public method
  "D103",    # Missing docstring in public function
  "D105",    # Missing docstring in magic method
  "INP001",  # __init__.py
  "PLR2004", # magic-value-comparison
  "RUF018",  # assert with := is fine
  "S101",    # Use of assert
]
lint.allowed-confusables = [ "×", "’" ]
lint.flake8-copyright.notice-rgx = "SPDX-License-Identifier: MPL-2\\.0"
lint.isort.known-first-party = [ "hv_anndata" ]
lint.isort.required-imports = [ "from __future__ import annotations" ]
lint.pylint.max-args = 7
lint.pylint.max-positional-args = 3

[tool.pytest.ini_options]
addopts = [ "--import-mode=importlib", "--strict-markers" ]
# filterwarnings = [
# "error",
# ]

[tool.coverage.run]
source_pkgs = [ "hv_anndata", "tests" ]
branch = true
parallel = true
omit = [  ]

[tool.coverage.paths]
session_info2 = [ "src/hv_anndata", "*/hv-anndata/src/hv_anndata" ]
tests = [ "tests", "*/hv-anndata/tests" ]

[tool.coverage.report]
exclude_lines = [ "no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:" ]
