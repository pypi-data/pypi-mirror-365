Metadata-Version: 2.4
Name: optimal-voting
Version: 0.0.2
Summary: Functionality to optimize different classes of voting rules for user-defined goals.
Author-email: Ben Armstrong <research@benarmstrong.ca>
License: MIT License
        
        Copyright (c) [2025] [Ben Armstrong]
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Repository, https://github.com/beng341/optimal_voting
Keywords: social choice,voting,optimization,scoring rule
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.25.0
Requires-Dist: numpy>=1.26.4
Requires-Dist: pandas>=2.2.2
Requires-Dist: abcvoting>=2.10.0
Requires-Dist: pref-voting>=1.13.18
Requires-Dist: seaborn>=0.13.2
Requires-Dist: simanneal>=0.5.0
Dynamic: license-file

# Optimal Voting Package

This package allows the application of standard optimization techniques to voting rule design.

Initially, the package uses simulated annealing to find optimal positional scoring rules.
The package includes functionality for:
- generating underlying voter preferences
- converting preferences to utility values
- common utility functions (utilitarian, Nash, egalitarian/Rawlsian, malfare)
- custom scoring functions to allow generating rules optimized for novel targets

NOTE: At the moment, the package is quite basic. Expect changes that break compatibility. If you encounter this and want to use the package in your work you are welcome to email Ben Armstrong and inquire about how best to do so. There are also significant updates planned: different rule types, different optimization methods (especially gradient descent), and more documentation.
