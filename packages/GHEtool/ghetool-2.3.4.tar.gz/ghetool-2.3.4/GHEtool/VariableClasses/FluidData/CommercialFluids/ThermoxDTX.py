"""
This file contains the data of the Thermox DTX coolant from Hydratech.
Visit https://www.hydratech.co.uk/Thermox-DTX for more information.
"""

import numpy as np
from GHEtool.VariableClasses.FluidData.CommercialFluids._CommercialFluids import _CommercialFluids


class ThermoxDTX(_CommercialFluids):

    def __init__(self, volume_ratio: float):
        super().__init__(volume_ratio)

        self._temperatures = np.arange(80, -55, -5)
        self._volume_ratio_array = np.array([22, 28, 33, 38, 42, 46, 50, 52, 54.3]) / 100

        self._freezing_array = np.array([-10, -15, -20, -25, -30, -35, -40, -45, -50])

        self._k_f_array = np.array([
            [0.544, 0.508, 0.480, 0.452, 0.431, 0.412, 0.394, 0.386, 0.374],  # 80°C
            [0.541, 0.506, 0.478, 0.451, 0.432, 0.413, 0.396, 0.387, 0.376],  # 75°C
            [0.537, 0.503, 0.477, 0.451, 0.432, 0.414, 0.397, 0.389, 0.379],  # 70°C
            [0.534, 0.501, 0.475, 0.450, 0.432, 0.415, 0.399, 0.391, 0.381],  # 65°C
            [0.530, 0.498, 0.474, 0.450, 0.432, 0.416, 0.400, 0.393, 0.382],  # 60°C
            [0.527, 0.496, 0.472, 0.449, 0.432, 0.417, 0.402, 0.395, 0.384],  # 55°C
            [0.523, 0.493, 0.471, 0.449, 0.432, 0.418, 0.403, 0.397, 0.387],  # 50°C
            [0.519, 0.491, 0.469, 0.448, 0.432, 0.419, 0.405, 0.399, 0.389],  # 45°C
            [0.516, 0.488, 0.468, 0.448, 0.433, 0.419, 0.406, 0.400, 0.391],  # 40°C
            [0.513, 0.486, 0.466, 0.447, 0.433, 0.420, 0.408, 0.402, 0.393],  # 35°C
            [0.509, 0.484, 0.465, 0.447, 0.433, 0.421, 0.409, 0.403, 0.395],  # 30°C
            [0.506, 0.481, 0.464, 0.446, 0.433, 0.421, 0.410, 0.405, 0.396],  # 25°C
            [0.503, 0.479, 0.462, 0.446, 0.433, 0.422, 0.411, 0.406, 0.398],  # 20°C
            [0.500, 0.477, 0.461, 0.445, 0.433, 0.422, 0.412, 0.408, 0.400],  # 15°C
            [0.497, 0.475, 0.459, 0.444, 0.433, 0.423, 0.413, 0.409, 0.401],  # 10°C
            [0.494, 0.473, 0.458, 0.444, 0.433, 0.424, 0.414, 0.410, 0.403],  # 5°C
            [0.491, 0.472, 0.456, 0.444, 0.433, 0.424, 0.415, 0.411, 0.404],  # 0°C
            [0.488, 0.470, 0.455, 0.443, 0.433, 0.424, 0.416, 0.412, 0.405],  # -5°C
            [0.486, 0.468, 0.454, 0.442, 0.433, 0.425, 0.417, 0.413, 0.406],  # -10°C
            [np.nan, 0.466, 0.453, 0.441, 0.433, 0.425, 0.417, 0.414, 0.407],  # -15°C
            [np.nan, np.nan, 0.451, 0.441, 0.433, 0.425, 0.418, 0.415, 0.409],  # -20°C
            [np.nan, np.nan, np.nan, 0.440, 0.433, 0.425, 0.418, 0.416, 0.410],  # -25°C
            [np.nan, np.nan, np.nan, np.nan, 0.433, 0.426, 0.419, 0.416, 0.411],  # -30°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 0.428, 0.420, 0.417, 0.411],  # -35°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 0.423, 0.417, 0.412],  # -40°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 0.418, 0.413],  # -45°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 0.414],  # -50°C
        ])  # W/(mK)
        self._rho_array = np.array([
            [1003, 1011, 1018, 1024, 1030, 1034, 1040, 1042, 1045],  # 80°C
            [1006, 1014, 1021, 1028, 1033, 1038, 1043, 1046, 1048],  # 75°C
            [1009, 1017, 1025, 1031, 1037, 1041, 1046, 1049, 1052],  # 70°C
            [1012, 1021, 1028, 1034, 1040, 1045, 1050, 1052, 1056],  # 65°C
            [1015, 1024, 1031, 1038, 1043, 1048, 1053, 1056, 1060],  # 60°C
            [1018, 1027, 1034, 1041, 1046, 1052, 1056, 1059, 1063],  # 55°C
            [1020, 1030, 1037, 1044, 1049, 1055, 1059, 1062, 1066],  # 50°C
            [1023, 1032, 1039, 1047, 1052, 1058, 1062, 1065, 1069],  # 45°C
            [1025, 1035, 1042, 1050, 1055, 1061, 1066, 1068, 1072],  # 40°C
            [1028, 1037, 1044, 1052, 1058, 1063, 1069, 1071, 1075],  # 35°C
            [1030, 1039, 1047, 1055, 1061, 1066, 1072, 1074, 1078],  # 30°C
            [1032, 1041, 1050, 1057, 1063, 1068, 1074, 1077, 1081],  # 25°C
            [1034, 1043, 1052, 1059, 1066, 1071, 1077, 1080, 1083],  # 20°C
            [1035, 1045, 1053, 1061, 1068, 1074, 1080, 1083, 1086],  # 15°C
            [1036, 1046, 1055, 1063, 1070, 1076, 1082, 1085, 1089],  # 10°C
            [1037, 1048, 1057, 1065, 1072, 1079, 1084, 1087, 1092],  # 5°C
            [1038, 1049, 1058, 1067, 1074, 1081, 1086, 1090, 1095],  # 0°C
            [1039, 1051, 1059, 1069, 1075, 1082, 1088, 1092, 1097],  # -5°C
            [1041, 1052, 1060, 1070, 1077, 1084, 1091, 1094, 1099],  # -10°C
            [np.nan, 1053, 1061, 1071, 1078, 1086, 1093, 1096, 1101],  # -15°C
            [np.nan, np.nan, 1062, 1072, 1079, 1087, 1095, 1097, 1103],  # -20°C
            [np.nan, np.nan, np.nan, 1073, 1081, 1088, 1096, 1099, 1105],  # -25°C
            [np.nan, np.nan, np.nan, np.nan, 1083, 1089, 1097, 1100, 1106],  # -30°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 1091, 1098, 1101, 1108],  # -35°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 1100, 1104, 1109],  # -40°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 1105, 1111],  # -45°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 1113],  # -50°C
        ])  # kg/m³
        self._mu_array = np.array([
            [0.59, 0.68, 0.75, 0.84, 0.91, 1.00, 1.08, 1.13, 1.21],  # 80°C
            [0.63, 0.72, 0.81, 0.90, 0.99, 1.08, 1.18, 1.23, 1.32],  # 75°C
            [0.68, 0.78, 0.88, 0.99, 1.08, 1.18, 1.29, 1.35, 1.45],  # 70°C
            [0.73, 0.85, 0.95, 1.07, 1.17, 1.26, 1.42, 1.48, 1.59],  # 65°C
            [0.79, 0.92, 1.04, 1.17, 1.29, 1.43, 1.57, 1.65, 1.77],  # 60°C
            [0.86, 1.01, 1.14, 1.29, 1.43, 1.58, 1.75, 1.84, 1.98],  # 55°C
            [0.95, 1.11, 1.26, 1.43, 1.59, 1.77, 1.97, 2.06, 2.23],  # 50°C
            [1.05, 1.23, 1.41, 1.60, 1.79, 1.99, 2.22, 2.34, 2.54],  # 45°C
            [1.17, 1.38, 1.58, 1.81, 2.02, 2.27, 2.54, 2.68, 2.92],  # 40°C
            [1.31, 1.56, 1.79, 2.06, 2.32, 2.60, 2.92, 3.10, 3.38],  # 35°C
            [1.49, 1.77, 2.04, 2.37, 2.67, 3.02, 3.40, 3.61, 3.95],  # 30°C
            [1.71, 2.04, 2.36, 2.75, 3.11, 3.52, 4.00, 4.26, 4.67],  # 25°C
            [1.97, 2.36, 2.75, 3.22, 3.66, 4.16, 4.75, 5.07, 5.58],  # 20°C
            [2.30, 2.77, 3.24, 3.81, 4.34, 4.97, 5.70, 6.10, 6.74],  # 15°C
            [2.72, 3.28, 3.86, 4.57, 5.23, 6.02, 6.93, 7.44, 8.26],  # 10°C
            [3.24, 3.87, 4.70, 5.55, 6.40, 7.40, 8.58, 9.23, 10.30],  # 5°C
            [3.92, 4.81, 5.73, 6.87, 7.97, 9.28, 10.83, 11.70, 13.13],  # 0°C
            [4.83, 5.97, 7.17, 8.67, 10.14, 11.91, 14.02, 15.21, 17.20],  # -5°C
            [5.85, 7.56, 9.16, 11.20, 13.23, 15.70, 18.69, 20.39, 23.26],  # -10°C
            [np.nan, 9.62, 12.01, 14.88, 17.78, 21.38, 25.80, 28.37, 32.76],  # -15°C
            [np.nan, np.nan, 15.75, 20.42, 24.77, 30.25, 37.18, 41.27, 48.30],  # -20°C
            [np.nan, np.nan, np.nan, 27.87, 35.65, 44.89, 56.36, 63.29, 75.39],  # -25°C
            [np.nan, np.nan, np.nan, np.nan, 50.70, 70.04, 91.14, 103.42, 125.11],  # -30°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 103.70, 161.28, 183.97, 219.18],  # -35°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 247.80, 395.42, 401.36],  # -40°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 627.39, 762.70],  # -45°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 1433.75],  # -50°C
        ]) * 1e-6 * self._rho_array  # convert from kinematic viscosity in mm²/s to dynamic viscosity in Pa.s
        self._cp_array = np.array([
            [3.97, 3.89, 3.82, 3.75, 3.68, 3.62, 3.56, 3.53, 3.49],  # 80°C
            [3.97, 3.88, 3.81, 3.73, 3.67, 3.60, 3.55, 3.52, 3.47],  # 75°C
            [3.96, 3.87, 3.80, 3.72, 3.65, 3.59, 3.53, 3.50, 3.45],  # 70°C
            [3.95, 3.86, 3.79, 3.71, 3.64, 3.57, 3.51, 3.48, 3.43],  # 65°C
            [3.94, 3.85, 3.78, 3.69, 3.62, 3.55, 3.49, 3.46, 3.41],  # 60°C
            [3.94, 3.84, 3.77, 3.68, 3.61, 3.54, 3.47, 3.44, 3.39],  # 55°C
            [3.93, 3.83, 3.76, 3.67, 3.59, 3.52, 3.46, 3.42, 3.37],  # 50°C
            [3.92, 3.83, 3.75, 3.65, 3.58, 3.51, 3.44, 3.40, 3.35],  # 45°C
            [3.92, 3.82, 3.74, 3.64, 3.57, 3.49, 3.42, 3.39, 3.33],  # 40°C
            [3.91, 3.81, 3.73, 3.63, 3.55, 3.48, 3.40, 3.37, 3.31],  # 35°C
            [3.91, 3.80, 3.72, 3.62, 3.54, 3.46, 3.39, 3.35, 3.30],  # 30°C
            [3.90, 3.80, 3.71, 3.61, 3.53, 3.45, 3.37, 3.33, 3.28],  # 25°C
            [3.90, 3.79, 3.70, 3.60, 3.51, 3.43, 3.35, 3.31, 3.26],  # 20°C
            [3.89, 3.78, 3.69, 3.59, 3.50, 3.42, 3.34, 3.30, 3.24],  # 15°C
            [3.89, 3.78, 3.68, 3.58, 3.49, 3.40, 3.32, 3.28, 3.22],  # 10°C
            [3.89, 3.77, 3.67, 3.57, 3.48, 3.39, 3.30, 3.26, 3.21],  # 5°C
            [3.88, 3.77, 3.66, 3.56, 3.47, 3.82, 3.29, 3.25, 3.19],  # 0°C
            [3.88, 3.76, 3.65, 3.55, 3.45, 3.36, 3.27, 3.23, 3.17],  # -5°C
            [3.88, 3.76, 3.65, 3.54, 3.44, 3.35, 3.26, 3.22, 3.15],  # -10°C
            [np.nan, 3.76, 3.64, 3.53, 3.43, 3.34, 3.24, 3.20, 3.14],  # -15°C
            [np.nan, np.nan, 3.64, 3.52, 3.42, 3.32, 3.23, 3.18, 3.12],  # -20°C
            [np.nan, np.nan, np.nan, 3.51, 3.41, 3.31, 3.21, 3.17, 3.10],  # -25°C
            [np.nan, np.nan, np.nan, np.nan, 3.40, 3.30, 3.20, 3.15, 3.09],  # -30°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 3.29, 3.19, 3.14, 3.07],  # -35°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 3.17, 3.12, 3.05],  # -40°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 3.11, 3.04],  # -45°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 3.02],  # -50°C
        ]) * 1000  # J/(kgK)

        if self.check_volume_ratio(volume_ratio):
            self._volume_ratio = volume_ratio

        # update nan values
        self._fill_nan_values_vertically()
