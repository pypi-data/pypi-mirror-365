# Generated by Django 5.2.4 on 2025-07-28 10:53

import django.db.models.deletion
import netbox.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models


def create_default_setting(apps, schema_editor):
    """Insert default setting if none exists"""
    Setting = apps.get_model('netpicker', 'Setting')

    # Check if any settings exist
    if not Setting.objects.exists():
        Setting.objects.create(
            server_url='http://sandbox.netpicker.io',
            api_key='...',
            tenant='default',
            connection_status='not_configured'
        )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dcim', '0208_devicerole_uniqueness'),
        ('extras', '0129_fix_script_paths'),
    ]

    operations = [
        migrations.CreateModel(
            name='NetpickerDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('ipaddress', models.CharField()),
                ('tenant', models.CharField()),
                ('platform', models.CharField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('server_url', models.CharField()),
                ('api_key', models.CharField()),
                ('tenant', models.CharField(max_length=250)),
                ('last_synced', models.DateTimeField(auto_now=True, null=True)),
                ('connection_status', models.CharField(default='', editable=False, max_length=50, null=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'setting',
                'verbose_name_plural': 'settings',
            },
            bases=(netbox.models.deletion.DeleteMixin, models.Model),
        ),
        migrations.RunPython(
            create_default_setting,
        ),
        migrations.CreateModel(
            name='MappedDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('ipaddress', models.CharField()),
                ('tenant', models.CharField()),
                ('platform', models.CharField()),
                ('netbox', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='netpickers', to='dcim.device')),
            ],
            options={
                'unique_together': {('ipaddress', 'tenant')},
            },
        ),
    ]
