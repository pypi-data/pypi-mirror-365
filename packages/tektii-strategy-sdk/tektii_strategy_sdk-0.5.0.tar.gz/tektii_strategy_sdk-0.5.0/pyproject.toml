[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools-scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "tektii-strategy-sdk"
version = "0.5.0"
description = "SDK for building and running backtest strategies on the Tektii platform."

readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
authors = [{ email = "support@tektii.com", name = "Tektii Team" }]
maintainers = [{ email = "support@tektii.com", name = "Tektii Team" }]

dependencies = [
    "grpcio>=1.50.0",
    "grpcio-tools>=1.50.0",
    "grpcio-reflection>=1.50.0",
    "grpcio-health-checking>=1.50.0",
    "protobuf>=4.21.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dateutil>=2.8.2",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "requests>=2.28.0",
]

keywords = [
    "trading",
    "backtesting",
    "strategy",
    "quantitative-finance",
    "algorithmic-trading",
    "grpc",
    "simulation",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "Topic :: Office/Business :: Financial :: Investment",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/tektii/tektii-strategy-sdk-python"
Documentation = "https://docs.tektii.com"
Repository = "https://github.com/tektii/tektii-strategy-sdk-python"
Issues = "https://github.com/tektii/tektii-strategy-sdk-python/issues"
Changelog = "https://github.com/tektii/tektii-strategy-sdk-python/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.11.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pylint>=2.16.0",
    "pre-commit>=3.0.0",
    "ipython>=8.0.0",
    "ipdb>=0.13.0",
    "requests>=2.32.0",
    "types-requests>=2.28.0",
    "build>=0.10.0",
    "twine>=4.0.0",
    "wheel>=0.38.0",
]
examples = ["ta>=0.10.0"]

[project.scripts]
tektii = "tektii_sdk.cli:main"

[tool.setuptools]
packages = ["tektii_sdk", "tektii_sdk.apis", "tektii_sdk.proto"]

[tool.setuptools.package-data]
tektii_sdk = ["*.proto", "*_pb2.py", "*_pb2_grpc.py", "__init__.py"]

[tool.black]
line-length = 150
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | tektii_sdk/proto/*_pb2*.py
)/
'''

[tool.isort]
profile = "black"
line_length = 150
skip_glob = ["tektii_sdk/proto/*_pb2*.py"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "grpc.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tektii_sdk.proto.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "requests.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "requires_proto: marks tests that require generated proto files",
]

[tool.coverage.run]
source = ["tektii_sdk"]
omit = ["*/proto/*_pb2*.py", "*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "class .*\\(Protocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pylint.messages_control]
disable = [
    "C0330", # Wrong hanging indentation
    "C0326", # No space allowed around keyword argument assignment
    "R0903", # Too few public methods
    "R0913", # Too many arguments
    "W0212", # Access to a protected member
]

[tool.pylint.format]
max-line-length = 150
