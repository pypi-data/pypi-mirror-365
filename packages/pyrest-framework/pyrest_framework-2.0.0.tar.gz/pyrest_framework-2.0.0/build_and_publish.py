#!/usr/bin/env python3
"""
Script para build e publica√ß√£o do PYREST-FRAMEWORK no PyPI
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(command, description):
    """Executa um comando e mostra o resultado"""
    print(f"\nüîß {description}...")
    print(f"Comando: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        print(f"‚úÖ {description} conclu√≠do com sucesso!")
        if result.stdout:
            print(f"Sa√≠da: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro em {description}:")
        print(f"Erro: {e.stderr}")
        return False

def clean_build():
    """Limpa diret√≥rios de build anteriores"""
    print("\nüßπ Limpando builds anteriores...")
    
    dirs_to_clean = ['build', 'dist', '*.egg-info']
    
    for pattern in dirs_to_clean:
        for path in Path('.').glob(pattern):
            if path.is_dir():
                shutil.rmtree(path)
                print(f"   Removido: {path}")
            elif path.is_file():
                path.unlink()
                print(f"   Removido: {path}")

def check_dependencies():
    """Verifica se as depend√™ncias necess√°rias est√£o instaladas"""
    print("\nüì¶ Verificando depend√™ncias...")
    
    required_packages = ['build', 'twine', 'setuptools', 'wheel']
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"   ‚úÖ {package}")
        except ImportError:
            print(f"   ‚ùå {package} n√£o encontrado")
            print(f"   üí° Instale com: pip install {package}")
            return False
    
    return True

def build_package():
    """Constr√≥i o pacote"""
    print("\nüèóÔ∏è Construindo pacote...")
    
    # Usa pyproject.toml (m√©todo moderno)
    if os.path.exists('pyproject.toml'):
        return run_command('python -m build', 'Build com pyproject.toml')
    else:
        return run_command('python setup.py sdist bdist_wheel', 'Build com setup.py')

def check_package():
    """Verifica o pacote constru√≠do"""
    print("\nüîç Verificando pacote...")
    
    # Verifica se os arquivos foram criados
    dist_files = list(Path('dist').glob('*'))
    
    if not dist_files:
        print("‚ùå Nenhum arquivo encontrado em dist/")
        return False
    
    print(f"‚úÖ Arquivos criados:")
    for file in dist_files:
        print(f"   {file}")
    
    # Verifica com twine
    return run_command('twine check dist/*', 'Verifica√ß√£o com twine')

def test_upload():
    """Faz upload de teste para TestPyPI"""
    print("\nüß™ Fazendo upload de teste para TestPyPI...")
    
    # Verifica se tem credenciais configuradas
    if not os.path.exists(os.path.expanduser('~/.pypirc')):
        print("‚ö†Ô∏è Arquivo ~/.pypirc n√£o encontrado")
        print("üí° Crie o arquivo com suas credenciais:")
        print("""
[distutils]
index-servers =
    testpypi
    pypi

[testpypi]
repository = https://test.pypi.org/legacy/
username = __token__
password=pypi-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

[pypi]
repository = https://upload.pypi.org/legacy/
username = __token__
password=pypi-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        """)
        return False
    
    return run_command('twine upload --repository testpypi dist/*', 'Upload para TestPyPI')

def upload_to_pypi():
    """Faz upload para PyPI oficial"""
    print("\nüöÄ Fazendo upload para PyPI...")
    
    # Confirma√ß√£o do usu√°rio
    response = input("\n‚ö†Ô∏è Tem certeza que quer fazer upload para PyPI oficial? (y/N): ")
    if response.lower() != 'y':
        print("‚ùå Upload cancelado")
        return False
    
    return run_command('twine upload dist/*', 'Upload para PyPI')

def main():
    """Fun√ß√£o principal"""
    print("üöÄ PYREST-FRAMEWORK - Build e Publica√ß√£o")
    print("=" * 50)
    
    # Verifica se estamos no diret√≥rio correto
    if not os.path.exists('pyproject.toml') and not os.path.exists('setup.py'):
        print("‚ùå N√£o encontrei pyproject.toml ou setup.py")
        print("üí° Execute este script no diret√≥rio raiz do projeto")
        sys.exit(1)
    
    # Limpa builds anteriores
    clean_build()
    
    # Verifica depend√™ncias
    if not check_dependencies():
        print("\n‚ùå Depend√™ncias em falta. Instale-as primeiro:")
        print("pip install build twine setuptools wheel")
        sys.exit(1)
    
    # Constr√≥i o pacote
    if not build_package():
        print("\n‚ùå Erro ao construir o pacote")
        sys.exit(1)
    
    # Verifica o pacote
    if not check_package():
        print("\n‚ùå Erro na verifica√ß√£o do pacote")
        sys.exit(1)
    
    print("\n‚úÖ Pacote constru√≠do com sucesso!")
    
    # Pergunta o que fazer
    print("\nüìã Op√ß√µes dispon√≠veis:")
    print("1. Upload de teste para TestPyPI")
    print("2. Upload para PyPI oficial")
    print("3. Apenas construir (sem upload)")
    
    choice = input("\nEscolha uma op√ß√£o (1-3): ")
    
    if choice == '1':
        test_upload()
    elif choice == '2':
        upload_to_pypi()
    elif choice == '3':
        print("\n‚úÖ Build conclu√≠do! Arquivos em dist/")
    else:
        print("\n‚ùå Op√ß√£o inv√°lida")

if __name__ == '__main__':
    main() 