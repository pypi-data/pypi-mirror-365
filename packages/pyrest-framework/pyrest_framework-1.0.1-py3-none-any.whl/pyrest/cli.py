"""
CLI (Command Line Interface) para o PYREST-FRAMEWORK
"""

import argparse
import sys
import os
from pathlib import Path
from .utils import create_app, quick_start, generate_project_template

def create_project(args):
    """Cria um novo projeto PyRest"""
    project_name = args.name
    output_dir = args.output or "."
    
    try:
        generate_project_template(project_name, output_dir)
        print(f"\n‚úÖ Projeto '{project_name}' criado com sucesso!")
        print(f"üìÅ Localiza√ß√£o: {os.path.join(output_dir, project_name)}")
        print(f"\nüöÄ Para come√ßar:")
        print(f"   cd {project_name}")
        print(f"   python app.py")
    except Exception as e:
        print(f"‚ùå Erro ao criar projeto: {e}")
        sys.exit(1)

def serve_app(args):
    """Inicia um servidor PyRest"""
    port = args.port or 3000
    host = args.host or "localhost"
    debug = args.debug
    
    try:
        if args.quick:
            # Modo quick start
            quick_start(port=port, host=host, debug=debug)
        else:
            # Modo normal - carrega app.py
            app_file = args.app or "app.py"
            
            if not os.path.exists(app_file):
                print(f"‚ùå Arquivo '{app_file}' n√£o encontrado")
                print("üí° Use --quick para iniciar um servidor de exemplo")
                sys.exit(1)
            
            # Carrega o app dinamicamente
            import importlib.util
            spec = importlib.util.spec_from_file_location("app", app_file)
            app_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(app_module)
            
            # Se o m√≥dulo tem uma vari√°vel 'app', usa ela
            if hasattr(app_module, 'app'):
                app = app_module.app
                app.listen(port=port, host=host, debug=debug)
            else:
                print(f"‚ùå Vari√°vel 'app' n√£o encontrada em '{app_file}'")
                sys.exit(1)
                
    except KeyboardInterrupt:
        print("\nüõë Servidor parado pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar servidor: {e}")
        sys.exit(1)

def show_info(args):
    """Mostra informa√ß√µes sobre o framework"""
    from . import __version__, __author__, __description__
    
    print("üöÄ PYREST-FRAMEWORK")
    print("=" * 50)
    print(f"Vers√£o: {__version__}")
    print(f"Autor: {__author__}")
    print(f"Descri√ß√£o: {__description__}")
    print("\nüìö Comandos dispon√≠veis:")
    print("   pyrest create <nome> - Cria novo projeto")
    print("   pyrest serve - Inicia servidor")
    print("   pyrest serve --quick - Inicia servidor de exemplo")
    print("   pyrest info - Mostra informa√ß√µes")
    print("\nüåê Documenta√ß√£o: https://github.com/mamadusamadev/pyrest-framework")

def main():
    """Fun√ß√£o principal do CLI"""
    parser = argparse.ArgumentParser(
        description="PYREST-FRAMEWORK - Framework Python para APIs REST",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos:
  pyrest create minha-api
  pyrest serve --quick
  pyrest serve --port 8080 --debug
  pyrest serve app.py --host 0.0.0.0
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Comandos dispon√≠veis')
    
    # Comando create
    create_parser = subparsers.add_parser('create', help='Cria novo projeto')
    create_parser.add_argument('name', help='Nome do projeto')
    create_parser.add_argument('-o', '--output', help='Diret√≥rio de sa√≠da (padr√£o: atual)')
    create_parser.set_defaults(func=create_project)
    
    # Comando serve
    serve_parser = subparsers.add_parser('serve', help='Inicia servidor')
    serve_parser.add_argument('app', nargs='?', help='Arquivo da aplica√ß√£o (padr√£o: app.py)')
    serve_parser.add_argument('-p', '--port', type=int, help='Porta (padr√£o: 3000)')
    serve_parser.add_argument('-H', '--host', help='Host (padr√£o: localhost)')
    serve_parser.add_argument('-d', '--debug', action='store_true', help='Modo debug')
    serve_parser.add_argument('-q', '--quick', action='store_true', help='Inicia servidor de exemplo')
    serve_parser.set_defaults(func=serve_app)
    
    # Comando info
    info_parser = subparsers.add_parser('info', help='Mostra informa√ß√µes do framework')
    info_parser.set_defaults(func=show_info)
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    args.func(args)

if __name__ == '__main__':
    main() 