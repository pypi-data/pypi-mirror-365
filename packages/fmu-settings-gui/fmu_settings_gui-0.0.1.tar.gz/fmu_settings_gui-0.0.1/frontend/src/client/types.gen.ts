// This file is auto-generated by @hey-api/openapi-ts

/**
 * A key-value pair for a known and supported API.
 */
export type ApiKeyReadable = {
    id: string;
};

/**
 * A key-value pair for a known and supported API.
 */
export type ApiKeyWritable = {
    id: string;
    key: string;
};

/**
 * A key-value pair for a known and supported access scope.
 */
export type AccessTokenReadable = {
    id: string;
};

/**
 * A key-value pair for a known and supported access scope.
 */
export type AccessTokenWritable = {
    id: string;
    key: string;
};

/**
 * Contains the coordinate system known to SMDA.
 */
export type CoordinateSystem = {
    identifier: string;
    uuid: string;
};

/**
 * A single country in the list of countries known to SMDA.
 */
export type CountryItem = {
    identifier: string;
    uuid: string;
};

/**
 * A single discovery in the list of discoveries known to SMDA.
 */
export type DiscoveryItem = {
    short_identifier: string;
    uuid: string;
};

/**
 * Path where a .fmu directory may exist.
 */
export type FmuDirPath = {
    path: string;
};

/**
 * Information returned when 'opening' an FMU Directory.
 */
export type FmuProject = {
    path: string;
    project_dir_name: string;
    config: ProjectConfig;
};

/**
 * A single field in the list of fields known to SMDA.
 */
export type FieldItem = {
    identifier: string;
    uuid: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * The ``masterdata`` block contains information related to masterdata.
 *
 * Currently, SMDA holds the masterdata.
 */
export type Masterdata = {
    smda?: Smda | null;
};

/**
 * A generic message to return to the GUI.
 */
export type Message = {
    message: string;
};

/**
 * Returns "ok" if the route is functioning correctly.
 */
export type Ok = {
    status?: 'ok';
};

/**
 * The configuration file in a .fmu directory.
 *
 * Stored as config.json.
 */
export type ProjectConfig = {
    version: string;
    created_at: string;
    created_by: string;
    masterdata: Masterdata;
};

/**
 * Contains SMDA-related attributes.
 */
export type Smda = {
    coordinate_system: CoordinateSystem;
    country: Array<CountryItem>;
    discovery: Array<DiscoveryItem>;
    field: Array<FieldItem>;
    stratigraphic_column: StratigraphicColumn;
};

/**
 * Contains the stratigraphic column known to SMDA.
 */
export type StratigraphicColumn = {
    identifier: string;
    uuid: string;
};

/**
 * Known API keys stored in a user config.
 */
export type UserApiKeys = {
    smda_subscription?: string | null;
};

/**
 * The configuration file in a $HOME/.fmu directory.
 *
 * Stored as config.json.
 */
export type UserConfig = {
    version: string;
    created_at: string;
    user_api_keys: UserApiKeys;
    recent_directories: Array<string>;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type V1DeleteProjectSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/project/';
};

export type V1DeleteProjectSessionErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type V1DeleteProjectSessionError = V1DeleteProjectSessionErrors[keyof V1DeleteProjectSessionErrors];

export type V1DeleteProjectSessionResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type V1DeleteProjectSessionResponse = V1DeleteProjectSessionResponses[keyof V1DeleteProjectSessionResponses];

export type V1GetProjectData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/project/';
};

export type V1GetProjectErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * The OS returned a permissions error while locating or creating .fmu
     */
    403: unknown;
    /**
     * The .fmu directory was unable to be found at or above a given path, or the requested path to create a project .fmu directory at does not exist.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type V1GetProjectError = V1GetProjectErrors[keyof V1GetProjectErrors];

export type V1GetProjectResponses = {
    /**
     * Successful Response
     */
    200: FmuProject;
};

export type V1GetProjectResponse = V1GetProjectResponses[keyof V1GetProjectResponses];

export type V1PostProjectData = {
    body: FmuDirPath;
    path?: never;
    query?: never;
    url: '/api/v1/project/';
};

export type V1PostProjectErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * The OS returned a permissions error while locating or creating .fmu
     */
    403: unknown;
    /**
     * The .fmu directory was unable to be found at or above a given path, or the requested path to create a project .fmu directory at does not exist.
     */
    404: unknown;
    /**
     * A project .fmu directory already exist at a given location, or may possibly not be a directory, i.e. it may be a .fmu file.
     */
    409: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type V1PostProjectError = V1PostProjectErrors[keyof V1PostProjectErrors];

export type V1PostProjectResponses = {
    /**
     * Successful Response
     */
    200: FmuProject;
};

export type V1PostProjectResponse = V1PostProjectResponses[keyof V1PostProjectResponses];

export type V1InitProjectData = {
    body: FmuDirPath;
    path?: never;
    query?: never;
    url: '/api/v1/project/init';
};

export type V1InitProjectErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * The OS returned a permissions error while locating or creating .fmu
     */
    403: unknown;
    /**
     * The .fmu directory was unable to be found at or above a given path, or the requested path to create a project .fmu directory at does not exist.
     */
    404: unknown;
    /**
     * A project .fmu directory already exist at a given location, or may possibly not be a directory, i.e. it may be a .fmu file.
     */
    409: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type V1InitProjectError = V1InitProjectErrors[keyof V1InitProjectErrors];

export type V1InitProjectResponses = {
    /**
     * Successful Response
     */
    200: FmuProject;
};

export type V1InitProjectResponse = V1InitProjectResponses[keyof V1InitProjectResponses];

export type V1GetUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/user/';
};

export type V1GetUserErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * The OS returned a permissions error while locating or creating .fmu
     */
    403: unknown;
    /**
     * The .fmu directory was unable to be found at or above a given path, or the requested path to create a project .fmu directory at does not exist.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type V1GetUserError = V1GetUserErrors[keyof V1GetUserErrors];

export type V1GetUserResponses = {
    /**
     * Successful Response
     */
    200: UserConfig;
};

export type V1GetUserResponse = V1GetUserResponses[keyof V1GetUserResponses];

export type V1PatchApiKeyData = {
    body: ApiKeyWritable;
    path?: never;
    query?: never;
    url: '/api/v1/user/api_key';
};

export type V1PatchApiKeyErrors = {
    /**
     * Occurs when trying to save a key to an unknown API. An API is unknown if it is not a predefined field in the fmu-settings UserAPIKeys model.
     */
    400: unknown;
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * The OS returned a permissions error while locating or creating .fmu
     */
    403: unknown;
    /**
     * The .fmu directory was unable to be found at or above a given path, or the requested path to create a project .fmu directory at does not exist.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type V1PatchApiKeyError = V1PatchApiKeyErrors[keyof V1PatchApiKeyErrors];

export type V1PatchApiKeyResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type V1PatchApiKeyResponse = V1PatchApiKeyResponses[keyof V1PatchApiKeyResponses];

export type V1CreateSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/session/';
};

export type V1CreateSessionErrors = {
    /**
     * Occurs when no token or an invalid token is or is not provided with the x-fmu-settings-api header.
     */
    401: unknown;
    /**
     * Will occur if the operating system claims the user does not have permission to create $HOME/.fmu. If returned something very wrong is happening.
     */
    403: unknown;
    /**
     * Occurs in two cases:
     * - When attempting to create a session when one already exists
     * - When trying to create a user .fmu directory, but it already exists. Typically means that .fmu exists as a file.
     */
    409: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type V1CreateSessionError = V1CreateSessionErrors[keyof V1CreateSessionErrors];

export type V1CreateSessionResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type V1CreateSessionResponse = V1CreateSessionResponses[keyof V1CreateSessionResponses];

export type V1PatchAccessTokenData = {
    body: AccessTokenWritable;
    path?: never;
    query?: never;
    url: '/api/v1/session/access_token';
};

export type V1PatchAccessTokenErrors = {
    /**
     * Occurs when trying to save a key to an unknown access scope. An access scope/token is unknown if it is not a predefined field in the the session manager's 'AccessTokens' model.
     */
    400: unknown;
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type V1PatchAccessTokenError = V1PatchAccessTokenErrors[keyof V1PatchAccessTokenErrors];

export type V1PatchAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type V1PatchAccessTokenResponse = V1PatchAccessTokenResponses[keyof V1PatchAccessTokenResponses];

export type V1GetCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/smda/check';
};

export type V1GetCheckErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type V1GetCheckError = V1GetCheckErrors[keyof V1GetCheckErrors];

export type V1GetCheckResponses = {
    /**
     * Successful Response
     */
    200: Ok;
};

export type V1GetCheckResponse = V1GetCheckResponses[keyof V1GetCheckResponses];

export type V1V1HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/health';
};

export type V1V1HealthCheckErrors = {
    /**
     * No active or valid session was found
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Something unexpected has happened
     */
    500: unknown;
};

export type V1V1HealthCheckError = V1V1HealthCheckErrors[keyof V1V1HealthCheckErrors];

export type V1V1HealthCheckResponses = {
    /**
     * Successful Response
     */
    200: Ok;
};

export type V1V1HealthCheckResponse = V1V1HealthCheckResponses[keyof V1V1HealthCheckResponses];

export type AppHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type AppHealthCheckResponses = {
    /**
     * Successful Response
     */
    200: Ok;
};

export type AppHealthCheckResponse = AppHealthCheckResponses[keyof AppHealthCheckResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8001' | (string & {});
};