// This file is auto-generated by @hey-api/openapi-ts

import { type Options, v1DeleteProjectSession, v1GetProject, v1PostProject, v1InitProject, v1GetUser, v1PatchApiKey, v1CreateSession, v1PatchAccessToken, v1GetCheck, v1V1HealthCheck, appHealthCheck } from '../sdk.gen';
import { type UseMutationOptions, queryOptions } from '@tanstack/react-query';
import type { V1DeleteProjectSessionData, V1DeleteProjectSessionError, V1DeleteProjectSessionResponse, V1GetProjectData, V1PostProjectData, V1PostProjectError, V1PostProjectResponse, V1InitProjectData, V1InitProjectError, V1InitProjectResponse, V1GetUserData, V1PatchApiKeyData, V1PatchApiKeyError, V1PatchApiKeyResponse, V1CreateSessionData, V1CreateSessionError, V1CreateSessionResponse, V1PatchAccessTokenData, V1PatchAccessTokenError, V1PatchAccessTokenResponse, V1GetCheckData, V1V1HealthCheckData, AppHealthCheckData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export const v1DeleteProjectSessionMutation = (options?: Partial<Options<V1DeleteProjectSessionData>>): UseMutationOptions<V1DeleteProjectSessionResponse, AxiosError<V1DeleteProjectSessionError>, Options<V1DeleteProjectSessionData>> => {
    const mutationOptions: UseMutationOptions<V1DeleteProjectSessionResponse, AxiosError<V1DeleteProjectSessionError>, Options<V1DeleteProjectSessionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1DeleteProjectSession({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const v1GetProjectQueryKey = (options?: Options<V1GetProjectData>) => createQueryKey('v1GetProject', options);

export const v1GetProjectOptions = (options?: Options<V1GetProjectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1GetProject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1GetProjectQueryKey(options)
    });
};

export const v1PostProjectQueryKey = (options: Options<V1PostProjectData>) => createQueryKey('v1PostProject', options);

export const v1PostProjectOptions = (options: Options<V1PostProjectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1PostProject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1PostProjectQueryKey(options)
    });
};

export const v1PostProjectMutation = (options?: Partial<Options<V1PostProjectData>>): UseMutationOptions<V1PostProjectResponse, AxiosError<V1PostProjectError>, Options<V1PostProjectData>> => {
    const mutationOptions: UseMutationOptions<V1PostProjectResponse, AxiosError<V1PostProjectError>, Options<V1PostProjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1PostProject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1InitProjectQueryKey = (options: Options<V1InitProjectData>) => createQueryKey('v1InitProject', options);

export const v1InitProjectOptions = (options: Options<V1InitProjectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1InitProject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1InitProjectQueryKey(options)
    });
};

export const v1InitProjectMutation = (options?: Partial<Options<V1InitProjectData>>): UseMutationOptions<V1InitProjectResponse, AxiosError<V1InitProjectError>, Options<V1InitProjectData>> => {
    const mutationOptions: UseMutationOptions<V1InitProjectResponse, AxiosError<V1InitProjectError>, Options<V1InitProjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1InitProject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1GetUserQueryKey = (options?: Options<V1GetUserData>) => createQueryKey('v1GetUser', options);

export const v1GetUserOptions = (options?: Options<V1GetUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1GetUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1GetUserQueryKey(options)
    });
};

export const v1PatchApiKeyMutation = (options?: Partial<Options<V1PatchApiKeyData>>): UseMutationOptions<V1PatchApiKeyResponse, AxiosError<V1PatchApiKeyError>, Options<V1PatchApiKeyData>> => {
    const mutationOptions: UseMutationOptions<V1PatchApiKeyResponse, AxiosError<V1PatchApiKeyError>, Options<V1PatchApiKeyData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1PatchApiKey({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1CreateSessionQueryKey = (options?: Options<V1CreateSessionData>) => createQueryKey('v1CreateSession', options);

export const v1CreateSessionOptions = (options?: Options<V1CreateSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1CreateSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1CreateSessionQueryKey(options)
    });
};

export const v1CreateSessionMutation = (options?: Partial<Options<V1CreateSessionData>>): UseMutationOptions<V1CreateSessionResponse, AxiosError<V1CreateSessionError>, Options<V1CreateSessionData>> => {
    const mutationOptions: UseMutationOptions<V1CreateSessionResponse, AxiosError<V1CreateSessionError>, Options<V1CreateSessionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1CreateSession({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1PatchAccessTokenMutation = (options?: Partial<Options<V1PatchAccessTokenData>>): UseMutationOptions<V1PatchAccessTokenResponse, AxiosError<V1PatchAccessTokenError>, Options<V1PatchAccessTokenData>> => {
    const mutationOptions: UseMutationOptions<V1PatchAccessTokenResponse, AxiosError<V1PatchAccessTokenError>, Options<V1PatchAccessTokenData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await v1PatchAccessToken({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const v1GetCheckQueryKey = (options?: Options<V1GetCheckData>) => createQueryKey('v1GetCheck', options);

export const v1GetCheckOptions = (options?: Options<V1GetCheckData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1GetCheck({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1GetCheckQueryKey(options)
    });
};

export const v1V1HealthCheckQueryKey = (options?: Options<V1V1HealthCheckData>) => createQueryKey('v1V1HealthCheck', options);

export const v1V1HealthCheckOptions = (options?: Options<V1V1HealthCheckData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v1V1HealthCheck({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v1V1HealthCheckQueryKey(options)
    });
};

export const appHealthCheckQueryKey = (options?: Options<AppHealthCheckData>) => createQueryKey('appHealthCheck', options);

export const appHealthCheckOptions = (options?: Options<AppHealthCheckData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await appHealthCheck({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: appHealthCheckQueryKey(options)
    });
};