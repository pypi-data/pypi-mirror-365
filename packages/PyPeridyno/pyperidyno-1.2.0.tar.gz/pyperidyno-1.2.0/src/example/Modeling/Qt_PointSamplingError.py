import PyPeridyno as dyno

scn = dyno.SceneGraph()
scn.setUpperBound(dyno.Vector3f([15.5, 15, 15.5]))
scn.setLowerBound(dyno.Vector3f([-15.5, -15, -15.5]))

obj1 = dyno.SphereModel3f()
scn.addNode(obj1)
obj1.varScale().setValue(dyno.Vector3f([0.7, 0.7, 0.7]))
obj1.varType().setCurrentKey(1)
obj1.varIcosahedronStep().setValue(2)
obj1.varLocation().setValue(dyno.Vector3f([-1, 0.5, 0]))
surfaceModule1 = obj1.graphicsPipeline().findFirstModuleSurface()
surfaceModule1.setColor(dyno.Color(0.2, 0.2, 0.2))
surfaceModule1.setMetallic(1)
surfaceModule1.setRoughness(0.8)

volume1 =  dyno.VolumeOctreeGenerator3f()
scn.addNode(volume1)
volume1.varSpacing().setValue(0.005)
obj1.stateTriangleSet().promoteOutput().connect(volume1.in_triangleSet())

obj2 = dyno.SphereModel3f()
scn.addNode(obj2)
obj2.varScale().setValue(dyno.Vector3f([0.45, 0.45, 0.45]))
obj2.varType().setCurrentKey(1)
obj2.varIcosahedronStep().setValue(2)
obj2.varLocation().setValue(dyno.Vector3f([0.418-1,0.5,0]))
obj2.setVisible(False)
surfaceModule2 = obj2.graphicsPipeline().findFirstModuleSurface()
surfaceModule2.setColor(dyno.Color(0.2, 0.2, 0.2))
surfaceModule2.setMetallic(1)
surfaceModule2.setRoughness(0.8)

volume2 =  dyno.VolumeOctreeGenerator3f()
scn.addNode(volume2)
volume2.varSpacing().setValue(0.005)
obj2.stateTriangleSet().promoteOutput().connect(volume2.in_triangleSet())

volume_Sphere_Uniform = dyno.VolumeOctreeBoolean3f()
scn.addNode(volume_Sphere_Uniform)
volume_Sphere_Uniform.varBooleanType().getDataPtr().setCurrentKey(2)
volume1.connect(volume_Sphere_Uniform.importOctreeA())
volume2.connect(volume_Sphere_Uniform.importOctreeB())
# volume_Sphere_Uniform.graphicsPipeline().disable()

# Points = dyno.SdfSampler3f()
# scn.addNode(Points)
# Points.varSpacing().setValue(0.01)
# volume_Sphere_Uniform.connect(Points.importVolume())
#
# pointVisual = dyno.GLPointVisualModule()
# Points.statePointSet().promoteOutput().connect(pointVisual.inPointSet())
# pointVisual.varPointSize().setValue(0.007)
# pointVisual.varBaseColor().setValue(dyno.Color(0.2, 0.2, 1))
# Points.graphicsPipeline().pushModule(pointVisual)
#
# meshes1 = dyno.SphereModel3f()
# scn.addNode(meshes1)
# meshes1.varLocation().setValue(dyno.Vector3f([1, 0.5, 0]))
# meshes1.varLatitude().setValue(16)
# meshes1.varLongitude().setValue(12)
# meshes1.varScale().setValue(dyno.Vector3f([0.6, 0.6, 0.6]))
# meshes1.varType().setCurrentKey(1)
# meshes1.varIcosahedronStep().setValue(2)
# meshes1.setVisible(False)
# pointset1 = dyno.PointsBehindMesh3f()
# scn.addNode(pointset1)
# pointset1.varGeneratingDirection().setValue(False)
# pointset1.varSamplingDistance().setValue(0.005)
# pointset1.varThickness().setValue(0.045)
# meshes1.stateTriangleSet().connect(pointset1.inTriangleSet())
#
# meshes2 = dyno.CubeModel3f()
# scn.addNode(meshes2)
# meshes2.varLocation().setValue(dyno.Vector3f([2, 0.5, 0]))
# meshes2.varScale().setValue(dyno.Vector3f([0.4, 0.4, 0.4]))
#
# pointset2 = dyno.ParticleRelaxtionOnMesh3f()
# scn.addNode(pointset2)
# pointset2.varIterationNumber().setValue(80)
# pointset2.varSamplingDistance().setValue(0.005)
# pointset2.varThickness().setValue(0.045)
# meshes2.stateTriangleSet().connect(pointset2.inTriangleSet())
# pointset2.graphicsPipeline().clear()
#
# ptRender = dyno.GLPointVisualModule()
# ptRender.setColor(dyno.Color(1, 0, 0))
# ptRender.setColorMapMode(ptRender.ColorMapMode.PER_VERTEX_SHADER)
# pointset2.statePointSet().connect(ptRender.inPointSet())
# pointset2.graphicsPipeline().pushModule(ptRender)
#
# obj3 = dyno.SphereModel3f()
# scn.addNode(obj3)
# obj3.varScale().setValue(dyno.Vector3f([0.7, 0.7, 0.7]))
# obj3.varType().setCurrentKey(1)
# obj3.varIcosahedronStep().setValue(2)
# obj3.varLocation().setValue(dyno.Vector3f([0, 0.5, 0]))
# SurfaceModule4 = obj3.graphicsPipeline().findFirstModuleSurface()
# SurfaceModule4.setColor(dyno.Color(0.2, 0.2, 0.2))
# SurfaceModule4.setMetallic(1)
# SurfaceModule4.setRoughness(0.8)
#
# volume3 = dyno.VolumeOctreeGenerator3f()
# scn.addNode(volume3)
# volume3.varSpacing().setValue(0.005)
# obj3.stateTriangleSet().promoteOutput().connect(volume3.in_triangleSet())

# obj4 = dyno.SphereModel3f()
# obj4.varScale().setValue(dyno.Vector3f([0.45, 0.45, 0.45]))
# obj4.varLocation().setValue(dyno.Vector3f([0.35, 0.5, 0]))
# obj4.varType().setCurrentKey(1)
# obj4.varIcosahedronStep().setValue(2)
# SurfaceModule5 = obj4.graphicsPipeline().findFirstModuleSurface()
# SurfaceModule5.setColor(dyno.Color(0.2, 0.2, 0.2))
# SurfaceModule5.setMetallic(1)
# SurfaceModule5.setRoughness(0.8)
#
# volume4 = dyno.VolumeOctreeGenerator3f()
# scn.addNode(volume4)
# volume4.varSpacing().setValue(0.005)
# obj4.stateTriangleSet().promoteOutput().connect(volume4.in_triangleSet())
#
# # volumeBool2 = dyno.VolumeOctreeBoolean3f()
# # scn.addNode(volumeBool2)
# # volumeBool2.varBooleanType().getDataPtr().setCurrentKey(volumeBool2.BooleanOperation.UNION_SET)
# # volume3.connect(volumeBool2.importOctreeA())
# # volume4.connect(volumeBool2.importOctreeB())
# # volumeBool2.graphicsPipeline().disable()
#
# # poissonPointSet = dyno.PoissonDiskSampling3f()
# # scn.addNode(poissonPointSet)
# # volumeBool2.connect(poissonPointSet.importVolume())



app = dyno.GlfwApp()
app.setSceneGraph(scn)
app.initialize(1366, 768, True)
app.mainLoop()
