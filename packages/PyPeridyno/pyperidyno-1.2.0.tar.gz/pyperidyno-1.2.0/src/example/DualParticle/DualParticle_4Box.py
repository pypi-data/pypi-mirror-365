import PyPeridyno as dyno
from PyPeridyno import Vector3f

scn = dyno.SceneGraph()
scn.setUpperBound(dyno.Vector3f([3, 3, 3]))
scn.setLowerBound(dyno.Vector3f([-3, -3, -3]))

cube1 = dyno.CubeModel3f()
scn.addNode(cube1)
cube1.varLocation().setValue(dyno.Vector3f([0.125, 0.125, 0.125]))
cube1.varLength().setValue(dyno.Vector3f([0.15, 0.15, 0.15]))
cube1.graphicsPipeline().disable()
sampler1 = dyno.ShapeSampler3f()
scn.addNode(sampler1)
sampler1.varSamplingDistance().setValue(0.005)
sampler1.setVisible(False)
cube1.connect(sampler1.importShape())
initialParticles1 = dyno.MakeParticleSystem3f()
scn.addNode(initialParticles1)
sampler1.statePointSet().promoteOuput().connect(initialParticles1.inPoints())

cube2 = dyno.CubeModel3f()
scn.addNode(cube2)
cube2.varLocation().setValue(dyno.Vector3f([-0.125, 0.125, 0.125]))
cube2.varLength().setValue(dyno.Vector3f([0.15, 0.15, 0.15]))
cube2.graphicsPipeline().disable()
sampler2 = dyno.ShapeSampler3f()
scn.addNode(sampler2)
sampler2.varSamplingDistance().setValue(0.005)
sampler2.setVisible(False)
cube2.connect(sampler2.importShape())
initialParticles2 = dyno.MakeParticleSystem3f()
scn.addNode(initialParticles2)
sampler2.statePointSet().promoteOuput().connect(initialParticles2.inPoints())

cube3 = dyno.CubeModel3f()
scn.addNode(cube3)
cube3.varLocation().setValue(dyno.Vector3f([0.125, 0.125, -0.125]))
cube3.varLength().setValue(dyno.Vector3f([0.15, 0.15, 0.15]))
cube3.graphicsPipeline().disable()
sampler3 = dyno.ShapeSampler3f()
scn.addNode(sampler3)
sampler3.varSamplingDistance().setValue(0.005)
sampler3.setVisible(False)
cube3.connect(sampler3.importShape())
initialParticles3 = dyno.MakeParticleSystem3f()
scn.addNode(initialParticles3)
sampler3.statePointSet().promoteOuput().connect(initialParticles3.inPoints())

cube4 = dyno.CubeModel3f()
scn.addNode(cube4)
cube4.varLocation().setValue(dyno.Vector3f([-0.125, 0.125, -0.125]))
cube4.varLength().setValue(dyno.Vector3f([0.15, 0.15, 0.15]))
cube4.graphicsPipeline().disable()
sampler4 = dyno.ShapeSampler3f()
scn.addNode(sampler4)
sampler4.varSamplingDistance().setValue(0.005)
sampler4.setVisible(False)
cube4.connect(sampler4.importShape())
initialParticles4 = dyno.MakeParticleSystem3f()
scn.addNode(initialParticles4)
sampler4.statePointSet().promoteOuput().connect(initialParticles4.inPoints())

fluid = dyno.DualParticleFluid3f()
scn.addNode(fluid)
fluid.varReshuffleParticles().setValue(True)
initialParticles1.connect(fluid.importInitialStates())
initialParticles2.connect(fluid.importInitialStates())
initialParticles3.connect(fluid.importInitialStates())
initialParticles4.connect(fluid.importInitialStates())

# Create a boundary
cubeBoundary = dyno.CubeModel3f()
scn.addNode(cubeBoundary)
cubeBoundary.varLocation().setValue(Vector3f([0, 1, 0]))
cubeBoundary.varLength().setValue(Vector3f([0.5, 2.0, 0.5]))
cubeBoundary.setVisible(False)

cube2vol = dyno.BasicShapeToVolume3f()
scn.addNode(cube2vol)
cube2vol.varGridSpacing().setValue(0.02)
cube2vol.varInerted().setValue(True)
cubeBoundary.connect(cube2vol.importShape())

container = dyno.VolumeBoundary3f()
scn.addNode(container)
cube2vol.connect(container.importVolumes())

fluid.connect(container.importParticleSystems())

calculateNorm = dyno.CalculateNorm3f()
fluid.stateVelocity().connect(calculateNorm.inVec())
fluid.graphicsPipeline().pushModule(calculateNorm)

colorMapper = dyno.ColorMapping3f()
colorMapper.varMax().setValue(5.0)
calculateNorm.outNorm().connect(colorMapper.inScalar())
fluid.graphicsPipeline().pushModule(colorMapper)

ptRender = dyno.GLPointVisualModule()
ptRender.setColor(dyno.Color(1, 0, 0))
ptRender.varPointSize().setValue(0.0035)
ptRender.setColorMapMode(ptRender.ColorMapMode.PER_VERTEX_SHADER)
fluid.statePointSet().connect(ptRender.inPointSet())
colorMapper.outColor().connect(ptRender.inColor())
fluid.graphicsPipeline().pushModule(ptRender)

# A simple color bar widget for node
colorBar = dyno.ImColorbar3f()
colorBar.varMax().setValue(5.0)
colorBar.varFieldName().setValue("Velocity")
calculateNorm.outNorm().connect(colorBar.inScalar())
# add the widget to app
fluid.graphicsPipeline().pushModule(colorBar)

vpRender = dyno.GLPointVisualModule()
vpRender.setColor(dyno.Color(1, 1, 0))
vpRender.setColorMapMode(vpRender.ColorMapMode.PER_VERTEX_SHADER)
fluid.stateVirtualPointSet().connect(vpRender.inPointSet())
vpRender.varPointSize().setValue(0.0005)
fluid.graphicsPipeline().pushModule(vpRender)

app = dyno.GlfwApp()
app.setSceneGraph(scn)
app.initialize(1920, 1080, True)
app.mainLoop()
