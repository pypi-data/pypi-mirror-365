import typing as t

class CoreError(RuntimeError):
    """Base error class for all zhinst.core exceptions.

    All exceptions raised by this library should inherit from this class.

    Args:
        message: The error message
        code: Optional internal LabOne error code
    """

    def __init__(self, message: str, code: t.Optional[int] = None): ...
    @property
    def code(self) -> t.Optional[int]:
        """Error code reported by LabOne."""

class TimeoutError(CoreError, __builtins__.TimeoutError): ...
class ConnectionError(CoreError, __builtins__.ConnectionError): ...
class ReadOnlyError(CoreError): ...
class WriteOnlyError(CoreError): ...
class NotFoundError(CoreError): ...
class DeviceInUseError(CoreError): ...
class DeviceNotFoundError(CoreError): ...
class InvalidArgumentError(CoreError): ...
class InvalidKeywordError(CoreError): ...
class DeviceInterfaceError(CoreError): ...
class SampleLossError(CoreError, EOFError): ...
