Metadata-Version: 2.4
Name: zhinst-core
Version: 25.7.0.507
Summary: Python API for Zurich Instruments Devices
Project-URL: Documentation, https://docs.zhinst.com/labone_api_user_manual
Author-email: Zurich Instruments AG <info@zhinst.com>
License-Expression: MIT
License-File: LICENSE.txt
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: C++
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.9
Requires-Dist: typing-extensions
Requires-Dist: numpy>=1.26.0
Description-Content-Type: text/markdown

# Zurich Instruments LabOne API

The `zhinst-core` package allows communication with Zurich Instruments devices from
the Python programming language. It's the native Python API of LabOne&reg;, the
Zurich Instruments control software.

![Zurich Instruments Arbitrary Waveform Generator and monitor showing LabOne Software](https://people.zhinst.com/~danielw/pypi/hdawg_labone_pic02.jpg)

The documentation for the `zhinst.core` binary extension can be accessed [online](https://docs.zhinst.com/labone_api/index.html) or via the built-in `help` command:

```Python
import zhinst.core
help(zhinst.core)
```

More information about programming with Zurich Instruments devices is available
in the [LabOne Programming
Manual](https://docs.zhinst.com/labone_programming_manual/python.html).

# Uploading wheels to PyPI

## Requirements:
- Any Python (this can be performed using any python installation, it does not
  require the installation for a particular Python build).
- twine package (pip install --upgrade twine)

## Accounts
We have accounts at the main and test PyPI repositories:

https://pypi.org
username: zhinst

https://test.pypi.org
username: zhinst

## Testing
To test, upload to test.pypi.org:
twine upload --repository-url https://test.pypi.org/legacy/ /home/archive/ziReleases/ci-artifacts/branches-18.05/_latest/*whl

## Release
To release, upload to pypi.org:
twine upload /home/archive/ziReleases/ci-artifacts/branches-18.05/_latest/*whl
