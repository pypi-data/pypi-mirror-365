import typing as t
from typing import overload
import abc

_AttributeValue = t.Union[str, int, bool, float]
_AttributeMap = t.Dict[str, _AttributeValue]

class SpanExporter:
    def __init__(self) -> None: ...

class OtlpHttpExporter(SpanExporter):
    def __init__(self, url: str) -> None: ...

class OstreamExporter(SpanExporter):
    def __init__(self) -> None: ...
    def read_traces(self) -> str: ...
    def clear_traces(self) -> None: ...

class SpanProcessor: ...

class BatchSpanProcessor(SpanProcessor):
    def __init__(
        self,
        exporter: SpanExporter,
        num_spans: int,
        export_delay_millis: int,
        max_batch_size: int,
    ) -> None: ...

class Span(abc.ABC):
    @abc.abstractclassmethod
    def set_attribute(self, name: str, value: _AttributeValue) -> None: ...
    @abc.abstractclassmethod
    def register_error(self, message: str) -> None: ...
    @overload
    @abc.abstractclassmethod
    def add_event(self, name: str) -> None: ...
    @overload
    @abc.abstractclassmethod
    def add_event(self, name: str, attributes: _AttributeMap) -> None: ...
    @abc.abstractclassmethod
    def __enter__(self) -> Span: ...
    @abc.abstractclassmethod
    def __exit__(self, exception_type, exception_value, exception_traceback): ...

class TelemetrySpan(Span): ...
class NoopSpan(Span): ...

class Tracer(abc.ABC):
    @overload
    @abc.abstractclassmethod
    def start_span(self, name: str) -> Span: ...
    @overload
    @abc.abstractclassmethod
    def start_span(self, name: str, parent: Span) -> Span: ...
    @overload
    @abc.abstractclassmethod
    def start_span(self, name: str, attributes: _AttributeMap) -> Span: ...
    @overload
    @abc.abstractclassmethod
    def start_span(
        self, name: str, attributes: _AttributeMap, parent: Span
    ) -> Span: ...
    @abc.abstractclassmethod
    def get_current_span(self) -> Span: ...

class TelemetryTracer(Tracer):
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, name: str, version: str) -> None: ...

class NoopTracer(Tracer):
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, name: str, version: str) -> None: ...

def enable_tracing(): ...
def disable_tracing(): ...
def configure(
    attributes: _AttributeMap, exporter: SpanExporter, debugMode: bool = False
): ...
def force_flush(): ...
def shutdown(): ...
