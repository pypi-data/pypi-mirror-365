name: Test geff

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: ${{ matrix.platform }} ${{ matrix.python-version }} ${{ matrix.group }} ${{ matrix.resolution }}
    runs-on: ${{ matrix.platform }}
    env:
      # disable resyncing on uv run
      UV_NO_SYNC: "1"
      # test package pre-releases on cron-scheduled runs
      UV_PRERELEASE: ${{ github.event_name == 'schedule' && 'allow' || 'if-necessary-or-explicit' }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        platform: [ubuntu-latest, macos-latest, windows-latest]
        resolution: [highest, lowest-direct]
        group: [test, test-third-party]
        exclude:
          - group: test
            resolution: lowest-direct # (already tested by third-party group)

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Install dependencies
        run: uv sync --no-dev --group ${{ matrix.group }} --resolution ${{ matrix.resolution }}

      - name: Get witty cache directory
        if: matrix.group == 'test-third-party'
        id: cache-path
        shell: bash
        run: |
          dir=$(uv run python -c 'import witty; print(witty.get_witty_cache_dir())')
          echo "path=$dir" >> "$GITHUB_OUTPUT"

      - name: Restore witty cache
        if: matrix.group == 'test-third-party'
        uses: actions/cache/restore@v4
        id: witty-cache
        with:
          path: ${{ steps.cache-path.outputs.path }}
          key: ${{ matrix.platform }} - ${{ matrix.python-version }}

      - name: Test
        run: |
          uv run coverage run -m pytest --color=yes -v
          uv run coverage xml

      - name: Coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Save witty cache
        if: matrix.group == 'test-third-party'
        uses: actions/cache/save@v4
        with:
          path: ${{ steps.cache-path.outputs.path }}
          key: ${{ matrix.platform }} - ${{ matrix.python-version }}

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
      - name: Run benchmarks
        uses: CodSpeedHQ/action@v3
        with:
          run: uv run --group bench --no-dev pytest --codspeed -v tests/test_bench.py

  build-and-inspect-package:
    name: Build & inspect package.
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: hynek/build-and-inspect-python-package@v2

  upload-to-pypi:
    if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    name: Upload package to PyPI
    needs: build-and-inspect-package
    runs-on: ubuntu-latest
    permissions:
      id-token: write # this permission is required for trusted publishing
      contents: write # this permission is required for generate_release_notes
    steps:
      - name: Download built artifact to dist/
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist
      - name: ðŸš¢ Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: "./dist/*"
