# examples/sentry_sync_example.py

# !/usr/bin/env python3
"""
Example demonstrating Sentry integration with sync operations in Kubiya Workflow SDK.

This script shows that Sentry works seamlessly with:
1. Sync workflow execution
2. Sync tool execution
3. Sync streaming clients
4. Sync error handling
"""

from kubiya_workflow_sdk import (
    capture_exception,
    add_breadcrumb,
    set_workflow_context,
)

# Import sync components
from kubiya_workflow_sdk.client import KubiyaClient
from kubiya_workflow_sdk.tools.executor import ToolExecutor, execute_tool
from kubiya_workflow_sdk.execution import execute_workflow_with_validation


def demonstrate_sync_sentry_integration():
    """Demonstrate Sentry integration with sync operations."""

    print("ðŸš€ Sync Sentry Integration Demo")
    print("=" * 40)

    # Set workflow context for sync operations
    set_workflow_context(
        workflow_id="sync-demo-123",
        workflow_name="sync-sentry-demo",
        runner="sync-demo-runner"
    )

    print("\n1. Sync Tool Execution with Sentry:")
    demonstrate_sync_tool_execution()

    print("\n2. Sync Workflow Streaming with Sentry:")
    demonstrate_sync_workflow_streaming()

    print("\n3. Sync Error Handling with Sentry:")
    demonstrate_sync_error_handling()

    print("\nâœ… Sync Sentry integration demo completed!")


def demonstrate_sync_tool_execution():
    """Show Sentry integration with sync tool execution."""

    add_breadcrumb(
        crumb={"message": "Starting sync tool execution demo", "category": "demo"},
        hint={"category": "demo"},
        data={"operation": "sync_tool_execution"}
    )

    print("   - ToolExecutor: âœ… Sentry integrated")
    print("   - execute_tool(): âœ… Sentry integrated")
    print("   - Error tracking: âœ… Automatic breadcrumbs and exceptions")
    print("   - Performance monitoring: âœ… Request timing tracked")

    try:
        # This would be real sync tool execution:
        # executor = ToolExecutor(api_token="your_token")
        # result = executor.execute("demo-tool", args={"input": "test"})

        # Simulate an error for demo
        raise ValueError("Demo sync tool error")

    except Exception as e:
        capture_exception(e, extra={
            "operation": "sync_tool_demo",
            "tool_name": "demo-tool",
            "sync_context": True
        })
        print(f"   - Exception captured: {type(e).__name__}: {str(e)}")


def demonstrate_sync_workflow_streaming():
    """Show Sentry integration with sync workflow streaming."""
    add_breadcrumb(
        crumb={"message": "Starting sync workflow streaming demo", "category": "demo"},
        hint={"category": "demo"},
        data={"operation": "sync_workflow_streaming"}
    )

    print("   - KubiyaClient: âœ… Sentry integrated")
    print("   - execute_workflow_with_validation(): âœ… Sentry integrated")
    print("   - Sync generators: âœ… Compatible with Sentry")

    workflow_def = {
        "name": "sync-demo-workflow",
        "description": "Demo workflow for sync Sentry integration",
        "steps": [
            {
                "name": "demo-step",
                "description": "Demo step",
                "executor": {
                    "type": "python",
                    "config": {
                        "content": "print('Demo step executed')"
                    }
                }
            }
        ]
    }

    # This would be real sync workflow execution:
    # for event in execute_workflow_with_validation(
    #     workflow_def=workflow_def,
    #     parameters={"demo_param": "value"},
    #     api_token="your_token"
    # ):
    #     print(f"Event: {event}")

    print("   - Workflow context: âœ… Automatically set for sync execution")
    print("   - Breadcrumbs: âœ… Sync execution steps tracked")


def demonstrate_sync_error_handling():
    """Show comprehensive sync error handling with Sentry."""
    add_breadcrumb(
        crumb={"message": "Testing sync error scenarios", "category": "demo"},
        hint={"category": "demo"},
        data={"operation": "sync_error_handling"}
    )

    print("Testing sync error scenarios:")

    # 1. Timeout error (simulated)
    try:
        raise TimeoutError("Demo sync timeout error")
    except TimeoutError as e:
        capture_exception(e, extra={
            "error_type": "sync_timeout",
            "operation": "demo_timeout",
            "sync_context": True
        })
        print("     âœ… Sync timeout error captured")

    # 2. Connection error (simulated)
    try:
        raise ConnectionError("Demo sync connection error")
    except Exception as e:
        capture_exception(e, extra={
            "error_type": "sync_connection",
            "operation": "demo_connection",
            "sync_context": True
        })
        print("     âœ… Sync connection error captured")

    # 3. Task error (simulated)
    def failing_task():
        raise RuntimeError("Demo sync task failure")

    try:
        failing_task()
    except Exception as e:
        capture_exception(e, extra={
            "error_type": "sync_task_failure",
            "operation": "demo_task",
            "sync_context": True
        })
        print("     âœ… Sync task error captured")

    print("   - All sync errors: âœ… Properly captured with context")
    print("   - Sync stack traces: âœ… Full call stack preserved")
    print("   - Sync context: âœ… Main thread information included")


def demonstrate_sentry_sync_configuration():
    """Show Sentry configuration optimized for sync operations."""

    print("\n4. Sync-Optimized Sentry Configuration:")

    sync_config = {
        "dsn": "https://your-dsn@sentry.io/project-id",
        "environment": "production",
        "traces_sample_rate": 0.1,
        "profiles_sample_rate": 0.01,
        "max_breadcrumbs": 100,
        "attach_stacktrace": True,
        "send_default_pii": False,
        "shutdown_timeout": 2,
    }

    print("   Configuration recommendations for sync apps:")
    for key, value in sync_config.items():
        print(f"     {key}: {value}")

    print("\n   âœ… Sentry SDK automatically handles:")
    print("     - Context propagation")
    print("     - Main thread integration")
    print("     - Call stack traces")
    print("     - Operation tracking")
    print("     - Generator monitoring")


def main():
    """Main sync function."""

    print("This demo shows that Sentry integration works seamlessly with all sync")
    print("operations in the Kubiya Workflow SDK.\n")
    print("Key sync components covered:")
    print("â€¢ KubiyaClient (sync workflow execution)")
    print("â€¢ ToolExecutor (sync tool execution)")
    print("â€¢ execute_tool() (sync tool convenience function)")
    print("â€¢ execute_workflow_with_validation() (sync workflow validation)")
    print("â€¢ All sync error handling and performance monitoring")

    print("\nPress Enter to start demo or Ctrl+C to exit...")

    try:
        input()
    except KeyboardInterrupt:
        print("\nðŸ‘‹ Demo cancelled")
        return

    demonstrate_sync_sentry_integration()
    demonstrate_sentry_sync_configuration()

    print("\n" + "=" * 50)
    print("ðŸ“‹ Summary: Sync Sentry Integration")
    print("=" * 50)
    print("âœ… All sync operations are fully supported")
    print("âœ… Automatic error tracking for sync functions")
    print("âœ… Performance monitoring for sync HTTP calls")
    print("âœ… Breadcrumbs work with sync patterns")
    print("âœ… Context preservation across sync boundaries")
    print("âœ… Operation monitoring")
    print("âœ… Generator and streaming support")

    print("\nðŸŽ¯ Sync operations that work with Sentry:")
    print("â€¢ def functions")
    print("â€¢ threading and concurrent operations")
    print("â€¢ requests HTTP calls")
    print("â€¢ generator streaming")
    print("â€¢ context managers (with)")
    print("â€¢ exception handling")

    print("\nFor production sync apps, Sentry provides:")
    print("â€¢ Zero-impact performance monitoring")
    print("â€¢ Error aggregation")
    print("â€¢ Real-time operation insights")
    print("â€¢ Automatic context correlation")


if __name__ == "__main__":
    main()