[project]
name = "cs-debug"
description = "Assorted debugging facilities."
authors = [
    { name = "Cameron Simpson", email = "cs@cskk.id.au" },
]
keywords = [
    "python2",
    "python3",
]
dependencies = [
    "cs.deco>=20250724",
    "cs.fs>=20250728",
    "cs.lex>=20250724",
    "cs.logutils>=20250323",
    "cs.obj>=20250306",
    "cs.pfx>=20250613",
    "cs.py.func>=20250724",
    "cs.py.stack>=20250724",
    "cs.py3>=20220523",
    "cs.seq>=20250724",
    "cs.threads>=20250528",
    "cs.upd>=20250426",
    "cs.x>=20240630",
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 2",
    "Programming Language :: Python :: 3",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
]
version = "20250728"

[project.license]
text = "GNU General Public License v3 or later (GPLv3+)"

[project.urls]
"Monorepo Hg/Mercurial Mirror" = "https://hg.sr.ht/~cameron-simpson/css"
"Monorepo Git Mirror" = "https://github.com/cameron-simpson/css"
"MonoRepo Commits" = "https://bitbucket.org/cameron_simpson/css/commits/branch/main"
Source = "https://github.com/cameron-simpson/css/blob/main/lib/python/cs/debug.py"

[project.readme]
text = """
Assorted debugging facilities.

*Latest release 20250728*:
@trace: several updates/improvements to the trace output.

If the environment variable `$CS_DEBUG_BUILTINS` is set to a comma
separated list of names then the `builtins` module will be monkey
patched with those names, enabling trite debug use of those names
anywhere in the code provided this module has been imported somewhere.

The allowed names are the list `cs.debug.__all__` and include:
* `X`: `cs.x.X`
* `abrk`: a decorator to call `breakpoint()` on an `AssertionError`
* `pformat`: `pprint.pformat`
* `pprint`: `pprint.pprint`
* `print`: `cs.upd.print`
* `r`: `cs.lex.r`
* `redirect_stdout`: `contextlib.redirect_stdout`
* `s`: `cs.lex.s`
* `stack_dump`: dump current `Thread`'s call stack
* `thread_dump` dump the active `Thread`s with their call stacks
* `trace`: the `@trace` decorator
`$CS_DEBUG_BUILTINS` can also be set to `\"1\"` to install all of
`__all__` in the builtins.

Short summary:
* `abrk`: A decorator to intercept certain exceptions (by default `AssertionError`, `NameError`, `RuntimeError`) and call `breakpoint()`. The breakpoint frame contains: - `func`: the wrapper function - `func_a`, `func_kw`: the function positional and keyword arguments.
* `stack_dump`: Dump a stack trace to a logger.
* `thread_dump`: Write thread identifiers and stack traces to the file `fp`.
* `TimingOutLock`: A `Lock` replacement which times out, used for locating deadlock points.
* `trace`: Decorator to report the call and return of a function.

Module contents:
- <a name=\"abrk\"></a>`abrk(*da, **dkw)`: A decorator to intercept certain exceptions
  (by default `AssertionError`, `NameError`, `RuntimeError`)
  and call `breakpoint()`.
  The breakpoint frame contains:
  - `func`: the wrapper function
  - `func_a`, `func_kw`: the function positional and keyword arguments
- <a name=\"stack_dump\"></a>`stack_dump(stack=None, limit=None, logger=None, log_level=None)`: Dump a stack trace to a logger.

  Parameters:
  * `stack`: a stack list as returned by `traceback.extract_stack`.
    If missing or `None`, use the result of `traceback.extract_stack()`.
    If `stack` has a `.tb_frame` or `.__traceback__` attribute,
    extract the stack from that (this covers traceback objects and exceptions).
  * `limit`: a limit to the number of stack entries to dump.
    If missing or `None`, dump all entries.
  * `logger`: a `logger.Logger` ducktype or the name of a logger.
    If missing or `None`, obtain a logger from `logging.getLogger()`.
  * `log_level`: the logging level for the dump.
    If missing or `None`, use `cs.logutils.loginfo.level`.
- <a name=\"thread_dump\"></a>`thread_dump(Ts=None, fp=None)`: Write thread identifiers and stack traces to the file `fp`.

  Parameters:
  * `Ts`: the `Thread`s to dump; if unspecified use `threading.enumerate()`.
  * `fp`: the file to which to write; if unspecified use `sys.stderr`.
- <a name=\"TimingOutLock\"></a>`class TimingOutLock`: A `Lock` replacement which times out, used for locating deadlock points.
- <a name=\"trace\"></a>`trace(*da, **dkw)`: Decorator to report the call and return of a function.

  Decorator parameters:
  * `call`: trace the call, default `True`
  * `retval`: trace the return, default `False`
  * `exception`: trace raised exceptions, default `True`
  * `use_pformat`: present the return value using
    `pformat` instead of `repr`, default `False`
  * `with_caller`: include the caller if this function, default `True`
  * `with_pfx`: include the current `Pfx` prefix, default `False`

# Release Log



*Release 20250728*:
@trace: several updates/improvements to the trace output.

*Release 20250325*:
* stack_dump: stack may also be a traceback object or an exception.
* stack_dump: move the logic to obtain the stack into cs.py.stack.frames().

*Release 20241005*:
* New log_via_print(msg, *args[, file=stdout]) function to use cs.upd.print as a logging call.
* @trace: new $CS_DEBUG_TRACE envvar which may be \"print\" or \"warning\" or \"X\".
* New @abrk decorator to intercept AssertionError, NameError and RuntimeError and call breakpoint.

*Release 20240630*:
Assorted updates.

*Release 20240519*:
trace_caller: access frame.name instead of frame.funcname.

*Release 20240423*:
* Support \"import *\" by populating __all__ with X, r, s, TimingOutLock, thread_dump, stack_dump, trace.
* @trace: include the elapsed time on the return/exception log message.

*Release 20230613.1*:
Bugfix builtins monkey patch.

*Release 20230613*:
Honour $CS_DEBUG_BUILTINS envvar to monkey patch the builtins module, constraints via a white list.

*Release 20230610*:
* DebuggingRLock fixes.
* Move @trace from cs.py.func to cs.debug.
* Drop Lock and RLock alias factories - importers should just use the debugging lock classes directly.
* Rename threading.Thread to threading_Thread.
* Simplify the debugging lock classes.

*Release 20221118*:
stack_dump: cope when cs.logutils.setup_logging not run yet.

*Release 20211208*:
@trace moved to cs.pyfunc, other minor changes.

*Release 20200318*:
Remove use of cs.obj.O, universally supplanted by types.SimpleNamespace.

*Release 20181231*:
* New TimingOutLock for locating deadlock points, grew from debugging cs.vt.index.
* Other minor changes.

*Release 20171231*:
* Update imports for recentchanges.
* New context manager TraceSuite to trace start and end of a code suite.

*Release 20160918*:
selftest(): fix parameter ordering to match unittest.

*Release 20160828*:
Update metadata with \"install_requires\" instead of \"requires\".

*Release 20160827*:
* New openfiles() to return selected pathnames of open files via lsof(8).
* New selftest() to invoke unittests with benefits.
* DebugShell, a cmd.Cmd subclass for debugging - current use case calls this with self.__dict__ in a test case tearDwon.
* debug_object_shell: convenience wrapper for DebugShell to call it on an object's attributes.

*Release 20150116*:
PyPI prep."""
content-type = "text/markdown"

[build-system]
build-backend = "flit_core.buildapi"
requires = [
    "flit_core >=3.2,<4",
]

[tool.flit.module]
name = "cs.debug"
