{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "version": "1.2.0",
  "title": "Claude MPM Agent Schema",
  "description": "Schema definition for Claude MPM agent templates. This schema enforces the structure and validation rules for all agent configurations in the Claude MPM system.",
  "type": "object",
  "required": [
    "schema_version",  // Required: Must match the schema version this agent was built for
    "agent_id",        // Required: Unique identifier for the agent type
    "agent_version",   // Required: Semantic version of this specific agent template
    "agent_type",      // Required: Categorizes the agent's primary function
    "metadata",        // Required: Human-readable information about the agent
    "capabilities",    // Required: Technical specifications and resource requirements
    "instructions"     // Required: System prompt that defines agent behavior
  ],
  "properties": {
    "schema_version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+$",  // Enforces semantic versioning format (X.Y.Z)
      "description": "Schema version for the agent template format. This ensures compatibility between the agent template and the schema validator. Must be updated when breaking changes are made to the schema.",
      "examples": ["1.0.0", "1.2.0"]
    },
    "agent_id": {
      "type": "string",
      "pattern": "^[a-z][a-z0-9_]*$",  // Must start with lowercase letter, followed by lowercase letters, numbers, or underscores
      "description": "Unique agent identifier used for agent discovery and loading. This ID must be unique across all agents in the system and follows snake_case naming convention.",
      "examples": ["research_agent", "engineer_agent", "qa_agent", "security_agent"]
    },
    "agent_version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+$",  // Enforces semantic versioning for agent templates
      "description": "Semantic version of the agent template itself (not the schema). Increment major for breaking changes, minor for new features, patch for bug fixes.",
      "examples": ["1.0.0", "2.1.3"]
    },
    "agent_type": {
      "type": "string",
      "description": "Type of agent that determines its primary function and default capabilities. This categorization helps in agent discovery and capability matching.",
      "enum": [
        "base",              // Generic agent with no specialization
        "engineer",          // Code implementation and development
        "qa",                // Quality assurance and testing
        "documentation",     // Documentation creation and maintenance
        "research",          // Code analysis and research
        "security",          // Security analysis and vulnerability detection
        "ops",               // Operations and infrastructure management
        "data_engineer",     // Data pipeline and ETL development
        "version_control"    // Git and version control operations
      ]
    },
    "metadata": {
      "type": "object",
      "required": [
        "name",         // Human-readable name for UI display
        "description",  // Brief explanation of agent's purpose
        "tags"          // Searchable tags for agent discovery
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 3,      // Minimum 3 characters for meaningful names
          "maxLength": 50,     // Maximum 50 characters to prevent UI overflow
          "description": "Human-readable agent name displayed in UI and logs. Should be concise but descriptive."
        },
        "description": {
          "type": "string",
          "minLength": 10,     // Minimum 10 characters to ensure meaningful descriptions
          "maxLength": 200,    // Maximum 200 characters for conciseness
          "description": "Brief description of agent purpose and capabilities. Used in agent selection and documentation."
        },
        "category": {
          "type": "string",
          "enum": ["engineering", "research", "quality", "operations", "specialized"],
          "description": "Agent category for organization"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-z][a-z0-9-]*$"  // Lowercase letters, numbers, and hyphens only
          },
          "minItems": 1,        // At least one tag required for discovery
          "maxItems": 10,       // Maximum 10 tags to prevent over-tagging
          "uniqueItems": true,  // No duplicate tags allowed
          "description": "Tags for agent discovery and categorization. Used by the agent registry for searching and filtering."
        },
        "author": {
          "type": "string",
          "description": "Agent template author"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Creation timestamp"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp"
        }
      }
    },
    "capabilities": {
      "type": "object",
      "required": [
        "model",          // Claude model version to use
        "tools",          // Array of allowed tools for the agent
        "resource_tier"   // Resource allocation category
      ],
      "properties": {
        "model": {
          "type": "string",
          "enum": [
            // Haiku models - fastest, most cost-effective
            "claude-3-haiku-20240307",
            "claude-3-5-haiku-20241022",
            // Sonnet models - balanced performance
            "claude-3-sonnet-20240229",
            "claude-3-5-sonnet-20241022",
            "claude-3-5-sonnet-20240620",
            "claude-sonnet-4-20250514",
            "claude-4-sonnet-20250514",
            // Opus models - highest capability
            "claude-3-opus-20240229",
            "claude-opus-4-20250514",
            "claude-4-opus-20250514"
          ],
          "description": "Claude model to use for this agent. Choose based on task complexity and performance requirements."
        },
        "tools": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              // File operations
              "Read",          // Read file contents
              "Write",         // Write new files
              "Edit",          // Edit existing files
              "MultiEdit",     // Multiple edits in one operation
              // Search and navigation
              "Grep",          // Search file contents
              "Glob",          // Find files by pattern
              "LS",            // List directory contents
              // System operations
              "Bash",          // Execute shell commands
              // Web operations
              "WebSearch",     // Search the web
              "WebFetch",      // Fetch web content
              // Notebook operations
              "NotebookRead",  // Read Jupyter notebooks
              "NotebookEdit",  // Edit Jupyter notebooks
              // Workflow operations
              "TodoWrite",     // Manage task lists
              "ExitPlanMode",  // Exit planning mode
              // CLI tools (future expansion)
              "git",           // Git operations
              "docker",        // Docker commands
              "kubectl",       // Kubernetes operations
              "terraform",     // Infrastructure as code
              "aws",           // AWS CLI
              "gcloud",        // Google Cloud CLI
              "azure"          // Azure CLI
            ]
          },
          "uniqueItems": true,  // Each tool can only be listed once
          "description": "Available tools for the agent. Tools determine what operations the agent can perform."
        },
        "resource_tier": {
          "type": "string",
          "enum": [
            "basic",         // Default resources for simple tasks
            "standard",      // Medium resources for typical operations
            "intensive",     // High resources for complex tasks
            "lightweight"    // Minimal resources for quick operations
          ],
          "description": "Resource allocation tier that determines memory, CPU, and timeout limits. See definitions section for specific limits."
        },
        "max_tokens": {
          "type": "integer",
          "minimum": 1000,      // Minimum for meaningful responses
          "maximum": 200000,    // Maximum supported by Claude models
          "default": 8192,      // Default suitable for most tasks
          "description": "Maximum tokens for response generation. Higher values allow longer responses but increase cost and latency."
        },
        "temperature": {
          "type": "number",
          "minimum": 0,         // 0 = deterministic, focused
          "maximum": 1,         // 1 = creative, varied
          "default": 0.7,       // Balanced default
          "description": "Model temperature setting controlling response randomness. Lower values for consistency, higher for creativity."
        },
        "timeout": {
          "type": "integer",
          "minimum": 30,        // Minimum 30 seconds for basic operations
          "maximum": 3600,      // Maximum 1 hour for long-running tasks
          "default": 300,       // Default 5 minutes
          "description": "Operation timeout in seconds. Should align with resource_tier settings."
        },
        "memory_limit": {
          "type": "integer",
          "minimum": 512,
          "maximum": 8192,
          "description": "Memory limit in MB (for resource tier)"
        },
        "cpu_limit": {
          "type": "integer",
          "minimum": 10,
          "maximum": 100,
          "description": "CPU limit percentage (for resource tier)"
        },
        "network_access": {
          "type": "boolean",
          "default": false,
          "description": "Whether agent needs network access"
        },
        "file_access": {
          "type": "object",
          "properties": {
            "read_paths": {
              "type": "array",
              "items": {"type": "string"},
              "description": "Allowed read paths"
            },
            "write_paths": {
              "type": "array",
              "items": {"type": "string"},
              "description": "Allowed write paths"
            }
          }
        },
        "allowed_tools": {
          "type": "array",
          "items": {"type": "string"},
          "description": "Glob patterns for allowed file paths. Restricts which files the agent can access (e.g., 'tests/**' for test files only)."
        },
        "disallowed_tools": {
          "type": "array",
          "items": {"type": "string"},
          "description": "Tool names to explicitly disallow, overriding the tools array. Use for security restrictions (e.g., 'Bash' to prevent shell access)."
        }
      }
    },
    "instructions": {
      "type": "string",
      "minLength": 100,      // Minimum to ensure meaningful instructions
      "maxLength": 8000,     // Maximum to fit within context limits
      "description": "Agent system instructions that define behavior, approach, and constraints. This becomes the agent's system prompt."
    },
    "knowledge": {
      "type": "object",
      "description": "Agent-specific knowledge and context",
      "properties": {
        "domain_expertise": {
          "type": "array",
          "items": {"type": "string"},
          "description": "Areas of expertise"
        },
        "best_practices": {
          "type": "array",
          "items": {"type": "string"},
          "description": "Best practices the agent follows"
        },
        "constraints": {
          "type": "array",
          "items": {"type": "string"},
          "description": "Operating constraints"
        },
        "examples": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "scenario": {"type": "string"},
              "approach": {"type": "string"}
            }
          },
          "description": "Example scenarios and approaches"
        }
      }
    },
    "interactions": {
      "type": "object",
      "description": "Agent interaction patterns",
      "properties": {
        "input_format": {
          "type": "object",
          "properties": {
            "required_fields": {
              "type": "array",
              "items": {"type": "string"}
            },
            "optional_fields": {
              "type": "array",
              "items": {"type": "string"}
            }
          }
        },
        "output_format": {
          "type": "object",
          "properties": {
            "structure": {
              "type": "string",
              "enum": ["markdown", "json", "structured", "free-form"]
            },
            "includes": {
              "type": "array",
              "items": {"type": "string"}
            }
          }
        },
        "handoff_agents": {
          "type": "array",
          "items": {"type": "string"},
          "description": "Agents this agent can hand off to"
        },
        "triggers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "condition": {"type": "string"},
              "action": {"type": "string"}
            }
          },
          "description": "Conditions that trigger specific actions"
        }
      }
    },
    "testing": {
      "type": "object",
      "description": "Testing configuration for the agent",
      "properties": {
        "test_cases": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["input", "expected_behavior"],
            "properties": {
              "name": {"type": "string"},
              "input": {"type": "string"},
              "expected_behavior": {"type": "string"},
              "validation_criteria": {
                "type": "array",
                "items": {"type": "string"}
              }
            }
          }
        },
        "performance_benchmarks": {
          "type": "object",
          "properties": {
            "response_time": {"type": "integer"},
            "token_usage": {"type": "integer"},
            "success_rate": {"type": "number"}
          }
        }
      }
    },
    "hooks": {
      "type": "object",
      "description": "Hook configurations for extensibility",
      "properties": {
        "pre_execution": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {"type": "string"},
              "enabled": {"type": "boolean"}
            }
          }
        },
        "post_execution": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {"type": "string"},
              "enabled": {"type": "boolean"}
            }
          }
        }
      }
    }
  },
  "additionalProperties": false,  // Strict validation - no extra properties allowed
  "definitions": {
    // Resource tier definitions provide guidance for resource allocation
    // These are not enforced by the schema but used by the runtime
    "resource_tier_limits": {
      "intensive": {
        "memory_limit": {"min": 4096, "max": 8192},
        "cpu_limit": {"min": 60, "max": 100},
        "timeout": {"min": 600, "max": 3600}
      },
      "standard": {
        "memory_limit": {"min": 2048, "max": 4096},
        "cpu_limit": {"min": 30, "max": 60},
        "timeout": {"min": 300, "max": 1200}
      },
      "lightweight": {
        "memory_limit": {"min": 512, "max": 2048},
        "cpu_limit": {"min": 10, "max": 30},
        "timeout": {"min": 30, "max": 600}
      }
    }
  }
}