# Copyright (c) 2023 - 2025 Chair for Design Automation, TUM
# Copyright (c) 2025 Munich Quantum Software Company GmbH
# All rights reserved.
#
# SPDX-License-Identifier: MIT
#
# Licensed under the MIT License

[build-system]
requires = [
  "hatchling>=1.27.0",
  "hatch-vcs>=0.4.0"
]
build-backend = "hatchling.build"

[project]
name = "mqt.predictor"
description = "MQT Predictor - A MQT Tool for Automatic Device Selection with Device-Specific Circuit Compilation for Quantum Computing"
readme = "README.md"
authors = [
    { name = "Nils Quetschlich", email = "nils.quetschlich@tum.de" },
    { name = "Lukas Burgholzer", email = "lukas.burgholzer@tum.de"},
    { name = "Patrick Hopf", email = "patrick.hopf@tum.de"},
]
keywords = ["MQT",  "quantum computing", "compilation", "machine learning", "prediction"]
license = "MIT"
license-files = ["LICENSE.md"]
requires-python = ">=3.10"
dynamic = ["version"]

dependencies = [
    "mqt.bench>=2.0.0",
    "qiskit!=1.3.2", # 1.3.2 causes a Qiskit error when using the CommutativeInverseCancellation pass, see https://github.com/Qiskit/qiskit/issues/13742
    "pytket>=1.29.0", # lowest version that supports the used pytket AutoRebase pass instead of auto_rebase
    "pytket_qiskit>=0.60.0",
    "sb3_contrib>=2.0.0",
    "tqdm>=4.66.0",
    "rich>=12.6.0",
    "scikit-learn>=1.5.1",
    "tensorboard>=2.17.0",
    "bqskit>=1.2.0",
    "numpy>=2.1; python_version >= '3.13'",
    "numpy>=1.26; python_version >= '3.12'",
    "numpy>=1.24; python_version >= '3.11'",
    "numpy>=1.22",
    "numpy>=1.22,<2; sys_platform == 'darwin' and 'x86_64' in platform_machine and python_version < '3.13'",  # Restrict numpy v2 for macOS x86 since it is not supported anymore since torch v2.3.0
    "torch>=2.2.2,<2.3.0; sys_platform == 'darwin' and 'x86_64' in platform_machine and python_version < '3.13'",  # Restrict torch v2.3.0 for macOS x86 since it is not supported anymore.
    "typing-extensions>=4.1",  # for `assert_never`
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
]

[dependency-groups]
test = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
]
docs = [
    "furo>=2024.8.6",
    "myst-nb>=1.2.0",
    "setuptools-scm>=8.3.1",
    "sphinx-design>=0.6.1",
    "sphinx-autoapi>=3.6.0",
    "sphinx-copybutton>=0.5.2",
    "sphinxcontrib-bibtex>=2.6.5",
    "sphinxcontrib-svg2pdfconverter>=1.3.0",
    "sphinxext-opengraph>=0.10.0",
    "sphinx>=7.4.7",
    "sphinx>=8.1.3; python_version >= '3.10'",
    "sphinx>=8.2.3; python_version >= '3.11'",
]
dev = [
  {include-group = "test"},
  {include-group = "docs"},
]

[project.urls]
Homepage = "https://github.com/munich-quantum-toolkit/predictor"
Issues = "https://github.com/munich-quantum-toolkit/predictor/issues"
Discussions = "https://github.com/munich-quantum-toolkit/predictor/discussions"
Research = "https://www.cda.cit.tum.de/research/quantum/"

[tool.hatch.build.targets.wheel]
packages = ["src/mqt"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/mqt/predictor/_version.py"


[tool.pytest.ini_options]
minversion = "7.2"
testpaths = ["tests/"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]
log_cli_level = "INFO"
xfail_strict = true
filterwarnings = [
    'error',
    'ignore:.*pytorch.*:UserWarning:',
    'ignore:.*Values in x.*:RuntimeWarning:',
    'ignore:.*The least populated class in y has only 3 members, which is less than n_splits=5.*:UserWarning:',
    'ignore:.*divide by zero encountered in det.*:RuntimeWarning:',
    'ignore:.*invalid value encountered in det.*:RuntimeWarning:',
    'ignore:.*Treating CircuitInstruction as an iterable is deprecated legacy behavior since Qiskit 1.2, and will be removed in Qiskit 3.0.*:DeprecationWarning:',
    'ignore:.*qiskit.providers.models is deprecated since Qiskit 1.2*:DeprecationWarning:',
    'ignore:.*The class ``qiskit.qobj.*`` is deprecated as of Qiskit 1.3.*:DeprecationWarning:',
    'ignore:.*The property ``qiskit.circuit.instruction.Instruction.*`` is deprecated as of qiskit 1.3.0.*:DeprecationWarning:',
]

[tool.coverage]
run.source = ["mqt.predictor"]
report.exclude_also = [
    '\.\.\.',
    'if TYPE_CHECKING:',
    'raise AssertionError',
    'raise NotImplementedError',
]
run.disable_warnings = [
    "no-sysmon",
]

show_missing = true
skip_empty = true
precision = 1

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
files = ["src", "tests"]
python_version = "3.10"
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
explicit_package_bases = true
pretty = true

[[tool.mypy.overrides]]
module = ["pytket.*"]
implicit_reexport = true

[[tool.mypy.overrides]]
# `mqt.bench` and `sb3_contrib` are fully typed but take forever to install in the environment.
# recent versions of `gym` are typed, but stable-baselines3 pins a very old version of gym.
# qiskit is not yet marked as typed, but is typed mostly.
# the other libraries do not have type stubs.
module = ["qiskit.*", "joblib.*", "sklearn.*", "matplotlib.*", "gymnasium.*", "mqt.bench.*", "sb3_contrib.*", "bqskit.*", "qiskit_ibm_runtime.*", "networkx.*", "stable_baselines3.*"]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
extend-include = ["*.ipynb"]
preview = true
unsafe-fixes = true

[tool.ruff.lint]
extend-select = [
    "A",           # flake8-builtins
    "ANN",         # flake8-annotations
    "ARG",         # flake8-unused-arguments
    "ASYNC",       # flake8-async
    "B",  "B904",  # flake8-bugbear
    "C4",          # flake8-comprehensions
    "D",           # pydocstyle
    "EM",          # flake8-errmsg
    "EXE",         # flake8-executable
    "FA",          # flake8-future-annotations
    "FLY",         # flynt
    "FURB",        # refurb
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "LOG",         # flake8-logging-format
    "N",           # flake8-naming
    "NPY",         # numpy
    "PERF",        # perflint
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "PYI",         # flake8-pyi
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RSE",         # flake8-raise
    "RUF",         # Ruff-specific
    "SLF",         # flake8-self
    "SLOT",        # flake8-slots
    "SIM",         # flake8-simplify
    "TC",         # flake8-type-checking
    "TID",         # flake8-tidy-imports
    "TRY",         # tryceratops
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
ignore = [
    "ISC001",  # Conflicts with formatter
    "E501",    # Line too long (Black is enough)
    "PLR",     # Design related pylint codes
    "S101",    # Use of assert detected
]
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"*.pyi" = ["D"]  # pydocstyle
"*.ipynb" = [
    "D",    # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.typos]
default.extend-ignore-re = [
  '"id": ".*",',
  "(?Rm)^.*(#|//)\\s*spellchecker:disable-line$",  # ignore line
  "(?s)(#|//)\\s*spellchecker:off.*?\\n\\s*(#|//)\\s*spellchecker:on" # ignore block
]
[tool.typos.default.extend-words]
wille = "wille"
anc = "anc"
aer = "aer"
fom = "fom"

[tool.repo-review]
ignore = ["GH200"]
